
PWM_separate_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ba0  08008918  08008918  00018918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b8  0800b4b8  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4c0  0800b4c0  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c4  0800b4c4  0001b4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800b4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000268  0800b730  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800b730  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001737e  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cca  00000000  00000000  00037616  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  0003a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  0003b570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028cdc  00000000  00000000  0003c660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000117da  00000000  00000000  0006533c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f550f  00000000  00000000  00076b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005658  00000000  00000000  0016c0a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008900 	.word	0x08008900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	08008900 	.word	0x08008900

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <update_OLED_display>:
OLEDStates_type OLEDDisplayState = Case1;
bool OLEDupToDate = false;


void update_OLED_display(OLEDStates_type State)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	switch(State)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	f200 810d 	bhi.w	8001174 <update_OLED_display+0x22c>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <update_OLED_display+0x18>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f7d 	.word	0x08000f7d
 8000f64:	08000fc5 	.word	0x08000fc5
 8000f68:	0800100d 	.word	0x0800100d
 8000f6c:	08001055 	.word	0x08001055
 8000f70:	0800109d 	.word	0x0800109d
 8000f74:	080010e5 	.word	0x080010e5
 8000f78:	0800112d 	.word	0x0800112d
	{
	case Case1:
		ssd1306_Fill(Black);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f005 fad5 	bl	800652c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f005 fc1f 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 1", Font_16x26, White);
 8000f8a:	4a7e      	ldr	r2, [pc, #504]	; (8001184 <update_OLED_display+0x23c>)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	ca06      	ldmia	r2, {r1, r2}
 8000f90:	487d      	ldr	r0, [pc, #500]	; (8001188 <update_OLED_display+0x240>)
 8000f92:	f005 fbf3 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8000f96:	2120      	movs	r1, #32
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f005 fc15 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8000f9e:	4a7b      	ldr	r2, [pc, #492]	; (800118c <update_OLED_display+0x244>)
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	ca06      	ldmia	r2, {r1, r2}
 8000fa4:	487a      	ldr	r0, [pc, #488]	; (8001190 <update_OLED_display+0x248>)
 8000fa6:	f005 fbe9 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000faa:	212d      	movs	r1, #45	; 0x2d
 8000fac:	2000      	movs	r0, #0
 8000fae:	f005 fc0b 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("0.850 1.925", Font_11x18, White);
 8000fb2:	4a78      	ldr	r2, [pc, #480]	; (8001194 <update_OLED_display+0x24c>)
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	ca06      	ldmia	r2, {r1, r2}
 8000fb8:	4877      	ldr	r0, [pc, #476]	; (8001198 <update_OLED_display+0x250>)
 8000fba:	f005 fbdf 	bl	800677c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000fbe:	f005 fad7 	bl	8006570 <ssd1306_UpdateScreen>
		break;
 8000fc2:	e0d8      	b.n	8001176 <update_OLED_display+0x22e>

	case Case2:
		ssd1306_Fill(Black);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f005 fab1 	bl	800652c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f005 fbfb 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 2", Font_16x26, White);
 8000fd2:	4a6c      	ldr	r2, [pc, #432]	; (8001184 <update_OLED_display+0x23c>)
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	ca06      	ldmia	r2, {r1, r2}
 8000fd8:	4870      	ldr	r0, [pc, #448]	; (800119c <update_OLED_display+0x254>)
 8000fda:	f005 fbcf 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8000fde:	2120      	movs	r1, #32
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f005 fbf1 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8000fe6:	4a69      	ldr	r2, [pc, #420]	; (800118c <update_OLED_display+0x244>)
 8000fe8:	2301      	movs	r3, #1
 8000fea:	ca06      	ldmia	r2, {r1, r2}
 8000fec:	4868      	ldr	r0, [pc, #416]	; (8001190 <update_OLED_display+0x248>)
 8000fee:	f005 fbc5 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000ff2:	212d      	movs	r1, #45	; 0x2d
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f005 fbe7 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("1.350 1.800", Font_11x18, White);
 8000ffa:	4a66      	ldr	r2, [pc, #408]	; (8001194 <update_OLED_display+0x24c>)
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	ca06      	ldmia	r2, {r1, r2}
 8001000:	4867      	ldr	r0, [pc, #412]	; (80011a0 <update_OLED_display+0x258>)
 8001002:	f005 fbbb 	bl	800677c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001006:	f005 fab3 	bl	8006570 <ssd1306_UpdateScreen>
		break;
 800100a:	e0b4      	b.n	8001176 <update_OLED_display+0x22e>

	case Case3:
		ssd1306_Fill(Black);
 800100c:	2000      	movs	r0, #0
 800100e:	f005 fa8d 	bl	800652c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001012:	2100      	movs	r1, #0
 8001014:	2000      	movs	r0, #0
 8001016:	f005 fbd7 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 3", Font_16x26, White);
 800101a:	4a5a      	ldr	r2, [pc, #360]	; (8001184 <update_OLED_display+0x23c>)
 800101c:	2301      	movs	r3, #1
 800101e:	ca06      	ldmia	r2, {r1, r2}
 8001020:	4860      	ldr	r0, [pc, #384]	; (80011a4 <update_OLED_display+0x25c>)
 8001022:	f005 fbab 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8001026:	2120      	movs	r1, #32
 8001028:	2000      	movs	r0, #0
 800102a:	f005 fbcd 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 800102e:	4a57      	ldr	r2, [pc, #348]	; (800118c <update_OLED_display+0x244>)
 8001030:	2301      	movs	r3, #1
 8001032:	ca06      	ldmia	r2, {r1, r2}
 8001034:	4856      	ldr	r0, [pc, #344]	; (8001190 <update_OLED_display+0x248>)
 8001036:	f005 fba1 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 800103a:	212d      	movs	r1, #45	; 0x2d
 800103c:	2000      	movs	r0, #0
 800103e:	f005 fbc3 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("2.215 1.350", Font_11x18, White);
 8001042:	4a54      	ldr	r2, [pc, #336]	; (8001194 <update_OLED_display+0x24c>)
 8001044:	2301      	movs	r3, #1
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	4857      	ldr	r0, [pc, #348]	; (80011a8 <update_OLED_display+0x260>)
 800104a:	f005 fb97 	bl	800677c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800104e:	f005 fa8f 	bl	8006570 <ssd1306_UpdateScreen>
		break;
 8001052:	e090      	b.n	8001176 <update_OLED_display+0x22e>

	case Case4:
		ssd1306_Fill(Black);
 8001054:	2000      	movs	r0, #0
 8001056:	f005 fa69 	bl	800652c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800105a:	2100      	movs	r1, #0
 800105c:	2000      	movs	r0, #0
 800105e:	f005 fbb3 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 4", Font_16x26, White);
 8001062:	4a48      	ldr	r2, [pc, #288]	; (8001184 <update_OLED_display+0x23c>)
 8001064:	2301      	movs	r3, #1
 8001066:	ca06      	ldmia	r2, {r1, r2}
 8001068:	4850      	ldr	r0, [pc, #320]	; (80011ac <update_OLED_display+0x264>)
 800106a:	f005 fb87 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 800106e:	2120      	movs	r1, #32
 8001070:	2000      	movs	r0, #0
 8001072:	f005 fba9 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8001076:	4a45      	ldr	r2, [pc, #276]	; (800118c <update_OLED_display+0x244>)
 8001078:	2301      	movs	r3, #1
 800107a:	ca06      	ldmia	r2, {r1, r2}
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <update_OLED_display+0x248>)
 800107e:	f005 fb7d 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8001082:	212d      	movs	r1, #45	; 0x2d
 8001084:	2000      	movs	r0, #0
 8001086:	f005 fb9f 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("0.725 1.800", Font_11x18, White);
 800108a:	4a42      	ldr	r2, [pc, #264]	; (8001194 <update_OLED_display+0x24c>)
 800108c:	2301      	movs	r3, #1
 800108e:	ca06      	ldmia	r2, {r1, r2}
 8001090:	4847      	ldr	r0, [pc, #284]	; (80011b0 <update_OLED_display+0x268>)
 8001092:	f005 fb73 	bl	800677c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001096:	f005 fa6b 	bl	8006570 <ssd1306_UpdateScreen>
		break;
 800109a:	e06c      	b.n	8001176 <update_OLED_display+0x22e>

	case Case5:
		ssd1306_Fill(Black);
 800109c:	2000      	movs	r0, #0
 800109e:	f005 fa45 	bl	800652c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80010a2:	2100      	movs	r1, #0
 80010a4:	2000      	movs	r0, #0
 80010a6:	f005 fb8f 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 5", Font_16x26, White);
 80010aa:	4a36      	ldr	r2, [pc, #216]	; (8001184 <update_OLED_display+0x23c>)
 80010ac:	2301      	movs	r3, #1
 80010ae:	ca06      	ldmia	r2, {r1, r2}
 80010b0:	4840      	ldr	r0, [pc, #256]	; (80011b4 <update_OLED_display+0x26c>)
 80010b2:	f005 fb63 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80010b6:	2120      	movs	r1, #32
 80010b8:	2000      	movs	r0, #0
 80010ba:	f005 fb85 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <update_OLED_display+0x244>)
 80010c0:	2301      	movs	r3, #1
 80010c2:	ca06      	ldmia	r2, {r1, r2}
 80010c4:	4832      	ldr	r0, [pc, #200]	; (8001190 <update_OLED_display+0x248>)
 80010c6:	f005 fb59 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 80010ca:	212d      	movs	r1, #45	; 0x2d
 80010cc:	2000      	movs	r0, #0
 80010ce:	f005 fb7b 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("2.250 1.350", Font_11x18, White);
 80010d2:	4a30      	ldr	r2, [pc, #192]	; (8001194 <update_OLED_display+0x24c>)
 80010d4:	2301      	movs	r3, #1
 80010d6:	ca06      	ldmia	r2, {r1, r2}
 80010d8:	4837      	ldr	r0, [pc, #220]	; (80011b8 <update_OLED_display+0x270>)
 80010da:	f005 fb4f 	bl	800677c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80010de:	f005 fa47 	bl	8006570 <ssd1306_UpdateScreen>
		break;
 80010e2:	e048      	b.n	8001176 <update_OLED_display+0x22e>

	case Case6:
		ssd1306_Fill(Black);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f005 fa21 	bl	800652c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80010ea:	2100      	movs	r1, #0
 80010ec:	2000      	movs	r0, #0
 80010ee:	f005 fb6b 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 6", Font_16x26, White);
 80010f2:	4a24      	ldr	r2, [pc, #144]	; (8001184 <update_OLED_display+0x23c>)
 80010f4:	2301      	movs	r3, #1
 80010f6:	ca06      	ldmia	r2, {r1, r2}
 80010f8:	4830      	ldr	r0, [pc, #192]	; (80011bc <update_OLED_display+0x274>)
 80010fa:	f005 fb3f 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80010fe:	2120      	movs	r1, #32
 8001100:	2000      	movs	r0, #0
 8001102:	f005 fb61 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8001106:	4a21      	ldr	r2, [pc, #132]	; (800118c <update_OLED_display+0x244>)
 8001108:	2301      	movs	r3, #1
 800110a:	ca06      	ldmia	r2, {r1, r2}
 800110c:	4820      	ldr	r0, [pc, #128]	; (8001190 <update_OLED_display+0x248>)
 800110e:	f005 fb35 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8001112:	212d      	movs	r1, #45	; 0x2d
 8001114:	2000      	movs	r0, #0
 8001116:	f005 fb57 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("1.420 3.930", Font_11x18, White);
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <update_OLED_display+0x24c>)
 800111c:	2301      	movs	r3, #1
 800111e:	ca06      	ldmia	r2, {r1, r2}
 8001120:	4827      	ldr	r0, [pc, #156]	; (80011c0 <update_OLED_display+0x278>)
 8001122:	f005 fb2b 	bl	800677c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001126:	f005 fa23 	bl	8006570 <ssd1306_UpdateScreen>
		break;
 800112a:	e024      	b.n	8001176 <update_OLED_display+0x22e>

	case Case7:
		ssd1306_Fill(Black);
 800112c:	2000      	movs	r0, #0
 800112e:	f005 f9fd 	bl	800652c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f005 fb47 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 7", Font_16x26, White);
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <update_OLED_display+0x23c>)
 800113c:	2301      	movs	r3, #1
 800113e:	ca06      	ldmia	r2, {r1, r2}
 8001140:	4820      	ldr	r0, [pc, #128]	; (80011c4 <update_OLED_display+0x27c>)
 8001142:	f005 fb1b 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8001146:	2120      	movs	r1, #32
 8001148:	2000      	movs	r0, #0
 800114a:	f005 fb3d 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <update_OLED_display+0x244>)
 8001150:	2301      	movs	r3, #1
 8001152:	ca06      	ldmia	r2, {r1, r2}
 8001154:	480e      	ldr	r0, [pc, #56]	; (8001190 <update_OLED_display+0x248>)
 8001156:	f005 fb11 	bl	800677c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 800115a:	212d      	movs	r1, #45	; 0x2d
 800115c:	2000      	movs	r0, #0
 800115e:	f005 fb33 	bl	80067c8 <ssd1306_SetCursor>
		ssd1306_WriteString("0.850 6.000", Font_11x18, White);
 8001162:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <update_OLED_display+0x24c>)
 8001164:	2301      	movs	r3, #1
 8001166:	ca06      	ldmia	r2, {r1, r2}
 8001168:	4817      	ldr	r0, [pc, #92]	; (80011c8 <update_OLED_display+0x280>)
 800116a:	f005 fb07 	bl	800677c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800116e:	f005 f9ff 	bl	8006570 <ssd1306_UpdateScreen>
		break;
 8001172:	e000      	b.n	8001176 <update_OLED_display+0x22e>

	default:
		break;
 8001174:	bf00      	nop
	}

	OLEDupToDate = true;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <update_OLED_display+0x284>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]

}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000090 	.word	0x20000090
 8001188:	08008918 	.word	0x08008918
 800118c:	20000080 	.word	0x20000080
 8001190:	08008920 	.word	0x08008920
 8001194:	20000088 	.word	0x20000088
 8001198:	08008934 	.word	0x08008934
 800119c:	08008940 	.word	0x08008940
 80011a0:	08008948 	.word	0x08008948
 80011a4:	08008954 	.word	0x08008954
 80011a8:	0800895c 	.word	0x0800895c
 80011ac:	08008968 	.word	0x08008968
 80011b0:	08008970 	.word	0x08008970
 80011b4:	0800897c 	.word	0x0800897c
 80011b8:	08008984 	.word	0x08008984
 80011bc:	08008990 	.word	0x08008990
 80011c0:	08008998 	.word	0x08008998
 80011c4:	080089a4 	.word	0x080089a4
 80011c8:	080089ac 	.word	0x080089ac
 80011cc:	20000285 	.word	0x20000285

080011d0 <ApplyCalFactor>:
								 [5].Freq_1 = 56337, [5].Freq_2 = 20355,	// 1.42kHz / 3.93kHz
								 [6].Freq_1 = 94117, [6].Freq_2 = 13332,	// 0.85kHz / 6kHz
							};

void ApplyCalFactor(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
	// adjust values with calibration factor
	for(int i = 0;i < (  (sizeof(UncalibratedCasesSet1)) / sizeof(UncalibratedCasesSet1[0])  ); i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e02e      	b.n	800123a <ApplyCalFactor+0x6a>
	{
		CalibratedCasesSet1[i].Freq_1 = UncalibratedCasesSet1[i].Freq_1 * CalibrationFactor;
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <ApplyCalFactor+0x7c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <ApplyCalFactor+0x80>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fa:	ee17 1a90 	vmov	r1, s15
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <ApplyCalFactor+0x84>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		CalibratedCasesSet1[i].Freq_2 = UncalibratedCasesSet1[i].Freq_2 * CalibrationFactor;
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <ApplyCalFactor+0x7c>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <ApplyCalFactor+0x80>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001226:	ee17 1a90 	vmov	r1, s15
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <ApplyCalFactor+0x84>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4413      	add	r3, r2
 8001232:	6059      	str	r1, [r3, #4]
	for(int i = 0;i < (  (sizeof(UncalibratedCasesSet1)) / sizeof(UncalibratedCasesSet1[0])  ); i++)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3301      	adds	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b06      	cmp	r3, #6
 800123e:	d9cd      	bls.n	80011dc <ApplyCalFactor+0xc>
	}
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	20000004 	.word	0x20000004
 8001250:	20000000 	.word	0x20000000
 8001254:	2000003c 	.word	0x2000003c

08001258 <Init_Freq>:


void Init_Freq(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	ApplyCalFactor();
 800125c:	f7ff ffb8 	bl	80011d0 <ApplyCalFactor>

	//Initialise to Case1 and Freq1
	CurrentCase = 0; // array index - actual Case is + 1
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <Init_Freq+0x24>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
	CurrentFrequency = CalibratedCasesSet1[CurrentCase].Freq_1;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <Init_Freq+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <Init_Freq+0x28>)
 800126c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001270:	461a      	mov	r2, r3
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <Init_Freq+0x2c>)
 8001274:	601a      	str	r2, [r3, #0]


}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000774 	.word	0x20000774
 8001280:	2000003c 	.word	0x2000003c
 8001284:	2000077c 	.word	0x2000077c

08001288 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)		// which timer triggered this function? At the moment there is only one anyway
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d11f      	bne.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);	// for scope trigger
 8001298:	2110      	movs	r1, #16
 800129a:	4812      	ldr	r0, [pc, #72]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800129c:	f001 fa56 	bl	800274c <HAL_GPIO_TogglePin>

		if(TIM2->ARR == CalibratedCasesSet1[CurrentCase].Freq_1)	// writing directly to registers to avoid delays
 80012a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4910      	ldr	r1, [pc, #64]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80012ac:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d109      	bne.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			TIM2->ARR = CalibratedCasesSet1[CurrentCase].Freq_2;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012bc:	490b      	ldr	r1, [pc, #44]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	62d3      	str	r3, [r2, #44]	; 0x2c
		else
		{
			TIM2->ARR = CalibratedCasesSet1[CurrentCase].Freq_1;
		}
	}
}
 80012c6:	e007      	b.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x50>
			TIM2->ARR = CalibratedCasesSet1[CurrentCase].Freq_1;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d0:	4906      	ldr	r1, [pc, #24]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80012d2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80012d6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200007d0 	.word	0x200007d0
 80012e4:	48000800 	.word	0x48000800
 80012e8:	20000774 	.word	0x20000774
 80012ec:	2000003c 	.word	0x2000003c

080012f0 <FreqCaseUpFromISR>:

void FreqCaseUpFromISR(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	CurrentCase++;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <FreqCaseUpFromISR+0x5c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <FreqCaseUpFromISR+0x5c>)
 80012fe:	6013      	str	r3, [r2, #0]
	if(CurrentCase > 6)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <FreqCaseUpFromISR+0x5c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b06      	cmp	r3, #6
 8001306:	dd02      	ble.n	800130e <FreqCaseUpFromISR+0x1e>
		CurrentCase = 6;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <FreqCaseUpFromISR+0x5c>)
 800130a:	2206      	movs	r2, #6
 800130c:	601a      	str	r2, [r3, #0]

	OLEDDisplayState = CurrentCase;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <FreqCaseUpFromISR+0x5c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <FreqCaseUpFromISR+0x60>)
 8001316:	701a      	strb	r2, [r3, #0]
	OLEDupToDate = false;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <FreqCaseUpFromISR+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <FreqCaseUpFromISR+0x68>)
 8001324:	f001 f9fa 	bl	800271c <HAL_GPIO_WritePin>
	for(int i = 0; i < 100; i++);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	e002      	b.n	8001334 <FreqCaseUpFromISR+0x44>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3301      	adds	r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b63      	cmp	r3, #99	; 0x63
 8001338:	ddf9      	ble.n	800132e <FreqCaseUpFromISR+0x3e>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <FreqCaseUpFromISR+0x68>)
 8001340:	f001 f9ec 	bl	800271c <HAL_GPIO_WritePin>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000774 	.word	0x20000774
 8001350:	20000284 	.word	0x20000284
 8001354:	20000285 	.word	0x20000285
 8001358:	48000800 	.word	0x48000800

0800135c <FreqCaseDownFromISR>:

void FreqCaseDownFromISR(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	CurrentCase--;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <FreqCaseDownFromISR+0x5c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3b01      	subs	r3, #1
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <FreqCaseDownFromISR+0x5c>)
 800136a:	6013      	str	r3, [r2, #0]
	if(CurrentCase < 0)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <FreqCaseDownFromISR+0x5c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da02      	bge.n	800137a <FreqCaseDownFromISR+0x1e>
		CurrentCase = 0;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <FreqCaseDownFromISR+0x5c>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]

	OLEDDisplayState = CurrentCase;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <FreqCaseDownFromISR+0x5c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <FreqCaseDownFromISR+0x60>)
 8001382:	701a      	strb	r2, [r3, #0]
	OLEDupToDate = false;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <FreqCaseDownFromISR+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <FreqCaseDownFromISR+0x68>)
 8001390:	f001 f9c4 	bl	800271c <HAL_GPIO_WritePin>
    for(int i = 0; i < 100; i++);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	e002      	b.n	80013a0 <FreqCaseDownFromISR+0x44>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b63      	cmp	r3, #99	; 0x63
 80013a4:	ddf9      	ble.n	800139a <FreqCaseDownFromISR+0x3e>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <FreqCaseDownFromISR+0x68>)
 80013ac:	f001 f9b6 	bl	800271c <HAL_GPIO_WritePin>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000774 	.word	0x20000774
 80013bc:	20000284 	.word	0x20000284
 80013c0:	20000285 	.word	0x20000285
 80013c4:	48000800 	.word	0x48000800

080013c8 <InitCalibrationEEPROM>:
	static FLASH_EraseInitTypeDef EraseInitStruct;
	static uint32_t Address = 0x080FF800;	// use last sector of STM32L476RG for EEPROM emulation
//	uint64_t Data = 0; // type?

void InitCalibrationEEPROM(void)	// needed only for erase before write to EEPROM
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <InitCalibrationEEPROM+0x28>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks       = FLASH_BANK_2;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <InitCalibrationEEPROM+0x28>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Page        = 511;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <InitCalibrationEEPROM+0x28>)
 80013da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80013de:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages     = 1;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <InitCalibrationEEPROM+0x28>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	60da      	str	r2, [r3, #12]
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20000288 	.word	0x20000288
 80013f4:	00000000 	.word	0x00000000

080013f8 <CalibrationModeFromISR>:
	HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
	HAL_FLASH_Lock();
}

void CalibrationModeFromISR(void)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
	bool Previous_Pin6_State = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	70fb      	strb	r3, [r7, #3]
	bool Current_Pin6_State = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	70bb      	strb	r3, [r7, #2]
	bool Previous_Pin8_State = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	707b      	strb	r3, [r7, #1]
	bool Current_Pin8_State = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	703b      	strb	r3, [r7, #0]


	HAL_TIM_Base_Stop_IT(&htim3);
 800140e:	4858      	ldr	r0, [pc, #352]	; (8001570 <CalibrationModeFromISR+0x178>)
 8001410:	f003 f998 	bl	8004744 <HAL_TIM_Base_Stop_IT>
	//	  __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //using this sometimes "disables" TIM2 for 53 seconds like it has missed restart point and is overflowing. Why?
	TIM2->CNT = 0;		// reset TIM2 otherwise it will miss set point and will be off until overflow.
 8001414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = 7999 * CalibrationFactor;	//Set timer2 period to 100us --> 10 kHz (calibration frequency)
 800141c:	4b55      	ldr	r3, [pc, #340]	; (8001574 <CalibrationModeFromISR+0x17c>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001578 <CalibrationModeFromISR+0x180>
 8001426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 2a90 	vmov	r2, s15
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c

	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8001438:	e081      	b.n	800153e <CalibrationModeFromISR+0x146>
	{
		Previous_Pin6_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	484f      	ldr	r0, [pc, #316]	; (800157c <CalibrationModeFromISR+0x184>)
 800143e:	f001 f955 	bl	80026ec <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	70fb      	strb	r3, [r7, #3]
		Previous_Pin8_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 800144e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001452:	484a      	ldr	r0, [pc, #296]	; (800157c <CalibrationModeFromISR+0x184>)
 8001454:	f001 f94a 	bl	80026ec <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	707b      	strb	r3, [r7, #1]

		for(int i = 0; i < 100000; i++); // wait between consecutive pin reads to avoid bouncing (about 14 ms)
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	e002      	b.n	8001470 <CalibrationModeFromISR+0x78>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3301      	adds	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a43      	ldr	r2, [pc, #268]	; (8001580 <CalibrationModeFromISR+0x188>)
 8001474:	4293      	cmp	r3, r2
 8001476:	ddf8      	ble.n	800146a <CalibrationModeFromISR+0x72>

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0 && Previous_Pin6_State == 1)
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	4840      	ldr	r0, [pc, #256]	; (800157c <CalibrationModeFromISR+0x184>)
 800147c:	f001 f936 	bl	80026ec <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d129      	bne.n	80014da <CalibrationModeFromISR+0xe2>
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d026      	beq.n	80014da <CalibrationModeFromISR+0xe2>
		{
			CalibrationFactor += 0.1;
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <CalibrationModeFromISR+0x17c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	a334      	add	r3, pc, #208	; (adr r3, 8001568 <CalibrationModeFromISR+0x170>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7fe fef6 	bl	800028c <__adddf3>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	4618      	mov	r0, r3
 80014a6:	4621      	mov	r1, r4
 80014a8:	f7ff fb7e 	bl	8000ba8 <__aeabi_d2f>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <CalibrationModeFromISR+0x17c>)
 80014b0:	601a      	str	r2, [r3, #0]
			Previous_Pin6_State = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	70fb      	strb	r3, [r7, #3]
			TIM2->CNT = 0;
 80014b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = 7999 * CalibrationFactor;
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <CalibrationModeFromISR+0x17c>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001578 <CalibrationModeFromISR+0x180>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && Previous_Pin8_State == 1)
 80014da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014de:	4827      	ldr	r0, [pc, #156]	; (800157c <CalibrationModeFromISR+0x184>)
 80014e0:	f001 f904 	bl	80026ec <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d129      	bne.n	800153e <CalibrationModeFromISR+0x146>
 80014ea:	787b      	ldrb	r3, [r7, #1]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d026      	beq.n	800153e <CalibrationModeFromISR+0x146>
		{
			CalibrationFactor -= 0.1;		// later make sure it doesn't go below 0 !
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <CalibrationModeFromISR+0x17c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	a31b      	add	r3, pc, #108	; (adr r3, 8001568 <CalibrationModeFromISR+0x170>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7fe fec2 	bl	8000288 <__aeabi_dsub>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	f7ff fb4c 	bl	8000ba8 <__aeabi_d2f>
 8001510:	4602      	mov	r2, r0
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <CalibrationModeFromISR+0x17c>)
 8001514:	601a      	str	r2, [r3, #0]
			Previous_Pin8_State = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	707b      	strb	r3, [r7, #1]
			TIM2->CNT = 0;
 800151a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = 7999 * CalibrationFactor;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <CalibrationModeFromISR+0x17c>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001578 <CalibrationModeFromISR+0x180>
 800152c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001538:	ee17 2a90 	vmov	r2, s15
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 800153e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <CalibrationModeFromISR+0x184>)
 8001544:	f001 f8d2 	bl	80026ec <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f43f af75 	beq.w	800143a <CalibrationModeFromISR+0x42>
		}
	}

	ApplyCalFactor();
 8001550:	f7ff fe3e 	bl	80011d0 <ApplyCalFactor>
	HAL_TIM_Base_Start_IT(&htim3);
 8001554:	4806      	ldr	r0, [pc, #24]	; (8001570 <CalibrationModeFromISR+0x178>)
 8001556:	f003 f885 	bl	8004664 <HAL_TIM_Base_Start_IT>
	//	  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);

}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	f3af 8000 	nop.w
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fb99999 	.word	0x3fb99999
 8001570:	200007d0 	.word	0x200007d0
 8001574:	20000000 	.word	0x20000000
 8001578:	45f9f800 	.word	0x45f9f800
 800157c:	48000800 	.word	0x48000800
 8001580:	0001869f 	.word	0x0001869f

08001584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <MX_GPIO_Init+0x188>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	4a5b      	ldr	r2, [pc, #364]	; (800170c <MX_GPIO_Init+0x188>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a6:	4b59      	ldr	r3, [pc, #356]	; (800170c <MX_GPIO_Init+0x188>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <MX_GPIO_Init+0x188>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4a55      	ldr	r2, [pc, #340]	; (800170c <MX_GPIO_Init+0x188>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <MX_GPIO_Init+0x188>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <MX_GPIO_Init+0x188>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a4f      	ldr	r2, [pc, #316]	; (800170c <MX_GPIO_Init+0x188>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <MX_GPIO_Init+0x188>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <MX_GPIO_Init+0x188>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a49      	ldr	r2, [pc, #292]	; (800170c <MX_GPIO_Init+0x188>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <MX_GPIO_Init+0x188>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <MX_GPIO_Init+0x188>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a43      	ldr	r2, [pc, #268]	; (800170c <MX_GPIO_Init+0x188>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <MX_GPIO_Init+0x188>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001612:	2200      	movs	r2, #0
 8001614:	f641 61bc 	movw	r1, #7868	; 0x1ebc
 8001618:	483d      	ldr	r0, [pc, #244]	; (8001710 <MX_GPIO_Init+0x18c>)
 800161a:	f001 f87f 	bl	800271c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800161e:	2200      	movs	r2, #0
 8001620:	f649 71f2 	movw	r1, #40946	; 0x9ff2
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f001 f878 	bl	800271c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800162c:	2200      	movs	r2, #0
 800162e:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8001632:	4838      	ldr	r0, [pc, #224]	; (8001714 <MX_GPIO_Init+0x190>)
 8001634:	f001 f872 	bl	800271c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <MX_GPIO_Init+0x194>)
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4830      	ldr	r0, [pc, #192]	; (8001710 <MX_GPIO_Init+0x18c>)
 800164e:	f000 fea5 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001652:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8001656:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4829      	ldr	r0, [pc, #164]	; (8001710 <MX_GPIO_Init+0x18c>)
 800166c:	f000 fe96 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001670:	f649 73f2 	movw	r3, #40946	; 0x9ff2
 8001674:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f000 fe86 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001690:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8001694:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	481a      	ldr	r0, [pc, #104]	; (8001714 <MX_GPIO_Init+0x190>)
 80016aa:	f000 fe77 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80016ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_GPIO_Init+0x194>)
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4813      	ldr	r0, [pc, #76]	; (8001710 <MX_GPIO_Init+0x18c>)
 80016c4:	f000 fe6a 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <MX_GPIO_Init+0x18c>)
 80016e0:	f000 fe5c 	bl	800239c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2017      	movs	r0, #23
 80016ea:	f000 fe20 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ee:	2017      	movs	r0, #23
 80016f0:	f000 fe39 	bl	8002366 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2028      	movs	r0, #40	; 0x28
 80016fa:	f000 fe18 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016fe:	2028      	movs	r0, #40	; 0x28
 8001700:	f000 fe31 	bl	8002366 <HAL_NVIC_EnableIRQ>

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800
 8001714:	48000400 	.word	0x48000400
 8001718:	10210000 	.word	0x10210000

0800171c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6)	// next case button pressed
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	2b40      	cmp	r3, #64	; 0x40
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_EXTI_Callback+0x14>
	{
		FreqCaseUpFromISR();
 800172c:	f7ff fde0 	bl	80012f0 <FreqCaseUpFromISR>
	}

	if(GPIO_Pin == GPIO_PIN_8)	// previous case down button pressed
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001736:	d101      	bne.n	800173c <HAL_GPIO_EXTI_Callback+0x20>
	{
		FreqCaseDownFromISR();
 8001738:	f7ff fe10 	bl	800135c <FreqCaseDownFromISR>
	}

	if(GPIO_Pin == GPIO_PIN_13)	// user blue button - temporary for calibration
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001742:	d108      	bne.n	8001756 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		CalibrationModeFromISR();
 8001744:	f7ff fe58 	bl	80013f8 <CalibrationModeFromISR>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);	// because function above is using the same pins
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_GPIO_EXTI_Callback+0x48>)
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_GPIO_EXTI_Callback+0x48>)
 8001750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001754:	615a      	str	r2, [r3, #20]
	}

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // clear interrupt manually again (it is done already in library function before this callback function but interrupt can occur again when this function is running).
 8001756:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_GPIO_EXTI_Callback+0x48>)
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	6153      	str	r3, [r2, #20]
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40010400 	.word	0x40010400

08001768 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_I2C3_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <MX_I2C3_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_I2C3_Init+0x74>)
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <MX_I2C3_Init+0x7c>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_I2C3_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_I2C3_Init+0x74>)
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_I2C3_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_I2C3_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C3_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_I2C3_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_I2C3_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_I2C3_Init+0x74>)
 80017a4:	f001 f804 	bl	80027b0 <HAL_I2C_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017ae:	f000 f970 	bl	8001a92 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_I2C3_Init+0x74>)
 80017b6:	f001 fb67 	bl	8002e88 <HAL_I2CEx_ConfigAnalogFilter>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f000 f967 	bl	8001a92 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_I2C3_Init+0x74>)
 80017c8:	f001 fba9 	bl	8002f1e <HAL_I2CEx_ConfigDigitalFilter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 f95e 	bl	8001a92 <Error_Handler>
  }

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000784 	.word	0x20000784
 80017e0:	40005c00 	.word	0x40005c00
 80017e4:	10909cec 	.word	0x10909cec

080017e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_I2C_MspInit+0x7c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d127      	bne.n	800185a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_I2C_MspInit+0x80>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_I2C_MspInit+0x80>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_I2C_MspInit+0x80>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001822:	2303      	movs	r3, #3
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001826:	2312      	movs	r3, #18
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182a:	2301      	movs	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001832:	2304      	movs	r3, #4
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <HAL_I2C_MspInit+0x84>)
 800183e:	f000 fdad 	bl	800239c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_I2C_MspInit+0x80>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_I2C_MspInit+0x80>)
 8001848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_I2C_MspInit+0x80>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40005c00 	.word	0x40005c00
 8001868:	40021000 	.word	0x40021000
 800186c:	48000800 	.word	0x48000800

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b083      	sub	sp, #12
 8001874:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001876:	f000 fbe8 	bl	800204a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187a:	f000 f895 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187e:	f7ff fe81 	bl	8001584 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001882:	f000 f9e9 	bl	8001c58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001886:	f000 fa5f 	bl	8001d48 <MX_TIM3_Init>
  MX_I2C3_Init();
 800188a:	f7ff ff6d 	bl	8001768 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800188e:	f000 fb41 	bl	8001f14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */




  snprintf(GUI_message, 200, "System Clock = %lu\n",  SystemCoreClock);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <main+0x100>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a37      	ldr	r2, [pc, #220]	; (8001974 <main+0x104>)
 8001898:	21c8      	movs	r1, #200	; 0xc8
 800189a:	4837      	ldr	r0, [pc, #220]	; (8001978 <main+0x108>)
 800189c:	f005 fc54 	bl	8007148 <sniprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*)GUI_message, strlen(GUI_message), 100);
 80018a0:	4835      	ldr	r0, [pc, #212]	; (8001978 <main+0x108>)
 80018a2:	f7fe fc95 	bl	80001d0 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	4932      	ldr	r1, [pc, #200]	; (8001978 <main+0x108>)
 80018ae:	4833      	ldr	r0, [pc, #204]	; (800197c <main+0x10c>)
 80018b0:	f004 f914 	bl	8005adc <HAL_UART_Transmit>

  InitCalibrationEEPROM();
 80018b4:	f7ff fd88 	bl	80013c8 <InitCalibrationEEPROM>
  Init_Freq();
 80018b8:	f7ff fcce 	bl	8001258 <Init_Freq>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018bc:	2100      	movs	r1, #0
 80018be:	4830      	ldr	r0, [pc, #192]	; (8001980 <main+0x110>)
 80018c0:	f002 ffd0 	bl	8004864 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80018c4:	482f      	ldr	r0, [pc, #188]	; (8001984 <main+0x114>)
 80018c6:	f002 fecd 	bl	8004664 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1306_Init();
 80018ca:	f004 fdc1 	bl	8006450 <ssd1306_Init>

  HAL_Delay(300);
 80018ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018d2:	f000 fc2f 	bl	8002134 <HAL_Delay>

  ssd1306_Fill(Black);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f004 fe28 	bl	800652c <ssd1306_Fill>
  ssd1306_SetCursor(0, 4);
 80018dc:	2104      	movs	r1, #4
 80018de:	2000      	movs	r0, #0
 80018e0:	f004 ff72 	bl	80067c8 <ssd1306_SetCursor>
  ssd1306_WriteString("    TMD", Font_11x18, White);
 80018e4:	4a28      	ldr	r2, [pc, #160]	; (8001988 <main+0x118>)
 80018e6:	2301      	movs	r3, #1
 80018e8:	ca06      	ldmia	r2, {r1, r2}
 80018ea:	4828      	ldr	r0, [pc, #160]	; (800198c <main+0x11c>)
 80018ec:	f004 ff46 	bl	800677c <ssd1306_WriteString>
  ssd1306_SetCursor(0, 30);
 80018f0:	211e      	movs	r1, #30
 80018f2:	2000      	movs	r0, #0
 80018f4:	f004 ff68 	bl	80067c8 <ssd1306_SetCursor>
  ssd1306_WriteString("   Technologies", Font_7x10, White);
 80018f8:	4a25      	ldr	r2, [pc, #148]	; (8001990 <main+0x120>)
 80018fa:	2301      	movs	r3, #1
 80018fc:	ca06      	ldmia	r2, {r1, r2}
 80018fe:	4825      	ldr	r0, [pc, #148]	; (8001994 <main+0x124>)
 8001900:	f004 ff3c 	bl	800677c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001904:	f004 fe34 	bl	8006570 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 8001908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190c:	f000 fc12 	bl	8002134 <HAL_Delay>



  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001910:	2120      	movs	r1, #32
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f000 ff19 	bl	800274c <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800191a:	2064      	movs	r0, #100	; 0x64
 800191c:	f000 fc0a 	bl	8002134 <HAL_Delay>
 //   for(int i = 0; i < 10000000; i++);  // 10000000 about 1.4s with 80MHz clock

    if(OLEDupToDate != true)
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <main+0x128>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <main+0xc8>
    {
        update_OLED_display(OLEDDisplayState);
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <main+0x12c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb08 	bl	8000f48 <update_OLED_display>
    }

	snprintf(GUI_message, 40, "Calibration Factor = %f\n", CalibrationFactor);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <main+0x130>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe03 	bl	8000548 <__aeabi_f2d>
 8001942:	4603      	mov	r3, r0
 8001944:	460c      	mov	r4, r1
 8001946:	e9cd 3400 	strd	r3, r4, [sp]
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <main+0x134>)
 800194c:	2128      	movs	r1, #40	; 0x28
 800194e:	480a      	ldr	r0, [pc, #40]	; (8001978 <main+0x108>)
 8001950:	f005 fbfa 	bl	8007148 <sniprintf>
	HAL_UART_Transmit(&huart2, (unsigned char*)GUI_message, strlen(GUI_message) + 1, 100);
 8001954:	4808      	ldr	r0, [pc, #32]	; (8001978 <main+0x108>)
 8001956:	f7fe fc3b 	bl	80001d0 <strlen>
 800195a:	4603      	mov	r3, r0
 800195c:	b29b      	uxth	r3, r3
 800195e:	3301      	adds	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	2364      	movs	r3, #100	; 0x64
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <main+0x108>)
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <main+0x10c>)
 8001968:	f004 f8b8 	bl	8005adc <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800196c:	e7d0      	b.n	8001910 <main+0xa0>
 800196e:	bf00      	nop
 8001970:	20000074 	.word	0x20000074
 8001974:	080089b8 	.word	0x080089b8
 8001978:	20000298 	.word	0x20000298
 800197c:	20000868 	.word	0x20000868
 8001980:	2000081c 	.word	0x2000081c
 8001984:	200007d0 	.word	0x200007d0
 8001988:	20000088 	.word	0x20000088
 800198c:	080089cc 	.word	0x080089cc
 8001990:	20000080 	.word	0x20000080
 8001994:	080089d4 	.word	0x080089d4
 8001998:	20000285 	.word	0x20000285
 800199c:	20000284 	.word	0x20000284
 80019a0:	20000000 	.word	0x20000000
 80019a4:	080089e4 	.word	0x080089e4

080019a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0b8      	sub	sp, #224	; 0xe0
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b2:	2244      	movs	r2, #68	; 0x44
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 ff61 	bl	800687e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	463b      	mov	r3, r7
 80019ce:	2288      	movs	r2, #136	; 0x88
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 ff53 	bl	800687e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d8:	2301      	movs	r3, #1
 80019da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ec:	2303      	movs	r3, #3
 80019ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80019f8:	2314      	movs	r3, #20
 80019fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019fe:	2307      	movs	r3, #7
 8001a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fb33 	bl	8003080 <HAL_RCC_OscConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001a20:	f000 f837 	bl	8001a92 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a24:	230f      	movs	r3, #15
 8001a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a46:	2104      	movs	r1, #4
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 feff 	bl	800384c <HAL_RCC_ClockConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a54:	f000 f81d 	bl	8001a92 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
 8001a58:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001a5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 f8f3 	bl	8003c54 <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001a74:	f000 f80d 	bl	8001a92 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a7c:	f001 faaa 	bl	8002fd4 <HAL_PWREx_ControlVoltageScaling>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001a86:	f000 f804 	bl	8001a92 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	37e0      	adds	r7, #224	; 0xe0
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_MspInit+0x44>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler+0x4>

08001b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3c:	f000 fada 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b48:	2040      	movs	r0, #64	; 0x40
 8001b4a:	f000 fe19 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b52:	f000 fe15 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM3_IRQHandler+0x10>)
 8001b62:	f002 ff85 	bl	8004a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200007d0 	.word	0x200007d0

08001b70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b78:	f000 fe02 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f004 fe22 	bl	80067f8 <__errno>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20018000 	.word	0x20018000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	20000360 	.word	0x20000360
 8001be8:	200008f0 	.word	0x200008f0

08001bec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <SystemInit+0x64>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <SystemInit+0x64>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <SystemInit+0x68>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <SystemInit+0x68>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <SystemInit+0x68>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <SystemInit+0x68>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <SystemInit+0x68>)
 8001c18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <SystemInit+0x68>)
 8001c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <SystemInit+0x68>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <SystemInit+0x68>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <SystemInit+0x68>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SystemInit+0x64>)
 8001c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c42:	609a      	str	r2, [r3, #8]
#endif
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	40021000 	.word	0x40021000

08001c58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	; 0x38
 8001c5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001c8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c92:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 94118;
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001ca0:	4a28      	ldr	r2, [pc, #160]	; (8001d44 <MX_TIM2_Init+0xec>)
 8001ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb0:	4823      	ldr	r0, [pc, #140]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001cb2:	f002 fc7f 	bl	80045b4 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cbc:	f7ff fee9 	bl	8001a92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481c      	ldr	r0, [pc, #112]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001cce:	f003 f8ff 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cd8:	f7ff fedb 	bl	8001a92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cdc:	4818      	ldr	r0, [pc, #96]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001cde:	f002 fd60 	bl	80047a2 <HAL_TIM_PWM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ce8:	f7ff fed3 	bl	8001a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cec:	2320      	movs	r3, #32
 8001cee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001cfc:	f003 fdfa 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d06:	f7ff fec4 	bl	8001a92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0a:	2360      	movs	r3, #96	; 0x60
 8001d0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 800;
 8001d0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001d12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	4807      	ldr	r0, [pc, #28]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001d24:	f002 ffc4 	bl	8004cb0 <HAL_TIM_PWM_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d2e:	f7ff feb0 	bl	8001a92 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <MX_TIM2_Init+0xe8>)
 8001d34:	f000 f8ba 	bl	8001eac <HAL_TIM_MspPostInit>

}
 8001d38:	bf00      	nop
 8001d3a:	3738      	adds	r7, #56	; 0x38
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000081c 	.word	0x2000081c
 8001d44:	00016fa6 	.word	0x00016fa6

08001d48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001d68:	4a20      	ldr	r2, [pc, #128]	; (8001dec <MX_TIM3_Init+0xa4>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001d7a:	220e      	movs	r2, #14
 8001d7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001d8c:	f002 fc12 	bl	80045b4 <HAL_TIM_Base_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d96:	f7ff fe7c 	bl	8001a92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001db4:	f003 f88c 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001dbe:	f7ff fe68 	bl	8001a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_TIM3_Init+0xa0>)
 8001dd0:	f003 fd90 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001dda:	f7ff fe5a 	bl	8001a92 <Error_Handler>
  }

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200007d0 	.word	0x200007d0
 8001dec:	40000400 	.word	0x40000400

08001df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e10:	d10c      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e2a:	e034      	b.n	8001e96 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_TIM_Base_MspInit+0xb4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12f      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e66:	2304      	movs	r3, #4
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e76:	2302      	movs	r3, #2
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <HAL_TIM_Base_MspInit+0xb8>)
 8001e82:	f000 fa8b 	bl	800239c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	201d      	movs	r0, #29
 8001e8c:	f000 fa4f 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e90:	201d      	movs	r0, #29
 8001e92:	f000 fa68 	bl	8002366 <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	48000c00 	.word	0x48000c00

08001eac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ecc:	d11c      	bne.n	8001f08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_TIM_MspPostInit+0x64>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_TIM_MspPostInit+0x64>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_TIM_MspPostInit+0x64>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f000 fa4a 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000

08001f14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <MX_USART2_UART_Init+0x5c>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_USART2_UART_Init+0x58>)
 8001f58:	f003 fd72 	bl	8005a40 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f62:	f7ff fd96 	bl	8001a92 <Error_Handler>
  }

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000868 	.word	0x20000868
 8001f70:	40004400 	.word	0x40004400

08001f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_UART_MspInit+0x7c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d128      	bne.n	8001fe8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_UART_MspInit+0x80>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_UART_MspInit+0x80>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_UART_MspInit+0x80>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_UART_MspInit+0x80>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_UART_MspInit+0x80>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_UART_MspInit+0x80>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe4:	f000 f9da 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40004400 	.word	0x40004400
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ffc:	f7ff fdf6 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002000:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002002:	e003      	b.n	800200c <LoopCopyDataInit>

08002004 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002006:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002008:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800200a:	3104      	adds	r1, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800200c:	480a      	ldr	r0, [pc, #40]	; (8002038 <LoopForever+0xa>)
	ldr	r3, =_edata
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002010:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002012:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002014:	d3f6      	bcc.n	8002004 <CopyDataInit>
	ldr	r2, =_sbss
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002018:	e002      	b.n	8002020 <LoopFillZerobss>

0800201a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800201a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800201c:	f842 3b04 	str.w	r3, [r2], #4

08002020 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <LoopForever+0x16>)
	cmp	r2, r3
 8002022:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002024:	d3f9      	bcc.n	800201a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f004 fbed 	bl	8006804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800202a:	f7ff fc21 	bl	8001870 <main>

0800202e <LoopForever>:

LoopForever:
    b LoopForever
 800202e:	e7fe      	b.n	800202e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002030:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002034:	0800b4c8 	.word	0x0800b4c8
	ldr	r0, =_sdata
 8002038:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800203c:	20000268 	.word	0x20000268
	ldr	r2, =_sbss
 8002040:	20000268 	.word	0x20000268
	ldr	r3, = _ebss
 8002044:	200008f0 	.word	0x200008f0

08002048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC1_2_IRQHandler>

0800204a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f000 f95f 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f80e 	bl	800207c <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	e001      	b.n	8002070 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800206c:	f7ff fd18 	bl	8001aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002070:	79fb      	ldrb	r3, [r7, #7]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_InitTick+0x6c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d023      	beq.n	80020d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_InitTick+0x70>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_InitTick+0x6c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f96b 	bl	8002382 <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d809      	bhi.n	80020cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f000 f935 	bl	800232e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_InitTick+0x74>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e007      	b.n	80020dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e004      	b.n	80020dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e001      	b.n	80020dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000007c 	.word	0x2000007c
 80020ec:	20000074 	.word	0x20000074
 80020f0:	20000078 	.word	0x20000078

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000007c 	.word	0x2000007c
 8002118:	200008e8 	.word	0x200008e8

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	200008e8 	.word	0x200008e8

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_Delay+0x40>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000007c 	.word	0x2000007c

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db0b      	blt.n	8002206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4907      	ldr	r1, [pc, #28]	; (8002214 <__NVIC_EnableIRQ+0x38>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff29 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff3e 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff8e 	bl	800226c <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff31 	bl	80021dc <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffa2 	bl	80022d4 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e17f      	b.n	80026ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8171 	beq.w	80026a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d00b      	beq.n	80023e4 <HAL_GPIO_Init+0x48>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d007      	beq.n	80023e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d8:	2b11      	cmp	r3, #17
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b12      	cmp	r3, #18
 80023e2:	d130      	bne.n	8002446 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800241a:	2201      	movs	r2, #1
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0201 	and.w	r2, r3, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b03      	cmp	r3, #3
 8002450:	d118      	bne.n	8002484 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002458:	2201      	movs	r2, #1
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	f003 0201 	and.w	r2, r3, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x128>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b12      	cmp	r3, #18
 80024c2:	d123      	bne.n	800250c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3208      	adds	r2, #8
 8002506:	6939      	ldr	r1, [r7, #16]
 8002508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0203 	and.w	r2, r3, #3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80ac 	beq.w	80026a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_GPIO_Init+0x32c>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_GPIO_Init+0x32c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6613      	str	r3, [r2, #96]	; 0x60
 800255a:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <HAL_GPIO_Init+0x32c>)
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002566:	4a59      	ldr	r2, [pc, #356]	; (80026cc <HAL_GPIO_Init+0x330>)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x242>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	; (80026d0 <HAL_GPIO_Init+0x334>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x23e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_GPIO_Init+0x338>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x23a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_GPIO_Init+0x33c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x236>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_GPIO_Init+0x340>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x232>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_GPIO_Init+0x344>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x22e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a49      	ldr	r2, [pc, #292]	; (80026e4 <HAL_GPIO_Init+0x348>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x22a>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00c      	b.n	80025e0 <HAL_GPIO_Init+0x244>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e00a      	b.n	80025e0 <HAL_GPIO_Init+0x244>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x244>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x244>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x244>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x244>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x244>
 80025de:	2300      	movs	r3, #0
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025f0:	4936      	ldr	r1, [pc, #216]	; (80026cc <HAL_GPIO_Init+0x330>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002622:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002652:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f47f ae78 	bne.w	80023ac <HAL_GPIO_Init+0x10>
  }
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010000 	.word	0x40010000
 80026d0:	48000400 	.word	0x48000400
 80026d4:	48000800 	.word	0x48000800
 80026d8:	48000c00 	.word	0x48000c00
 80026dc:	48001000 	.word	0x48001000
 80026e0:	48001400 	.word	0x48001400
 80026e4:	48001800 	.word	0x48001800
 80026e8:	40010400 	.word	0x40010400

080026ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e001      	b.n	800270e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002738:	e002      	b.n	8002740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43d9      	mvns	r1, r3
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	400b      	ands	r3, r1
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe ffbc 	bl	800171c <HAL_GPIO_EXTI_Callback>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e081      	b.n	80028c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff f806 	bl	80017e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002800:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002810:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	e006      	b.n	8002838 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002836:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d104      	bne.n	800284a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002848:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800286c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	ea42 0103 	orr.w	r1, r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	021a      	lsls	r2, r3, #8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1a      	ldr	r2, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f040 80f9 	bne.w	8002aea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_I2C_Mem_Write+0x34>
 80028fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0ed      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2C_Mem_Write+0x4e>
 800291a:	2302      	movs	r3, #2
 800291c:	e0e6      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002926:	f7ff fbf9 	bl	800211c <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2319      	movs	r3, #25
 8002932:	2201      	movs	r2, #1
 8002934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f955 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0d1      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2221      	movs	r2, #33	; 0x21
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002970:	88f8      	ldrh	r0, [r7, #6]
 8002972:	893a      	ldrh	r2, [r7, #8]
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4603      	mov	r3, r0
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f8b9 	bl	8002af8 <I2C_RequestMemoryWrite>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0a9      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	; 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fa37 	bl	8002e2c <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fa26 	bl	8002e2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f93f 	bl	8002c68 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e07b      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d034      	beq.n	8002a98 <HAL_I2C_Mem_Write+0x1c8>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d130      	bne.n	8002a98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f8d1 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e04d      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d90e      	bls.n	8002a78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f9db 	bl	8002e2c <I2C_TransferConfig>
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f9ca 	bl	8002e2c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d19e      	bne.n	80029e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f91e 	bl	8002ce8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e01a      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2220      	movs	r2, #32
 8002abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_I2C_Mem_Write+0x224>)
 8002aca:	400b      	ands	r3, r1
 8002acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	fe00e800 	.word	0xfe00e800

08002af8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	8979      	ldrh	r1, [r7, #10]
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <I2C_RequestMemoryWrite+0xa4>)
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f983 	bl	8002e2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f89c 	bl	8002c68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e02c      	b.n	8002b94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
 8002b4a:	e015      	b.n	8002b78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	69b9      	ldr	r1, [r7, #24]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f882 	bl	8002c68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e012      	b.n	8002b94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6e:	893b      	ldrh	r3, [r7, #8]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f830 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	80002000 	.word	0x80002000

08002ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d103      	bne.n	8002bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d007      	beq.n	8002bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	619a      	str	r2, [r3, #24]
  }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf8:	e022      	b.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d01e      	beq.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7ff fa8b 	bl	800211c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e00f      	b.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d0cd      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c74:	e02c      	b.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f870 	bl	8002d60 <I2C_IsAcknowledgeFailed>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e02a      	b.n	8002ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d01e      	beq.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7ff fa43 	bl	800211c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d1cb      	bne.n	8002c76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf4:	e028      	b.n	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f830 	bl	8002d60 <I2C_IsAcknowledgeFailed>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e026      	b.n	8002d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7ff fa07 	bl	800211c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d113      	bne.n	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d1cf      	bne.n	8002cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d151      	bne.n	8002e1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7a:	e022      	b.n	8002dc2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d01e      	beq.n	8002dc2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7ff f9ca 	bl	800211c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <I2C_IsAcknowledgeFailed+0x3a>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e02e      	b.n	8002e20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d1d5      	bne.n	8002d7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fedd 	bl	8002ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <I2C_IsAcknowledgeFailed+0xc8>)
 8002df2:	400b      	ands	r3, r1
 8002df4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	fe00e800 	.word	0xfe00e800

08002e2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	0d5b      	lsrs	r3, r3, #21
 8002e48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <I2C_TransferConfig+0x58>)
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	43db      	mvns	r3, r3
 8002e52:	ea02 0103 	and.w	r1, r2, r3
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e5c:	7a7b      	ldrb	r3, [r7, #9]
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	03ff63ff 	.word	0x03ff63ff

08002e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d138      	bne.n	8002f10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e032      	b.n	8002f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d139      	bne.n	8002fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e033      	b.n	8002faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2224      	movs	r2, #36	; 0x24
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40007000 	.word	0x40007000

08002fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe2:	d130      	bne.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff0:	d038      	beq.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2232      	movs	r2, #50	; 0x32
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0c9b      	lsrs	r3, r3, #18
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003018:	e002      	b.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3b01      	subs	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d102      	bne.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x60>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f2      	bne.n	800301a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003040:	d110      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e00f      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d007      	beq.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800305c:	4a05      	ldr	r2, [pc, #20]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800305e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003062:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40007000 	.word	0x40007000
 8003078:	20000074 	.word	0x20000074
 800307c:	431bde83 	.word	0x431bde83

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e3d4      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003092:	4ba1      	ldr	r3, [pc, #644]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800309c:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80e4 	beq.w	800327c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <HAL_RCC_OscConfig+0x4a>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	f040 808b 	bne.w	80031d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 8087 	bne.w	80031d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ca:	4b93      	ldr	r3, [pc, #588]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x62>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e3ac      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1a      	ldr	r2, [r3, #32]
 80030e6:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_RCC_OscConfig+0x7c>
 80030f2:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fa:	e005      	b.n	8003108 <HAL_RCC_OscConfig+0x88>
 80030fc:	4b86      	ldr	r3, [pc, #536]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003108:	4293      	cmp	r3, r2
 800310a:	d223      	bcs.n	8003154 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fd3f 	bl	8003b94 <RCC_SetFlashLatencyFromMSIRange>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e38d      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003120:	4b7d      	ldr	r3, [pc, #500]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a7c      	ldr	r2, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003126:	f043 0308 	orr.w	r3, r3, #8
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4977      	ldr	r1, [pc, #476]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313e:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	4972      	ldr	r1, [pc, #456]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
 8003152:	e025      	b.n	80031a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003154:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6f      	ldr	r2, [pc, #444]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800315a:	f043 0308 	orr.w	r3, r3, #8
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6d      	ldr	r3, [pc, #436]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	496a      	ldr	r1, [pc, #424]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003172:	4b69      	ldr	r3, [pc, #420]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	4965      	ldr	r1, [pc, #404]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fcff 	bl	8003b94 <RCC_SetFlashLatencyFromMSIRange>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e34d      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031a0:	f000 fc36 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80031a4:	4601      	mov	r1, r0
 80031a6:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	4a5a      	ldr	r2, [pc, #360]	; (800331c <HAL_RCC_OscConfig+0x29c>)
 80031b2:	5cd3      	ldrb	r3, [r2, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa21 f303 	lsr.w	r3, r1, r3
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_RCC_OscConfig+0x2a0>)
 80031be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x2a4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe ff59 	bl	800207c <HAL_InitTick>
 80031ca:	4603      	mov	r3, r0
 80031cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d052      	beq.n	800327a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	e331      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d032      	beq.n	8003246 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031e0:	4b4d      	ldr	r3, [pc, #308]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4c      	ldr	r2, [pc, #304]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ec:	f7fe ff96 	bl	800211c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f4:	f7fe ff92 	bl	800211c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e31a      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003206:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a40      	ldr	r2, [pc, #256]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	493b      	ldr	r1, [pc, #236]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003230:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	4936      	ldr	r1, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
 8003244:	e01a      	b.n	800327c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a33      	ldr	r2, [pc, #204]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003252:	f7fe ff63 	bl	800211c <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325a:	f7fe ff5f 	bl	800211c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e2e7      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800326c:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x1da>
 8003278:	e000      	b.n	800327c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d074      	beq.n	8003372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x21a>
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d10e      	bne.n	80032b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d10b      	bne.n	80032b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d064      	beq.n	8003370 <HAL_RCC_OscConfig+0x2f0>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d160      	bne.n	8003370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e2c4      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x24a>
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e01d      	b.n	8003306 <HAL_RCC_OscConfig+0x286>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x26e>
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x286>
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a06      	ldr	r2, [pc, #24]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01c      	beq.n	8003348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe ff05 	bl	800211c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003314:	e011      	b.n	800333a <HAL_RCC_OscConfig+0x2ba>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	08008a00 	.word	0x08008a00
 8003320:	20000074 	.word	0x20000074
 8003324:	20000078 	.word	0x20000078
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7fe fef8 	bl	800211c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e280      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333a:	4baf      	ldr	r3, [pc, #700]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x2a8>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fee8 	bl	800211c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fee4 	bl	800211c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e26c      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003362:	4ba5      	ldr	r3, [pc, #660]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x2d0>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d060      	beq.n	8003440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x310>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d119      	bne.n	80033be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d116      	bne.n	80033be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003390:	4b99      	ldr	r3, [pc, #612]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x328>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e249      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b93      	ldr	r3, [pc, #588]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	4990      	ldr	r1, [pc, #576]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033bc:	e040      	b.n	8003440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d023      	beq.n	800340e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c6:	4b8c      	ldr	r3, [pc, #560]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a8b      	ldr	r2, [pc, #556]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe fea3 	bl	800211c <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033da:	f7fe fe9f 	bl	800211c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e227      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ec:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b7f      	ldr	r3, [pc, #508]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	497c      	ldr	r1, [pc, #496]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
 800340c:	e018      	b.n	8003440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b7a      	ldr	r3, [pc, #488]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a79      	ldr	r2, [pc, #484]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fe fe7f 	bl	800211c <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003422:	f7fe fe7b 	bl	800211c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e203      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003434:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f0      	bne.n	8003422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d03c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01c      	beq.n	800348e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345a:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe fe5a 	bl	800211c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346c:	f7fe fe56 	bl	800211c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1de      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800347e:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ef      	beq.n	800346c <HAL_RCC_OscConfig+0x3ec>
 800348c:	e01b      	b.n	80034c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348e:	4b5a      	ldr	r3, [pc, #360]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349e:	f7fe fe3d 	bl	800211c <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fe fe39 	bl	800211c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1c1      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b8:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ef      	bne.n	80034a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80a6 	beq.w	8003620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034d8:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b44      	ldr	r3, [pc, #272]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	4a43      	ldr	r2, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	; 0x58
 80034f0:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003500:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_RCC_OscConfig+0x57c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d118      	bne.n	800353e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_OscConfig+0x57c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a3a      	ldr	r2, [pc, #232]	; (80035fc <HAL_RCC_OscConfig+0x57c>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003518:	f7fe fe00 	bl	800211c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe fdfc 	bl	800211c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e184      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003532:	4b32      	ldr	r3, [pc, #200]	; (80035fc <HAL_RCC_OscConfig+0x57c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d108      	bne.n	8003558 <HAL_RCC_OscConfig+0x4d8>
 8003546:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003556:	e024      	b.n	80035a2 <HAL_RCC_OscConfig+0x522>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d110      	bne.n	8003582 <HAL_RCC_OscConfig+0x502>
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003580:	e00f      	b.n	80035a2 <HAL_RCC_OscConfig+0x522>
 8003582:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 800359a:	f023 0304 	bic.w	r3, r3, #4
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035aa:	f7fe fdb7 	bl	800211c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fdb3 	bl	800211c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e139      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_OscConfig+0x578>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ed      	beq.n	80035b2 <HAL_RCC_OscConfig+0x532>
 80035d6:	e01a      	b.n	800360e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe fda0 	bl	800211c <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035de:	e00f      	b.n	8003600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe fd9c 	bl	800211c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d906      	bls.n	8003600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e122      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003600:	4b90      	ldr	r3, [pc, #576]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e8      	bne.n	80035e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b8b      	ldr	r3, [pc, #556]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	4a8a      	ldr	r2, [pc, #552]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8108 	beq.w	800383a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	2b02      	cmp	r3, #2
 8003630:	f040 80d0 	bne.w	80037d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003634:	4b83      	ldr	r3, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	429a      	cmp	r2, r3
 8003646:	d130      	bne.n	80036aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	3b01      	subs	r3, #1
 8003654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d127      	bne.n	80036aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d11f      	bne.n	80036aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003674:	2a07      	cmp	r2, #7
 8003676:	bf14      	ite	ne
 8003678:	2201      	movne	r2, #1
 800367a:	2200      	moveq	r2, #0
 800367c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800367e:	4293      	cmp	r3, r2
 8003680:	d113      	bne.n	80036aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d109      	bne.n	80036aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d06e      	beq.n	8003788 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b0c      	cmp	r3, #12
 80036ae:	d069      	beq.n	8003784 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036b0:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036bc:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b7      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036cc:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a5c      	ldr	r2, [pc, #368]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80036d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d8:	f7fe fd20 	bl	800211c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe fd1c 	bl	800211c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0a4      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fe:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	4b51      	ldr	r3, [pc, #324]	; (8003848 <HAL_RCC_OscConfig+0x7c8>)
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800370e:	3a01      	subs	r2, #1
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003718:	0212      	lsls	r2, r2, #8
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003720:	0852      	lsrs	r2, r2, #1
 8003722:	3a01      	subs	r2, #1
 8003724:	0552      	lsls	r2, r2, #21
 8003726:	4311      	orrs	r1, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800372c:	0852      	lsrs	r2, r2, #1
 800372e:	3a01      	subs	r2, #1
 8003730:	0652      	lsls	r2, r2, #25
 8003732:	4311      	orrs	r1, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003738:	0912      	lsrs	r2, r2, #4
 800373a:	0452      	lsls	r2, r2, #17
 800373c:	430a      	orrs	r2, r1
 800373e:	4941      	ldr	r1, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a3e      	ldr	r2, [pc, #248]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003750:	4b3c      	ldr	r3, [pc, #240]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a3b      	ldr	r2, [pc, #236]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800375c:	f7fe fcde 	bl	800211c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe fcda 	bl	800211c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e062      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003782:	e05a      	b.n	800383a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e059      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d152      	bne.n	800383a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a0:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a27      	ldr	r2, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037ac:	f7fe fcb6 	bl	800211c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fcb2 	bl	800211c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e03a      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x734>
 80037d2:	e032      	b.n	800383a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d02d      	beq.n	8003836 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037e6:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 80037f8:	f023 0303 	bic.w	r3, r3, #3
 80037fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 8003804:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe fc85 	bl	800211c <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe fc81 	bl	800211c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e009      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x7c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x796>
 8003834:	e001      	b.n	800383a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	f99d808c 	.word	0xf99d808c

0800384c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0c8      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 0207 	bic.w	r2, r3, #7
 8003876:	4961      	ldr	r1, [pc, #388]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b0      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d04c      	beq.n	8003936 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a4:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d121      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e09e      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d107      	bne.n	80038cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038bc:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d115      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e092      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d4:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e086      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e07e      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f4:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 0203 	bic.w	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	493f      	ldr	r1, [pc, #252]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003906:	f7fe fc09 	bl	800211c <HAL_GetTick>
 800390a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390c:	e00a      	b.n	8003924 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390e:	f7fe fc05 	bl	800211c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e066      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003924:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 020c 	and.w	r2, r3, #12
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	429a      	cmp	r2, r3
 8003934:	d1eb      	bne.n	800390e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	492c      	ldr	r1, [pc, #176]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4924      	ldr	r1, [pc, #144]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <HAL_RCC_ClockConfig+0x1b0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e036      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4918      	ldr	r1, [pc, #96]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ae:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4910      	ldr	r1, [pc, #64]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039c2:	f000 f825 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <HAL_RCC_ClockConfig+0x1b4>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	5cd3      	ldrb	r3, [r2, r3]
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	fa21 f303 	lsr.w	r3, r1, r3
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fb48 	bl	800207c <HAL_InitTick>
 80039ec:	4603      	mov	r3, r0
 80039ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80039f0:	7afb      	ldrb	r3, [r7, #11]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08008a00 	.word	0x08008a00
 8003a08:	20000074 	.word	0x20000074
 8003a0c:	20000078 	.word	0x20000078

08003a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x34>
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d121      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d11e      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a44:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a50:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	e005      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a60:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a6c:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10d      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e004      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a94:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d133      	bne.n	8003b06 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xa4>
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0xaa>
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ab6:	617b      	str	r3, [r7, #20]
      break;
 8003ab8:	e005      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003abc:	617b      	str	r3, [r7, #20]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	617b      	str	r3, [r7, #20]
      break;
 8003ac4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	fb02 f203 	mul.w	r2, r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0e5b      	lsrs	r3, r3, #25
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b06:	69bb      	ldr	r3, [r7, #24]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3724      	adds	r7, #36	; 0x24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08008a18 	.word	0x08008a18
 8003b1c:	00f42400 	.word	0x00f42400
 8003b20:	007a1200 	.word	0x007a1200

08003b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000074 	.word	0x20000074

08003b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b40:	f7ff fff0 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b44:	4601      	mov	r1, r0
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000
 8003b64:	08008a10 	.word	0x08008a10

08003b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b6c:	f7ff ffda 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b70:	4601      	mov	r1, r0
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0adb      	lsrs	r3, r3, #11
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b7e:	5cd3      	ldrb	r3, [r2, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08008a10 	.word	0x08008a10

08003b94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ba0:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bac:	f7ff fa04 	bl	8002fb8 <HAL_PWREx_GetVoltageRange>
 8003bb0:	6178      	str	r0, [r7, #20]
 8003bb2:	e014      	b.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc0:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bcc:	f7ff f9f4 	bl	8002fb8 <HAL_PWREx_GetVoltageRange>
 8003bd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be4:	d10b      	bne.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d919      	bls.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2ba0      	cmp	r3, #160	; 0xa0
 8003bf0:	d902      	bls.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	e013      	b.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e010      	b.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d902      	bls.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c04:	2303      	movs	r3, #3
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	e00a      	b.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d102      	bne.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c10:	2302      	movs	r3, #2
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e004      	b.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b70      	cmp	r3, #112	; 0x70
 8003c1a:	d101      	bne.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 0207 	bic.w	r2, r3, #7
 8003c28:	4909      	ldr	r1, [pc, #36]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d001      	beq.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40022000 	.word	0x40022000

08003c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c60:	2300      	movs	r3, #0
 8003c62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c78:	d01c      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7e:	d802      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c84:	e01f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c94:	4b85      	ldr	r3, [pc, #532]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a84      	ldr	r2, [pc, #528]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fab9 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fba0 	bl	8004400 <RCCEx_PLLSAI2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd4:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce2:	4972      	ldr	r1, [pc, #456]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d04:	d01c      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0a:	d802      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d10:	e01f      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003d18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d1c:	d01c      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003d1e:	e018      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d20:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a61      	ldr	r2, [pc, #388]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2c:	e015      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fa73 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3320      	adds	r3, #32
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fb5a 	bl	8004400 <RCCEx_PLLSAI2_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	74fb      	strb	r3, [r7, #19]
      break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d60:	4b52      	ldr	r3, [pc, #328]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6e:	494f      	ldr	r1, [pc, #316]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a0 	beq.w	8003eca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	4a40      	ldr	r2, [pc, #256]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
 8003db0:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a3a      	ldr	r2, [pc, #232]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dcc:	f7fe f9a6 	bl	800211c <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd4:	f7fe f9a2 	bl	800211c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	74fb      	strb	r3, [r7, #19]
        break;
 8003de6:	e005      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ef      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d15c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfa:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d019      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	4a20      	ldr	r2, [pc, #128]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fe f961 	bl	800211c <HAL_GetTick>
 8003e5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5c:	e00b      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fe f95d 	bl	800211c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d902      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	74fb      	strb	r3, [r7, #19]
            break;
 8003e74:	e006      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ec      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	4904      	ldr	r1, [pc, #16]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ea2:	e009      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
 8003ea8:	e006      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb8:	7c7b      	ldrb	r3, [r7, #17]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4b9e      	ldr	r3, [pc, #632]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	4a9d      	ldr	r2, [pc, #628]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed6:	4b98      	ldr	r3, [pc, #608]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f023 0203 	bic.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	4994      	ldr	r1, [pc, #592]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef8:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 020c 	bic.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	498c      	ldr	r1, [pc, #560]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1a:	4b87      	ldr	r3, [pc, #540]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	4983      	ldr	r1, [pc, #524]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f3c:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	497b      	ldr	r1, [pc, #492]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5e:	4b76      	ldr	r3, [pc, #472]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6c:	4972      	ldr	r1, [pc, #456]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f80:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	496a      	ldr	r1, [pc, #424]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa2:	4b65      	ldr	r3, [pc, #404]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	4961      	ldr	r1, [pc, #388]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc4:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	4959      	ldr	r1, [pc, #356]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe6:	4b54      	ldr	r3, [pc, #336]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	4950      	ldr	r1, [pc, #320]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004008:	4b4b      	ldr	r3, [pc, #300]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	4948      	ldr	r1, [pc, #288]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402a:	4b43      	ldr	r3, [pc, #268]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	493f      	ldr	r1, [pc, #252]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d028      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404c:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405a:	4937      	ldr	r1, [pc, #220]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406a:	d106      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4b32      	ldr	r3, [pc, #200]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a31      	ldr	r2, [pc, #196]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
 8004078:	e011      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004082:	d10c      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f8c8 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d028      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	491f      	ldr	r1, [pc, #124]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d4:	60d3      	str	r3, [r2, #12]
 80040d6:	e011      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f899 	bl	8004220 <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02b      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a02      	ldr	r2, [pc, #8]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004132:	60d3      	str	r3, [r2, #12]
 8004134:	e014      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004144:	d10c      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f867 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800416c:	4b2b      	ldr	r3, [pc, #172]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417a:	4928      	ldr	r1, [pc, #160]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418a:	d10d      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2102      	movs	r1, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f844 	bl	8004220 <RCCEx_PLLSAI1_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d014      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	74bb      	strb	r3, [r7, #18]
 80041a6:	e011      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d10c      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3320      	adds	r3, #32
 80041b6:	2102      	movs	r1, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f921 	bl	8004400 <RCCEx_PLLSAI2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e6:	490d      	ldr	r1, [pc, #52]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420a:	4904      	ldr	r1, [pc, #16]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004212:	7cbb      	ldrb	r3, [r7, #18]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000

08004220 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800422e:	4b73      	ldr	r3, [pc, #460]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800423a:	4b70      	ldr	r3, [pc, #448]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0203 	and.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d10d      	bne.n	8004266 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
       ||
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004252:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
       ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d044      	beq.n	80042f0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	e041      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d00c      	beq.n	800428e <RCCEx_PLLSAI1_Config+0x6e>
 8004274:	2b03      	cmp	r3, #3
 8004276:	d013      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x80>
 8004278:	2b01      	cmp	r3, #1
 800427a:	d120      	bne.n	80042be <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800427c:	4b5f      	ldr	r3, [pc, #380]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11d      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428c:	e01a      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800428e:	4b5b      	ldr	r3, [pc, #364]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004296:	2b00      	cmp	r3, #0
 8004298:	d116      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429e:	e013      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042a0:	4b56      	ldr	r3, [pc, #344]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10f      	bne.n	80042cc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042bc:	e006      	b.n	80042cc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      break;
 80042c2:	e004      	b.n	80042ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042c4:	bf00      	nop
 80042c6:	e002      	b.n	80042ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10d      	bne.n	80042f0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042d4:	4b49      	ldr	r3, [pc, #292]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	430b      	orrs	r3, r1
 80042ea:	4944      	ldr	r1, [pc, #272]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d17d      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042f6:	4b41      	ldr	r3, [pc, #260]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a40      	ldr	r2, [pc, #256]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004302:	f7fd ff0b 	bl	800211c <HAL_GetTick>
 8004306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004308:	e009      	b.n	800431e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800430a:	f7fd ff07 	bl	800211c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d902      	bls.n	800431e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	73fb      	strb	r3, [r7, #15]
        break;
 800431c:	e005      	b.n	800432a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ef      	bne.n	800430a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d160      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d111      	bne.n	800435a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6892      	ldr	r2, [r2, #8]
 8004346:	0211      	lsls	r1, r2, #8
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68d2      	ldr	r2, [r2, #12]
 800434c:	0912      	lsrs	r2, r2, #4
 800434e:	0452      	lsls	r2, r2, #17
 8004350:	430a      	orrs	r2, r1
 8004352:	492a      	ldr	r1, [pc, #168]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	610b      	str	r3, [r1, #16]
 8004358:	e027      	b.n	80043aa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d112      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004360:	4b26      	ldr	r3, [pc, #152]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6892      	ldr	r2, [r2, #8]
 8004370:	0211      	lsls	r1, r2, #8
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6912      	ldr	r2, [r2, #16]
 8004376:	0852      	lsrs	r2, r2, #1
 8004378:	3a01      	subs	r2, #1
 800437a:	0552      	lsls	r2, r2, #21
 800437c:	430a      	orrs	r2, r1
 800437e:	491f      	ldr	r1, [pc, #124]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]
 8004384:	e011      	b.n	80043aa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800438e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	0211      	lsls	r1, r2, #8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6952      	ldr	r2, [r2, #20]
 800439c:	0852      	lsrs	r2, r2, #1
 800439e:	3a01      	subs	r2, #1
 80043a0:	0652      	lsls	r2, r2, #25
 80043a2:	430a      	orrs	r2, r1
 80043a4:	4915      	ldr	r1, [pc, #84]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043aa:	4b14      	ldr	r3, [pc, #80]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a13      	ldr	r2, [pc, #76]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80043b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd feb1 	bl	800211c <HAL_GetTick>
 80043ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043bc:	e009      	b.n	80043d2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043be:	f7fd fead 	bl	800211c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d902      	bls.n	80043d2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	73fb      	strb	r3, [r7, #15]
          break;
 80043d0:	e005      	b.n	80043de <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0ef      	beq.n	80043be <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000

08004400 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800440e:	4b68      	ldr	r3, [pc, #416]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d018      	beq.n	800444c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800441a:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0203 	and.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d10d      	bne.n	8004446 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
       ||
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004432:	4b5f      	ldr	r3, [pc, #380]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
       ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d044      	beq.n	80044d0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
 800444a:	e041      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d00c      	beq.n	800446e <RCCEx_PLLSAI2_Config+0x6e>
 8004454:	2b03      	cmp	r3, #3
 8004456:	d013      	beq.n	8004480 <RCCEx_PLLSAI2_Config+0x80>
 8004458:	2b01      	cmp	r3, #1
 800445a:	d120      	bne.n	800449e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800445c:	4b54      	ldr	r3, [pc, #336]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11d      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446c:	e01a      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800446e:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447e:	e013      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004480:	4b4b      	ldr	r3, [pc, #300]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10f      	bne.n	80044ac <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800448c:	4b48      	ldr	r3, [pc, #288]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800449c:	e006      	b.n	80044ac <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
      break;
 80044a2:	e004      	b.n	80044ae <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044a4:	bf00      	nop
 80044a6:	e002      	b.n	80044ae <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044b4:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	430b      	orrs	r3, r1
 80044ca:	4939      	ldr	r1, [pc, #228]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d167      	bne.n	80045a6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044d6:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e2:	f7fd fe1b 	bl	800211c <HAL_GetTick>
 80044e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044e8:	e009      	b.n	80044fe <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044ea:	f7fd fe17 	bl	800211c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d902      	bls.n	80044fe <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	73fb      	strb	r3, [r7, #15]
        break;
 80044fc:	e005      	b.n	800450a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044fe:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ef      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d14a      	bne.n	80045a6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d111      	bne.n	800453a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004516:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6892      	ldr	r2, [r2, #8]
 8004526:	0211      	lsls	r1, r2, #8
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68d2      	ldr	r2, [r2, #12]
 800452c:	0912      	lsrs	r2, r2, #4
 800452e:	0452      	lsls	r2, r2, #17
 8004530:	430a      	orrs	r2, r1
 8004532:	491f      	ldr	r1, [pc, #124]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	614b      	str	r3, [r1, #20]
 8004538:	e011      	b.n	800455e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004542:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	0211      	lsls	r1, r2, #8
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6912      	ldr	r2, [r2, #16]
 8004550:	0852      	lsrs	r2, r2, #1
 8004552:	3a01      	subs	r2, #1
 8004554:	0652      	lsls	r2, r2, #25
 8004556:	430a      	orrs	r2, r1
 8004558:	4915      	ldr	r1, [pc, #84]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fd fdd7 	bl	800211c <HAL_GetTick>
 800456e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004570:	e009      	b.n	8004586 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004572:	f7fd fdd3 	bl	800211c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	73fb      	strb	r3, [r7, #15]
          break;
 8004584:	e005      	b.n	8004592 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ef      	beq.n	8004572 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	4903      	ldr	r1, [pc, #12]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e049      	b.n	800465a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fc08 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fd4e 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d001      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e04f      	b.n	800471c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a23      	ldr	r2, [pc, #140]	; (8004728 <HAL_TIM_Base_Start_IT+0xc4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <HAL_TIM_Base_Start_IT+0x76>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a6:	d018      	beq.n	80046da <HAL_TIM_Base_Start_IT+0x76>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1f      	ldr	r2, [pc, #124]	; (800472c <HAL_TIM_Base_Start_IT+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_TIM_Base_Start_IT+0x76>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_TIM_Base_Start_IT+0xcc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_TIM_Base_Start_IT+0x76>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <HAL_TIM_Base_Start_IT+0xd0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_TIM_Base_Start_IT+0x76>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_TIM_Base_Start_IT+0xd4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_TIM_Base_Start_IT+0x76>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <HAL_TIM_Base_Start_IT+0xd8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d115      	bne.n	8004706 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <HAL_TIM_Base_Start_IT+0xdc>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b06      	cmp	r3, #6
 80046ea:	d015      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0xb4>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f2:	d011      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	e008      	b.n	8004718 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e000      	b.n	800471a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40013400 	.word	0x40013400
 800473c:	40014000 	.word	0x40014000
 8004740:	00010007 	.word	0x00010007

08004744 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6a1a      	ldr	r2, [r3, #32]
 8004762:	f241 1311 	movw	r3, #4369	; 0x1111
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10f      	bne.n	800478c <HAL_TIM_Base_Stop_IT+0x48>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	f240 4344 	movw	r3, #1092	; 0x444
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d107      	bne.n	800478c <HAL_TIM_Base_Stop_IT+0x48>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e049      	b.n	8004848 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f841 	bl	8004850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f000 fc57 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <HAL_TIM_PWM_Start+0x24>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e03c      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d109      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x3e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	e02f      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_PWM_Start+0x58>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e022      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	d109      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x72>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	e015      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d109      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x8c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e008      	b.n	8004902 <HAL_TIM_PWM_Start+0x9e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e09c      	b.n	8004a44 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xb6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004918:	e023      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xc6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	e01b      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0xd6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004938:	e013      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xe6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004948:	e00b      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b10      	cmp	r3, #16
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0xf6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004958:	e003      	b.n	8004962 <HAL_TIM_PWM_Start+0xfe>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2201      	movs	r2, #1
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 ff9c 	bl	80058a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a35      	ldr	r2, [pc, #212]	; (8004a4c <HAL_TIM_PWM_Start+0x1e8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x13e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <HAL_TIM_PWM_Start+0x1ec>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x13e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <HAL_TIM_PWM_Start+0x1f0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x13e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a31      	ldr	r2, [pc, #196]	; (8004a58 <HAL_TIM_PWM_Start+0x1f4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x13e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <HAL_TIM_PWM_Start+0x1f8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_PWM_Start+0x142>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_TIM_PWM_Start+0x144>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_TIM_PWM_Start+0x1e8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01d      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x19e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d018      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x19e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <HAL_TIM_PWM_Start+0x1fc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x19e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <HAL_TIM_PWM_Start+0x200>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00e      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x19e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <HAL_TIM_PWM_Start+0x204>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x19e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <HAL_TIM_PWM_Start+0x1ec>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x19e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <HAL_TIM_PWM_Start+0x1f0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d115      	bne.n	8004a2e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_TIM_PWM_Start+0x208>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b06      	cmp	r3, #6
 8004a12:	d015      	beq.n	8004a40 <HAL_TIM_PWM_Start+0x1dc>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1a:	d011      	beq.n	8004a40 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	e008      	b.n	8004a40 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e000      	b.n	8004a42 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40013400 	.word	0x40013400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	00010007 	.word	0x00010007

08004a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0202 	mvn.w	r2, #2
 8004a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 facf 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fac1 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fad2 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0204 	mvn.w	r2, #4
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 faa5 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa97 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 faa8 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0208 	mvn.w	r2, #8
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa7b 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa6d 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa7e 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0210 	mvn.w	r2, #16
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa51 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa43 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa54 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0201 	mvn.w	r2, #1
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fb4a 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	2b80      	cmp	r3, #128	; 0x80
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fefc 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2e:	d10e      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b80      	cmp	r3, #128	; 0x80
 8004c3c:	d107      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 feef 	bl	8005a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa02 	bl	800507e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d10e      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0220 	mvn.w	r2, #32
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 feaf 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e0fd      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b14      	cmp	r3, #20
 8004cd6:	f200 80f0 	bhi.w	8004eba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004d35 	.word	0x08004d35
 8004ce4:	08004ebb 	.word	0x08004ebb
 8004ce8:	08004ebb 	.word	0x08004ebb
 8004cec:	08004ebb 	.word	0x08004ebb
 8004cf0:	08004d75 	.word	0x08004d75
 8004cf4:	08004ebb 	.word	0x08004ebb
 8004cf8:	08004ebb 	.word	0x08004ebb
 8004cfc:	08004ebb 	.word	0x08004ebb
 8004d00:	08004db7 	.word	0x08004db7
 8004d04:	08004ebb 	.word	0x08004ebb
 8004d08:	08004ebb 	.word	0x08004ebb
 8004d0c:	08004ebb 	.word	0x08004ebb
 8004d10:	08004df7 	.word	0x08004df7
 8004d14:	08004ebb 	.word	0x08004ebb
 8004d18:	08004ebb 	.word	0x08004ebb
 8004d1c:	08004ebb 	.word	0x08004ebb
 8004d20:	08004e39 	.word	0x08004e39
 8004d24:	08004ebb 	.word	0x08004ebb
 8004d28:	08004ebb 	.word	0x08004ebb
 8004d2c:	08004ebb 	.word	0x08004ebb
 8004d30:	08004e79 	.word	0x08004e79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fa44 	bl	80051c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0208 	orr.w	r2, r2, #8
 8004d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0204 	bic.w	r2, r2, #4
 8004d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6999      	ldr	r1, [r3, #24]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	619a      	str	r2, [r3, #24]
      break;
 8004d72:	e0a3      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fab4 	bl	80052e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6999      	ldr	r1, [r3, #24]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	619a      	str	r2, [r3, #24]
      break;
 8004db4:	e082      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fb1d 	bl	80053fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0208 	orr.w	r2, r2, #8
 8004dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0204 	bic.w	r2, r2, #4
 8004de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69d9      	ldr	r1, [r3, #28]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	61da      	str	r2, [r3, #28]
      break;
 8004df4:	e062      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fb85 	bl	800550c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69d9      	ldr	r1, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	021a      	lsls	r2, r3, #8
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	61da      	str	r2, [r3, #28]
      break;
 8004e36:	e041      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fbce 	bl	80055e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e76:	e021      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fc12 	bl	80056a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004eb8:	e000      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004eba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop

08004ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0a8      	b.n	800503a <HAL_TIM_ConfigClockSource+0x16a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d067      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0x124>
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d80b      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x70>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d073      	beq.n	8005014 <HAL_TIM_ConfigClockSource+0x144>
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d802      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x66>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d06f      	beq.n	8005014 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f34:	e078      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d06c      	beq.n	8005014 <HAL_TIM_ConfigClockSource+0x144>
 8004f3a:	2b30      	cmp	r3, #48	; 0x30
 8004f3c:	d06a      	beq.n	8005014 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004f3e:	e073      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d00d      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0x90>
 8004f44:	2b70      	cmp	r3, #112	; 0x70
 8004f46:	d804      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x82>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d033      	beq.n	8004fb4 <HAL_TIM_ConfigClockSource+0xe4>
 8004f4c:	2b60      	cmp	r3, #96	; 0x60
 8004f4e:	d041      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004f50:	e06a      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	d066      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x156>
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5c:	d017      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004f5e:	e063      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6899      	ldr	r1, [r3, #8]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f000 fc7a 	bl	8005868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
      break;
 8004f8c:	e04c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6899      	ldr	r1, [r3, #8]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f000 fc63 	bl	8005868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb0:	609a      	str	r2, [r3, #8]
      break;
 8004fb2:	e039      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f000 fbd7 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2150      	movs	r1, #80	; 0x50
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fc30 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8004fd2:	e029      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	f000 fbf6 	bl	80057d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2160      	movs	r1, #96	; 0x60
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fc20 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8004ff2:	e019      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	461a      	mov	r2, r3
 8005002:	f000 fbb7 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2140      	movs	r1, #64	; 0x40
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fc10 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005012:	e009      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 fc07 	bl	8005832 <TIM_ITRx_SetConfig>
        break;
 8005024:	e000      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a40      	ldr	r2, [pc, #256]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d00f      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3d      	ldr	r2, [pc, #244]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3c      	ldr	r2, [pc, #240]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3a      	ldr	r2, [pc, #232]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d108      	bne.n	80050e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01f      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d01b      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d017      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2b      	ldr	r2, [pc, #172]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a28      	ldr	r2, [pc, #160]	; (80051bc <TIM_Base_SetConfig+0x128>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <TIM_Base_SetConfig+0x12c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <TIM_Base_SetConfig+0x130>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a11      	ldr	r2, [pc, #68]	; (80051bc <TIM_Base_SetConfig+0x128>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <TIM_Base_SetConfig+0x12c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0f      	ldr	r2, [pc, #60]	; (80051c4 <TIM_Base_SetConfig+0x130>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d103      	bne.n	8005194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	615a      	str	r2, [r3, #20]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 0302 	bic.w	r3, r3, #2
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <TIM_OC1_SetConfig+0x10c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <TIM_OC1_SetConfig+0x110>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_OC1_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <TIM_OC1_SetConfig+0x118>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <TIM_OC1_SetConfig+0x11c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0308 	bic.w	r3, r3, #8
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <TIM_OC1_SetConfig+0x10c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <TIM_OC1_SetConfig+0x110>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <TIM_OC1_SetConfig+0x114>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <TIM_OC1_SetConfig+0x118>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <TIM_OC1_SetConfig+0x11c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800

080052e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f023 0210 	bic.w	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0320 	bic.w	r3, r3, #32
 8005336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <TIM_OC2_SetConfig+0x100>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC2_SetConfig+0x6c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a27      	ldr	r2, [pc, #156]	; (80053ec <TIM_OC2_SetConfig+0x104>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10d      	bne.n	8005370 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <TIM_OC2_SetConfig+0x100>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00f      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <TIM_OC2_SetConfig+0x104>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00b      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <TIM_OC2_SetConfig+0x108>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <TIM_OC2_SetConfig+0x10c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <TIM_OC2_SetConfig+0x110>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d113      	bne.n	80053c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800539e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <TIM_OC3_SetConfig+0xfc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC3_SetConfig+0x6a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <TIM_OC3_SetConfig+0x100>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <TIM_OC3_SetConfig+0xfc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <TIM_OC3_SetConfig+0x100>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <TIM_OC3_SetConfig+0x104>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <TIM_OC3_SetConfig+0x108>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <TIM_OC3_SetConfig+0x10c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d113      	bne.n	80054d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <TIM_OC4_SetConfig+0xc0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <TIM_OC4_SetConfig+0xc4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <TIM_OC4_SetConfig+0xc8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <TIM_OC4_SetConfig+0xcc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a14      	ldr	r2, [pc, #80]	; (80055dc <TIM_OC4_SetConfig+0xd0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a17      	ldr	r2, [pc, #92]	; (8005694 <TIM_OC5_SetConfig+0xb4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00f      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <TIM_OC5_SetConfig+0xb8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC5_SetConfig+0xbc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a14      	ldr	r2, [pc, #80]	; (80056a0 <TIM_OC5_SetConfig+0xc0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <TIM_OC5_SetConfig+0xc4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d109      	bne.n	800566e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800

080056a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	051b      	lsls	r3, r3, #20
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <TIM_OC6_SetConfig+0xb8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00f      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a17      	ldr	r2, [pc, #92]	; (8005764 <TIM_OC6_SetConfig+0xbc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00b      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a16      	ldr	r2, [pc, #88]	; (8005768 <TIM_OC6_SetConfig+0xc0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <TIM_OC6_SetConfig+0xc4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC6_SetConfig+0xc8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0210 	bic.w	r2, r3, #16
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800580e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	f043 0307 	orr.w	r3, r3, #7
 8005854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	021a      	lsls	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	431a      	orrs	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	2201      	movs	r2, #1
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	401a      	ands	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	fa01 f303 	lsl.w	r3, r1, r3
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e068      	b.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2e      	ldr	r2, [pc, #184]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2d      	ldr	r2, [pc, #180]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d108      	bne.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d018      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10c      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40014000 	.word	0x40014000

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e040      	b.n	8005ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc fa86 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8c0 	bl	8005c04 <UART_SetConfig>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e022      	b.n	8005ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb3e 	bl	8006118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fbc5 	bl	800625c <UART_CheckIdleState>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	; 0x28
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	f040 8081 	bne.w	8005bf8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Transmit+0x26>
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e079      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x38>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e072      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2221      	movs	r2, #33	; 0x21
 8005b26:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005b28:	f7fc faf8 	bl	800211c <HAL_GetTick>
 8005b2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b46:	d108      	bne.n	8005b5a <HAL_UART_Transmit+0x7e>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e003      	b.n	8005b62 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005b6a:	e02d      	b.n	8005bc8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fbb5 	bl	80062e6 <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e039      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	881a      	ldrh	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b98:	b292      	uxth	r2, r2
 8005b9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e008      	b.n	8005bb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	b292      	uxth	r2, r2
 8005bae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1cb      	bne.n	8005b6c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fb81 	bl	80062e6 <UART_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e005      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c04:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005c08:	b088      	sub	sp, #32
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4bac      	ldr	r3, [pc, #688]	; (8005ee4 <UART_SetConfig+0x2e0>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	69f9      	ldr	r1, [r7, #28]
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4aa2      	ldr	r2, [pc, #648]	; (8005ee8 <UART_SetConfig+0x2e4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a99      	ldr	r2, [pc, #612]	; (8005eec <UART_SetConfig+0x2e8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d121      	bne.n	8005cd0 <UART_SetConfig+0xcc>
 8005c8c:	4b98      	ldr	r3, [pc, #608]	; (8005ef0 <UART_SetConfig+0x2ec>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d816      	bhi.n	8005cc8 <UART_SetConfig+0xc4>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x9c>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cbd 	.word	0x08005cbd
 8005ca8:	08005cb7 	.word	0x08005cb7
 8005cac:	08005cc3 	.word	0x08005cc3
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	76fb      	strb	r3, [r7, #27]
 8005cb4:	e0e8      	b.n	8005e88 <UART_SetConfig+0x284>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	76fb      	strb	r3, [r7, #27]
 8005cba:	e0e5      	b.n	8005e88 <UART_SetConfig+0x284>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	76fb      	strb	r3, [r7, #27]
 8005cc0:	e0e2      	b.n	8005e88 <UART_SetConfig+0x284>
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	76fb      	strb	r3, [r7, #27]
 8005cc6:	e0df      	b.n	8005e88 <UART_SetConfig+0x284>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	76fb      	strb	r3, [r7, #27]
 8005ccc:	bf00      	nop
 8005cce:	e0db      	b.n	8005e88 <UART_SetConfig+0x284>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a87      	ldr	r2, [pc, #540]	; (8005ef4 <UART_SetConfig+0x2f0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d134      	bne.n	8005d44 <UART_SetConfig+0x140>
 8005cda:	4b85      	ldr	r3, [pc, #532]	; (8005ef0 <UART_SetConfig+0x2ec>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b0c      	cmp	r3, #12
 8005ce6:	d829      	bhi.n	8005d3c <UART_SetConfig+0x138>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0xec>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d25 	.word	0x08005d25
 8005cf4:	08005d3d 	.word	0x08005d3d
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d3d 	.word	0x08005d3d
 8005d00:	08005d31 	.word	0x08005d31
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d3d 	.word	0x08005d3d
 8005d0c:	08005d3d 	.word	0x08005d3d
 8005d10:	08005d2b 	.word	0x08005d2b
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d3d 	.word	0x08005d3d
 8005d1c:	08005d3d 	.word	0x08005d3d
 8005d20:	08005d37 	.word	0x08005d37
 8005d24:	2300      	movs	r3, #0
 8005d26:	76fb      	strb	r3, [r7, #27]
 8005d28:	e0ae      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	76fb      	strb	r3, [r7, #27]
 8005d2e:	e0ab      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d30:	2304      	movs	r3, #4
 8005d32:	76fb      	strb	r3, [r7, #27]
 8005d34:	e0a8      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d36:	2308      	movs	r3, #8
 8005d38:	76fb      	strb	r3, [r7, #27]
 8005d3a:	e0a5      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	76fb      	strb	r3, [r7, #27]
 8005d40:	bf00      	nop
 8005d42:	e0a1      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a6b      	ldr	r2, [pc, #428]	; (8005ef8 <UART_SetConfig+0x2f4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d120      	bne.n	8005d90 <UART_SetConfig+0x18c>
 8005d4e:	4b68      	ldr	r3, [pc, #416]	; (8005ef0 <UART_SetConfig+0x2ec>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d00f      	beq.n	8005d7c <UART_SetConfig+0x178>
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d802      	bhi.n	8005d66 <UART_SetConfig+0x162>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <UART_SetConfig+0x16c>
 8005d64:	e010      	b.n	8005d88 <UART_SetConfig+0x184>
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d005      	beq.n	8005d76 <UART_SetConfig+0x172>
 8005d6a:	2b30      	cmp	r3, #48	; 0x30
 8005d6c:	d009      	beq.n	8005d82 <UART_SetConfig+0x17e>
 8005d6e:	e00b      	b.n	8005d88 <UART_SetConfig+0x184>
 8005d70:	2300      	movs	r3, #0
 8005d72:	76fb      	strb	r3, [r7, #27]
 8005d74:	e088      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d76:	2302      	movs	r3, #2
 8005d78:	76fb      	strb	r3, [r7, #27]
 8005d7a:	e085      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	76fb      	strb	r3, [r7, #27]
 8005d80:	e082      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d82:	2308      	movs	r3, #8
 8005d84:	76fb      	strb	r3, [r7, #27]
 8005d86:	e07f      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	76fb      	strb	r3, [r7, #27]
 8005d8c:	bf00      	nop
 8005d8e:	e07b      	b.n	8005e88 <UART_SetConfig+0x284>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a59      	ldr	r2, [pc, #356]	; (8005efc <UART_SetConfig+0x2f8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d120      	bne.n	8005ddc <UART_SetConfig+0x1d8>
 8005d9a:	4b55      	ldr	r3, [pc, #340]	; (8005ef0 <UART_SetConfig+0x2ec>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d00f      	beq.n	8005dc8 <UART_SetConfig+0x1c4>
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d802      	bhi.n	8005db2 <UART_SetConfig+0x1ae>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <UART_SetConfig+0x1b8>
 8005db0:	e010      	b.n	8005dd4 <UART_SetConfig+0x1d0>
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d005      	beq.n	8005dc2 <UART_SetConfig+0x1be>
 8005db6:	2bc0      	cmp	r3, #192	; 0xc0
 8005db8:	d009      	beq.n	8005dce <UART_SetConfig+0x1ca>
 8005dba:	e00b      	b.n	8005dd4 <UART_SetConfig+0x1d0>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	76fb      	strb	r3, [r7, #27]
 8005dc0:	e062      	b.n	8005e88 <UART_SetConfig+0x284>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	76fb      	strb	r3, [r7, #27]
 8005dc6:	e05f      	b.n	8005e88 <UART_SetConfig+0x284>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	76fb      	strb	r3, [r7, #27]
 8005dcc:	e05c      	b.n	8005e88 <UART_SetConfig+0x284>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	76fb      	strb	r3, [r7, #27]
 8005dd2:	e059      	b.n	8005e88 <UART_SetConfig+0x284>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	76fb      	strb	r3, [r7, #27]
 8005dd8:	bf00      	nop
 8005dda:	e055      	b.n	8005e88 <UART_SetConfig+0x284>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a47      	ldr	r2, [pc, #284]	; (8005f00 <UART_SetConfig+0x2fc>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d124      	bne.n	8005e30 <UART_SetConfig+0x22c>
 8005de6:	4b42      	ldr	r3, [pc, #264]	; (8005ef0 <UART_SetConfig+0x2ec>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df4:	d012      	beq.n	8005e1c <UART_SetConfig+0x218>
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d802      	bhi.n	8005e02 <UART_SetConfig+0x1fe>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <UART_SetConfig+0x20c>
 8005e00:	e012      	b.n	8005e28 <UART_SetConfig+0x224>
 8005e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e06:	d006      	beq.n	8005e16 <UART_SetConfig+0x212>
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0c:	d009      	beq.n	8005e22 <UART_SetConfig+0x21e>
 8005e0e:	e00b      	b.n	8005e28 <UART_SetConfig+0x224>
 8005e10:	2300      	movs	r3, #0
 8005e12:	76fb      	strb	r3, [r7, #27]
 8005e14:	e038      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e16:	2302      	movs	r3, #2
 8005e18:	76fb      	strb	r3, [r7, #27]
 8005e1a:	e035      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	76fb      	strb	r3, [r7, #27]
 8005e20:	e032      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e22:	2308      	movs	r3, #8
 8005e24:	76fb      	strb	r3, [r7, #27]
 8005e26:	e02f      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	76fb      	strb	r3, [r7, #27]
 8005e2c:	bf00      	nop
 8005e2e:	e02b      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2c      	ldr	r2, [pc, #176]	; (8005ee8 <UART_SetConfig+0x2e4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d124      	bne.n	8005e84 <UART_SetConfig+0x280>
 8005e3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <UART_SetConfig+0x2ec>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e48:	d012      	beq.n	8005e70 <UART_SetConfig+0x26c>
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d802      	bhi.n	8005e56 <UART_SetConfig+0x252>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <UART_SetConfig+0x260>
 8005e54:	e012      	b.n	8005e7c <UART_SetConfig+0x278>
 8005e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5a:	d006      	beq.n	8005e6a <UART_SetConfig+0x266>
 8005e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e60:	d009      	beq.n	8005e76 <UART_SetConfig+0x272>
 8005e62:	e00b      	b.n	8005e7c <UART_SetConfig+0x278>
 8005e64:	2300      	movs	r3, #0
 8005e66:	76fb      	strb	r3, [r7, #27]
 8005e68:	e00e      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	76fb      	strb	r3, [r7, #27]
 8005e6e:	e00b      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e70:	2304      	movs	r3, #4
 8005e72:	76fb      	strb	r3, [r7, #27]
 8005e74:	e008      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e76:	2308      	movs	r3, #8
 8005e78:	76fb      	strb	r3, [r7, #27]
 8005e7a:	e005      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	76fb      	strb	r3, [r7, #27]
 8005e80:	bf00      	nop
 8005e82:	e001      	b.n	8005e88 <UART_SetConfig+0x284>
 8005e84:	2310      	movs	r3, #16
 8005e86:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <UART_SetConfig+0x2e4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	f040 8087 	bne.w	8005fa2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e94:	7efb      	ldrb	r3, [r7, #27]
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d836      	bhi.n	8005f08 <UART_SetConfig+0x304>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <UART_SetConfig+0x29c>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005f09 	.word	0x08005f09
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005f09 	.word	0x08005f09
 8005eb0:	08005ed3 	.word	0x08005ed3
 8005eb4:	08005f09 	.word	0x08005f09
 8005eb8:	08005f09 	.word	0x08005f09
 8005ebc:	08005f09 	.word	0x08005f09
 8005ec0:	08005edb 	.word	0x08005edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fd fe3a 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8005ec8:	6178      	str	r0, [r7, #20]
        break;
 8005eca:	e022      	b.n	8005f12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <UART_SetConfig+0x300>)
 8005ece:	617b      	str	r3, [r7, #20]
        break;
 8005ed0:	e01f      	b.n	8005f12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed2:	f7fd fd9d 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 8005ed6:	6178      	str	r0, [r7, #20]
        break;
 8005ed8:	e01b      	b.n	8005f12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ede:	617b      	str	r3, [r7, #20]
        break;
 8005ee0:	e017      	b.n	8005f12 <UART_SetConfig+0x30e>
 8005ee2:	bf00      	nop
 8005ee4:	efff69f3 	.word	0xefff69f3
 8005ee8:	40008000 	.word	0x40008000
 8005eec:	40013800 	.word	0x40013800
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40004400 	.word	0x40004400
 8005ef8:	40004800 	.word	0x40004800
 8005efc:	40004c00 	.word	0x40004c00
 8005f00:	40005000 	.word	0x40005000
 8005f04:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	76bb      	strb	r3, [r7, #26]
        break;
 8005f10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80f1 	beq.w	80060fc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	4413      	add	r3, r2
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d305      	bcc.n	8005f36 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d902      	bls.n	8005f3c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	76bb      	strb	r3, [r7, #26]
 8005f3a:	e0df      	b.n	80060fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	f04f 0400 	mov.w	r4, #0
 8005f4c:	0214      	lsls	r4, r2, #8
 8005f4e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f52:	020b      	lsls	r3, r1, #8
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6852      	ldr	r2, [r2, #4]
 8005f58:	0852      	lsrs	r2, r2, #1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	eb13 0b01 	adds.w	fp, r3, r1
 8005f64:	eb44 0c02 	adc.w	ip, r4, r2
 8005f68:	4658      	mov	r0, fp
 8005f6a:	4661      	mov	r1, ip
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f04f 0400 	mov.w	r4, #0
 8005f74:	461a      	mov	r2, r3
 8005f76:	4623      	mov	r3, r4
 8005f78:	f7fa fe66 	bl	8000c48 <__aeabi_uldivmod>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f88:	d308      	bcc.n	8005f9c <UART_SetConfig+0x398>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f90:	d204      	bcs.n	8005f9c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e0af      	b.n	80060fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	76bb      	strb	r3, [r7, #26]
 8005fa0:	e0ac      	b.n	80060fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005faa:	d15b      	bne.n	8006064 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005fac:	7efb      	ldrb	r3, [r7, #27]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d827      	bhi.n	8006002 <UART_SetConfig+0x3fe>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x3b4>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08006003 	.word	0x08006003
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fdc:	f7fd fdae 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8005fe0:	6178      	str	r0, [r7, #20]
        break;
 8005fe2:	e013      	b.n	800600c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe4:	f7fd fdc0 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8005fe8:	6178      	str	r0, [r7, #20]
        break;
 8005fea:	e00f      	b.n	800600c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b49      	ldr	r3, [pc, #292]	; (8006114 <UART_SetConfig+0x510>)
 8005fee:	617b      	str	r3, [r7, #20]
        break;
 8005ff0:	e00c      	b.n	800600c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fd fd0d 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 8005ff6:	6178      	str	r0, [r7, #20]
        break;
 8005ff8:	e008      	b.n	800600c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	617b      	str	r3, [r7, #20]
        break;
 8006000:	e004      	b.n	800600c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	76bb      	strb	r3, [r7, #26]
        break;
 800600a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d074      	beq.n	80060fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	005a      	lsls	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	441a      	add	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	fbb2 f3f3 	udiv	r3, r2, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b0f      	cmp	r3, #15
 800602e:	d916      	bls.n	800605e <UART_SetConfig+0x45a>
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006036:	d212      	bcs.n	800605e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f023 030f 	bic.w	r3, r3, #15
 8006040:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	b29b      	uxth	r3, r3
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	b29a      	uxth	r2, r3
 800604e:	89fb      	ldrh	r3, [r7, #14]
 8006050:	4313      	orrs	r3, r2
 8006052:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	89fa      	ldrh	r2, [r7, #14]
 800605a:	60da      	str	r2, [r3, #12]
 800605c:	e04e      	b.n	80060fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	76bb      	strb	r3, [r7, #26]
 8006062:	e04b      	b.n	80060fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006064:	7efb      	ldrb	r3, [r7, #27]
 8006066:	2b08      	cmp	r3, #8
 8006068:	d827      	bhi.n	80060ba <UART_SetConfig+0x4b6>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0x46c>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006095 	.word	0x08006095
 8006074:	0800609d 	.word	0x0800609d
 8006078:	080060a5 	.word	0x080060a5
 800607c:	080060bb 	.word	0x080060bb
 8006080:	080060ab 	.word	0x080060ab
 8006084:	080060bb 	.word	0x080060bb
 8006088:	080060bb 	.word	0x080060bb
 800608c:	080060bb 	.word	0x080060bb
 8006090:	080060b3 	.word	0x080060b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006094:	f7fd fd52 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8006098:	6178      	str	r0, [r7, #20]
        break;
 800609a:	e013      	b.n	80060c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fd fd64 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 80060a0:	6178      	str	r0, [r7, #20]
        break;
 80060a2:	e00f      	b.n	80060c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a4:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <UART_SetConfig+0x510>)
 80060a6:	617b      	str	r3, [r7, #20]
        break;
 80060a8:	e00c      	b.n	80060c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060aa:	f7fd fcb1 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80060ae:	6178      	str	r0, [r7, #20]
        break;
 80060b0:	e008      	b.n	80060c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	617b      	str	r3, [r7, #20]
        break;
 80060b8:	e004      	b.n	80060c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	76bb      	strb	r3, [r7, #26]
        break;
 80060c2:	bf00      	nop
    }

    if (pclk != 0U)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d018      	beq.n	80060fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	085a      	lsrs	r2, r3, #1
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	441a      	add	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	b29b      	uxth	r3, r3
 80060de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b0f      	cmp	r3, #15
 80060e4:	d908      	bls.n	80060f8 <UART_SetConfig+0x4f4>
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ec:	d204      	bcs.n	80060f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	e001      	b.n	80060fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006108:	7ebb      	ldrb	r3, [r7, #26]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006114:	00f42400 	.word	0x00f42400

08006118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006216:	d10a      	bne.n	800622e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800626a:	f7fb ff57 	bl	800211c <HAL_GetTick>
 800626e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b08      	cmp	r3, #8
 800627c:	d10e      	bne.n	800629c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f82a 	bl	80062e6 <UART_WaitOnFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e020      	b.n	80062de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d10e      	bne.n	80062c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f814 	bl	80062e6 <UART_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e00a      	b.n	80062de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	4613      	mov	r3, r2
 80062f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f6:	e05d      	b.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d059      	beq.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006300:	f7fb ff0c 	bl	800211c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	429a      	cmp	r2, r3
 800630e:	d302      	bcc.n	8006316 <UART_WaitOnFlagUntilTimeout+0x30>
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d11b      	bne.n	800634e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006324:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e042      	b.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d02b      	beq.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636a:	d123      	bne.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006374:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006384:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e00f      	b.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69da      	ldr	r2, [r3, #28]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4013      	ands	r3, r2
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d092      	beq.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80063e0:	bf00      	nop
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af04      	add	r7, sp, #16
 80063f2:	4603      	mov	r3, r0
 80063f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	9302      	str	r3, [sp, #8]
 80063fc:	2301      	movs	r3, #1
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	1dfb      	adds	r3, r7, #7
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	2301      	movs	r3, #1
 8006406:	2200      	movs	r2, #0
 8006408:	2178      	movs	r1, #120	; 0x78
 800640a:	4803      	ldr	r0, [pc, #12]	; (8006418 <ssd1306_WriteCommand+0x2c>)
 800640c:	f7fc fa60 	bl	80028d0 <HAL_I2C_Mem_Write>
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000784 	.word	0x20000784

0800641c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af04      	add	r7, sp, #16
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	9202      	str	r2, [sp, #8]
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	2301      	movs	r3, #1
 8006438:	2240      	movs	r2, #64	; 0x40
 800643a:	2178      	movs	r1, #120	; 0x78
 800643c:	4803      	ldr	r0, [pc, #12]	; (800644c <ssd1306_WriteData+0x30>)
 800643e:	f7fc fa47 	bl	80028d0 <HAL_I2C_Mem_Write>
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000784 	.word	0x20000784

08006450 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8006454:	f7ff ffc2 	bl	80063dc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006458:	2064      	movs	r0, #100	; 0x64
 800645a:	f7fb fe6b 	bl	8002134 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800645e:	20ae      	movs	r0, #174	; 0xae
 8006460:	f7ff ffc4 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8006464:	2020      	movs	r0, #32
 8006466:	f7ff ffc1 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800646a:	2010      	movs	r0, #16
 800646c:	f7ff ffbe 	bl	80063ec <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006470:	20b0      	movs	r0, #176	; 0xb0
 8006472:	f7ff ffbb 	bl	80063ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006476:	20c8      	movs	r0, #200	; 0xc8
 8006478:	f7ff ffb8 	bl	80063ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800647c:	2000      	movs	r0, #0
 800647e:	f7ff ffb5 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006482:	2010      	movs	r0, #16
 8006484:	f7ff ffb2 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006488:	2040      	movs	r0, #64	; 0x40
 800648a:	f7ff ffaf 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800648e:	2081      	movs	r0, #129	; 0x81
 8006490:	f7ff ffac 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8006494:	20ff      	movs	r0, #255	; 0xff
 8006496:	f7ff ffa9 	bl	80063ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800649a:	20a1      	movs	r0, #161	; 0xa1
 800649c:	f7ff ffa6 	bl	80063ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80064a0:	20a6      	movs	r0, #166	; 0xa6
 80064a2:	f7ff ffa3 	bl	80063ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80064a6:	20a8      	movs	r0, #168	; 0xa8
 80064a8:	f7ff ffa0 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80064ac:	203f      	movs	r0, #63	; 0x3f
 80064ae:	f7ff ff9d 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80064b2:	20a4      	movs	r0, #164	; 0xa4
 80064b4:	f7ff ff9a 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80064b8:	20d3      	movs	r0, #211	; 0xd3
 80064ba:	f7ff ff97 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80064be:	2000      	movs	r0, #0
 80064c0:	f7ff ff94 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80064c4:	20d5      	movs	r0, #213	; 0xd5
 80064c6:	f7ff ff91 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80064ca:	20f0      	movs	r0, #240	; 0xf0
 80064cc:	f7ff ff8e 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80064d0:	20d9      	movs	r0, #217	; 0xd9
 80064d2:	f7ff ff8b 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80064d6:	2022      	movs	r0, #34	; 0x22
 80064d8:	f7ff ff88 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80064dc:	20da      	movs	r0, #218	; 0xda
 80064de:	f7ff ff85 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80064e2:	2012      	movs	r0, #18
 80064e4:	f7ff ff82 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80064e8:	20db      	movs	r0, #219	; 0xdb
 80064ea:	f7ff ff7f 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80064ee:	2020      	movs	r0, #32
 80064f0:	f7ff ff7c 	bl	80063ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80064f4:	208d      	movs	r0, #141	; 0x8d
 80064f6:	f7ff ff79 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80064fa:	2014      	movs	r0, #20
 80064fc:	f7ff ff76 	bl	80063ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8006500:	20af      	movs	r0, #175	; 0xaf
 8006502:	f7ff ff73 	bl	80063ec <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8006506:	2000      	movs	r0, #0
 8006508:	f000 f810 	bl	800652c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800650c:	f000 f830 	bl	8006570 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <ssd1306_Init+0xd8>)
 8006512:	2200      	movs	r2, #0
 8006514:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006516:	4b04      	ldr	r3, [pc, #16]	; (8006528 <ssd1306_Init+0xd8>)
 8006518:	2200      	movs	r2, #0
 800651a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800651c:	4b02      	ldr	r3, [pc, #8]	; (8006528 <ssd1306_Init+0xd8>)
 800651e:	2201      	movs	r2, #1
 8006520:	715a      	strb	r2, [r3, #5]
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000764 	.word	0x20000764

0800652c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e00d      	b.n	8006558 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <ssd1306_Fill+0x1a>
 8006542:	2100      	movs	r1, #0
 8006544:	e000      	b.n	8006548 <ssd1306_Fill+0x1c>
 8006546:	21ff      	movs	r1, #255	; 0xff
 8006548:	4a08      	ldr	r2, [pc, #32]	; (800656c <ssd1306_Fill+0x40>)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	460a      	mov	r2, r1
 8006550:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655e:	d3ed      	bcc.n	800653c <ssd1306_Fill+0x10>
    }
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000364 	.word	0x20000364

08006570 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8006576:	2300      	movs	r3, #0
 8006578:	71fb      	strb	r3, [r7, #7]
 800657a:	e016      	b.n	80065aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	3b50      	subs	r3, #80	; 0x50
 8006580:	b2db      	uxtb	r3, r3
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff ff32 	bl	80063ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8006588:	2000      	movs	r0, #0
 800658a:	f7ff ff2f 	bl	80063ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800658e:	2010      	movs	r0, #16
 8006590:	f7ff ff2c 	bl	80063ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	01db      	lsls	r3, r3, #7
 8006598:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <ssd1306_UpdateScreen+0x48>)
 800659a:	4413      	add	r3, r2
 800659c:	2180      	movs	r1, #128	; 0x80
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ff3c 	bl	800641c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	3301      	adds	r3, #1
 80065a8:	71fb      	strb	r3, [r7, #7]
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	2b07      	cmp	r3, #7
 80065ae:	d9e5      	bls.n	800657c <ssd1306_UpdateScreen+0xc>
    }
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000364 	.word	0x20000364

080065bc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
 80065c6:	460b      	mov	r3, r1
 80065c8:	71bb      	strb	r3, [r7, #6]
 80065ca:	4613      	mov	r3, r2
 80065cc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80065ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	db48      	blt.n	8006668 <ssd1306_DrawPixel+0xac>
 80065d6:	79bb      	ldrb	r3, [r7, #6]
 80065d8:	2b3f      	cmp	r3, #63	; 0x3f
 80065da:	d845      	bhi.n	8006668 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80065dc:	4b25      	ldr	r3, [pc, #148]	; (8006674 <ssd1306_DrawPixel+0xb8>)
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d006      	beq.n	80065f2 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80065e4:	797b      	ldrb	r3, [r7, #5]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80065f2:	797b      	ldrb	r3, [r7, #5]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d11a      	bne.n	800662e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80065f8:	79fa      	ldrb	r2, [r7, #7]
 80065fa:	79bb      	ldrb	r3, [r7, #6]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	b2d8      	uxtb	r0, r3
 8006600:	4603      	mov	r3, r0
 8006602:	01db      	lsls	r3, r3, #7
 8006604:	4413      	add	r3, r2
 8006606:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <ssd1306_DrawPixel+0xbc>)
 8006608:	5cd3      	ldrb	r3, [r2, r3]
 800660a:	b25a      	sxtb	r2, r3
 800660c:	79bb      	ldrb	r3, [r7, #6]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2101      	movs	r1, #1
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	b25b      	sxtb	r3, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	b259      	sxtb	r1, r3
 800661e:	79fa      	ldrb	r2, [r7, #7]
 8006620:	4603      	mov	r3, r0
 8006622:	01db      	lsls	r3, r3, #7
 8006624:	4413      	add	r3, r2
 8006626:	b2c9      	uxtb	r1, r1
 8006628:	4a13      	ldr	r2, [pc, #76]	; (8006678 <ssd1306_DrawPixel+0xbc>)
 800662a:	54d1      	strb	r1, [r2, r3]
 800662c:	e01d      	b.n	800666a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800662e:	79fa      	ldrb	r2, [r7, #7]
 8006630:	79bb      	ldrb	r3, [r7, #6]
 8006632:	08db      	lsrs	r3, r3, #3
 8006634:	b2d8      	uxtb	r0, r3
 8006636:	4603      	mov	r3, r0
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	4413      	add	r3, r2
 800663c:	4a0e      	ldr	r2, [pc, #56]	; (8006678 <ssd1306_DrawPixel+0xbc>)
 800663e:	5cd3      	ldrb	r3, [r2, r3]
 8006640:	b25a      	sxtb	r2, r3
 8006642:	79bb      	ldrb	r3, [r7, #6]
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	b25b      	sxtb	r3, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	b25b      	sxtb	r3, r3
 8006654:	4013      	ands	r3, r2
 8006656:	b259      	sxtb	r1, r3
 8006658:	79fa      	ldrb	r2, [r7, #7]
 800665a:	4603      	mov	r3, r0
 800665c:	01db      	lsls	r3, r3, #7
 800665e:	4413      	add	r3, r2
 8006660:	b2c9      	uxtb	r1, r1
 8006662:	4a05      	ldr	r2, [pc, #20]	; (8006678 <ssd1306_DrawPixel+0xbc>)
 8006664:	54d1      	strb	r1, [r2, r3]
 8006666:	e000      	b.n	800666a <ssd1306_DrawPixel+0xae>
        return;
 8006668:	bf00      	nop
    }
}
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	20000764 	.word	0x20000764
 8006678:	20000364 	.word	0x20000364

0800667c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800667c:	b590      	push	{r4, r7, lr}
 800667e:	b089      	sub	sp, #36	; 0x24
 8006680:	af00      	add	r7, sp, #0
 8006682:	4604      	mov	r4, r0
 8006684:	1d38      	adds	r0, r7, #4
 8006686:	e880 0006 	stmia.w	r0, {r1, r2}
 800668a:	461a      	mov	r2, r3
 800668c:	4623      	mov	r3, r4
 800668e:	73fb      	strb	r3, [r7, #15]
 8006690:	4613      	mov	r3, r2
 8006692:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006694:	4b38      	ldr	r3, [pc, #224]	; (8006778 <ssd1306_WriteChar+0xfc>)
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	793b      	ldrb	r3, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	2b7f      	cmp	r3, #127	; 0x7f
 80066a0:	dc06      	bgt.n	80066b0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80066a2:	4b35      	ldr	r3, [pc, #212]	; (8006778 <ssd1306_WriteChar+0xfc>)
 80066a4:	885b      	ldrh	r3, [r3, #2]
 80066a6:	461a      	mov	r2, r3
 80066a8:	797b      	ldrb	r3, [r7, #5]
 80066aa:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80066ac:	2b3f      	cmp	r3, #63	; 0x3f
 80066ae:	dd01      	ble.n	80066b4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e05d      	b.n	8006770 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80066b4:	2300      	movs	r3, #0
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	e04c      	b.n	8006754 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	3b20      	subs	r3, #32
 80066c0:	7979      	ldrb	r1, [r7, #5]
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	4619      	mov	r1, r3
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	440b      	add	r3, r1
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	e034      	b.n	8006744 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d012      	beq.n	8006710 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80066ea:	4b23      	ldr	r3, [pc, #140]	; (8006778 <ssd1306_WriteChar+0xfc>)
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4413      	add	r3, r2
 80066f6:	b2d8      	uxtb	r0, r3
 80066f8:	4b1f      	ldr	r3, [pc, #124]	; (8006778 <ssd1306_WriteChar+0xfc>)
 80066fa:	885b      	ldrh	r3, [r3, #2]
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4413      	add	r3, r2
 8006704:	b2db      	uxtb	r3, r3
 8006706:	7bba      	ldrb	r2, [r7, #14]
 8006708:	4619      	mov	r1, r3
 800670a:	f7ff ff57 	bl	80065bc <ssd1306_DrawPixel>
 800670e:	e016      	b.n	800673e <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <ssd1306_WriteChar+0xfc>)
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	4413      	add	r3, r2
 800671c:	b2d8      	uxtb	r0, r3
 800671e:	4b16      	ldr	r3, [pc, #88]	; (8006778 <ssd1306_WriteChar+0xfc>)
 8006720:	885b      	ldrh	r3, [r3, #2]
 8006722:	b2da      	uxtb	r2, r3
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	4413      	add	r3, r2
 800672a:	b2d9      	uxtb	r1, r3
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	f7ff ff3f 	bl	80065bc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	3301      	adds	r3, #1
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	793b      	ldrb	r3, [r7, #4]
 8006746:	461a      	mov	r2, r3
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	4293      	cmp	r3, r2
 800674c:	d3c5      	bcc.n	80066da <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	3301      	adds	r3, #1
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	797b      	ldrb	r3, [r7, #5]
 8006756:	461a      	mov	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	4293      	cmp	r3, r2
 800675c:	d3ad      	bcc.n	80066ba <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <ssd1306_WriteChar+0xfc>)
 8006760:	881a      	ldrh	r2, [r3, #0]
 8006762:	793b      	ldrb	r3, [r7, #4]
 8006764:	b29b      	uxth	r3, r3
 8006766:	4413      	add	r3, r2
 8006768:	b29a      	uxth	r2, r3
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <ssd1306_WriteChar+0xfc>)
 800676c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3724      	adds	r7, #36	; 0x24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd90      	pop	{r4, r7, pc}
 8006778:	20000764 	.word	0x20000764

0800677c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	1d38      	adds	r0, r7, #4
 8006786:	e880 0006 	stmia.w	r0, {r1, r2}
 800678a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800678c:	e012      	b.n	80067b4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	7818      	ldrb	r0, [r3, #0]
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	1d3a      	adds	r2, r7, #4
 8006796:	ca06      	ldmia	r2, {r1, r2}
 8006798:	f7ff ff70 	bl	800667c <ssd1306_WriteChar>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d002      	beq.n	80067ae <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	e008      	b.n	80067c0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e8      	bne.n	800678e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	781b      	ldrb	r3, [r3, #0]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	460a      	mov	r2, r1
 80067d2:	71fb      	strb	r3, [r7, #7]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <ssd1306_SetCursor+0x2c>)
 80067de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80067e0:	79bb      	ldrb	r3, [r7, #6]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <ssd1306_SetCursor+0x2c>)
 80067e6:	805a      	strh	r2, [r3, #2]
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	20000764 	.word	0x20000764

080067f8 <__errno>:
 80067f8:	4b01      	ldr	r3, [pc, #4]	; (8006800 <__errno+0x8>)
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20000098 	.word	0x20000098

08006804 <__libc_init_array>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	4e0d      	ldr	r6, [pc, #52]	; (800683c <__libc_init_array+0x38>)
 8006808:	4c0d      	ldr	r4, [pc, #52]	; (8006840 <__libc_init_array+0x3c>)
 800680a:	1ba4      	subs	r4, r4, r6
 800680c:	10a4      	asrs	r4, r4, #2
 800680e:	2500      	movs	r5, #0
 8006810:	42a5      	cmp	r5, r4
 8006812:	d109      	bne.n	8006828 <__libc_init_array+0x24>
 8006814:	4e0b      	ldr	r6, [pc, #44]	; (8006844 <__libc_init_array+0x40>)
 8006816:	4c0c      	ldr	r4, [pc, #48]	; (8006848 <__libc_init_array+0x44>)
 8006818:	f002 f872 	bl	8008900 <_init>
 800681c:	1ba4      	subs	r4, r4, r6
 800681e:	10a4      	asrs	r4, r4, #2
 8006820:	2500      	movs	r5, #0
 8006822:	42a5      	cmp	r5, r4
 8006824:	d105      	bne.n	8006832 <__libc_init_array+0x2e>
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800682c:	4798      	blx	r3
 800682e:	3501      	adds	r5, #1
 8006830:	e7ee      	b.n	8006810 <__libc_init_array+0xc>
 8006832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006836:	4798      	blx	r3
 8006838:	3501      	adds	r5, #1
 800683a:	e7f2      	b.n	8006822 <__libc_init_array+0x1e>
 800683c:	0800b4c0 	.word	0x0800b4c0
 8006840:	0800b4c0 	.word	0x0800b4c0
 8006844:	0800b4c0 	.word	0x0800b4c0
 8006848:	0800b4c4 	.word	0x0800b4c4

0800684c <memmove>:
 800684c:	4288      	cmp	r0, r1
 800684e:	b510      	push	{r4, lr}
 8006850:	eb01 0302 	add.w	r3, r1, r2
 8006854:	d807      	bhi.n	8006866 <memmove+0x1a>
 8006856:	1e42      	subs	r2, r0, #1
 8006858:	4299      	cmp	r1, r3
 800685a:	d00a      	beq.n	8006872 <memmove+0x26>
 800685c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006860:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006864:	e7f8      	b.n	8006858 <memmove+0xc>
 8006866:	4283      	cmp	r3, r0
 8006868:	d9f5      	bls.n	8006856 <memmove+0xa>
 800686a:	1881      	adds	r1, r0, r2
 800686c:	1ad2      	subs	r2, r2, r3
 800686e:	42d3      	cmn	r3, r2
 8006870:	d100      	bne.n	8006874 <memmove+0x28>
 8006872:	bd10      	pop	{r4, pc}
 8006874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006878:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800687c:	e7f7      	b.n	800686e <memmove+0x22>

0800687e <memset>:
 800687e:	4402      	add	r2, r0
 8006880:	4603      	mov	r3, r0
 8006882:	4293      	cmp	r3, r2
 8006884:	d100      	bne.n	8006888 <memset+0xa>
 8006886:	4770      	bx	lr
 8006888:	f803 1b01 	strb.w	r1, [r3], #1
 800688c:	e7f9      	b.n	8006882 <memset+0x4>

0800688e <__cvt>:
 800688e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006892:	ec55 4b10 	vmov	r4, r5, d0
 8006896:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006898:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800689c:	2d00      	cmp	r5, #0
 800689e:	460e      	mov	r6, r1
 80068a0:	4691      	mov	r9, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	bfb8      	it	lt
 80068a6:	4622      	movlt	r2, r4
 80068a8:	462b      	mov	r3, r5
 80068aa:	f027 0720 	bic.w	r7, r7, #32
 80068ae:	bfbb      	ittet	lt
 80068b0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068b4:	461d      	movlt	r5, r3
 80068b6:	2300      	movge	r3, #0
 80068b8:	232d      	movlt	r3, #45	; 0x2d
 80068ba:	bfb8      	it	lt
 80068bc:	4614      	movlt	r4, r2
 80068be:	2f46      	cmp	r7, #70	; 0x46
 80068c0:	700b      	strb	r3, [r1, #0]
 80068c2:	d004      	beq.n	80068ce <__cvt+0x40>
 80068c4:	2f45      	cmp	r7, #69	; 0x45
 80068c6:	d100      	bne.n	80068ca <__cvt+0x3c>
 80068c8:	3601      	adds	r6, #1
 80068ca:	2102      	movs	r1, #2
 80068cc:	e000      	b.n	80068d0 <__cvt+0x42>
 80068ce:	2103      	movs	r1, #3
 80068d0:	ab03      	add	r3, sp, #12
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	ab02      	add	r3, sp, #8
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4632      	mov	r2, r6
 80068da:	4653      	mov	r3, sl
 80068dc:	ec45 4b10 	vmov	d0, r4, r5
 80068e0:	f000 fcf2 	bl	80072c8 <_dtoa_r>
 80068e4:	2f47      	cmp	r7, #71	; 0x47
 80068e6:	4680      	mov	r8, r0
 80068e8:	d102      	bne.n	80068f0 <__cvt+0x62>
 80068ea:	f019 0f01 	tst.w	r9, #1
 80068ee:	d026      	beq.n	800693e <__cvt+0xb0>
 80068f0:	2f46      	cmp	r7, #70	; 0x46
 80068f2:	eb08 0906 	add.w	r9, r8, r6
 80068f6:	d111      	bne.n	800691c <__cvt+0x8e>
 80068f8:	f898 3000 	ldrb.w	r3, [r8]
 80068fc:	2b30      	cmp	r3, #48	; 0x30
 80068fe:	d10a      	bne.n	8006916 <__cvt+0x88>
 8006900:	2200      	movs	r2, #0
 8006902:	2300      	movs	r3, #0
 8006904:	4620      	mov	r0, r4
 8006906:	4629      	mov	r1, r5
 8006908:	f7fa f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800690c:	b918      	cbnz	r0, 8006916 <__cvt+0x88>
 800690e:	f1c6 0601 	rsb	r6, r6, #1
 8006912:	f8ca 6000 	str.w	r6, [sl]
 8006916:	f8da 3000 	ldr.w	r3, [sl]
 800691a:	4499      	add	r9, r3
 800691c:	2200      	movs	r2, #0
 800691e:	2300      	movs	r3, #0
 8006920:	4620      	mov	r0, r4
 8006922:	4629      	mov	r1, r5
 8006924:	f7fa f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006928:	b938      	cbnz	r0, 800693a <__cvt+0xac>
 800692a:	2230      	movs	r2, #48	; 0x30
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	454b      	cmp	r3, r9
 8006930:	d205      	bcs.n	800693e <__cvt+0xb0>
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	9103      	str	r1, [sp, #12]
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e7f8      	b.n	800692c <__cvt+0x9e>
 800693a:	f8cd 900c 	str.w	r9, [sp, #12]
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006942:	eba3 0308 	sub.w	r3, r3, r8
 8006946:	4640      	mov	r0, r8
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	b004      	add	sp, #16
 800694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006950 <__exponent>:
 8006950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006952:	2900      	cmp	r1, #0
 8006954:	4604      	mov	r4, r0
 8006956:	bfba      	itte	lt
 8006958:	4249      	neglt	r1, r1
 800695a:	232d      	movlt	r3, #45	; 0x2d
 800695c:	232b      	movge	r3, #43	; 0x2b
 800695e:	2909      	cmp	r1, #9
 8006960:	f804 2b02 	strb.w	r2, [r4], #2
 8006964:	7043      	strb	r3, [r0, #1]
 8006966:	dd20      	ble.n	80069aa <__exponent+0x5a>
 8006968:	f10d 0307 	add.w	r3, sp, #7
 800696c:	461f      	mov	r7, r3
 800696e:	260a      	movs	r6, #10
 8006970:	fb91 f5f6 	sdiv	r5, r1, r6
 8006974:	fb06 1115 	mls	r1, r6, r5, r1
 8006978:	3130      	adds	r1, #48	; 0x30
 800697a:	2d09      	cmp	r5, #9
 800697c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006980:	f103 32ff 	add.w	r2, r3, #4294967295
 8006984:	4629      	mov	r1, r5
 8006986:	dc09      	bgt.n	800699c <__exponent+0x4c>
 8006988:	3130      	adds	r1, #48	; 0x30
 800698a:	3b02      	subs	r3, #2
 800698c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006990:	42bb      	cmp	r3, r7
 8006992:	4622      	mov	r2, r4
 8006994:	d304      	bcc.n	80069a0 <__exponent+0x50>
 8006996:	1a10      	subs	r0, r2, r0
 8006998:	b003      	add	sp, #12
 800699a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699c:	4613      	mov	r3, r2
 800699e:	e7e7      	b.n	8006970 <__exponent+0x20>
 80069a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069a4:	f804 2b01 	strb.w	r2, [r4], #1
 80069a8:	e7f2      	b.n	8006990 <__exponent+0x40>
 80069aa:	2330      	movs	r3, #48	; 0x30
 80069ac:	4419      	add	r1, r3
 80069ae:	7083      	strb	r3, [r0, #2]
 80069b0:	1d02      	adds	r2, r0, #4
 80069b2:	70c1      	strb	r1, [r0, #3]
 80069b4:	e7ef      	b.n	8006996 <__exponent+0x46>
	...

080069b8 <_printf_float>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	b08d      	sub	sp, #52	; 0x34
 80069be:	460c      	mov	r4, r1
 80069c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80069c4:	4616      	mov	r6, r2
 80069c6:	461f      	mov	r7, r3
 80069c8:	4605      	mov	r5, r0
 80069ca:	f001 fa35 	bl	8007e38 <_localeconv_r>
 80069ce:	6803      	ldr	r3, [r0, #0]
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7f9 fbfc 	bl	80001d0 <strlen>
 80069d8:	2300      	movs	r3, #0
 80069da:	930a      	str	r3, [sp, #40]	; 0x28
 80069dc:	f8d8 3000 	ldr.w	r3, [r8]
 80069e0:	9005      	str	r0, [sp, #20]
 80069e2:	3307      	adds	r3, #7
 80069e4:	f023 0307 	bic.w	r3, r3, #7
 80069e8:	f103 0208 	add.w	r2, r3, #8
 80069ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069f0:	f8d4 b000 	ldr.w	fp, [r4]
 80069f4:	f8c8 2000 	str.w	r2, [r8]
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a00:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a12:	4ba7      	ldr	r3, [pc, #668]	; (8006cb0 <_printf_float+0x2f8>)
 8006a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a18:	f7fa f888 	bl	8000b2c <__aeabi_dcmpun>
 8006a1c:	bb70      	cbnz	r0, 8006a7c <_printf_float+0xc4>
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	4ba3      	ldr	r3, [pc, #652]	; (8006cb0 <_printf_float+0x2f8>)
 8006a24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a28:	f7fa f862 	bl	8000af0 <__aeabi_dcmple>
 8006a2c:	bb30      	cbnz	r0, 8006a7c <_printf_float+0xc4>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2300      	movs	r3, #0
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7fa f851 	bl	8000adc <__aeabi_dcmplt>
 8006a3a:	b110      	cbz	r0, 8006a42 <_printf_float+0x8a>
 8006a3c:	232d      	movs	r3, #45	; 0x2d
 8006a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a42:	4a9c      	ldr	r2, [pc, #624]	; (8006cb4 <_printf_float+0x2fc>)
 8006a44:	4b9c      	ldr	r3, [pc, #624]	; (8006cb8 <_printf_float+0x300>)
 8006a46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006a4a:	bf8c      	ite	hi
 8006a4c:	4690      	movhi	r8, r2
 8006a4e:	4698      	movls	r8, r3
 8006a50:	2303      	movs	r3, #3
 8006a52:	f02b 0204 	bic.w	r2, fp, #4
 8006a56:	6123      	str	r3, [r4, #16]
 8006a58:	6022      	str	r2, [r4, #0]
 8006a5a:	f04f 0900 	mov.w	r9, #0
 8006a5e:	9700      	str	r7, [sp, #0]
 8006a60:	4633      	mov	r3, r6
 8006a62:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a64:	4621      	mov	r1, r4
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 f9e6 	bl	8006e38 <_printf_common>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f040 808d 	bne.w	8006b8c <_printf_float+0x1d4>
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
 8006a76:	b00d      	add	sp, #52	; 0x34
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	4640      	mov	r0, r8
 8006a82:	4649      	mov	r1, r9
 8006a84:	f7fa f852 	bl	8000b2c <__aeabi_dcmpun>
 8006a88:	b110      	cbz	r0, 8006a90 <_printf_float+0xd8>
 8006a8a:	4a8c      	ldr	r2, [pc, #560]	; (8006cbc <_printf_float+0x304>)
 8006a8c:	4b8c      	ldr	r3, [pc, #560]	; (8006cc0 <_printf_float+0x308>)
 8006a8e:	e7da      	b.n	8006a46 <_printf_float+0x8e>
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	1c4b      	adds	r3, r1, #1
 8006a94:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006a98:	a80a      	add	r0, sp, #40	; 0x28
 8006a9a:	d13e      	bne.n	8006b1a <_printf_float+0x162>
 8006a9c:	2306      	movs	r3, #6
 8006a9e:	6063      	str	r3, [r4, #4]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006aa6:	ab09      	add	r3, sp, #36	; 0x24
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	ec49 8b10 	vmov	d0, r8, r9
 8006aae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	f8cd a004 	str.w	sl, [sp, #4]
 8006ab8:	6861      	ldr	r1, [r4, #4]
 8006aba:	4628      	mov	r0, r5
 8006abc:	f7ff fee7 	bl	800688e <__cvt>
 8006ac0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006ac4:	2b47      	cmp	r3, #71	; 0x47
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	d109      	bne.n	8006ade <_printf_float+0x126>
 8006aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006acc:	1cd8      	adds	r0, r3, #3
 8006ace:	db02      	blt.n	8006ad6 <_printf_float+0x11e>
 8006ad0:	6862      	ldr	r2, [r4, #4]
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	dd47      	ble.n	8006b66 <_printf_float+0x1ae>
 8006ad6:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ada:	fa5f fa8a 	uxtb.w	sl, sl
 8006ade:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ae4:	d824      	bhi.n	8006b30 <_printf_float+0x178>
 8006ae6:	3901      	subs	r1, #1
 8006ae8:	4652      	mov	r2, sl
 8006aea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006aee:	9109      	str	r1, [sp, #36]	; 0x24
 8006af0:	f7ff ff2e 	bl	8006950 <__exponent>
 8006af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006af6:	1813      	adds	r3, r2, r0
 8006af8:	2a01      	cmp	r2, #1
 8006afa:	4681      	mov	r9, r0
 8006afc:	6123      	str	r3, [r4, #16]
 8006afe:	dc02      	bgt.n	8006b06 <_printf_float+0x14e>
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	07d1      	lsls	r1, r2, #31
 8006b04:	d501      	bpl.n	8006b0a <_printf_float+0x152>
 8006b06:	3301      	adds	r3, #1
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0a5      	beq.n	8006a5e <_printf_float+0xa6>
 8006b12:	232d      	movs	r3, #45	; 0x2d
 8006b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b18:	e7a1      	b.n	8006a5e <_printf_float+0xa6>
 8006b1a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006b1e:	f000 8177 	beq.w	8006e10 <_printf_float+0x458>
 8006b22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006b26:	d1bb      	bne.n	8006aa0 <_printf_float+0xe8>
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	d1b9      	bne.n	8006aa0 <_printf_float+0xe8>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e7b6      	b.n	8006a9e <_printf_float+0xe6>
 8006b30:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006b34:	d119      	bne.n	8006b6a <_printf_float+0x1b2>
 8006b36:	2900      	cmp	r1, #0
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	dd0c      	ble.n	8006b56 <_printf_float+0x19e>
 8006b3c:	6121      	str	r1, [r4, #16]
 8006b3e:	b913      	cbnz	r3, 8006b46 <_printf_float+0x18e>
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	07d2      	lsls	r2, r2, #31
 8006b44:	d502      	bpl.n	8006b4c <_printf_float+0x194>
 8006b46:	3301      	adds	r3, #1
 8006b48:	440b      	add	r3, r1
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b50:	f04f 0900 	mov.w	r9, #0
 8006b54:	e7d9      	b.n	8006b0a <_printf_float+0x152>
 8006b56:	b913      	cbnz	r3, 8006b5e <_printf_float+0x1a6>
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	07d0      	lsls	r0, r2, #31
 8006b5c:	d501      	bpl.n	8006b62 <_printf_float+0x1aa>
 8006b5e:	3302      	adds	r3, #2
 8006b60:	e7f3      	b.n	8006b4a <_printf_float+0x192>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7f1      	b.n	8006b4a <_printf_float+0x192>
 8006b66:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006b6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	db05      	blt.n	8006b7e <_printf_float+0x1c6>
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	07d1      	lsls	r1, r2, #31
 8006b78:	d5e8      	bpl.n	8006b4c <_printf_float+0x194>
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	e7e5      	b.n	8006b4a <_printf_float+0x192>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bfd4      	ite	le
 8006b82:	f1c3 0302 	rsble	r3, r3, #2
 8006b86:	2301      	movgt	r3, #1
 8006b88:	4413      	add	r3, r2
 8006b8a:	e7de      	b.n	8006b4a <_printf_float+0x192>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	055a      	lsls	r2, r3, #21
 8006b90:	d407      	bmi.n	8006ba2 <_printf_float+0x1ea>
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	4642      	mov	r2, r8
 8006b96:	4631      	mov	r1, r6
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b8      	blx	r7
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d12b      	bne.n	8006bf8 <_printf_float+0x240>
 8006ba0:	e767      	b.n	8006a72 <_printf_float+0xba>
 8006ba2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006ba6:	f240 80dc 	bls.w	8006d62 <_printf_float+0x3aa>
 8006baa:	2200      	movs	r2, #0
 8006bac:	2300      	movs	r3, #0
 8006bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bb2:	f7f9 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d033      	beq.n	8006c22 <_printf_float+0x26a>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4a41      	ldr	r2, [pc, #260]	; (8006cc4 <_printf_float+0x30c>)
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b8      	blx	r7
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	f43f af54 	beq.w	8006a72 <_printf_float+0xba>
 8006bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	db02      	blt.n	8006bd8 <_printf_float+0x220>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	07d8      	lsls	r0, r3, #31
 8006bd6:	d50f      	bpl.n	8006bf8 <_printf_float+0x240>
 8006bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f af45 	beq.w	8006a72 <_printf_float+0xba>
 8006be8:	f04f 0800 	mov.w	r8, #0
 8006bec:	f104 091a 	add.w	r9, r4, #26
 8006bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	dc09      	bgt.n	8006c0c <_printf_float+0x254>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	079b      	lsls	r3, r3, #30
 8006bfc:	f100 8103 	bmi.w	8006e06 <_printf_float+0x44e>
 8006c00:	68e0      	ldr	r0, [r4, #12]
 8006c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c04:	4298      	cmp	r0, r3
 8006c06:	bfb8      	it	lt
 8006c08:	4618      	movlt	r0, r3
 8006c0a:	e734      	b.n	8006a76 <_printf_float+0xbe>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	464a      	mov	r2, r9
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f af2b 	beq.w	8006a72 <_printf_float+0xba>
 8006c1c:	f108 0801 	add.w	r8, r8, #1
 8006c20:	e7e6      	b.n	8006bf0 <_printf_float+0x238>
 8006c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dc2b      	bgt.n	8006c80 <_printf_float+0x2c8>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <_printf_float+0x30c>)
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4628      	mov	r0, r5
 8006c30:	47b8      	blx	r7
 8006c32:	3001      	adds	r0, #1
 8006c34:	f43f af1d 	beq.w	8006a72 <_printf_float+0xba>
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	b923      	cbnz	r3, 8006c46 <_printf_float+0x28e>
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3e:	b913      	cbnz	r3, 8006c46 <_printf_float+0x28e>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	07d9      	lsls	r1, r3, #31
 8006c44:	d5d8      	bpl.n	8006bf8 <_printf_float+0x240>
 8006c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f af0e 	beq.w	8006a72 <_printf_float+0xba>
 8006c56:	f04f 0900 	mov.w	r9, #0
 8006c5a:	f104 0a1a 	add.w	sl, r4, #26
 8006c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c60:	425b      	negs	r3, r3
 8006c62:	454b      	cmp	r3, r9
 8006c64:	dc01      	bgt.n	8006c6a <_printf_float+0x2b2>
 8006c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c68:	e794      	b.n	8006b94 <_printf_float+0x1dc>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	f43f aefc 	beq.w	8006a72 <_printf_float+0xba>
 8006c7a:	f109 0901 	add.w	r9, r9, #1
 8006c7e:	e7ee      	b.n	8006c5e <_printf_float+0x2a6>
 8006c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c84:	429a      	cmp	r2, r3
 8006c86:	bfa8      	it	ge
 8006c88:	461a      	movge	r2, r3
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	4691      	mov	r9, r2
 8006c8e:	dd07      	ble.n	8006ca0 <_printf_float+0x2e8>
 8006c90:	4613      	mov	r3, r2
 8006c92:	4631      	mov	r1, r6
 8006c94:	4642      	mov	r2, r8
 8006c96:	4628      	mov	r0, r5
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	f43f aee9 	beq.w	8006a72 <_printf_float+0xba>
 8006ca0:	f104 031a 	add.w	r3, r4, #26
 8006ca4:	f04f 0b00 	mov.w	fp, #0
 8006ca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cac:	9306      	str	r3, [sp, #24]
 8006cae:	e015      	b.n	8006cdc <_printf_float+0x324>
 8006cb0:	7fefffff 	.word	0x7fefffff
 8006cb4:	0800b260 	.word	0x0800b260
 8006cb8:	0800b25c 	.word	0x0800b25c
 8006cbc:	0800b268 	.word	0x0800b268
 8006cc0:	0800b264 	.word	0x0800b264
 8006cc4:	0800b26c 	.word	0x0800b26c
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9a06      	ldr	r2, [sp, #24]
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b8      	blx	r7
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f43f aecd 	beq.w	8006a72 <_printf_float+0xba>
 8006cd8:	f10b 0b01 	add.w	fp, fp, #1
 8006cdc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006ce0:	ebaa 0309 	sub.w	r3, sl, r9
 8006ce4:	455b      	cmp	r3, fp
 8006ce6:	dcef      	bgt.n	8006cc8 <_printf_float+0x310>
 8006ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cec:	429a      	cmp	r2, r3
 8006cee:	44d0      	add	r8, sl
 8006cf0:	db15      	blt.n	8006d1e <_printf_float+0x366>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	07da      	lsls	r2, r3, #31
 8006cf6:	d412      	bmi.n	8006d1e <_printf_float+0x366>
 8006cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cfc:	eba3 020a 	sub.w	r2, r3, sl
 8006d00:	eba3 0a01 	sub.w	sl, r3, r1
 8006d04:	4592      	cmp	sl, r2
 8006d06:	bfa8      	it	ge
 8006d08:	4692      	movge	sl, r2
 8006d0a:	f1ba 0f00 	cmp.w	sl, #0
 8006d0e:	dc0e      	bgt.n	8006d2e <_printf_float+0x376>
 8006d10:	f04f 0800 	mov.w	r8, #0
 8006d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d18:	f104 091a 	add.w	r9, r4, #26
 8006d1c:	e019      	b.n	8006d52 <_printf_float+0x39a>
 8006d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d1e5      	bne.n	8006cf8 <_printf_float+0x340>
 8006d2c:	e6a1      	b.n	8006a72 <_printf_float+0xba>
 8006d2e:	4653      	mov	r3, sl
 8006d30:	4642      	mov	r2, r8
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d1e9      	bne.n	8006d10 <_printf_float+0x358>
 8006d3c:	e699      	b.n	8006a72 <_printf_float+0xba>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	464a      	mov	r2, r9
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f43f ae92 	beq.w	8006a72 <_printf_float+0xba>
 8006d4e:	f108 0801 	add.w	r8, r8, #1
 8006d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	eba3 030a 	sub.w	r3, r3, sl
 8006d5c:	4543      	cmp	r3, r8
 8006d5e:	dcee      	bgt.n	8006d3e <_printf_float+0x386>
 8006d60:	e74a      	b.n	8006bf8 <_printf_float+0x240>
 8006d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d64:	2a01      	cmp	r2, #1
 8006d66:	dc01      	bgt.n	8006d6c <_printf_float+0x3b4>
 8006d68:	07db      	lsls	r3, r3, #31
 8006d6a:	d53a      	bpl.n	8006de2 <_printf_float+0x42a>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4642      	mov	r2, r8
 8006d70:	4631      	mov	r1, r6
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	f43f ae7b 	beq.w	8006a72 <_printf_float+0xba>
 8006d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f108 0801 	add.w	r8, r8, #1
 8006d8c:	f43f ae71 	beq.w	8006a72 <_printf_float+0xba>
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	2200      	movs	r2, #0
 8006d94:	f103 3aff 	add.w	sl, r3, #4294967295
 8006d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f7f9 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da2:	b9c8      	cbnz	r0, 8006dd8 <_printf_float+0x420>
 8006da4:	4653      	mov	r3, sl
 8006da6:	4642      	mov	r2, r8
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	d10e      	bne.n	8006dd0 <_printf_float+0x418>
 8006db2:	e65e      	b.n	8006a72 <_printf_float+0xba>
 8006db4:	2301      	movs	r3, #1
 8006db6:	4652      	mov	r2, sl
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f ae57 	beq.w	8006a72 <_printf_float+0xba>
 8006dc4:	f108 0801 	add.w	r8, r8, #1
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	4543      	cmp	r3, r8
 8006dce:	dcf1      	bgt.n	8006db4 <_printf_float+0x3fc>
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006dd6:	e6de      	b.n	8006b96 <_printf_float+0x1de>
 8006dd8:	f04f 0800 	mov.w	r8, #0
 8006ddc:	f104 0a1a 	add.w	sl, r4, #26
 8006de0:	e7f2      	b.n	8006dc8 <_printf_float+0x410>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e7df      	b.n	8006da6 <_printf_float+0x3ee>
 8006de6:	2301      	movs	r3, #1
 8006de8:	464a      	mov	r2, r9
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	f43f ae3e 	beq.w	8006a72 <_printf_float+0xba>
 8006df6:	f108 0801 	add.w	r8, r8, #1
 8006dfa:	68e3      	ldr	r3, [r4, #12]
 8006dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	4543      	cmp	r3, r8
 8006e02:	dcf0      	bgt.n	8006de6 <_printf_float+0x42e>
 8006e04:	e6fc      	b.n	8006c00 <_printf_float+0x248>
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	f104 0919 	add.w	r9, r4, #25
 8006e0e:	e7f4      	b.n	8006dfa <_printf_float+0x442>
 8006e10:	2900      	cmp	r1, #0
 8006e12:	f43f ae8b 	beq.w	8006b2c <_printf_float+0x174>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006e1c:	ab09      	add	r3, sp, #36	; 0x24
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	ec49 8b10 	vmov	d0, r8, r9
 8006e24:	6022      	str	r2, [r4, #0]
 8006e26:	f8cd a004 	str.w	sl, [sp, #4]
 8006e2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7ff fd2d 	bl	800688e <__cvt>
 8006e34:	4680      	mov	r8, r0
 8006e36:	e648      	b.n	8006aca <_printf_float+0x112>

08006e38 <_printf_common>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	4691      	mov	r9, r2
 8006e3e:	461f      	mov	r7, r3
 8006e40:	688a      	ldr	r2, [r1, #8]
 8006e42:	690b      	ldr	r3, [r1, #16]
 8006e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	bfb8      	it	lt
 8006e4c:	4613      	movlt	r3, r2
 8006e4e:	f8c9 3000 	str.w	r3, [r9]
 8006e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e56:	4606      	mov	r6, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	b112      	cbz	r2, 8006e62 <_printf_common+0x2a>
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f8c9 3000 	str.w	r3, [r9]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	0699      	lsls	r1, r3, #26
 8006e66:	bf42      	ittt	mi
 8006e68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e6c:	3302      	addmi	r3, #2
 8006e6e:	f8c9 3000 	strmi.w	r3, [r9]
 8006e72:	6825      	ldr	r5, [r4, #0]
 8006e74:	f015 0506 	ands.w	r5, r5, #6
 8006e78:	d107      	bne.n	8006e8a <_printf_common+0x52>
 8006e7a:	f104 0a19 	add.w	sl, r4, #25
 8006e7e:	68e3      	ldr	r3, [r4, #12]
 8006e80:	f8d9 2000 	ldr.w	r2, [r9]
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	42ab      	cmp	r3, r5
 8006e88:	dc28      	bgt.n	8006edc <_printf_common+0xa4>
 8006e8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e8e:	6822      	ldr	r2, [r4, #0]
 8006e90:	3300      	adds	r3, #0
 8006e92:	bf18      	it	ne
 8006e94:	2301      	movne	r3, #1
 8006e96:	0692      	lsls	r2, r2, #26
 8006e98:	d42d      	bmi.n	8006ef6 <_printf_common+0xbe>
 8006e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	47c0      	blx	r8
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d020      	beq.n	8006eea <_printf_common+0xb2>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	68e5      	ldr	r5, [r4, #12]
 8006eac:	f8d9 2000 	ldr.w	r2, [r9]
 8006eb0:	f003 0306 	and.w	r3, r3, #6
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	bf08      	it	eq
 8006eb8:	1aad      	subeq	r5, r5, r2
 8006eba:	68a3      	ldr	r3, [r4, #8]
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	bf0c      	ite	eq
 8006ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec4:	2500      	movne	r5, #0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfc4      	itt	gt
 8006eca:	1a9b      	subgt	r3, r3, r2
 8006ecc:	18ed      	addgt	r5, r5, r3
 8006ece:	f04f 0900 	mov.w	r9, #0
 8006ed2:	341a      	adds	r4, #26
 8006ed4:	454d      	cmp	r5, r9
 8006ed6:	d11a      	bne.n	8006f0e <_printf_common+0xd6>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e008      	b.n	8006eee <_printf_common+0xb6>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4652      	mov	r2, sl
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	47c0      	blx	r8
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d103      	bne.n	8006ef2 <_printf_common+0xba>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef2:	3501      	adds	r5, #1
 8006ef4:	e7c3      	b.n	8006e7e <_printf_common+0x46>
 8006ef6:	18e1      	adds	r1, r4, r3
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	2030      	movs	r0, #48	; 0x30
 8006efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f00:	4422      	add	r2, r4
 8006f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	e7c5      	b.n	8006e9a <_printf_common+0x62>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4622      	mov	r2, r4
 8006f12:	4639      	mov	r1, r7
 8006f14:	4630      	mov	r0, r6
 8006f16:	47c0      	blx	r8
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d0e6      	beq.n	8006eea <_printf_common+0xb2>
 8006f1c:	f109 0901 	add.w	r9, r9, #1
 8006f20:	e7d8      	b.n	8006ed4 <_printf_common+0x9c>
	...

08006f24 <_printf_i>:
 8006f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	7e09      	ldrb	r1, [r1, #24]
 8006f30:	b085      	sub	sp, #20
 8006f32:	296e      	cmp	r1, #110	; 0x6e
 8006f34:	4617      	mov	r7, r2
 8006f36:	4606      	mov	r6, r0
 8006f38:	4698      	mov	r8, r3
 8006f3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f3c:	f000 80b3 	beq.w	80070a6 <_printf_i+0x182>
 8006f40:	d822      	bhi.n	8006f88 <_printf_i+0x64>
 8006f42:	2963      	cmp	r1, #99	; 0x63
 8006f44:	d036      	beq.n	8006fb4 <_printf_i+0x90>
 8006f46:	d80a      	bhi.n	8006f5e <_printf_i+0x3a>
 8006f48:	2900      	cmp	r1, #0
 8006f4a:	f000 80b9 	beq.w	80070c0 <_printf_i+0x19c>
 8006f4e:	2958      	cmp	r1, #88	; 0x58
 8006f50:	f000 8083 	beq.w	800705a <_printf_i+0x136>
 8006f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f5c:	e032      	b.n	8006fc4 <_printf_i+0xa0>
 8006f5e:	2964      	cmp	r1, #100	; 0x64
 8006f60:	d001      	beq.n	8006f66 <_printf_i+0x42>
 8006f62:	2969      	cmp	r1, #105	; 0x69
 8006f64:	d1f6      	bne.n	8006f54 <_printf_i+0x30>
 8006f66:	6820      	ldr	r0, [r4, #0]
 8006f68:	6813      	ldr	r3, [r2, #0]
 8006f6a:	0605      	lsls	r5, r0, #24
 8006f6c:	f103 0104 	add.w	r1, r3, #4
 8006f70:	d52a      	bpl.n	8006fc8 <_printf_i+0xa4>
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6011      	str	r1, [r2, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da03      	bge.n	8006f82 <_printf_i+0x5e>
 8006f7a:	222d      	movs	r2, #45	; 0x2d
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f82:	486f      	ldr	r0, [pc, #444]	; (8007140 <_printf_i+0x21c>)
 8006f84:	220a      	movs	r2, #10
 8006f86:	e039      	b.n	8006ffc <_printf_i+0xd8>
 8006f88:	2973      	cmp	r1, #115	; 0x73
 8006f8a:	f000 809d 	beq.w	80070c8 <_printf_i+0x1a4>
 8006f8e:	d808      	bhi.n	8006fa2 <_printf_i+0x7e>
 8006f90:	296f      	cmp	r1, #111	; 0x6f
 8006f92:	d020      	beq.n	8006fd6 <_printf_i+0xb2>
 8006f94:	2970      	cmp	r1, #112	; 0x70
 8006f96:	d1dd      	bne.n	8006f54 <_printf_i+0x30>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	f043 0320 	orr.w	r3, r3, #32
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	e003      	b.n	8006faa <_printf_i+0x86>
 8006fa2:	2975      	cmp	r1, #117	; 0x75
 8006fa4:	d017      	beq.n	8006fd6 <_printf_i+0xb2>
 8006fa6:	2978      	cmp	r1, #120	; 0x78
 8006fa8:	d1d4      	bne.n	8006f54 <_printf_i+0x30>
 8006faa:	2378      	movs	r3, #120	; 0x78
 8006fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fb0:	4864      	ldr	r0, [pc, #400]	; (8007144 <_printf_i+0x220>)
 8006fb2:	e055      	b.n	8007060 <_printf_i+0x13c>
 8006fb4:	6813      	ldr	r3, [r2, #0]
 8006fb6:	1d19      	adds	r1, r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6011      	str	r1, [r2, #0]
 8006fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e08c      	b.n	80070e2 <_printf_i+0x1be>
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6011      	str	r1, [r2, #0]
 8006fcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fd0:	bf18      	it	ne
 8006fd2:	b21b      	sxthne	r3, r3
 8006fd4:	e7cf      	b.n	8006f76 <_printf_i+0x52>
 8006fd6:	6813      	ldr	r3, [r2, #0]
 8006fd8:	6825      	ldr	r5, [r4, #0]
 8006fda:	1d18      	adds	r0, r3, #4
 8006fdc:	6010      	str	r0, [r2, #0]
 8006fde:	0628      	lsls	r0, r5, #24
 8006fe0:	d501      	bpl.n	8006fe6 <_printf_i+0xc2>
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	e002      	b.n	8006fec <_printf_i+0xc8>
 8006fe6:	0668      	lsls	r0, r5, #25
 8006fe8:	d5fb      	bpl.n	8006fe2 <_printf_i+0xbe>
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	4854      	ldr	r0, [pc, #336]	; (8007140 <_printf_i+0x21c>)
 8006fee:	296f      	cmp	r1, #111	; 0x6f
 8006ff0:	bf14      	ite	ne
 8006ff2:	220a      	movne	r2, #10
 8006ff4:	2208      	moveq	r2, #8
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ffc:	6865      	ldr	r5, [r4, #4]
 8006ffe:	60a5      	str	r5, [r4, #8]
 8007000:	2d00      	cmp	r5, #0
 8007002:	f2c0 8095 	blt.w	8007130 <_printf_i+0x20c>
 8007006:	6821      	ldr	r1, [r4, #0]
 8007008:	f021 0104 	bic.w	r1, r1, #4
 800700c:	6021      	str	r1, [r4, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d13d      	bne.n	800708e <_printf_i+0x16a>
 8007012:	2d00      	cmp	r5, #0
 8007014:	f040 808e 	bne.w	8007134 <_printf_i+0x210>
 8007018:	4665      	mov	r5, ip
 800701a:	2a08      	cmp	r2, #8
 800701c:	d10b      	bne.n	8007036 <_printf_i+0x112>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	07db      	lsls	r3, r3, #31
 8007022:	d508      	bpl.n	8007036 <_printf_i+0x112>
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	6862      	ldr	r2, [r4, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	bfde      	ittt	le
 800702c:	2330      	movle	r3, #48	; 0x30
 800702e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007032:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007036:	ebac 0305 	sub.w	r3, ip, r5
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	f8cd 8000 	str.w	r8, [sp]
 8007040:	463b      	mov	r3, r7
 8007042:	aa03      	add	r2, sp, #12
 8007044:	4621      	mov	r1, r4
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff fef6 	bl	8006e38 <_printf_common>
 800704c:	3001      	adds	r0, #1
 800704e:	d14d      	bne.n	80070ec <_printf_i+0x1c8>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	b005      	add	sp, #20
 8007056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800705a:	4839      	ldr	r0, [pc, #228]	; (8007140 <_printf_i+0x21c>)
 800705c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007060:	6813      	ldr	r3, [r2, #0]
 8007062:	6821      	ldr	r1, [r4, #0]
 8007064:	1d1d      	adds	r5, r3, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6015      	str	r5, [r2, #0]
 800706a:	060a      	lsls	r2, r1, #24
 800706c:	d50b      	bpl.n	8007086 <_printf_i+0x162>
 800706e:	07ca      	lsls	r2, r1, #31
 8007070:	bf44      	itt	mi
 8007072:	f041 0120 	orrmi.w	r1, r1, #32
 8007076:	6021      	strmi	r1, [r4, #0]
 8007078:	b91b      	cbnz	r3, 8007082 <_printf_i+0x15e>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	f022 0220 	bic.w	r2, r2, #32
 8007080:	6022      	str	r2, [r4, #0]
 8007082:	2210      	movs	r2, #16
 8007084:	e7b7      	b.n	8006ff6 <_printf_i+0xd2>
 8007086:	064d      	lsls	r5, r1, #25
 8007088:	bf48      	it	mi
 800708a:	b29b      	uxthmi	r3, r3
 800708c:	e7ef      	b.n	800706e <_printf_i+0x14a>
 800708e:	4665      	mov	r5, ip
 8007090:	fbb3 f1f2 	udiv	r1, r3, r2
 8007094:	fb02 3311 	mls	r3, r2, r1, r3
 8007098:	5cc3      	ldrb	r3, [r0, r3]
 800709a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800709e:	460b      	mov	r3, r1
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d1f5      	bne.n	8007090 <_printf_i+0x16c>
 80070a4:	e7b9      	b.n	800701a <_printf_i+0xf6>
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	6825      	ldr	r5, [r4, #0]
 80070aa:	6961      	ldr	r1, [r4, #20]
 80070ac:	1d18      	adds	r0, r3, #4
 80070ae:	6010      	str	r0, [r2, #0]
 80070b0:	0628      	lsls	r0, r5, #24
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	d501      	bpl.n	80070ba <_printf_i+0x196>
 80070b6:	6019      	str	r1, [r3, #0]
 80070b8:	e002      	b.n	80070c0 <_printf_i+0x19c>
 80070ba:	066a      	lsls	r2, r5, #25
 80070bc:	d5fb      	bpl.n	80070b6 <_printf_i+0x192>
 80070be:	8019      	strh	r1, [r3, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	4665      	mov	r5, ip
 80070c6:	e7b9      	b.n	800703c <_printf_i+0x118>
 80070c8:	6813      	ldr	r3, [r2, #0]
 80070ca:	1d19      	adds	r1, r3, #4
 80070cc:	6011      	str	r1, [r2, #0]
 80070ce:	681d      	ldr	r5, [r3, #0]
 80070d0:	6862      	ldr	r2, [r4, #4]
 80070d2:	2100      	movs	r1, #0
 80070d4:	4628      	mov	r0, r5
 80070d6:	f7f9 f883 	bl	80001e0 <memchr>
 80070da:	b108      	cbz	r0, 80070e0 <_printf_i+0x1bc>
 80070dc:	1b40      	subs	r0, r0, r5
 80070de:	6060      	str	r0, [r4, #4]
 80070e0:	6863      	ldr	r3, [r4, #4]
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	2300      	movs	r3, #0
 80070e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ea:	e7a7      	b.n	800703c <_printf_i+0x118>
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	462a      	mov	r2, r5
 80070f0:	4639      	mov	r1, r7
 80070f2:	4630      	mov	r0, r6
 80070f4:	47c0      	blx	r8
 80070f6:	3001      	adds	r0, #1
 80070f8:	d0aa      	beq.n	8007050 <_printf_i+0x12c>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	079b      	lsls	r3, r3, #30
 80070fe:	d413      	bmi.n	8007128 <_printf_i+0x204>
 8007100:	68e0      	ldr	r0, [r4, #12]
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	4298      	cmp	r0, r3
 8007106:	bfb8      	it	lt
 8007108:	4618      	movlt	r0, r3
 800710a:	e7a3      	b.n	8007054 <_printf_i+0x130>
 800710c:	2301      	movs	r3, #1
 800710e:	464a      	mov	r2, r9
 8007110:	4639      	mov	r1, r7
 8007112:	4630      	mov	r0, r6
 8007114:	47c0      	blx	r8
 8007116:	3001      	adds	r0, #1
 8007118:	d09a      	beq.n	8007050 <_printf_i+0x12c>
 800711a:	3501      	adds	r5, #1
 800711c:	68e3      	ldr	r3, [r4, #12]
 800711e:	9a03      	ldr	r2, [sp, #12]
 8007120:	1a9b      	subs	r3, r3, r2
 8007122:	42ab      	cmp	r3, r5
 8007124:	dcf2      	bgt.n	800710c <_printf_i+0x1e8>
 8007126:	e7eb      	b.n	8007100 <_printf_i+0x1dc>
 8007128:	2500      	movs	r5, #0
 800712a:	f104 0919 	add.w	r9, r4, #25
 800712e:	e7f5      	b.n	800711c <_printf_i+0x1f8>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1ac      	bne.n	800708e <_printf_i+0x16a>
 8007134:	7803      	ldrb	r3, [r0, #0]
 8007136:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800713a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800713e:	e76c      	b.n	800701a <_printf_i+0xf6>
 8007140:	0800b26e 	.word	0x0800b26e
 8007144:	0800b27f 	.word	0x0800b27f

08007148 <sniprintf>:
 8007148:	b40c      	push	{r2, r3}
 800714a:	b530      	push	{r4, r5, lr}
 800714c:	4b17      	ldr	r3, [pc, #92]	; (80071ac <sniprintf+0x64>)
 800714e:	1e0c      	subs	r4, r1, #0
 8007150:	b09d      	sub	sp, #116	; 0x74
 8007152:	681d      	ldr	r5, [r3, #0]
 8007154:	da08      	bge.n	8007168 <sniprintf+0x20>
 8007156:	238b      	movs	r3, #139	; 0x8b
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b01d      	add	sp, #116	; 0x74
 8007160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007164:	b002      	add	sp, #8
 8007166:	4770      	bx	lr
 8007168:	f44f 7302 	mov.w	r3, #520	; 0x208
 800716c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007170:	bf14      	ite	ne
 8007172:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007176:	4623      	moveq	r3, r4
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	9307      	str	r3, [sp, #28]
 800717c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007180:	9002      	str	r0, [sp, #8]
 8007182:	9006      	str	r0, [sp, #24]
 8007184:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007188:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800718a:	ab21      	add	r3, sp, #132	; 0x84
 800718c:	a902      	add	r1, sp, #8
 800718e:	4628      	mov	r0, r5
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	f001 fa5d 	bl	8008650 <_svfiprintf_r>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	bfbc      	itt	lt
 800719a:	238b      	movlt	r3, #139	; 0x8b
 800719c:	602b      	strlt	r3, [r5, #0]
 800719e:	2c00      	cmp	r4, #0
 80071a0:	d0dd      	beq.n	800715e <sniprintf+0x16>
 80071a2:	9b02      	ldr	r3, [sp, #8]
 80071a4:	2200      	movs	r2, #0
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e7d9      	b.n	800715e <sniprintf+0x16>
 80071aa:	bf00      	nop
 80071ac:	20000098 	.word	0x20000098

080071b0 <quorem>:
 80071b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	6903      	ldr	r3, [r0, #16]
 80071b6:	690c      	ldr	r4, [r1, #16]
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	4680      	mov	r8, r0
 80071bc:	f2c0 8082 	blt.w	80072c4 <quorem+0x114>
 80071c0:	3c01      	subs	r4, #1
 80071c2:	f101 0714 	add.w	r7, r1, #20
 80071c6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80071ca:	f100 0614 	add.w	r6, r0, #20
 80071ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80071d6:	eb06 030c 	add.w	r3, r6, ip
 80071da:	3501      	adds	r5, #1
 80071dc:	eb07 090c 	add.w	r9, r7, ip
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	fbb0 f5f5 	udiv	r5, r0, r5
 80071e6:	b395      	cbz	r5, 800724e <quorem+0x9e>
 80071e8:	f04f 0a00 	mov.w	sl, #0
 80071ec:	4638      	mov	r0, r7
 80071ee:	46b6      	mov	lr, r6
 80071f0:	46d3      	mov	fp, sl
 80071f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80071f6:	b293      	uxth	r3, r2
 80071f8:	fb05 a303 	mla	r3, r5, r3, sl
 80071fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007200:	b29b      	uxth	r3, r3
 8007202:	ebab 0303 	sub.w	r3, fp, r3
 8007206:	0c12      	lsrs	r2, r2, #16
 8007208:	f8de b000 	ldr.w	fp, [lr]
 800720c:	fb05 a202 	mla	r2, r5, r2, sl
 8007210:	fa13 f38b 	uxtah	r3, r3, fp
 8007214:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007218:	fa1f fb82 	uxth.w	fp, r2
 800721c:	f8de 2000 	ldr.w	r2, [lr]
 8007220:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007228:	b29b      	uxth	r3, r3
 800722a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800722e:	4581      	cmp	r9, r0
 8007230:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007234:	f84e 3b04 	str.w	r3, [lr], #4
 8007238:	d2db      	bcs.n	80071f2 <quorem+0x42>
 800723a:	f856 300c 	ldr.w	r3, [r6, ip]
 800723e:	b933      	cbnz	r3, 800724e <quorem+0x9e>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	3b04      	subs	r3, #4
 8007244:	429e      	cmp	r6, r3
 8007246:	461a      	mov	r2, r3
 8007248:	d330      	bcc.n	80072ac <quorem+0xfc>
 800724a:	f8c8 4010 	str.w	r4, [r8, #16]
 800724e:	4640      	mov	r0, r8
 8007250:	f001 f828 	bl	80082a4 <__mcmp>
 8007254:	2800      	cmp	r0, #0
 8007256:	db25      	blt.n	80072a4 <quorem+0xf4>
 8007258:	3501      	adds	r5, #1
 800725a:	4630      	mov	r0, r6
 800725c:	f04f 0c00 	mov.w	ip, #0
 8007260:	f857 2b04 	ldr.w	r2, [r7], #4
 8007264:	f8d0 e000 	ldr.w	lr, [r0]
 8007268:	b293      	uxth	r3, r2
 800726a:	ebac 0303 	sub.w	r3, ip, r3
 800726e:	0c12      	lsrs	r2, r2, #16
 8007270:	fa13 f38e 	uxtah	r3, r3, lr
 8007274:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800727c:	b29b      	uxth	r3, r3
 800727e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007282:	45b9      	cmp	r9, r7
 8007284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007288:	f840 3b04 	str.w	r3, [r0], #4
 800728c:	d2e8      	bcs.n	8007260 <quorem+0xb0>
 800728e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007292:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007296:	b92a      	cbnz	r2, 80072a4 <quorem+0xf4>
 8007298:	3b04      	subs	r3, #4
 800729a:	429e      	cmp	r6, r3
 800729c:	461a      	mov	r2, r3
 800729e:	d30b      	bcc.n	80072b8 <quorem+0x108>
 80072a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80072a4:	4628      	mov	r0, r5
 80072a6:	b003      	add	sp, #12
 80072a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d1ca      	bne.n	800724a <quorem+0x9a>
 80072b4:	3c01      	subs	r4, #1
 80072b6:	e7c5      	b.n	8007244 <quorem+0x94>
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	3b04      	subs	r3, #4
 80072bc:	2a00      	cmp	r2, #0
 80072be:	d1ef      	bne.n	80072a0 <quorem+0xf0>
 80072c0:	3c01      	subs	r4, #1
 80072c2:	e7ea      	b.n	800729a <quorem+0xea>
 80072c4:	2000      	movs	r0, #0
 80072c6:	e7ee      	b.n	80072a6 <quorem+0xf6>

080072c8 <_dtoa_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	ec57 6b10 	vmov	r6, r7, d0
 80072d0:	b097      	sub	sp, #92	; 0x5c
 80072d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072d4:	9106      	str	r1, [sp, #24]
 80072d6:	4604      	mov	r4, r0
 80072d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80072da:	9312      	str	r3, [sp, #72]	; 0x48
 80072dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072e0:	e9cd 6700 	strd	r6, r7, [sp]
 80072e4:	b93d      	cbnz	r5, 80072f6 <_dtoa_r+0x2e>
 80072e6:	2010      	movs	r0, #16
 80072e8:	f000 fdb4 	bl	8007e54 <malloc>
 80072ec:	6260      	str	r0, [r4, #36]	; 0x24
 80072ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072f2:	6005      	str	r5, [r0, #0]
 80072f4:	60c5      	str	r5, [r0, #12]
 80072f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f8:	6819      	ldr	r1, [r3, #0]
 80072fa:	b151      	cbz	r1, 8007312 <_dtoa_r+0x4a>
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	604a      	str	r2, [r1, #4]
 8007300:	2301      	movs	r3, #1
 8007302:	4093      	lsls	r3, r2
 8007304:	608b      	str	r3, [r1, #8]
 8007306:	4620      	mov	r0, r4
 8007308:	f000 fdeb 	bl	8007ee2 <_Bfree>
 800730c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	1e3b      	subs	r3, r7, #0
 8007314:	bfbb      	ittet	lt
 8007316:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800731a:	9301      	strlt	r3, [sp, #4]
 800731c:	2300      	movge	r3, #0
 800731e:	2201      	movlt	r2, #1
 8007320:	bfac      	ite	ge
 8007322:	f8c8 3000 	strge.w	r3, [r8]
 8007326:	f8c8 2000 	strlt.w	r2, [r8]
 800732a:	4baf      	ldr	r3, [pc, #700]	; (80075e8 <_dtoa_r+0x320>)
 800732c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007330:	ea33 0308 	bics.w	r3, r3, r8
 8007334:	d114      	bne.n	8007360 <_dtoa_r+0x98>
 8007336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007338:	f242 730f 	movw	r3, #9999	; 0x270f
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	9b00      	ldr	r3, [sp, #0]
 8007340:	b923      	cbnz	r3, 800734c <_dtoa_r+0x84>
 8007342:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007346:	2800      	cmp	r0, #0
 8007348:	f000 8542 	beq.w	8007dd0 <_dtoa_r+0xb08>
 800734c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800734e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80075fc <_dtoa_r+0x334>
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8544 	beq.w	8007de0 <_dtoa_r+0xb18>
 8007358:	f10b 0303 	add.w	r3, fp, #3
 800735c:	f000 bd3e 	b.w	8007ddc <_dtoa_r+0xb14>
 8007360:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f7f9 fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007370:	4681      	mov	r9, r0
 8007372:	b168      	cbz	r0, 8007390 <_dtoa_r+0xc8>
 8007374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007376:	2301      	movs	r3, #1
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8524 	beq.w	8007dca <_dtoa_r+0xb02>
 8007382:	4b9a      	ldr	r3, [pc, #616]	; (80075ec <_dtoa_r+0x324>)
 8007384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007386:	f103 3bff 	add.w	fp, r3, #4294967295
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	f000 bd28 	b.w	8007de0 <_dtoa_r+0xb18>
 8007390:	aa14      	add	r2, sp, #80	; 0x50
 8007392:	a915      	add	r1, sp, #84	; 0x54
 8007394:	ec47 6b10 	vmov	d0, r6, r7
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fffa 	bl	8008392 <__d2b>
 800739e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80073a2:	9004      	str	r0, [sp, #16]
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	d07c      	beq.n	80074a2 <_dtoa_r+0x1da>
 80073a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80073b0:	46b2      	mov	sl, r6
 80073b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80073b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80073be:	2200      	movs	r2, #0
 80073c0:	4b8b      	ldr	r3, [pc, #556]	; (80075f0 <_dtoa_r+0x328>)
 80073c2:	4650      	mov	r0, sl
 80073c4:	4659      	mov	r1, fp
 80073c6:	f7f8 ff5f 	bl	8000288 <__aeabi_dsub>
 80073ca:	a381      	add	r3, pc, #516	; (adr r3, 80075d0 <_dtoa_r+0x308>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f7f9 f912 	bl	80005f8 <__aeabi_dmul>
 80073d4:	a380      	add	r3, pc, #512	; (adr r3, 80075d8 <_dtoa_r+0x310>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f7f8 ff57 	bl	800028c <__adddf3>
 80073de:	4606      	mov	r6, r0
 80073e0:	4628      	mov	r0, r5
 80073e2:	460f      	mov	r7, r1
 80073e4:	f7f9 f89e 	bl	8000524 <__aeabi_i2d>
 80073e8:	a37d      	add	r3, pc, #500	; (adr r3, 80075e0 <_dtoa_r+0x318>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f9 f903 	bl	80005f8 <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4630      	mov	r0, r6
 80073f8:	4639      	mov	r1, r7
 80073fa:	f7f8 ff47 	bl	800028c <__adddf3>
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	f7f9 fba9 	bl	8000b58 <__aeabi_d2iz>
 8007406:	2200      	movs	r2, #0
 8007408:	4682      	mov	sl, r0
 800740a:	2300      	movs	r3, #0
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	f7f9 fb64 	bl	8000adc <__aeabi_dcmplt>
 8007414:	b148      	cbz	r0, 800742a <_dtoa_r+0x162>
 8007416:	4650      	mov	r0, sl
 8007418:	f7f9 f884 	bl	8000524 <__aeabi_i2d>
 800741c:	4632      	mov	r2, r6
 800741e:	463b      	mov	r3, r7
 8007420:	f7f9 fb52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007424:	b908      	cbnz	r0, 800742a <_dtoa_r+0x162>
 8007426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800742a:	f1ba 0f16 	cmp.w	sl, #22
 800742e:	d859      	bhi.n	80074e4 <_dtoa_r+0x21c>
 8007430:	4970      	ldr	r1, [pc, #448]	; (80075f4 <_dtoa_r+0x32c>)
 8007432:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800743a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800743e:	f7f9 fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 8007442:	2800      	cmp	r0, #0
 8007444:	d050      	beq.n	80074e8 <_dtoa_r+0x220>
 8007446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800744a:	2300      	movs	r3, #0
 800744c:	930f      	str	r3, [sp, #60]	; 0x3c
 800744e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007450:	1b5d      	subs	r5, r3, r5
 8007452:	f1b5 0801 	subs.w	r8, r5, #1
 8007456:	bf49      	itett	mi
 8007458:	f1c5 0301 	rsbmi	r3, r5, #1
 800745c:	2300      	movpl	r3, #0
 800745e:	9305      	strmi	r3, [sp, #20]
 8007460:	f04f 0800 	movmi.w	r8, #0
 8007464:	bf58      	it	pl
 8007466:	9305      	strpl	r3, [sp, #20]
 8007468:	f1ba 0f00 	cmp.w	sl, #0
 800746c:	db3e      	blt.n	80074ec <_dtoa_r+0x224>
 800746e:	2300      	movs	r3, #0
 8007470:	44d0      	add	r8, sl
 8007472:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	9b06      	ldr	r3, [sp, #24]
 800747a:	2b09      	cmp	r3, #9
 800747c:	f200 8090 	bhi.w	80075a0 <_dtoa_r+0x2d8>
 8007480:	2b05      	cmp	r3, #5
 8007482:	bfc4      	itt	gt
 8007484:	3b04      	subgt	r3, #4
 8007486:	9306      	strgt	r3, [sp, #24]
 8007488:	9b06      	ldr	r3, [sp, #24]
 800748a:	f1a3 0302 	sub.w	r3, r3, #2
 800748e:	bfcc      	ite	gt
 8007490:	2500      	movgt	r5, #0
 8007492:	2501      	movle	r5, #1
 8007494:	2b03      	cmp	r3, #3
 8007496:	f200 808f 	bhi.w	80075b8 <_dtoa_r+0x2f0>
 800749a:	e8df f003 	tbb	[pc, r3]
 800749e:	7f7d      	.short	0x7f7d
 80074a0:	7131      	.short	0x7131
 80074a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80074a6:	441d      	add	r5, r3
 80074a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80074ac:	2820      	cmp	r0, #32
 80074ae:	dd13      	ble.n	80074d8 <_dtoa_r+0x210>
 80074b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	fa08 f800 	lsl.w	r8, r8, r0
 80074ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80074be:	fa23 f000 	lsr.w	r0, r3, r0
 80074c2:	ea48 0000 	orr.w	r0, r8, r0
 80074c6:	f7f9 f81d 	bl	8000504 <__aeabi_ui2d>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4682      	mov	sl, r0
 80074ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80074d2:	3d01      	subs	r5, #1
 80074d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80074d6:	e772      	b.n	80073be <_dtoa_r+0xf6>
 80074d8:	9b00      	ldr	r3, [sp, #0]
 80074da:	f1c0 0020 	rsb	r0, r0, #32
 80074de:	fa03 f000 	lsl.w	r0, r3, r0
 80074e2:	e7f0      	b.n	80074c6 <_dtoa_r+0x1fe>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e7b1      	b.n	800744c <_dtoa_r+0x184>
 80074e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80074ea:	e7b0      	b.n	800744e <_dtoa_r+0x186>
 80074ec:	9b05      	ldr	r3, [sp, #20]
 80074ee:	eba3 030a 	sub.w	r3, r3, sl
 80074f2:	9305      	str	r3, [sp, #20]
 80074f4:	f1ca 0300 	rsb	r3, sl, #0
 80074f8:	9307      	str	r3, [sp, #28]
 80074fa:	2300      	movs	r3, #0
 80074fc:	930e      	str	r3, [sp, #56]	; 0x38
 80074fe:	e7bb      	b.n	8007478 <_dtoa_r+0x1b0>
 8007500:	2301      	movs	r3, #1
 8007502:	930a      	str	r3, [sp, #40]	; 0x28
 8007504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007506:	2b00      	cmp	r3, #0
 8007508:	dd59      	ble.n	80075be <_dtoa_r+0x2f6>
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	4699      	mov	r9, r3
 800750e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007510:	2200      	movs	r2, #0
 8007512:	6072      	str	r2, [r6, #4]
 8007514:	2204      	movs	r2, #4
 8007516:	f102 0014 	add.w	r0, r2, #20
 800751a:	4298      	cmp	r0, r3
 800751c:	6871      	ldr	r1, [r6, #4]
 800751e:	d953      	bls.n	80075c8 <_dtoa_r+0x300>
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fcaa 	bl	8007e7a <_Balloc>
 8007526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007528:	6030      	str	r0, [r6, #0]
 800752a:	f1b9 0f0e 	cmp.w	r9, #14
 800752e:	f8d3 b000 	ldr.w	fp, [r3]
 8007532:	f200 80e6 	bhi.w	8007702 <_dtoa_r+0x43a>
 8007536:	2d00      	cmp	r5, #0
 8007538:	f000 80e3 	beq.w	8007702 <_dtoa_r+0x43a>
 800753c:	ed9d 7b00 	vldr	d7, [sp]
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007548:	dd74      	ble.n	8007634 <_dtoa_r+0x36c>
 800754a:	4a2a      	ldr	r2, [pc, #168]	; (80075f4 <_dtoa_r+0x32c>)
 800754c:	f00a 030f 	and.w	r3, sl, #15
 8007550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007554:	ed93 7b00 	vldr	d7, [r3]
 8007558:	ea4f 162a 	mov.w	r6, sl, asr #4
 800755c:	06f0      	lsls	r0, r6, #27
 800755e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007562:	d565      	bpl.n	8007630 <_dtoa_r+0x368>
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <_dtoa_r+0x330>)
 8007566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800756a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800756e:	f7f9 f96d 	bl	800084c <__aeabi_ddiv>
 8007572:	e9cd 0100 	strd	r0, r1, [sp]
 8007576:	f006 060f 	and.w	r6, r6, #15
 800757a:	2503      	movs	r5, #3
 800757c:	4f1e      	ldr	r7, [pc, #120]	; (80075f8 <_dtoa_r+0x330>)
 800757e:	e04c      	b.n	800761a <_dtoa_r+0x352>
 8007580:	2301      	movs	r3, #1
 8007582:	930a      	str	r3, [sp, #40]	; 0x28
 8007584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007586:	4453      	add	r3, sl
 8007588:	f103 0901 	add.w	r9, r3, #1
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	464b      	mov	r3, r9
 8007590:	2b01      	cmp	r3, #1
 8007592:	bfb8      	it	lt
 8007594:	2301      	movlt	r3, #1
 8007596:	e7ba      	b.n	800750e <_dtoa_r+0x246>
 8007598:	2300      	movs	r3, #0
 800759a:	e7b2      	b.n	8007502 <_dtoa_r+0x23a>
 800759c:	2300      	movs	r3, #0
 800759e:	e7f0      	b.n	8007582 <_dtoa_r+0x2ba>
 80075a0:	2501      	movs	r5, #1
 80075a2:	2300      	movs	r3, #0
 80075a4:	9306      	str	r3, [sp, #24]
 80075a6:	950a      	str	r5, [sp, #40]	; 0x28
 80075a8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ac:	9302      	str	r3, [sp, #8]
 80075ae:	4699      	mov	r9, r3
 80075b0:	2200      	movs	r2, #0
 80075b2:	2312      	movs	r3, #18
 80075b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80075b6:	e7aa      	b.n	800750e <_dtoa_r+0x246>
 80075b8:	2301      	movs	r3, #1
 80075ba:	930a      	str	r3, [sp, #40]	; 0x28
 80075bc:	e7f4      	b.n	80075a8 <_dtoa_r+0x2e0>
 80075be:	2301      	movs	r3, #1
 80075c0:	9302      	str	r3, [sp, #8]
 80075c2:	4699      	mov	r9, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	e7f5      	b.n	80075b4 <_dtoa_r+0x2ec>
 80075c8:	3101      	adds	r1, #1
 80075ca:	6071      	str	r1, [r6, #4]
 80075cc:	0052      	lsls	r2, r2, #1
 80075ce:	e7a2      	b.n	8007516 <_dtoa_r+0x24e>
 80075d0:	636f4361 	.word	0x636f4361
 80075d4:	3fd287a7 	.word	0x3fd287a7
 80075d8:	8b60c8b3 	.word	0x8b60c8b3
 80075dc:	3fc68a28 	.word	0x3fc68a28
 80075e0:	509f79fb 	.word	0x509f79fb
 80075e4:	3fd34413 	.word	0x3fd34413
 80075e8:	7ff00000 	.word	0x7ff00000
 80075ec:	0800b26d 	.word	0x0800b26d
 80075f0:	3ff80000 	.word	0x3ff80000
 80075f4:	0800b2c8 	.word	0x0800b2c8
 80075f8:	0800b2a0 	.word	0x0800b2a0
 80075fc:	0800b299 	.word	0x0800b299
 8007600:	07f1      	lsls	r1, r6, #31
 8007602:	d508      	bpl.n	8007616 <_dtoa_r+0x34e>
 8007604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760c:	f7f8 fff4 	bl	80005f8 <__aeabi_dmul>
 8007610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007614:	3501      	adds	r5, #1
 8007616:	1076      	asrs	r6, r6, #1
 8007618:	3708      	adds	r7, #8
 800761a:	2e00      	cmp	r6, #0
 800761c:	d1f0      	bne.n	8007600 <_dtoa_r+0x338>
 800761e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007626:	f7f9 f911 	bl	800084c <__aeabi_ddiv>
 800762a:	e9cd 0100 	strd	r0, r1, [sp]
 800762e:	e01a      	b.n	8007666 <_dtoa_r+0x39e>
 8007630:	2502      	movs	r5, #2
 8007632:	e7a3      	b.n	800757c <_dtoa_r+0x2b4>
 8007634:	f000 80a0 	beq.w	8007778 <_dtoa_r+0x4b0>
 8007638:	f1ca 0600 	rsb	r6, sl, #0
 800763c:	4b9f      	ldr	r3, [pc, #636]	; (80078bc <_dtoa_r+0x5f4>)
 800763e:	4fa0      	ldr	r7, [pc, #640]	; (80078c0 <_dtoa_r+0x5f8>)
 8007640:	f006 020f 	and.w	r2, r6, #15
 8007644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007650:	f7f8 ffd2 	bl	80005f8 <__aeabi_dmul>
 8007654:	e9cd 0100 	strd	r0, r1, [sp]
 8007658:	1136      	asrs	r6, r6, #4
 800765a:	2300      	movs	r3, #0
 800765c:	2502      	movs	r5, #2
 800765e:	2e00      	cmp	r6, #0
 8007660:	d17f      	bne.n	8007762 <_dtoa_r+0x49a>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e1      	bne.n	800762a <_dtoa_r+0x362>
 8007666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8087 	beq.w	800777c <_dtoa_r+0x4b4>
 800766e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007672:	2200      	movs	r2, #0
 8007674:	4b93      	ldr	r3, [pc, #588]	; (80078c4 <_dtoa_r+0x5fc>)
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7f9 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	d07c      	beq.n	800777c <_dtoa_r+0x4b4>
 8007682:	f1b9 0f00 	cmp.w	r9, #0
 8007686:	d079      	beq.n	800777c <_dtoa_r+0x4b4>
 8007688:	9b02      	ldr	r3, [sp, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd35      	ble.n	80076fa <_dtoa_r+0x432>
 800768e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007692:	9308      	str	r3, [sp, #32]
 8007694:	4639      	mov	r1, r7
 8007696:	2200      	movs	r2, #0
 8007698:	4b8b      	ldr	r3, [pc, #556]	; (80078c8 <_dtoa_r+0x600>)
 800769a:	4630      	mov	r0, r6
 800769c:	f7f8 ffac 	bl	80005f8 <__aeabi_dmul>
 80076a0:	e9cd 0100 	strd	r0, r1, [sp]
 80076a4:	9f02      	ldr	r7, [sp, #8]
 80076a6:	3501      	adds	r5, #1
 80076a8:	4628      	mov	r0, r5
 80076aa:	f7f8 ff3b 	bl	8000524 <__aeabi_i2d>
 80076ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b2:	f7f8 ffa1 	bl	80005f8 <__aeabi_dmul>
 80076b6:	2200      	movs	r2, #0
 80076b8:	4b84      	ldr	r3, [pc, #528]	; (80078cc <_dtoa_r+0x604>)
 80076ba:	f7f8 fde7 	bl	800028c <__adddf3>
 80076be:	4605      	mov	r5, r0
 80076c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80076c4:	2f00      	cmp	r7, #0
 80076c6:	d15d      	bne.n	8007784 <_dtoa_r+0x4bc>
 80076c8:	2200      	movs	r2, #0
 80076ca:	4b81      	ldr	r3, [pc, #516]	; (80078d0 <_dtoa_r+0x608>)
 80076cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076d0:	f7f8 fdda 	bl	8000288 <__aeabi_dsub>
 80076d4:	462a      	mov	r2, r5
 80076d6:	4633      	mov	r3, r6
 80076d8:	e9cd 0100 	strd	r0, r1, [sp]
 80076dc:	f7f9 fa1c 	bl	8000b18 <__aeabi_dcmpgt>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f040 8288 	bne.w	8007bf6 <_dtoa_r+0x92e>
 80076e6:	462a      	mov	r2, r5
 80076e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f0:	f7f9 f9f4 	bl	8000adc <__aeabi_dcmplt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f040 827c 	bne.w	8007bf2 <_dtoa_r+0x92a>
 80076fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076fe:	e9cd 2300 	strd	r2, r3, [sp]
 8007702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007704:	2b00      	cmp	r3, #0
 8007706:	f2c0 8150 	blt.w	80079aa <_dtoa_r+0x6e2>
 800770a:	f1ba 0f0e 	cmp.w	sl, #14
 800770e:	f300 814c 	bgt.w	80079aa <_dtoa_r+0x6e2>
 8007712:	4b6a      	ldr	r3, [pc, #424]	; (80078bc <_dtoa_r+0x5f4>)
 8007714:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007718:	ed93 7b00 	vldr	d7, [r3]
 800771c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007724:	f280 80d8 	bge.w	80078d8 <_dtoa_r+0x610>
 8007728:	f1b9 0f00 	cmp.w	r9, #0
 800772c:	f300 80d4 	bgt.w	80078d8 <_dtoa_r+0x610>
 8007730:	f040 825e 	bne.w	8007bf0 <_dtoa_r+0x928>
 8007734:	2200      	movs	r2, #0
 8007736:	4b66      	ldr	r3, [pc, #408]	; (80078d0 <_dtoa_r+0x608>)
 8007738:	ec51 0b17 	vmov	r0, r1, d7
 800773c:	f7f8 ff5c 	bl	80005f8 <__aeabi_dmul>
 8007740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007744:	f7f9 f9de 	bl	8000b04 <__aeabi_dcmpge>
 8007748:	464f      	mov	r7, r9
 800774a:	464e      	mov	r6, r9
 800774c:	2800      	cmp	r0, #0
 800774e:	f040 8234 	bne.w	8007bba <_dtoa_r+0x8f2>
 8007752:	2331      	movs	r3, #49	; 0x31
 8007754:	f10b 0501 	add.w	r5, fp, #1
 8007758:	f88b 3000 	strb.w	r3, [fp]
 800775c:	f10a 0a01 	add.w	sl, sl, #1
 8007760:	e22f      	b.n	8007bc2 <_dtoa_r+0x8fa>
 8007762:	07f2      	lsls	r2, r6, #31
 8007764:	d505      	bpl.n	8007772 <_dtoa_r+0x4aa>
 8007766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776a:	f7f8 ff45 	bl	80005f8 <__aeabi_dmul>
 800776e:	3501      	adds	r5, #1
 8007770:	2301      	movs	r3, #1
 8007772:	1076      	asrs	r6, r6, #1
 8007774:	3708      	adds	r7, #8
 8007776:	e772      	b.n	800765e <_dtoa_r+0x396>
 8007778:	2502      	movs	r5, #2
 800777a:	e774      	b.n	8007666 <_dtoa_r+0x39e>
 800777c:	f8cd a020 	str.w	sl, [sp, #32]
 8007780:	464f      	mov	r7, r9
 8007782:	e791      	b.n	80076a8 <_dtoa_r+0x3e0>
 8007784:	4b4d      	ldr	r3, [pc, #308]	; (80078bc <_dtoa_r+0x5f4>)
 8007786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800778a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800778e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007790:	2b00      	cmp	r3, #0
 8007792:	d047      	beq.n	8007824 <_dtoa_r+0x55c>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	2000      	movs	r0, #0
 800779a:	494e      	ldr	r1, [pc, #312]	; (80078d4 <_dtoa_r+0x60c>)
 800779c:	f7f9 f856 	bl	800084c <__aeabi_ddiv>
 80077a0:	462a      	mov	r2, r5
 80077a2:	4633      	mov	r3, r6
 80077a4:	f7f8 fd70 	bl	8000288 <__aeabi_dsub>
 80077a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077ac:	465d      	mov	r5, fp
 80077ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b2:	f7f9 f9d1 	bl	8000b58 <__aeabi_d2iz>
 80077b6:	4606      	mov	r6, r0
 80077b8:	f7f8 feb4 	bl	8000524 <__aeabi_i2d>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077c4:	f7f8 fd60 	bl	8000288 <__aeabi_dsub>
 80077c8:	3630      	adds	r6, #48	; 0x30
 80077ca:	f805 6b01 	strb.w	r6, [r5], #1
 80077ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077d2:	e9cd 0100 	strd	r0, r1, [sp]
 80077d6:	f7f9 f981 	bl	8000adc <__aeabi_dcmplt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d163      	bne.n	80078a6 <_dtoa_r+0x5de>
 80077de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e2:	2000      	movs	r0, #0
 80077e4:	4937      	ldr	r1, [pc, #220]	; (80078c4 <_dtoa_r+0x5fc>)
 80077e6:	f7f8 fd4f 	bl	8000288 <__aeabi_dsub>
 80077ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077ee:	f7f9 f975 	bl	8000adc <__aeabi_dcmplt>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f040 80b7 	bne.w	8007966 <_dtoa_r+0x69e>
 80077f8:	eba5 030b 	sub.w	r3, r5, fp
 80077fc:	429f      	cmp	r7, r3
 80077fe:	f77f af7c 	ble.w	80076fa <_dtoa_r+0x432>
 8007802:	2200      	movs	r2, #0
 8007804:	4b30      	ldr	r3, [pc, #192]	; (80078c8 <_dtoa_r+0x600>)
 8007806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800780a:	f7f8 fef5 	bl	80005f8 <__aeabi_dmul>
 800780e:	2200      	movs	r2, #0
 8007810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007814:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <_dtoa_r+0x600>)
 8007816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800781a:	f7f8 feed 	bl	80005f8 <__aeabi_dmul>
 800781e:	e9cd 0100 	strd	r0, r1, [sp]
 8007822:	e7c4      	b.n	80077ae <_dtoa_r+0x4e6>
 8007824:	462a      	mov	r2, r5
 8007826:	4633      	mov	r3, r6
 8007828:	f7f8 fee6 	bl	80005f8 <__aeabi_dmul>
 800782c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007830:	eb0b 0507 	add.w	r5, fp, r7
 8007834:	465e      	mov	r6, fp
 8007836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800783a:	f7f9 f98d 	bl	8000b58 <__aeabi_d2iz>
 800783e:	4607      	mov	r7, r0
 8007840:	f7f8 fe70 	bl	8000524 <__aeabi_i2d>
 8007844:	3730      	adds	r7, #48	; 0x30
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800784e:	f7f8 fd1b 	bl	8000288 <__aeabi_dsub>
 8007852:	f806 7b01 	strb.w	r7, [r6], #1
 8007856:	42ae      	cmp	r6, r5
 8007858:	e9cd 0100 	strd	r0, r1, [sp]
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	d126      	bne.n	80078b0 <_dtoa_r+0x5e8>
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <_dtoa_r+0x60c>)
 8007864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007868:	f7f8 fd10 	bl	800028c <__adddf3>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007874:	f7f9 f950 	bl	8000b18 <__aeabi_dcmpgt>
 8007878:	2800      	cmp	r0, #0
 800787a:	d174      	bne.n	8007966 <_dtoa_r+0x69e>
 800787c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007880:	2000      	movs	r0, #0
 8007882:	4914      	ldr	r1, [pc, #80]	; (80078d4 <_dtoa_r+0x60c>)
 8007884:	f7f8 fd00 	bl	8000288 <__aeabi_dsub>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007890:	f7f9 f924 	bl	8000adc <__aeabi_dcmplt>
 8007894:	2800      	cmp	r0, #0
 8007896:	f43f af30 	beq.w	80076fa <_dtoa_r+0x432>
 800789a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800789e:	2b30      	cmp	r3, #48	; 0x30
 80078a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80078a4:	d002      	beq.n	80078ac <_dtoa_r+0x5e4>
 80078a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078aa:	e04a      	b.n	8007942 <_dtoa_r+0x67a>
 80078ac:	4615      	mov	r5, r2
 80078ae:	e7f4      	b.n	800789a <_dtoa_r+0x5d2>
 80078b0:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <_dtoa_r+0x600>)
 80078b2:	f7f8 fea1 	bl	80005f8 <__aeabi_dmul>
 80078b6:	e9cd 0100 	strd	r0, r1, [sp]
 80078ba:	e7bc      	b.n	8007836 <_dtoa_r+0x56e>
 80078bc:	0800b2c8 	.word	0x0800b2c8
 80078c0:	0800b2a0 	.word	0x0800b2a0
 80078c4:	3ff00000 	.word	0x3ff00000
 80078c8:	40240000 	.word	0x40240000
 80078cc:	401c0000 	.word	0x401c0000
 80078d0:	40140000 	.word	0x40140000
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078dc:	465d      	mov	r5, fp
 80078de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f8 ffb1 	bl	800084c <__aeabi_ddiv>
 80078ea:	f7f9 f935 	bl	8000b58 <__aeabi_d2iz>
 80078ee:	4680      	mov	r8, r0
 80078f0:	f7f8 fe18 	bl	8000524 <__aeabi_i2d>
 80078f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078f8:	f7f8 fe7e 	bl	80005f8 <__aeabi_dmul>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4630      	mov	r0, r6
 8007902:	4639      	mov	r1, r7
 8007904:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007908:	f7f8 fcbe 	bl	8000288 <__aeabi_dsub>
 800790c:	f805 6b01 	strb.w	r6, [r5], #1
 8007910:	eba5 060b 	sub.w	r6, r5, fp
 8007914:	45b1      	cmp	r9, r6
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	d139      	bne.n	8007990 <_dtoa_r+0x6c8>
 800791c:	f7f8 fcb6 	bl	800028c <__adddf3>
 8007920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007924:	4606      	mov	r6, r0
 8007926:	460f      	mov	r7, r1
 8007928:	f7f9 f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 800792c:	b9c8      	cbnz	r0, 8007962 <_dtoa_r+0x69a>
 800792e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007932:	4630      	mov	r0, r6
 8007934:	4639      	mov	r1, r7
 8007936:	f7f9 f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800793a:	b110      	cbz	r0, 8007942 <_dtoa_r+0x67a>
 800793c:	f018 0f01 	tst.w	r8, #1
 8007940:	d10f      	bne.n	8007962 <_dtoa_r+0x69a>
 8007942:	9904      	ldr	r1, [sp, #16]
 8007944:	4620      	mov	r0, r4
 8007946:	f000 facc 	bl	8007ee2 <_Bfree>
 800794a:	2300      	movs	r3, #0
 800794c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800794e:	702b      	strb	r3, [r5, #0]
 8007950:	f10a 0301 	add.w	r3, sl, #1
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8241 	beq.w	8007de0 <_dtoa_r+0xb18>
 800795e:	601d      	str	r5, [r3, #0]
 8007960:	e23e      	b.n	8007de0 <_dtoa_r+0xb18>
 8007962:	f8cd a020 	str.w	sl, [sp, #32]
 8007966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800796a:	2a39      	cmp	r2, #57	; 0x39
 800796c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007970:	d108      	bne.n	8007984 <_dtoa_r+0x6bc>
 8007972:	459b      	cmp	fp, r3
 8007974:	d10a      	bne.n	800798c <_dtoa_r+0x6c4>
 8007976:	9b08      	ldr	r3, [sp, #32]
 8007978:	3301      	adds	r3, #1
 800797a:	9308      	str	r3, [sp, #32]
 800797c:	2330      	movs	r3, #48	; 0x30
 800797e:	f88b 3000 	strb.w	r3, [fp]
 8007982:	465b      	mov	r3, fp
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	3201      	adds	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e78c      	b.n	80078a6 <_dtoa_r+0x5de>
 800798c:	461d      	mov	r5, r3
 800798e:	e7ea      	b.n	8007966 <_dtoa_r+0x69e>
 8007990:	2200      	movs	r2, #0
 8007992:	4b9b      	ldr	r3, [pc, #620]	; (8007c00 <_dtoa_r+0x938>)
 8007994:	f7f8 fe30 	bl	80005f8 <__aeabi_dmul>
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	4606      	mov	r6, r0
 800799e:	460f      	mov	r7, r1
 80079a0:	f7f9 f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d09a      	beq.n	80078de <_dtoa_r+0x616>
 80079a8:	e7cb      	b.n	8007942 <_dtoa_r+0x67a>
 80079aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	f000 808b 	beq.w	8007ac8 <_dtoa_r+0x800>
 80079b2:	9a06      	ldr	r2, [sp, #24]
 80079b4:	2a01      	cmp	r2, #1
 80079b6:	dc6e      	bgt.n	8007a96 <_dtoa_r+0x7ce>
 80079b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d067      	beq.n	8007a8e <_dtoa_r+0x7c6>
 80079be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079c2:	9f07      	ldr	r7, [sp, #28]
 80079c4:	9d05      	ldr	r5, [sp, #20]
 80079c6:	9a05      	ldr	r2, [sp, #20]
 80079c8:	2101      	movs	r1, #1
 80079ca:	441a      	add	r2, r3
 80079cc:	4620      	mov	r0, r4
 80079ce:	9205      	str	r2, [sp, #20]
 80079d0:	4498      	add	r8, r3
 80079d2:	f000 fb26 	bl	8008022 <__i2b>
 80079d6:	4606      	mov	r6, r0
 80079d8:	2d00      	cmp	r5, #0
 80079da:	dd0c      	ble.n	80079f6 <_dtoa_r+0x72e>
 80079dc:	f1b8 0f00 	cmp.w	r8, #0
 80079e0:	dd09      	ble.n	80079f6 <_dtoa_r+0x72e>
 80079e2:	4545      	cmp	r5, r8
 80079e4:	9a05      	ldr	r2, [sp, #20]
 80079e6:	462b      	mov	r3, r5
 80079e8:	bfa8      	it	ge
 80079ea:	4643      	movge	r3, r8
 80079ec:	1ad2      	subs	r2, r2, r3
 80079ee:	9205      	str	r2, [sp, #20]
 80079f0:	1aed      	subs	r5, r5, r3
 80079f2:	eba8 0803 	sub.w	r8, r8, r3
 80079f6:	9b07      	ldr	r3, [sp, #28]
 80079f8:	b1eb      	cbz	r3, 8007a36 <_dtoa_r+0x76e>
 80079fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d067      	beq.n	8007ad0 <_dtoa_r+0x808>
 8007a00:	b18f      	cbz	r7, 8007a26 <_dtoa_r+0x75e>
 8007a02:	4631      	mov	r1, r6
 8007a04:	463a      	mov	r2, r7
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 fbaa 	bl	8008160 <__pow5mult>
 8007a0c:	9a04      	ldr	r2, [sp, #16]
 8007a0e:	4601      	mov	r1, r0
 8007a10:	4606      	mov	r6, r0
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fb0e 	bl	8008034 <__multiply>
 8007a18:	9904      	ldr	r1, [sp, #16]
 8007a1a:	9008      	str	r0, [sp, #32]
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fa60 	bl	8007ee2 <_Bfree>
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	9304      	str	r3, [sp, #16]
 8007a26:	9b07      	ldr	r3, [sp, #28]
 8007a28:	1bda      	subs	r2, r3, r7
 8007a2a:	d004      	beq.n	8007a36 <_dtoa_r+0x76e>
 8007a2c:	9904      	ldr	r1, [sp, #16]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fb96 	bl	8008160 <__pow5mult>
 8007a34:	9004      	str	r0, [sp, #16]
 8007a36:	2101      	movs	r1, #1
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 faf2 	bl	8008022 <__i2b>
 8007a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a40:	4607      	mov	r7, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 81d0 	beq.w	8007de8 <_dtoa_r+0xb20>
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 fb87 	bl	8008160 <__pow5mult>
 8007a52:	9b06      	ldr	r3, [sp, #24]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	4607      	mov	r7, r0
 8007a58:	dc40      	bgt.n	8007adc <_dtoa_r+0x814>
 8007a5a:	9b00      	ldr	r3, [sp, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d139      	bne.n	8007ad4 <_dtoa_r+0x80c>
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d136      	bne.n	8007ad8 <_dtoa_r+0x810>
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a70:	0d1b      	lsrs	r3, r3, #20
 8007a72:	051b      	lsls	r3, r3, #20
 8007a74:	b12b      	cbz	r3, 8007a82 <_dtoa_r+0x7ba>
 8007a76:	9b05      	ldr	r3, [sp, #20]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	9305      	str	r3, [sp, #20]
 8007a7c:	f108 0801 	add.w	r8, r8, #1
 8007a80:	2301      	movs	r3, #1
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d12a      	bne.n	8007ae0 <_dtoa_r+0x818>
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	e030      	b.n	8007af0 <_dtoa_r+0x828>
 8007a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a94:	e795      	b.n	80079c2 <_dtoa_r+0x6fa>
 8007a96:	9b07      	ldr	r3, [sp, #28]
 8007a98:	f109 37ff 	add.w	r7, r9, #4294967295
 8007a9c:	42bb      	cmp	r3, r7
 8007a9e:	bfbf      	itttt	lt
 8007aa0:	9b07      	ldrlt	r3, [sp, #28]
 8007aa2:	9707      	strlt	r7, [sp, #28]
 8007aa4:	1afa      	sublt	r2, r7, r3
 8007aa6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007aa8:	bfbb      	ittet	lt
 8007aaa:	189b      	addlt	r3, r3, r2
 8007aac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007aae:	1bdf      	subge	r7, r3, r7
 8007ab0:	2700      	movlt	r7, #0
 8007ab2:	f1b9 0f00 	cmp.w	r9, #0
 8007ab6:	bfb5      	itete	lt
 8007ab8:	9b05      	ldrlt	r3, [sp, #20]
 8007aba:	9d05      	ldrge	r5, [sp, #20]
 8007abc:	eba3 0509 	sublt.w	r5, r3, r9
 8007ac0:	464b      	movge	r3, r9
 8007ac2:	bfb8      	it	lt
 8007ac4:	2300      	movlt	r3, #0
 8007ac6:	e77e      	b.n	80079c6 <_dtoa_r+0x6fe>
 8007ac8:	9f07      	ldr	r7, [sp, #28]
 8007aca:	9d05      	ldr	r5, [sp, #20]
 8007acc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007ace:	e783      	b.n	80079d8 <_dtoa_r+0x710>
 8007ad0:	9a07      	ldr	r2, [sp, #28]
 8007ad2:	e7ab      	b.n	8007a2c <_dtoa_r+0x764>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e7d4      	b.n	8007a82 <_dtoa_r+0x7ba>
 8007ad8:	9b00      	ldr	r3, [sp, #0]
 8007ada:	e7d2      	b.n	8007a82 <_dtoa_r+0x7ba>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007ae6:	6918      	ldr	r0, [r3, #16]
 8007ae8:	f000 fa4d 	bl	8007f86 <__hi0bits>
 8007aec:	f1c0 0020 	rsb	r0, r0, #32
 8007af0:	4440      	add	r0, r8
 8007af2:	f010 001f 	ands.w	r0, r0, #31
 8007af6:	d047      	beq.n	8007b88 <_dtoa_r+0x8c0>
 8007af8:	f1c0 0320 	rsb	r3, r0, #32
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	dd3b      	ble.n	8007b78 <_dtoa_r+0x8b0>
 8007b00:	9b05      	ldr	r3, [sp, #20]
 8007b02:	f1c0 001c 	rsb	r0, r0, #28
 8007b06:	4403      	add	r3, r0
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	4405      	add	r5, r0
 8007b0c:	4480      	add	r8, r0
 8007b0e:	9b05      	ldr	r3, [sp, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dd05      	ble.n	8007b20 <_dtoa_r+0x858>
 8007b14:	461a      	mov	r2, r3
 8007b16:	9904      	ldr	r1, [sp, #16]
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fb6f 	bl	80081fc <__lshift>
 8007b1e:	9004      	str	r0, [sp, #16]
 8007b20:	f1b8 0f00 	cmp.w	r8, #0
 8007b24:	dd05      	ble.n	8007b32 <_dtoa_r+0x86a>
 8007b26:	4639      	mov	r1, r7
 8007b28:	4642      	mov	r2, r8
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fb66 	bl	80081fc <__lshift>
 8007b30:	4607      	mov	r7, r0
 8007b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b34:	b353      	cbz	r3, 8007b8c <_dtoa_r+0x8c4>
 8007b36:	4639      	mov	r1, r7
 8007b38:	9804      	ldr	r0, [sp, #16]
 8007b3a:	f000 fbb3 	bl	80082a4 <__mcmp>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	da24      	bge.n	8007b8c <_dtoa_r+0x8c4>
 8007b42:	2300      	movs	r3, #0
 8007b44:	220a      	movs	r2, #10
 8007b46:	9904      	ldr	r1, [sp, #16]
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 f9e1 	bl	8007f10 <__multadd>
 8007b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b50:	9004      	str	r0, [sp, #16]
 8007b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 814d 	beq.w	8007df6 <_dtoa_r+0xb2e>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4631      	mov	r1, r6
 8007b60:	220a      	movs	r2, #10
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 f9d4 	bl	8007f10 <__multadd>
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	dc4f      	bgt.n	8007c10 <_dtoa_r+0x948>
 8007b70:	9b06      	ldr	r3, [sp, #24]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	dd4c      	ble.n	8007c10 <_dtoa_r+0x948>
 8007b76:	e011      	b.n	8007b9c <_dtoa_r+0x8d4>
 8007b78:	d0c9      	beq.n	8007b0e <_dtoa_r+0x846>
 8007b7a:	9a05      	ldr	r2, [sp, #20]
 8007b7c:	331c      	adds	r3, #28
 8007b7e:	441a      	add	r2, r3
 8007b80:	9205      	str	r2, [sp, #20]
 8007b82:	441d      	add	r5, r3
 8007b84:	4498      	add	r8, r3
 8007b86:	e7c2      	b.n	8007b0e <_dtoa_r+0x846>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e7f6      	b.n	8007b7a <_dtoa_r+0x8b2>
 8007b8c:	f1b9 0f00 	cmp.w	r9, #0
 8007b90:	dc38      	bgt.n	8007c04 <_dtoa_r+0x93c>
 8007b92:	9b06      	ldr	r3, [sp, #24]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	dd35      	ble.n	8007c04 <_dtoa_r+0x93c>
 8007b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b9c:	9b02      	ldr	r3, [sp, #8]
 8007b9e:	b963      	cbnz	r3, 8007bba <_dtoa_r+0x8f2>
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 f9b3 	bl	8007f10 <__multadd>
 8007baa:	4601      	mov	r1, r0
 8007bac:	4607      	mov	r7, r0
 8007bae:	9804      	ldr	r0, [sp, #16]
 8007bb0:	f000 fb78 	bl	80082a4 <__mcmp>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f73f adcc 	bgt.w	8007752 <_dtoa_r+0x48a>
 8007bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bbc:	465d      	mov	r5, fp
 8007bbe:	ea6f 0a03 	mvn.w	sl, r3
 8007bc2:	f04f 0900 	mov.w	r9, #0
 8007bc6:	4639      	mov	r1, r7
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 f98a 	bl	8007ee2 <_Bfree>
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	f43f aeb7 	beq.w	8007942 <_dtoa_r+0x67a>
 8007bd4:	f1b9 0f00 	cmp.w	r9, #0
 8007bd8:	d005      	beq.n	8007be6 <_dtoa_r+0x91e>
 8007bda:	45b1      	cmp	r9, r6
 8007bdc:	d003      	beq.n	8007be6 <_dtoa_r+0x91e>
 8007bde:	4649      	mov	r1, r9
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 f97e 	bl	8007ee2 <_Bfree>
 8007be6:	4631      	mov	r1, r6
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 f97a 	bl	8007ee2 <_Bfree>
 8007bee:	e6a8      	b.n	8007942 <_dtoa_r+0x67a>
 8007bf0:	2700      	movs	r7, #0
 8007bf2:	463e      	mov	r6, r7
 8007bf4:	e7e1      	b.n	8007bba <_dtoa_r+0x8f2>
 8007bf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bfa:	463e      	mov	r6, r7
 8007bfc:	e5a9      	b.n	8007752 <_dtoa_r+0x48a>
 8007bfe:	bf00      	nop
 8007c00:	40240000 	.word	0x40240000
 8007c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 80fa 	beq.w	8007e04 <_dtoa_r+0xb3c>
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	dd05      	ble.n	8007c20 <_dtoa_r+0x958>
 8007c14:	4631      	mov	r1, r6
 8007c16:	462a      	mov	r2, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 faef 	bl	80081fc <__lshift>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	9b07      	ldr	r3, [sp, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d04c      	beq.n	8007cc0 <_dtoa_r+0x9f8>
 8007c26:	6871      	ldr	r1, [r6, #4]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 f926 	bl	8007e7a <_Balloc>
 8007c2e:	6932      	ldr	r2, [r6, #16]
 8007c30:	3202      	adds	r2, #2
 8007c32:	4605      	mov	r5, r0
 8007c34:	0092      	lsls	r2, r2, #2
 8007c36:	f106 010c 	add.w	r1, r6, #12
 8007c3a:	300c      	adds	r0, #12
 8007c3c:	f000 f912 	bl	8007e64 <memcpy>
 8007c40:	2201      	movs	r2, #1
 8007c42:	4629      	mov	r1, r5
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 fad9 	bl	80081fc <__lshift>
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	f8cd b014 	str.w	fp, [sp, #20]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	46b1      	mov	r9, r6
 8007c56:	9307      	str	r3, [sp, #28]
 8007c58:	4606      	mov	r6, r0
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	9804      	ldr	r0, [sp, #16]
 8007c5e:	f7ff faa7 	bl	80071b0 <quorem>
 8007c62:	4649      	mov	r1, r9
 8007c64:	4605      	mov	r5, r0
 8007c66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c6a:	9804      	ldr	r0, [sp, #16]
 8007c6c:	f000 fb1a 	bl	80082a4 <__mcmp>
 8007c70:	4632      	mov	r2, r6
 8007c72:	9000      	str	r0, [sp, #0]
 8007c74:	4639      	mov	r1, r7
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 fb2e 	bl	80082d8 <__mdiff>
 8007c7c:	68c3      	ldr	r3, [r0, #12]
 8007c7e:	4602      	mov	r2, r0
 8007c80:	bb03      	cbnz	r3, 8007cc4 <_dtoa_r+0x9fc>
 8007c82:	4601      	mov	r1, r0
 8007c84:	9008      	str	r0, [sp, #32]
 8007c86:	9804      	ldr	r0, [sp, #16]
 8007c88:	f000 fb0c 	bl	80082a4 <__mcmp>
 8007c8c:	9a08      	ldr	r2, [sp, #32]
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4611      	mov	r1, r2
 8007c92:	4620      	mov	r0, r4
 8007c94:	9308      	str	r3, [sp, #32]
 8007c96:	f000 f924 	bl	8007ee2 <_Bfree>
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	b9a3      	cbnz	r3, 8007cc8 <_dtoa_r+0xa00>
 8007c9e:	9a06      	ldr	r2, [sp, #24]
 8007ca0:	b992      	cbnz	r2, 8007cc8 <_dtoa_r+0xa00>
 8007ca2:	9a07      	ldr	r2, [sp, #28]
 8007ca4:	b982      	cbnz	r2, 8007cc8 <_dtoa_r+0xa00>
 8007ca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007caa:	d029      	beq.n	8007d00 <_dtoa_r+0xa38>
 8007cac:	9b00      	ldr	r3, [sp, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dd01      	ble.n	8007cb6 <_dtoa_r+0x9ee>
 8007cb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007cb6:	9b05      	ldr	r3, [sp, #20]
 8007cb8:	1c5d      	adds	r5, r3, #1
 8007cba:	f883 8000 	strb.w	r8, [r3]
 8007cbe:	e782      	b.n	8007bc6 <_dtoa_r+0x8fe>
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	e7c2      	b.n	8007c4a <_dtoa_r+0x982>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e7e3      	b.n	8007c90 <_dtoa_r+0x9c8>
 8007cc8:	9a00      	ldr	r2, [sp, #0]
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	db04      	blt.n	8007cd8 <_dtoa_r+0xa10>
 8007cce:	d125      	bne.n	8007d1c <_dtoa_r+0xa54>
 8007cd0:	9a06      	ldr	r2, [sp, #24]
 8007cd2:	bb1a      	cbnz	r2, 8007d1c <_dtoa_r+0xa54>
 8007cd4:	9a07      	ldr	r2, [sp, #28]
 8007cd6:	bb0a      	cbnz	r2, 8007d1c <_dtoa_r+0xa54>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	ddec      	ble.n	8007cb6 <_dtoa_r+0x9ee>
 8007cdc:	2201      	movs	r2, #1
 8007cde:	9904      	ldr	r1, [sp, #16]
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fa8b 	bl	80081fc <__lshift>
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	9004      	str	r0, [sp, #16]
 8007cea:	f000 fadb 	bl	80082a4 <__mcmp>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	dc03      	bgt.n	8007cfa <_dtoa_r+0xa32>
 8007cf2:	d1e0      	bne.n	8007cb6 <_dtoa_r+0x9ee>
 8007cf4:	f018 0f01 	tst.w	r8, #1
 8007cf8:	d0dd      	beq.n	8007cb6 <_dtoa_r+0x9ee>
 8007cfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cfe:	d1d8      	bne.n	8007cb2 <_dtoa_r+0x9ea>
 8007d00:	9b05      	ldr	r3, [sp, #20]
 8007d02:	9a05      	ldr	r2, [sp, #20]
 8007d04:	1c5d      	adds	r5, r3, #1
 8007d06:	2339      	movs	r3, #57	; 0x39
 8007d08:	7013      	strb	r3, [r2, #0]
 8007d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d0e:	2b39      	cmp	r3, #57	; 0x39
 8007d10:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d14:	d04f      	beq.n	8007db6 <_dtoa_r+0xaee>
 8007d16:	3301      	adds	r3, #1
 8007d18:	7013      	strb	r3, [r2, #0]
 8007d1a:	e754      	b.n	8007bc6 <_dtoa_r+0x8fe>
 8007d1c:	9a05      	ldr	r2, [sp, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f102 0501 	add.w	r5, r2, #1
 8007d24:	dd06      	ble.n	8007d34 <_dtoa_r+0xa6c>
 8007d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d2a:	d0e9      	beq.n	8007d00 <_dtoa_r+0xa38>
 8007d2c:	f108 0801 	add.w	r8, r8, #1
 8007d30:	9b05      	ldr	r3, [sp, #20]
 8007d32:	e7c2      	b.n	8007cba <_dtoa_r+0x9f2>
 8007d34:	9a02      	ldr	r2, [sp, #8]
 8007d36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007d3a:	eba5 030b 	sub.w	r3, r5, fp
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d021      	beq.n	8007d86 <_dtoa_r+0xabe>
 8007d42:	2300      	movs	r3, #0
 8007d44:	220a      	movs	r2, #10
 8007d46:	9904      	ldr	r1, [sp, #16]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 f8e1 	bl	8007f10 <__multadd>
 8007d4e:	45b1      	cmp	r9, r6
 8007d50:	9004      	str	r0, [sp, #16]
 8007d52:	f04f 0300 	mov.w	r3, #0
 8007d56:	f04f 020a 	mov.w	r2, #10
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	d105      	bne.n	8007d6c <_dtoa_r+0xaa4>
 8007d60:	f000 f8d6 	bl	8007f10 <__multadd>
 8007d64:	4681      	mov	r9, r0
 8007d66:	4606      	mov	r6, r0
 8007d68:	9505      	str	r5, [sp, #20]
 8007d6a:	e776      	b.n	8007c5a <_dtoa_r+0x992>
 8007d6c:	f000 f8d0 	bl	8007f10 <__multadd>
 8007d70:	4631      	mov	r1, r6
 8007d72:	4681      	mov	r9, r0
 8007d74:	2300      	movs	r3, #0
 8007d76:	220a      	movs	r2, #10
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 f8c9 	bl	8007f10 <__multadd>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	e7f2      	b.n	8007d68 <_dtoa_r+0xaa0>
 8007d82:	f04f 0900 	mov.w	r9, #0
 8007d86:	2201      	movs	r2, #1
 8007d88:	9904      	ldr	r1, [sp, #16]
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 fa36 	bl	80081fc <__lshift>
 8007d90:	4639      	mov	r1, r7
 8007d92:	9004      	str	r0, [sp, #16]
 8007d94:	f000 fa86 	bl	80082a4 <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	dcb6      	bgt.n	8007d0a <_dtoa_r+0xa42>
 8007d9c:	d102      	bne.n	8007da4 <_dtoa_r+0xadc>
 8007d9e:	f018 0f01 	tst.w	r8, #1
 8007da2:	d1b2      	bne.n	8007d0a <_dtoa_r+0xa42>
 8007da4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	f105 32ff 	add.w	r2, r5, #4294967295
 8007dae:	f47f af0a 	bne.w	8007bc6 <_dtoa_r+0x8fe>
 8007db2:	4615      	mov	r5, r2
 8007db4:	e7f6      	b.n	8007da4 <_dtoa_r+0xadc>
 8007db6:	4593      	cmp	fp, r2
 8007db8:	d105      	bne.n	8007dc6 <_dtoa_r+0xafe>
 8007dba:	2331      	movs	r3, #49	; 0x31
 8007dbc:	f10a 0a01 	add.w	sl, sl, #1
 8007dc0:	f88b 3000 	strb.w	r3, [fp]
 8007dc4:	e6ff      	b.n	8007bc6 <_dtoa_r+0x8fe>
 8007dc6:	4615      	mov	r5, r2
 8007dc8:	e79f      	b.n	8007d0a <_dtoa_r+0xa42>
 8007dca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007e30 <_dtoa_r+0xb68>
 8007dce:	e007      	b.n	8007de0 <_dtoa_r+0xb18>
 8007dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007e34 <_dtoa_r+0xb6c>
 8007dd6:	b11b      	cbz	r3, 8007de0 <_dtoa_r+0xb18>
 8007dd8:	f10b 0308 	add.w	r3, fp, #8
 8007ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	4658      	mov	r0, fp
 8007de2:	b017      	add	sp, #92	; 0x5c
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de8:	9b06      	ldr	r3, [sp, #24]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	f77f ae35 	ble.w	8007a5a <_dtoa_r+0x792>
 8007df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df2:	9307      	str	r3, [sp, #28]
 8007df4:	e649      	b.n	8007a8a <_dtoa_r+0x7c2>
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dc03      	bgt.n	8007e04 <_dtoa_r+0xb3c>
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	f73f aecc 	bgt.w	8007b9c <_dtoa_r+0x8d4>
 8007e04:	465d      	mov	r5, fp
 8007e06:	4639      	mov	r1, r7
 8007e08:	9804      	ldr	r0, [sp, #16]
 8007e0a:	f7ff f9d1 	bl	80071b0 <quorem>
 8007e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e12:	f805 8b01 	strb.w	r8, [r5], #1
 8007e16:	9a02      	ldr	r2, [sp, #8]
 8007e18:	eba5 030b 	sub.w	r3, r5, fp
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	ddb0      	ble.n	8007d82 <_dtoa_r+0xaba>
 8007e20:	2300      	movs	r3, #0
 8007e22:	220a      	movs	r2, #10
 8007e24:	9904      	ldr	r1, [sp, #16]
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f872 	bl	8007f10 <__multadd>
 8007e2c:	9004      	str	r0, [sp, #16]
 8007e2e:	e7ea      	b.n	8007e06 <_dtoa_r+0xb3e>
 8007e30:	0800b26c 	.word	0x0800b26c
 8007e34:	0800b290 	.word	0x0800b290

08007e38 <_localeconv_r>:
 8007e38:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <_localeconv_r+0x14>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6a18      	ldr	r0, [r3, #32]
 8007e3e:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <_localeconv_r+0x18>)
 8007e40:	2800      	cmp	r0, #0
 8007e42:	bf08      	it	eq
 8007e44:	4618      	moveq	r0, r3
 8007e46:	30f0      	adds	r0, #240	; 0xf0
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000098 	.word	0x20000098
 8007e50:	200000fc 	.word	0x200000fc

08007e54 <malloc>:
 8007e54:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <malloc+0xc>)
 8007e56:	4601      	mov	r1, r0
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	f000 bb45 	b.w	80084e8 <_malloc_r>
 8007e5e:	bf00      	nop
 8007e60:	20000098 	.word	0x20000098

08007e64 <memcpy>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	1e43      	subs	r3, r0, #1
 8007e68:	440a      	add	r2, r1
 8007e6a:	4291      	cmp	r1, r2
 8007e6c:	d100      	bne.n	8007e70 <memcpy+0xc>
 8007e6e:	bd10      	pop	{r4, pc}
 8007e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e78:	e7f7      	b.n	8007e6a <memcpy+0x6>

08007e7a <_Balloc>:
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e7e:	4604      	mov	r4, r0
 8007e80:	460e      	mov	r6, r1
 8007e82:	b93d      	cbnz	r5, 8007e94 <_Balloc+0x1a>
 8007e84:	2010      	movs	r0, #16
 8007e86:	f7ff ffe5 	bl	8007e54 <malloc>
 8007e8a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e90:	6005      	str	r5, [r0, #0]
 8007e92:	60c5      	str	r5, [r0, #12]
 8007e94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007e96:	68eb      	ldr	r3, [r5, #12]
 8007e98:	b183      	cbz	r3, 8007ebc <_Balloc+0x42>
 8007e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007ea2:	b9b8      	cbnz	r0, 8007ed4 <_Balloc+0x5a>
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	fa01 f506 	lsl.w	r5, r1, r6
 8007eaa:	1d6a      	adds	r2, r5, #5
 8007eac:	0092      	lsls	r2, r2, #2
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fabe 	bl	8008430 <_calloc_r>
 8007eb4:	b160      	cbz	r0, 8007ed0 <_Balloc+0x56>
 8007eb6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007eba:	e00e      	b.n	8007eda <_Balloc+0x60>
 8007ebc:	2221      	movs	r2, #33	; 0x21
 8007ebe:	2104      	movs	r1, #4
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fab5 	bl	8008430 <_calloc_r>
 8007ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec8:	60e8      	str	r0, [r5, #12]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e4      	bne.n	8007e9a <_Balloc+0x20>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	6802      	ldr	r2, [r0, #0]
 8007ed6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007eda:	2300      	movs	r3, #0
 8007edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ee0:	e7f7      	b.n	8007ed2 <_Balloc+0x58>

08007ee2 <_Bfree>:
 8007ee2:	b570      	push	{r4, r5, r6, lr}
 8007ee4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460d      	mov	r5, r1
 8007eea:	b93c      	cbnz	r4, 8007efc <_Bfree+0x1a>
 8007eec:	2010      	movs	r0, #16
 8007eee:	f7ff ffb1 	bl	8007e54 <malloc>
 8007ef2:	6270      	str	r0, [r6, #36]	; 0x24
 8007ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef8:	6004      	str	r4, [r0, #0]
 8007efa:	60c4      	str	r4, [r0, #12]
 8007efc:	b13d      	cbz	r5, 8007f0e <_Bfree+0x2c>
 8007efe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007f00:	686a      	ldr	r2, [r5, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f08:	6029      	str	r1, [r5, #0]
 8007f0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}

08007f10 <__multadd>:
 8007f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f14:	690d      	ldr	r5, [r1, #16]
 8007f16:	461f      	mov	r7, r3
 8007f18:	4606      	mov	r6, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f101 0c14 	add.w	ip, r1, #20
 8007f20:	2300      	movs	r3, #0
 8007f22:	f8dc 0000 	ldr.w	r0, [ip]
 8007f26:	b281      	uxth	r1, r0
 8007f28:	fb02 7101 	mla	r1, r2, r1, r7
 8007f2c:	0c0f      	lsrs	r7, r1, #16
 8007f2e:	0c00      	lsrs	r0, r0, #16
 8007f30:	fb02 7000 	mla	r0, r2, r0, r7
 8007f34:	b289      	uxth	r1, r1
 8007f36:	3301      	adds	r3, #1
 8007f38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007f3c:	429d      	cmp	r5, r3
 8007f3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007f42:	f84c 1b04 	str.w	r1, [ip], #4
 8007f46:	dcec      	bgt.n	8007f22 <__multadd+0x12>
 8007f48:	b1d7      	cbz	r7, 8007f80 <__multadd+0x70>
 8007f4a:	68a3      	ldr	r3, [r4, #8]
 8007f4c:	42ab      	cmp	r3, r5
 8007f4e:	dc12      	bgt.n	8007f76 <__multadd+0x66>
 8007f50:	6861      	ldr	r1, [r4, #4]
 8007f52:	4630      	mov	r0, r6
 8007f54:	3101      	adds	r1, #1
 8007f56:	f7ff ff90 	bl	8007e7a <_Balloc>
 8007f5a:	6922      	ldr	r2, [r4, #16]
 8007f5c:	3202      	adds	r2, #2
 8007f5e:	f104 010c 	add.w	r1, r4, #12
 8007f62:	4680      	mov	r8, r0
 8007f64:	0092      	lsls	r2, r2, #2
 8007f66:	300c      	adds	r0, #12
 8007f68:	f7ff ff7c 	bl	8007e64 <memcpy>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7ff ffb7 	bl	8007ee2 <_Bfree>
 8007f74:	4644      	mov	r4, r8
 8007f76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f7a:	3501      	adds	r5, #1
 8007f7c:	615f      	str	r7, [r3, #20]
 8007f7e:	6125      	str	r5, [r4, #16]
 8007f80:	4620      	mov	r0, r4
 8007f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f86 <__hi0bits>:
 8007f86:	0c02      	lsrs	r2, r0, #16
 8007f88:	0412      	lsls	r2, r2, #16
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	b9b2      	cbnz	r2, 8007fbc <__hi0bits+0x36>
 8007f8e:	0403      	lsls	r3, r0, #16
 8007f90:	2010      	movs	r0, #16
 8007f92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f96:	bf04      	itt	eq
 8007f98:	021b      	lsleq	r3, r3, #8
 8007f9a:	3008      	addeq	r0, #8
 8007f9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fa0:	bf04      	itt	eq
 8007fa2:	011b      	lsleq	r3, r3, #4
 8007fa4:	3004      	addeq	r0, #4
 8007fa6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007faa:	bf04      	itt	eq
 8007fac:	009b      	lsleq	r3, r3, #2
 8007fae:	3002      	addeq	r0, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	db06      	blt.n	8007fc2 <__hi0bits+0x3c>
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	d503      	bpl.n	8007fc0 <__hi0bits+0x3a>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	4770      	bx	lr
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e7e8      	b.n	8007f92 <__hi0bits+0xc>
 8007fc0:	2020      	movs	r0, #32
 8007fc2:	4770      	bx	lr

08007fc4 <__lo0bits>:
 8007fc4:	6803      	ldr	r3, [r0, #0]
 8007fc6:	f013 0207 	ands.w	r2, r3, #7
 8007fca:	4601      	mov	r1, r0
 8007fcc:	d00b      	beq.n	8007fe6 <__lo0bits+0x22>
 8007fce:	07da      	lsls	r2, r3, #31
 8007fd0:	d423      	bmi.n	800801a <__lo0bits+0x56>
 8007fd2:	0798      	lsls	r0, r3, #30
 8007fd4:	bf49      	itett	mi
 8007fd6:	085b      	lsrmi	r3, r3, #1
 8007fd8:	089b      	lsrpl	r3, r3, #2
 8007fda:	2001      	movmi	r0, #1
 8007fdc:	600b      	strmi	r3, [r1, #0]
 8007fde:	bf5c      	itt	pl
 8007fe0:	600b      	strpl	r3, [r1, #0]
 8007fe2:	2002      	movpl	r0, #2
 8007fe4:	4770      	bx	lr
 8007fe6:	b298      	uxth	r0, r3
 8007fe8:	b9a8      	cbnz	r0, 8008016 <__lo0bits+0x52>
 8007fea:	0c1b      	lsrs	r3, r3, #16
 8007fec:	2010      	movs	r0, #16
 8007fee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ff2:	bf04      	itt	eq
 8007ff4:	0a1b      	lsreq	r3, r3, #8
 8007ff6:	3008      	addeq	r0, #8
 8007ff8:	071a      	lsls	r2, r3, #28
 8007ffa:	bf04      	itt	eq
 8007ffc:	091b      	lsreq	r3, r3, #4
 8007ffe:	3004      	addeq	r0, #4
 8008000:	079a      	lsls	r2, r3, #30
 8008002:	bf04      	itt	eq
 8008004:	089b      	lsreq	r3, r3, #2
 8008006:	3002      	addeq	r0, #2
 8008008:	07da      	lsls	r2, r3, #31
 800800a:	d402      	bmi.n	8008012 <__lo0bits+0x4e>
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	d006      	beq.n	800801e <__lo0bits+0x5a>
 8008010:	3001      	adds	r0, #1
 8008012:	600b      	str	r3, [r1, #0]
 8008014:	4770      	bx	lr
 8008016:	4610      	mov	r0, r2
 8008018:	e7e9      	b.n	8007fee <__lo0bits+0x2a>
 800801a:	2000      	movs	r0, #0
 800801c:	4770      	bx	lr
 800801e:	2020      	movs	r0, #32
 8008020:	4770      	bx	lr

08008022 <__i2b>:
 8008022:	b510      	push	{r4, lr}
 8008024:	460c      	mov	r4, r1
 8008026:	2101      	movs	r1, #1
 8008028:	f7ff ff27 	bl	8007e7a <_Balloc>
 800802c:	2201      	movs	r2, #1
 800802e:	6144      	str	r4, [r0, #20]
 8008030:	6102      	str	r2, [r0, #16]
 8008032:	bd10      	pop	{r4, pc}

08008034 <__multiply>:
 8008034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	4614      	mov	r4, r2
 800803a:	690a      	ldr	r2, [r1, #16]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	429a      	cmp	r2, r3
 8008040:	bfb8      	it	lt
 8008042:	460b      	movlt	r3, r1
 8008044:	4688      	mov	r8, r1
 8008046:	bfbc      	itt	lt
 8008048:	46a0      	movlt	r8, r4
 800804a:	461c      	movlt	r4, r3
 800804c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008050:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008054:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008058:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800805c:	eb07 0609 	add.w	r6, r7, r9
 8008060:	42b3      	cmp	r3, r6
 8008062:	bfb8      	it	lt
 8008064:	3101      	addlt	r1, #1
 8008066:	f7ff ff08 	bl	8007e7a <_Balloc>
 800806a:	f100 0514 	add.w	r5, r0, #20
 800806e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008072:	462b      	mov	r3, r5
 8008074:	2200      	movs	r2, #0
 8008076:	4573      	cmp	r3, lr
 8008078:	d316      	bcc.n	80080a8 <__multiply+0x74>
 800807a:	f104 0214 	add.w	r2, r4, #20
 800807e:	f108 0114 	add.w	r1, r8, #20
 8008082:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008086:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	9b00      	ldr	r3, [sp, #0]
 800808e:	9201      	str	r2, [sp, #4]
 8008090:	4293      	cmp	r3, r2
 8008092:	d80c      	bhi.n	80080ae <__multiply+0x7a>
 8008094:	2e00      	cmp	r6, #0
 8008096:	dd03      	ble.n	80080a0 <__multiply+0x6c>
 8008098:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800809c:	2b00      	cmp	r3, #0
 800809e:	d05d      	beq.n	800815c <__multiply+0x128>
 80080a0:	6106      	str	r6, [r0, #16]
 80080a2:	b003      	add	sp, #12
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	f843 2b04 	str.w	r2, [r3], #4
 80080ac:	e7e3      	b.n	8008076 <__multiply+0x42>
 80080ae:	f8b2 b000 	ldrh.w	fp, [r2]
 80080b2:	f1bb 0f00 	cmp.w	fp, #0
 80080b6:	d023      	beq.n	8008100 <__multiply+0xcc>
 80080b8:	4689      	mov	r9, r1
 80080ba:	46ac      	mov	ip, r5
 80080bc:	f04f 0800 	mov.w	r8, #0
 80080c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80080c4:	f8dc a000 	ldr.w	sl, [ip]
 80080c8:	b2a3      	uxth	r3, r4
 80080ca:	fa1f fa8a 	uxth.w	sl, sl
 80080ce:	fb0b a303 	mla	r3, fp, r3, sl
 80080d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80080d6:	f8dc 4000 	ldr.w	r4, [ip]
 80080da:	4443      	add	r3, r8
 80080dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80080e0:	fb0b 840a 	mla	r4, fp, sl, r8
 80080e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80080e8:	46e2      	mov	sl, ip
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80080f0:	454f      	cmp	r7, r9
 80080f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80080f6:	f84a 3b04 	str.w	r3, [sl], #4
 80080fa:	d82b      	bhi.n	8008154 <__multiply+0x120>
 80080fc:	f8cc 8004 	str.w	r8, [ip, #4]
 8008100:	9b01      	ldr	r3, [sp, #4]
 8008102:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008106:	3204      	adds	r2, #4
 8008108:	f1ba 0f00 	cmp.w	sl, #0
 800810c:	d020      	beq.n	8008150 <__multiply+0x11c>
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	4689      	mov	r9, r1
 8008112:	46a8      	mov	r8, r5
 8008114:	f04f 0b00 	mov.w	fp, #0
 8008118:	f8b9 c000 	ldrh.w	ip, [r9]
 800811c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008120:	fb0a 440c 	mla	r4, sl, ip, r4
 8008124:	445c      	add	r4, fp
 8008126:	46c4      	mov	ip, r8
 8008128:	b29b      	uxth	r3, r3
 800812a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800812e:	f84c 3b04 	str.w	r3, [ip], #4
 8008132:	f859 3b04 	ldr.w	r3, [r9], #4
 8008136:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800813a:	0c1b      	lsrs	r3, r3, #16
 800813c:	fb0a b303 	mla	r3, sl, r3, fp
 8008140:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008144:	454f      	cmp	r7, r9
 8008146:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800814a:	d805      	bhi.n	8008158 <__multiply+0x124>
 800814c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008150:	3504      	adds	r5, #4
 8008152:	e79b      	b.n	800808c <__multiply+0x58>
 8008154:	46d4      	mov	ip, sl
 8008156:	e7b3      	b.n	80080c0 <__multiply+0x8c>
 8008158:	46e0      	mov	r8, ip
 800815a:	e7dd      	b.n	8008118 <__multiply+0xe4>
 800815c:	3e01      	subs	r6, #1
 800815e:	e799      	b.n	8008094 <__multiply+0x60>

08008160 <__pow5mult>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4615      	mov	r5, r2
 8008166:	f012 0203 	ands.w	r2, r2, #3
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	d007      	beq.n	8008180 <__pow5mult+0x20>
 8008170:	3a01      	subs	r2, #1
 8008172:	4c21      	ldr	r4, [pc, #132]	; (80081f8 <__pow5mult+0x98>)
 8008174:	2300      	movs	r3, #0
 8008176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800817a:	f7ff fec9 	bl	8007f10 <__multadd>
 800817e:	4607      	mov	r7, r0
 8008180:	10ad      	asrs	r5, r5, #2
 8008182:	d035      	beq.n	80081f0 <__pow5mult+0x90>
 8008184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008186:	b93c      	cbnz	r4, 8008198 <__pow5mult+0x38>
 8008188:	2010      	movs	r0, #16
 800818a:	f7ff fe63 	bl	8007e54 <malloc>
 800818e:	6270      	str	r0, [r6, #36]	; 0x24
 8008190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008194:	6004      	str	r4, [r0, #0]
 8008196:	60c4      	str	r4, [r0, #12]
 8008198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800819c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081a0:	b94c      	cbnz	r4, 80081b6 <__pow5mult+0x56>
 80081a2:	f240 2171 	movw	r1, #625	; 0x271
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ff3b 	bl	8008022 <__i2b>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80081b2:	4604      	mov	r4, r0
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	07eb      	lsls	r3, r5, #31
 80081bc:	d50a      	bpl.n	80081d4 <__pow5mult+0x74>
 80081be:	4639      	mov	r1, r7
 80081c0:	4622      	mov	r2, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff36 	bl	8008034 <__multiply>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4681      	mov	r9, r0
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff fe88 	bl	8007ee2 <_Bfree>
 80081d2:	464f      	mov	r7, r9
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	d00b      	beq.n	80081f0 <__pow5mult+0x90>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	b938      	cbnz	r0, 80081ec <__pow5mult+0x8c>
 80081dc:	4622      	mov	r2, r4
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ff27 	bl	8008034 <__multiply>
 80081e6:	6020      	str	r0, [r4, #0]
 80081e8:	f8c0 8000 	str.w	r8, [r0]
 80081ec:	4604      	mov	r4, r0
 80081ee:	e7e4      	b.n	80081ba <__pow5mult+0x5a>
 80081f0:	4638      	mov	r0, r7
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	bf00      	nop
 80081f8:	0800b390 	.word	0x0800b390

080081fc <__lshift>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	6849      	ldr	r1, [r1, #4]
 800820a:	eb0a 0903 	add.w	r9, sl, r3
 800820e:	68a3      	ldr	r3, [r4, #8]
 8008210:	4607      	mov	r7, r0
 8008212:	4616      	mov	r6, r2
 8008214:	f109 0501 	add.w	r5, r9, #1
 8008218:	42ab      	cmp	r3, r5
 800821a:	db32      	blt.n	8008282 <__lshift+0x86>
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff fe2c 	bl	8007e7a <_Balloc>
 8008222:	2300      	movs	r3, #0
 8008224:	4680      	mov	r8, r0
 8008226:	f100 0114 	add.w	r1, r0, #20
 800822a:	461a      	mov	r2, r3
 800822c:	4553      	cmp	r3, sl
 800822e:	db2b      	blt.n	8008288 <__lshift+0x8c>
 8008230:	6920      	ldr	r0, [r4, #16]
 8008232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008236:	f104 0314 	add.w	r3, r4, #20
 800823a:	f016 021f 	ands.w	r2, r6, #31
 800823e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008242:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008246:	d025      	beq.n	8008294 <__lshift+0x98>
 8008248:	f1c2 0e20 	rsb	lr, r2, #32
 800824c:	2000      	movs	r0, #0
 800824e:	681e      	ldr	r6, [r3, #0]
 8008250:	468a      	mov	sl, r1
 8008252:	4096      	lsls	r6, r2
 8008254:	4330      	orrs	r0, r6
 8008256:	f84a 0b04 	str.w	r0, [sl], #4
 800825a:	f853 0b04 	ldr.w	r0, [r3], #4
 800825e:	459c      	cmp	ip, r3
 8008260:	fa20 f00e 	lsr.w	r0, r0, lr
 8008264:	d814      	bhi.n	8008290 <__lshift+0x94>
 8008266:	6048      	str	r0, [r1, #4]
 8008268:	b108      	cbz	r0, 800826e <__lshift+0x72>
 800826a:	f109 0502 	add.w	r5, r9, #2
 800826e:	3d01      	subs	r5, #1
 8008270:	4638      	mov	r0, r7
 8008272:	f8c8 5010 	str.w	r5, [r8, #16]
 8008276:	4621      	mov	r1, r4
 8008278:	f7ff fe33 	bl	8007ee2 <_Bfree>
 800827c:	4640      	mov	r0, r8
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008282:	3101      	adds	r1, #1
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	e7c7      	b.n	8008218 <__lshift+0x1c>
 8008288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800828c:	3301      	adds	r3, #1
 800828e:	e7cd      	b.n	800822c <__lshift+0x30>
 8008290:	4651      	mov	r1, sl
 8008292:	e7dc      	b.n	800824e <__lshift+0x52>
 8008294:	3904      	subs	r1, #4
 8008296:	f853 2b04 	ldr.w	r2, [r3], #4
 800829a:	f841 2f04 	str.w	r2, [r1, #4]!
 800829e:	459c      	cmp	ip, r3
 80082a0:	d8f9      	bhi.n	8008296 <__lshift+0x9a>
 80082a2:	e7e4      	b.n	800826e <__lshift+0x72>

080082a4 <__mcmp>:
 80082a4:	6903      	ldr	r3, [r0, #16]
 80082a6:	690a      	ldr	r2, [r1, #16]
 80082a8:	1a9b      	subs	r3, r3, r2
 80082aa:	b530      	push	{r4, r5, lr}
 80082ac:	d10c      	bne.n	80082c8 <__mcmp+0x24>
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	3014      	adds	r0, #20
 80082b2:	3114      	adds	r1, #20
 80082b4:	1884      	adds	r4, r0, r2
 80082b6:	4411      	add	r1, r2
 80082b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082c0:	4295      	cmp	r5, r2
 80082c2:	d003      	beq.n	80082cc <__mcmp+0x28>
 80082c4:	d305      	bcc.n	80082d2 <__mcmp+0x2e>
 80082c6:	2301      	movs	r3, #1
 80082c8:	4618      	mov	r0, r3
 80082ca:	bd30      	pop	{r4, r5, pc}
 80082cc:	42a0      	cmp	r0, r4
 80082ce:	d3f3      	bcc.n	80082b8 <__mcmp+0x14>
 80082d0:	e7fa      	b.n	80082c8 <__mcmp+0x24>
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	e7f7      	b.n	80082c8 <__mcmp+0x24>

080082d8 <__mdiff>:
 80082d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	460d      	mov	r5, r1
 80082de:	4607      	mov	r7, r0
 80082e0:	4611      	mov	r1, r2
 80082e2:	4628      	mov	r0, r5
 80082e4:	4614      	mov	r4, r2
 80082e6:	f7ff ffdd 	bl	80082a4 <__mcmp>
 80082ea:	1e06      	subs	r6, r0, #0
 80082ec:	d108      	bne.n	8008300 <__mdiff+0x28>
 80082ee:	4631      	mov	r1, r6
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff fdc2 	bl	8007e7a <_Balloc>
 80082f6:	2301      	movs	r3, #1
 80082f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008300:	bfa4      	itt	ge
 8008302:	4623      	movge	r3, r4
 8008304:	462c      	movge	r4, r5
 8008306:	4638      	mov	r0, r7
 8008308:	6861      	ldr	r1, [r4, #4]
 800830a:	bfa6      	itte	ge
 800830c:	461d      	movge	r5, r3
 800830e:	2600      	movge	r6, #0
 8008310:	2601      	movlt	r6, #1
 8008312:	f7ff fdb2 	bl	8007e7a <_Balloc>
 8008316:	692b      	ldr	r3, [r5, #16]
 8008318:	60c6      	str	r6, [r0, #12]
 800831a:	6926      	ldr	r6, [r4, #16]
 800831c:	f105 0914 	add.w	r9, r5, #20
 8008320:	f104 0214 	add.w	r2, r4, #20
 8008324:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008328:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800832c:	f100 0514 	add.w	r5, r0, #20
 8008330:	f04f 0e00 	mov.w	lr, #0
 8008334:	f852 ab04 	ldr.w	sl, [r2], #4
 8008338:	f859 4b04 	ldr.w	r4, [r9], #4
 800833c:	fa1e f18a 	uxtah	r1, lr, sl
 8008340:	b2a3      	uxth	r3, r4
 8008342:	1ac9      	subs	r1, r1, r3
 8008344:	0c23      	lsrs	r3, r4, #16
 8008346:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800834a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800834e:	b289      	uxth	r1, r1
 8008350:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008354:	45c8      	cmp	r8, r9
 8008356:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800835a:	4694      	mov	ip, r2
 800835c:	f845 3b04 	str.w	r3, [r5], #4
 8008360:	d8e8      	bhi.n	8008334 <__mdiff+0x5c>
 8008362:	45bc      	cmp	ip, r7
 8008364:	d304      	bcc.n	8008370 <__mdiff+0x98>
 8008366:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800836a:	b183      	cbz	r3, 800838e <__mdiff+0xb6>
 800836c:	6106      	str	r6, [r0, #16]
 800836e:	e7c5      	b.n	80082fc <__mdiff+0x24>
 8008370:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008374:	fa1e f381 	uxtah	r3, lr, r1
 8008378:	141a      	asrs	r2, r3, #16
 800837a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008384:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008388:	f845 3b04 	str.w	r3, [r5], #4
 800838c:	e7e9      	b.n	8008362 <__mdiff+0x8a>
 800838e:	3e01      	subs	r6, #1
 8008390:	e7e9      	b.n	8008366 <__mdiff+0x8e>

08008392 <__d2b>:
 8008392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008396:	460e      	mov	r6, r1
 8008398:	2101      	movs	r1, #1
 800839a:	ec59 8b10 	vmov	r8, r9, d0
 800839e:	4615      	mov	r5, r2
 80083a0:	f7ff fd6b 	bl	8007e7a <_Balloc>
 80083a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80083a8:	4607      	mov	r7, r0
 80083aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ae:	bb34      	cbnz	r4, 80083fe <__d2b+0x6c>
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	f1b8 0300 	subs.w	r3, r8, #0
 80083b6:	d027      	beq.n	8008408 <__d2b+0x76>
 80083b8:	a802      	add	r0, sp, #8
 80083ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 80083be:	f7ff fe01 	bl	8007fc4 <__lo0bits>
 80083c2:	9900      	ldr	r1, [sp, #0]
 80083c4:	b1f0      	cbz	r0, 8008404 <__d2b+0x72>
 80083c6:	9a01      	ldr	r2, [sp, #4]
 80083c8:	f1c0 0320 	rsb	r3, r0, #32
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	430b      	orrs	r3, r1
 80083d2:	40c2      	lsrs	r2, r0
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	61bb      	str	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bf14      	ite	ne
 80083e0:	2102      	movne	r1, #2
 80083e2:	2101      	moveq	r1, #1
 80083e4:	6139      	str	r1, [r7, #16]
 80083e6:	b1c4      	cbz	r4, 800841a <__d2b+0x88>
 80083e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083ec:	4404      	add	r4, r0
 80083ee:	6034      	str	r4, [r6, #0]
 80083f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083f4:	6028      	str	r0, [r5, #0]
 80083f6:	4638      	mov	r0, r7
 80083f8:	b003      	add	sp, #12
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008402:	e7d5      	b.n	80083b0 <__d2b+0x1e>
 8008404:	6179      	str	r1, [r7, #20]
 8008406:	e7e7      	b.n	80083d8 <__d2b+0x46>
 8008408:	a801      	add	r0, sp, #4
 800840a:	f7ff fddb 	bl	8007fc4 <__lo0bits>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	2101      	movs	r1, #1
 8008414:	6139      	str	r1, [r7, #16]
 8008416:	3020      	adds	r0, #32
 8008418:	e7e5      	b.n	80083e6 <__d2b+0x54>
 800841a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800841e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	6918      	ldr	r0, [r3, #16]
 8008426:	f7ff fdae 	bl	8007f86 <__hi0bits>
 800842a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800842e:	e7e1      	b.n	80083f4 <__d2b+0x62>

08008430 <_calloc_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	fb02 f401 	mul.w	r4, r2, r1
 8008436:	4621      	mov	r1, r4
 8008438:	f000 f856 	bl	80084e8 <_malloc_r>
 800843c:	4605      	mov	r5, r0
 800843e:	b118      	cbz	r0, 8008448 <_calloc_r+0x18>
 8008440:	4622      	mov	r2, r4
 8008442:	2100      	movs	r1, #0
 8008444:	f7fe fa1b 	bl	800687e <memset>
 8008448:	4628      	mov	r0, r5
 800844a:	bd38      	pop	{r3, r4, r5, pc}

0800844c <_free_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4605      	mov	r5, r0
 8008450:	2900      	cmp	r1, #0
 8008452:	d045      	beq.n	80084e0 <_free_r+0x94>
 8008454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008458:	1f0c      	subs	r4, r1, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	bfb8      	it	lt
 800845e:	18e4      	addlt	r4, r4, r3
 8008460:	f000 fa10 	bl	8008884 <__malloc_lock>
 8008464:	4a1f      	ldr	r2, [pc, #124]	; (80084e4 <_free_r+0x98>)
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	4610      	mov	r0, r2
 800846a:	b933      	cbnz	r3, 800847a <_free_r+0x2e>
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	6014      	str	r4, [r2, #0]
 8008470:	4628      	mov	r0, r5
 8008472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008476:	f000 ba06 	b.w	8008886 <__malloc_unlock>
 800847a:	42a3      	cmp	r3, r4
 800847c:	d90c      	bls.n	8008498 <_free_r+0x4c>
 800847e:	6821      	ldr	r1, [r4, #0]
 8008480:	1862      	adds	r2, r4, r1
 8008482:	4293      	cmp	r3, r2
 8008484:	bf04      	itt	eq
 8008486:	681a      	ldreq	r2, [r3, #0]
 8008488:	685b      	ldreq	r3, [r3, #4]
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	bf04      	itt	eq
 800848e:	1852      	addeq	r2, r2, r1
 8008490:	6022      	streq	r2, [r4, #0]
 8008492:	6004      	str	r4, [r0, #0]
 8008494:	e7ec      	b.n	8008470 <_free_r+0x24>
 8008496:	4613      	mov	r3, r2
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	b10a      	cbz	r2, 80084a0 <_free_r+0x54>
 800849c:	42a2      	cmp	r2, r4
 800849e:	d9fa      	bls.n	8008496 <_free_r+0x4a>
 80084a0:	6819      	ldr	r1, [r3, #0]
 80084a2:	1858      	adds	r0, r3, r1
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d10b      	bne.n	80084c0 <_free_r+0x74>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	4401      	add	r1, r0
 80084ac:	1858      	adds	r0, r3, r1
 80084ae:	4282      	cmp	r2, r0
 80084b0:	6019      	str	r1, [r3, #0]
 80084b2:	d1dd      	bne.n	8008470 <_free_r+0x24>
 80084b4:	6810      	ldr	r0, [r2, #0]
 80084b6:	6852      	ldr	r2, [r2, #4]
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	4401      	add	r1, r0
 80084bc:	6019      	str	r1, [r3, #0]
 80084be:	e7d7      	b.n	8008470 <_free_r+0x24>
 80084c0:	d902      	bls.n	80084c8 <_free_r+0x7c>
 80084c2:	230c      	movs	r3, #12
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	e7d3      	b.n	8008470 <_free_r+0x24>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	1821      	adds	r1, r4, r0
 80084cc:	428a      	cmp	r2, r1
 80084ce:	bf04      	itt	eq
 80084d0:	6811      	ldreq	r1, [r2, #0]
 80084d2:	6852      	ldreq	r2, [r2, #4]
 80084d4:	6062      	str	r2, [r4, #4]
 80084d6:	bf04      	itt	eq
 80084d8:	1809      	addeq	r1, r1, r0
 80084da:	6021      	streq	r1, [r4, #0]
 80084dc:	605c      	str	r4, [r3, #4]
 80084de:	e7c7      	b.n	8008470 <_free_r+0x24>
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop
 80084e4:	2000076c 	.word	0x2000076c

080084e8 <_malloc_r>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	1ccd      	adds	r5, r1, #3
 80084ec:	f025 0503 	bic.w	r5, r5, #3
 80084f0:	3508      	adds	r5, #8
 80084f2:	2d0c      	cmp	r5, #12
 80084f4:	bf38      	it	cc
 80084f6:	250c      	movcc	r5, #12
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	4606      	mov	r6, r0
 80084fc:	db01      	blt.n	8008502 <_malloc_r+0x1a>
 80084fe:	42a9      	cmp	r1, r5
 8008500:	d903      	bls.n	800850a <_malloc_r+0x22>
 8008502:	230c      	movs	r3, #12
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	2000      	movs	r0, #0
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	f000 f9bb 	bl	8008884 <__malloc_lock>
 800850e:	4a21      	ldr	r2, [pc, #132]	; (8008594 <_malloc_r+0xac>)
 8008510:	6814      	ldr	r4, [r2, #0]
 8008512:	4621      	mov	r1, r4
 8008514:	b991      	cbnz	r1, 800853c <_malloc_r+0x54>
 8008516:	4c20      	ldr	r4, [pc, #128]	; (8008598 <_malloc_r+0xb0>)
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	b91b      	cbnz	r3, 8008524 <_malloc_r+0x3c>
 800851c:	4630      	mov	r0, r6
 800851e:	f000 f98f 	bl	8008840 <_sbrk_r>
 8008522:	6020      	str	r0, [r4, #0]
 8008524:	4629      	mov	r1, r5
 8008526:	4630      	mov	r0, r6
 8008528:	f000 f98a 	bl	8008840 <_sbrk_r>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d124      	bne.n	800857a <_malloc_r+0x92>
 8008530:	230c      	movs	r3, #12
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	4630      	mov	r0, r6
 8008536:	f000 f9a6 	bl	8008886 <__malloc_unlock>
 800853a:	e7e4      	b.n	8008506 <_malloc_r+0x1e>
 800853c:	680b      	ldr	r3, [r1, #0]
 800853e:	1b5b      	subs	r3, r3, r5
 8008540:	d418      	bmi.n	8008574 <_malloc_r+0x8c>
 8008542:	2b0b      	cmp	r3, #11
 8008544:	d90f      	bls.n	8008566 <_malloc_r+0x7e>
 8008546:	600b      	str	r3, [r1, #0]
 8008548:	50cd      	str	r5, [r1, r3]
 800854a:	18cc      	adds	r4, r1, r3
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f99a 	bl	8008886 <__malloc_unlock>
 8008552:	f104 000b 	add.w	r0, r4, #11
 8008556:	1d23      	adds	r3, r4, #4
 8008558:	f020 0007 	bic.w	r0, r0, #7
 800855c:	1ac3      	subs	r3, r0, r3
 800855e:	d0d3      	beq.n	8008508 <_malloc_r+0x20>
 8008560:	425a      	negs	r2, r3
 8008562:	50e2      	str	r2, [r4, r3]
 8008564:	e7d0      	b.n	8008508 <_malloc_r+0x20>
 8008566:	428c      	cmp	r4, r1
 8008568:	684b      	ldr	r3, [r1, #4]
 800856a:	bf16      	itet	ne
 800856c:	6063      	strne	r3, [r4, #4]
 800856e:	6013      	streq	r3, [r2, #0]
 8008570:	460c      	movne	r4, r1
 8008572:	e7eb      	b.n	800854c <_malloc_r+0x64>
 8008574:	460c      	mov	r4, r1
 8008576:	6849      	ldr	r1, [r1, #4]
 8008578:	e7cc      	b.n	8008514 <_malloc_r+0x2c>
 800857a:	1cc4      	adds	r4, r0, #3
 800857c:	f024 0403 	bic.w	r4, r4, #3
 8008580:	42a0      	cmp	r0, r4
 8008582:	d005      	beq.n	8008590 <_malloc_r+0xa8>
 8008584:	1a21      	subs	r1, r4, r0
 8008586:	4630      	mov	r0, r6
 8008588:	f000 f95a 	bl	8008840 <_sbrk_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d0cf      	beq.n	8008530 <_malloc_r+0x48>
 8008590:	6025      	str	r5, [r4, #0]
 8008592:	e7db      	b.n	800854c <_malloc_r+0x64>
 8008594:	2000076c 	.word	0x2000076c
 8008598:	20000770 	.word	0x20000770

0800859c <__ssputs_r>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	688e      	ldr	r6, [r1, #8]
 80085a2:	429e      	cmp	r6, r3
 80085a4:	4682      	mov	sl, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	4690      	mov	r8, r2
 80085aa:	4699      	mov	r9, r3
 80085ac:	d837      	bhi.n	800861e <__ssputs_r+0x82>
 80085ae:	898a      	ldrh	r2, [r1, #12]
 80085b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085b4:	d031      	beq.n	800861a <__ssputs_r+0x7e>
 80085b6:	6825      	ldr	r5, [r4, #0]
 80085b8:	6909      	ldr	r1, [r1, #16]
 80085ba:	1a6f      	subs	r7, r5, r1
 80085bc:	6965      	ldr	r5, [r4, #20]
 80085be:	2302      	movs	r3, #2
 80085c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80085c8:	f109 0301 	add.w	r3, r9, #1
 80085cc:	443b      	add	r3, r7
 80085ce:	429d      	cmp	r5, r3
 80085d0:	bf38      	it	cc
 80085d2:	461d      	movcc	r5, r3
 80085d4:	0553      	lsls	r3, r2, #21
 80085d6:	d530      	bpl.n	800863a <__ssputs_r+0x9e>
 80085d8:	4629      	mov	r1, r5
 80085da:	f7ff ff85 	bl	80084e8 <_malloc_r>
 80085de:	4606      	mov	r6, r0
 80085e0:	b950      	cbnz	r0, 80085f8 <__ssputs_r+0x5c>
 80085e2:	230c      	movs	r3, #12
 80085e4:	f8ca 3000 	str.w	r3, [sl]
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f8:	463a      	mov	r2, r7
 80085fa:	6921      	ldr	r1, [r4, #16]
 80085fc:	f7ff fc32 	bl	8007e64 <memcpy>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	6126      	str	r6, [r4, #16]
 800860e:	6165      	str	r5, [r4, #20]
 8008610:	443e      	add	r6, r7
 8008612:	1bed      	subs	r5, r5, r7
 8008614:	6026      	str	r6, [r4, #0]
 8008616:	60a5      	str	r5, [r4, #8]
 8008618:	464e      	mov	r6, r9
 800861a:	454e      	cmp	r6, r9
 800861c:	d900      	bls.n	8008620 <__ssputs_r+0x84>
 800861e:	464e      	mov	r6, r9
 8008620:	4632      	mov	r2, r6
 8008622:	4641      	mov	r1, r8
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	f7fe f911 	bl	800684c <memmove>
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	1b9b      	subs	r3, r3, r6
 800862e:	60a3      	str	r3, [r4, #8]
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	441e      	add	r6, r3
 8008634:	6026      	str	r6, [r4, #0]
 8008636:	2000      	movs	r0, #0
 8008638:	e7dc      	b.n	80085f4 <__ssputs_r+0x58>
 800863a:	462a      	mov	r2, r5
 800863c:	f000 f924 	bl	8008888 <_realloc_r>
 8008640:	4606      	mov	r6, r0
 8008642:	2800      	cmp	r0, #0
 8008644:	d1e2      	bne.n	800860c <__ssputs_r+0x70>
 8008646:	6921      	ldr	r1, [r4, #16]
 8008648:	4650      	mov	r0, sl
 800864a:	f7ff feff 	bl	800844c <_free_r>
 800864e:	e7c8      	b.n	80085e2 <__ssputs_r+0x46>

08008650 <_svfiprintf_r>:
 8008650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	461d      	mov	r5, r3
 8008656:	898b      	ldrh	r3, [r1, #12]
 8008658:	061f      	lsls	r7, r3, #24
 800865a:	b09d      	sub	sp, #116	; 0x74
 800865c:	4680      	mov	r8, r0
 800865e:	460c      	mov	r4, r1
 8008660:	4616      	mov	r6, r2
 8008662:	d50f      	bpl.n	8008684 <_svfiprintf_r+0x34>
 8008664:	690b      	ldr	r3, [r1, #16]
 8008666:	b96b      	cbnz	r3, 8008684 <_svfiprintf_r+0x34>
 8008668:	2140      	movs	r1, #64	; 0x40
 800866a:	f7ff ff3d 	bl	80084e8 <_malloc_r>
 800866e:	6020      	str	r0, [r4, #0]
 8008670:	6120      	str	r0, [r4, #16]
 8008672:	b928      	cbnz	r0, 8008680 <_svfiprintf_r+0x30>
 8008674:	230c      	movs	r3, #12
 8008676:	f8c8 3000 	str.w	r3, [r8]
 800867a:	f04f 30ff 	mov.w	r0, #4294967295
 800867e:	e0c8      	b.n	8008812 <_svfiprintf_r+0x1c2>
 8008680:	2340      	movs	r3, #64	; 0x40
 8008682:	6163      	str	r3, [r4, #20]
 8008684:	2300      	movs	r3, #0
 8008686:	9309      	str	r3, [sp, #36]	; 0x24
 8008688:	2320      	movs	r3, #32
 800868a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800868e:	2330      	movs	r3, #48	; 0x30
 8008690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008694:	9503      	str	r5, [sp, #12]
 8008696:	f04f 0b01 	mov.w	fp, #1
 800869a:	4637      	mov	r7, r6
 800869c:	463d      	mov	r5, r7
 800869e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086a2:	b10b      	cbz	r3, 80086a8 <_svfiprintf_r+0x58>
 80086a4:	2b25      	cmp	r3, #37	; 0x25
 80086a6:	d13e      	bne.n	8008726 <_svfiprintf_r+0xd6>
 80086a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80086ac:	d00b      	beq.n	80086c6 <_svfiprintf_r+0x76>
 80086ae:	4653      	mov	r3, sl
 80086b0:	4632      	mov	r2, r6
 80086b2:	4621      	mov	r1, r4
 80086b4:	4640      	mov	r0, r8
 80086b6:	f7ff ff71 	bl	800859c <__ssputs_r>
 80086ba:	3001      	adds	r0, #1
 80086bc:	f000 80a4 	beq.w	8008808 <_svfiprintf_r+0x1b8>
 80086c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c2:	4453      	add	r3, sl
 80086c4:	9309      	str	r3, [sp, #36]	; 0x24
 80086c6:	783b      	ldrb	r3, [r7, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 809d 	beq.w	8008808 <_svfiprintf_r+0x1b8>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f04f 32ff 	mov.w	r2, #4294967295
 80086d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	9307      	str	r3, [sp, #28]
 80086dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086e0:	931a      	str	r3, [sp, #104]	; 0x68
 80086e2:	462f      	mov	r7, r5
 80086e4:	2205      	movs	r2, #5
 80086e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80086ea:	4850      	ldr	r0, [pc, #320]	; (800882c <_svfiprintf_r+0x1dc>)
 80086ec:	f7f7 fd78 	bl	80001e0 <memchr>
 80086f0:	9b04      	ldr	r3, [sp, #16]
 80086f2:	b9d0      	cbnz	r0, 800872a <_svfiprintf_r+0xda>
 80086f4:	06d9      	lsls	r1, r3, #27
 80086f6:	bf44      	itt	mi
 80086f8:	2220      	movmi	r2, #32
 80086fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086fe:	071a      	lsls	r2, r3, #28
 8008700:	bf44      	itt	mi
 8008702:	222b      	movmi	r2, #43	; 0x2b
 8008704:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008708:	782a      	ldrb	r2, [r5, #0]
 800870a:	2a2a      	cmp	r2, #42	; 0x2a
 800870c:	d015      	beq.n	800873a <_svfiprintf_r+0xea>
 800870e:	9a07      	ldr	r2, [sp, #28]
 8008710:	462f      	mov	r7, r5
 8008712:	2000      	movs	r0, #0
 8008714:	250a      	movs	r5, #10
 8008716:	4639      	mov	r1, r7
 8008718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800871c:	3b30      	subs	r3, #48	; 0x30
 800871e:	2b09      	cmp	r3, #9
 8008720:	d94d      	bls.n	80087be <_svfiprintf_r+0x16e>
 8008722:	b1b8      	cbz	r0, 8008754 <_svfiprintf_r+0x104>
 8008724:	e00f      	b.n	8008746 <_svfiprintf_r+0xf6>
 8008726:	462f      	mov	r7, r5
 8008728:	e7b8      	b.n	800869c <_svfiprintf_r+0x4c>
 800872a:	4a40      	ldr	r2, [pc, #256]	; (800882c <_svfiprintf_r+0x1dc>)
 800872c:	1a80      	subs	r0, r0, r2
 800872e:	fa0b f000 	lsl.w	r0, fp, r0
 8008732:	4318      	orrs	r0, r3
 8008734:	9004      	str	r0, [sp, #16]
 8008736:	463d      	mov	r5, r7
 8008738:	e7d3      	b.n	80086e2 <_svfiprintf_r+0x92>
 800873a:	9a03      	ldr	r2, [sp, #12]
 800873c:	1d11      	adds	r1, r2, #4
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	9103      	str	r1, [sp, #12]
 8008742:	2a00      	cmp	r2, #0
 8008744:	db01      	blt.n	800874a <_svfiprintf_r+0xfa>
 8008746:	9207      	str	r2, [sp, #28]
 8008748:	e004      	b.n	8008754 <_svfiprintf_r+0x104>
 800874a:	4252      	negs	r2, r2
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	9207      	str	r2, [sp, #28]
 8008752:	9304      	str	r3, [sp, #16]
 8008754:	783b      	ldrb	r3, [r7, #0]
 8008756:	2b2e      	cmp	r3, #46	; 0x2e
 8008758:	d10c      	bne.n	8008774 <_svfiprintf_r+0x124>
 800875a:	787b      	ldrb	r3, [r7, #1]
 800875c:	2b2a      	cmp	r3, #42	; 0x2a
 800875e:	d133      	bne.n	80087c8 <_svfiprintf_r+0x178>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	1d1a      	adds	r2, r3, #4
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	9203      	str	r2, [sp, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	bfb8      	it	lt
 800876c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008770:	3702      	adds	r7, #2
 8008772:	9305      	str	r3, [sp, #20]
 8008774:	4d2e      	ldr	r5, [pc, #184]	; (8008830 <_svfiprintf_r+0x1e0>)
 8008776:	7839      	ldrb	r1, [r7, #0]
 8008778:	2203      	movs	r2, #3
 800877a:	4628      	mov	r0, r5
 800877c:	f7f7 fd30 	bl	80001e0 <memchr>
 8008780:	b138      	cbz	r0, 8008792 <_svfiprintf_r+0x142>
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	1b40      	subs	r0, r0, r5
 8008786:	fa03 f000 	lsl.w	r0, r3, r0
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	4303      	orrs	r3, r0
 800878e:	3701      	adds	r7, #1
 8008790:	9304      	str	r3, [sp, #16]
 8008792:	7839      	ldrb	r1, [r7, #0]
 8008794:	4827      	ldr	r0, [pc, #156]	; (8008834 <_svfiprintf_r+0x1e4>)
 8008796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800879a:	2206      	movs	r2, #6
 800879c:	1c7e      	adds	r6, r7, #1
 800879e:	f7f7 fd1f 	bl	80001e0 <memchr>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d038      	beq.n	8008818 <_svfiprintf_r+0x1c8>
 80087a6:	4b24      	ldr	r3, [pc, #144]	; (8008838 <_svfiprintf_r+0x1e8>)
 80087a8:	bb13      	cbnz	r3, 80087f0 <_svfiprintf_r+0x1a0>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	3307      	adds	r3, #7
 80087ae:	f023 0307 	bic.w	r3, r3, #7
 80087b2:	3308      	adds	r3, #8
 80087b4:	9303      	str	r3, [sp, #12]
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	444b      	add	r3, r9
 80087ba:	9309      	str	r3, [sp, #36]	; 0x24
 80087bc:	e76d      	b.n	800869a <_svfiprintf_r+0x4a>
 80087be:	fb05 3202 	mla	r2, r5, r2, r3
 80087c2:	2001      	movs	r0, #1
 80087c4:	460f      	mov	r7, r1
 80087c6:	e7a6      	b.n	8008716 <_svfiprintf_r+0xc6>
 80087c8:	2300      	movs	r3, #0
 80087ca:	3701      	adds	r7, #1
 80087cc:	9305      	str	r3, [sp, #20]
 80087ce:	4619      	mov	r1, r3
 80087d0:	250a      	movs	r5, #10
 80087d2:	4638      	mov	r0, r7
 80087d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087d8:	3a30      	subs	r2, #48	; 0x30
 80087da:	2a09      	cmp	r2, #9
 80087dc:	d903      	bls.n	80087e6 <_svfiprintf_r+0x196>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0c8      	beq.n	8008774 <_svfiprintf_r+0x124>
 80087e2:	9105      	str	r1, [sp, #20]
 80087e4:	e7c6      	b.n	8008774 <_svfiprintf_r+0x124>
 80087e6:	fb05 2101 	mla	r1, r5, r1, r2
 80087ea:	2301      	movs	r3, #1
 80087ec:	4607      	mov	r7, r0
 80087ee:	e7f0      	b.n	80087d2 <_svfiprintf_r+0x182>
 80087f0:	ab03      	add	r3, sp, #12
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4622      	mov	r2, r4
 80087f6:	4b11      	ldr	r3, [pc, #68]	; (800883c <_svfiprintf_r+0x1ec>)
 80087f8:	a904      	add	r1, sp, #16
 80087fa:	4640      	mov	r0, r8
 80087fc:	f7fe f8dc 	bl	80069b8 <_printf_float>
 8008800:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008804:	4681      	mov	r9, r0
 8008806:	d1d6      	bne.n	80087b6 <_svfiprintf_r+0x166>
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	065b      	lsls	r3, r3, #25
 800880c:	f53f af35 	bmi.w	800867a <_svfiprintf_r+0x2a>
 8008810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008812:	b01d      	add	sp, #116	; 0x74
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	ab03      	add	r3, sp, #12
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	4622      	mov	r2, r4
 800881e:	4b07      	ldr	r3, [pc, #28]	; (800883c <_svfiprintf_r+0x1ec>)
 8008820:	a904      	add	r1, sp, #16
 8008822:	4640      	mov	r0, r8
 8008824:	f7fe fb7e 	bl	8006f24 <_printf_i>
 8008828:	e7ea      	b.n	8008800 <_svfiprintf_r+0x1b0>
 800882a:	bf00      	nop
 800882c:	0800b39c 	.word	0x0800b39c
 8008830:	0800b3a2 	.word	0x0800b3a2
 8008834:	0800b3a6 	.word	0x0800b3a6
 8008838:	080069b9 	.word	0x080069b9
 800883c:	0800859d 	.word	0x0800859d

08008840 <_sbrk_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4c06      	ldr	r4, [pc, #24]	; (800885c <_sbrk_r+0x1c>)
 8008844:	2300      	movs	r3, #0
 8008846:	4605      	mov	r5, r0
 8008848:	4608      	mov	r0, r1
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	f7f9 f998 	bl	8001b80 <_sbrk>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d102      	bne.n	800885a <_sbrk_r+0x1a>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	b103      	cbz	r3, 800885a <_sbrk_r+0x1a>
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	200008ec 	.word	0x200008ec

08008860 <__ascii_mbtowc>:
 8008860:	b082      	sub	sp, #8
 8008862:	b901      	cbnz	r1, 8008866 <__ascii_mbtowc+0x6>
 8008864:	a901      	add	r1, sp, #4
 8008866:	b142      	cbz	r2, 800887a <__ascii_mbtowc+0x1a>
 8008868:	b14b      	cbz	r3, 800887e <__ascii_mbtowc+0x1e>
 800886a:	7813      	ldrb	r3, [r2, #0]
 800886c:	600b      	str	r3, [r1, #0]
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	1c10      	adds	r0, r2, #0
 8008872:	bf18      	it	ne
 8008874:	2001      	movne	r0, #1
 8008876:	b002      	add	sp, #8
 8008878:	4770      	bx	lr
 800887a:	4610      	mov	r0, r2
 800887c:	e7fb      	b.n	8008876 <__ascii_mbtowc+0x16>
 800887e:	f06f 0001 	mvn.w	r0, #1
 8008882:	e7f8      	b.n	8008876 <__ascii_mbtowc+0x16>

08008884 <__malloc_lock>:
 8008884:	4770      	bx	lr

08008886 <__malloc_unlock>:
 8008886:	4770      	bx	lr

08008888 <_realloc_r>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	4607      	mov	r7, r0
 800888c:	4614      	mov	r4, r2
 800888e:	460e      	mov	r6, r1
 8008890:	b921      	cbnz	r1, 800889c <_realloc_r+0x14>
 8008892:	4611      	mov	r1, r2
 8008894:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008898:	f7ff be26 	b.w	80084e8 <_malloc_r>
 800889c:	b922      	cbnz	r2, 80088a8 <_realloc_r+0x20>
 800889e:	f7ff fdd5 	bl	800844c <_free_r>
 80088a2:	4625      	mov	r5, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a8:	f000 f821 	bl	80088ee <_malloc_usable_size_r>
 80088ac:	42a0      	cmp	r0, r4
 80088ae:	d20f      	bcs.n	80088d0 <_realloc_r+0x48>
 80088b0:	4621      	mov	r1, r4
 80088b2:	4638      	mov	r0, r7
 80088b4:	f7ff fe18 	bl	80084e8 <_malloc_r>
 80088b8:	4605      	mov	r5, r0
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d0f2      	beq.n	80088a4 <_realloc_r+0x1c>
 80088be:	4631      	mov	r1, r6
 80088c0:	4622      	mov	r2, r4
 80088c2:	f7ff facf 	bl	8007e64 <memcpy>
 80088c6:	4631      	mov	r1, r6
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff fdbf 	bl	800844c <_free_r>
 80088ce:	e7e9      	b.n	80088a4 <_realloc_r+0x1c>
 80088d0:	4635      	mov	r5, r6
 80088d2:	e7e7      	b.n	80088a4 <_realloc_r+0x1c>

080088d4 <__ascii_wctomb>:
 80088d4:	b149      	cbz	r1, 80088ea <__ascii_wctomb+0x16>
 80088d6:	2aff      	cmp	r2, #255	; 0xff
 80088d8:	bf85      	ittet	hi
 80088da:	238a      	movhi	r3, #138	; 0x8a
 80088dc:	6003      	strhi	r3, [r0, #0]
 80088de:	700a      	strbls	r2, [r1, #0]
 80088e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80088e4:	bf98      	it	ls
 80088e6:	2001      	movls	r0, #1
 80088e8:	4770      	bx	lr
 80088ea:	4608      	mov	r0, r1
 80088ec:	4770      	bx	lr

080088ee <_malloc_usable_size_r>:
 80088ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f2:	1f18      	subs	r0, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bfbc      	itt	lt
 80088f8:	580b      	ldrlt	r3, [r1, r0]
 80088fa:	18c0      	addlt	r0, r0, r3
 80088fc:	4770      	bx	lr
	...

08008900 <_init>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr

0800890c <_fini>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr
