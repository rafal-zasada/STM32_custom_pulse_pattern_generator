
PWM_separate_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000484c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028fc  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d0  080072d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080072d0  080072d0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072d0  080072d0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080072d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000005c  08007334  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08007334  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134a9  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b5  00000000  00000000  00033535  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001018  00000000  00000000  00035bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00036c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e43  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f221  00000000  00000000  0005e8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efef8  00000000  00000000  0006db14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015da0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004124  00000000  00000000  0015da88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049bc 	.word	0x080049bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080049bc 	.word	0x080049bc

080001c8 <update_OLED_display>:

OLEDStates_type OLEDDisplayState = Case1;


void update_OLED_display(OLEDStates_type State)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	switch(State)
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b06      	cmp	r3, #6
 80001d6:	d859      	bhi.n	800028c <update_OLED_display+0xc4>
 80001d8:	a201      	add	r2, pc, #4	; (adr r2, 80001e0 <update_OLED_display+0x18>)
 80001da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001de:	bf00      	nop
 80001e0:	080001fd 	.word	0x080001fd
 80001e4:	08000245 	.word	0x08000245
 80001e8:	0800028d 	.word	0x0800028d
 80001ec:	0800028d 	.word	0x0800028d
 80001f0:	0800028d 	.word	0x0800028d
 80001f4:	0800028d 	.word	0x0800028d
 80001f8:	0800028d 	.word	0x0800028d
	{
	case Case1:
		ssd1306_Fill(Black);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f004 fa17 	bl	8004630 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000202:	2100      	movs	r1, #0
 8000204:	2000      	movs	r0, #0
 8000206:	f004 fb61 	bl	80048cc <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 1", Font_16x26, White);
 800020a:	4a23      	ldr	r2, [pc, #140]	; (8000298 <update_OLED_display+0xd0>)
 800020c:	2301      	movs	r3, #1
 800020e:	ca06      	ldmia	r2, {r1, r2}
 8000210:	4822      	ldr	r0, [pc, #136]	; (800029c <update_OLED_display+0xd4>)
 8000212:	f004 fb35 	bl	8004880 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8000216:	2120      	movs	r1, #32
 8000218:	2000      	movs	r0, #0
 800021a:	f004 fb57 	bl	80048cc <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 800021e:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <update_OLED_display+0xd8>)
 8000220:	2301      	movs	r3, #1
 8000222:	ca06      	ldmia	r2, {r1, r2}
 8000224:	481f      	ldr	r0, [pc, #124]	; (80002a4 <update_OLED_display+0xdc>)
 8000226:	f004 fb2b 	bl	8004880 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 800022a:	212d      	movs	r1, #45	; 0x2d
 800022c:	2000      	movs	r0, #0
 800022e:	f004 fb4d 	bl	80048cc <ssd1306_SetCursor>
		ssd1306_WriteString("0.850 1.925", Font_11x18, White);
 8000232:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <update_OLED_display+0xe0>)
 8000234:	2301      	movs	r3, #1
 8000236:	ca06      	ldmia	r2, {r1, r2}
 8000238:	481c      	ldr	r0, [pc, #112]	; (80002ac <update_OLED_display+0xe4>)
 800023a:	f004 fb21 	bl	8004880 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800023e:	f004 fa19 	bl	8004674 <ssd1306_UpdateScreen>
		break;
 8000242:	e024      	b.n	800028e <update_OLED_display+0xc6>

	case Case2:
		ssd1306_Fill(Black);
 8000244:	2000      	movs	r0, #0
 8000246:	f004 f9f3 	bl	8004630 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800024a:	2100      	movs	r1, #0
 800024c:	2000      	movs	r0, #0
 800024e:	f004 fb3d 	bl	80048cc <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 2", Font_16x26, White);
 8000252:	4a11      	ldr	r2, [pc, #68]	; (8000298 <update_OLED_display+0xd0>)
 8000254:	2301      	movs	r3, #1
 8000256:	ca06      	ldmia	r2, {r1, r2}
 8000258:	4815      	ldr	r0, [pc, #84]	; (80002b0 <update_OLED_display+0xe8>)
 800025a:	f004 fb11 	bl	8004880 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 800025e:	2120      	movs	r1, #32
 8000260:	2000      	movs	r0, #0
 8000262:	f004 fb33 	bl	80048cc <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <update_OLED_display+0xd8>)
 8000268:	2301      	movs	r3, #1
 800026a:	ca06      	ldmia	r2, {r1, r2}
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <update_OLED_display+0xdc>)
 800026e:	f004 fb07 	bl	8004880 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000272:	212d      	movs	r1, #45	; 0x2d
 8000274:	2000      	movs	r0, #0
 8000276:	f004 fb29 	bl	80048cc <ssd1306_SetCursor>
		ssd1306_WriteString("1.350 1.800", Font_11x18, White);
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <update_OLED_display+0xe0>)
 800027c:	2301      	movs	r3, #1
 800027e:	ca06      	ldmia	r2, {r1, r2}
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <update_OLED_display+0xec>)
 8000282:	f004 fafd 	bl	8004880 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000286:	f004 f9f5 	bl	8004674 <ssd1306_UpdateScreen>
		break;
 800028a:	e000      	b.n	800028e <update_OLED_display+0xc6>

	case Case7:
		break;

	default:
		break;
 800028c:	bf00      	nop
	}


}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000054 	.word	0x20000054
 800029c:	080049d4 	.word	0x080049d4
 80002a0:	20000044 	.word	0x20000044
 80002a4:	080049dc 	.word	0x080049dc
 80002a8:	2000004c 	.word	0x2000004c
 80002ac:	080049f0 	.word	0x080049f0
 80002b0:	080049fc 	.word	0x080049fc
 80002b4:	08004a04 	.word	0x08004a04

080002b8 <HAL_TIM_PeriodElapsedCallback>:
int CurrentFrequency;

extern OLEDStates_type OLEDDisplayState;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);				// just for debugging with scope
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	4811      	ldr	r0, [pc, #68]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80002c4:	f000 fff8 	bl	80012b8 <HAL_GPIO_TogglePin>

	  if(TIM2->ARR == CasesSet1[CurrentCase].Freq_1)	// writing directly to registers to avoid delays
 80002c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ce:	4a0f      	ldr	r2, [pc, #60]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80002d0:	6812      	ldr	r2, [r2, #0]
 80002d2:	490f      	ldr	r1, [pc, #60]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80002d4:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80002d8:	4293      	cmp	r3, r2
 80002da:	d109      	bne.n	80002f0 <HAL_TIM_PeriodElapsedCallback+0x38>
	  {
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_2;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	4413      	add	r3, r2
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ec:	62da      	str	r2, [r3, #44]	; 0x2c
	  }
	  else
	  {
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_1;
	  }
}
 80002ee:	e007      	b.n	8000300 <HAL_TIM_PeriodElapsedCallback+0x48>
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_1;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80002f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80002fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	48000800 	.word	0x48000800
 800030c:	20000484 	.word	0x20000484
 8000310:	20000000 	.word	0x20000000

08000314 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)	// case up button pressed
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	2b04      	cmp	r3, #4
 8000322:	d10b      	bne.n	800033c <HAL_GPIO_EXTI_Callback+0x28>
	{
		CurrentCase++;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	4a13      	ldr	r2, [pc, #76]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 800032c:	6013      	str	r3, [r2, #0]
		if(CurrentCase > 6)
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b06      	cmp	r3, #6
 8000334:	dd02      	ble.n	800033c <HAL_GPIO_EXTI_Callback+0x28>
			CurrentCase = 6;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 8000338:	2206      	movs	r2, #6
 800033a:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3)	//case down button pressed
 800033c:	88fb      	ldrh	r3, [r7, #6]
 800033e:	2b08      	cmp	r3, #8
 8000340:	d10b      	bne.n	800035a <HAL_GPIO_EXTI_Callback+0x46>
	{
		CurrentCase--;
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3b01      	subs	r3, #1
 8000348:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 800034a:	6013      	str	r3, [r2, #0]
		if(CurrentCase < 0)
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	da02      	bge.n	800035a <HAL_GPIO_EXTI_Callback+0x46>
			CurrentCase = 0;
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
	}

	OLEDDisplayState = CurrentCase++; // 0 = Case1
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	4905      	ldr	r1, [pc, #20]	; (8000378 <HAL_GPIO_EXTI_Callback+0x64>)
 8000362:	600a      	str	r2, [r1, #0]
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <HAL_GPIO_EXTI_Callback+0x68>)
 8000368:	701a      	strb	r2, [r3, #0]

}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000484 	.word	0x20000484
 800037c:	20000078 	.word	0x20000078

08000380 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b36      	ldr	r3, [pc, #216]	; (8000470 <MX_GPIO_Init+0xf0>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	4a35      	ldr	r2, [pc, #212]	; (8000470 <MX_GPIO_Init+0xf0>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a2:	4b33      	ldr	r3, [pc, #204]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b30      	ldr	r3, [pc, #192]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a2f      	ldr	r2, [pc, #188]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b2d      	ldr	r3, [pc, #180]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c6:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a29      	ldr	r2, [pc, #164]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003cc:	f043 0308 	orr.w	r3, r3, #8
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b27      	ldr	r3, [pc, #156]	; (8000470 <MX_GPIO_Init+0xf0>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2120      	movs	r1, #32
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f000 ff4f 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	4821      	ldr	r0, [pc, #132]	; (8000474 <MX_GPIO_Init+0xf4>)
 80003f0:	f000 ff4a 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80003f4:	230c      	movs	r3, #12
 80003f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <MX_GPIO_Init+0xf8>)
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	4619      	mov	r1, r3
 8000406:	481b      	ldr	r0, [pc, #108]	; (8000474 <MX_GPIO_Init+0xf4>)
 8000408:	f000 fd96 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800040c:	2320      	movs	r3, #32
 800040e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	4619      	mov	r1, r3
 8000422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000426:	f000 fd87 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4619      	mov	r1, r3
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_GPIO_Init+0xf4>)
 8000442:	f000 fd79 	bl	8000f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	2008      	movs	r0, #8
 800044c:	f000 fd3d 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000450:	2008      	movs	r0, #8
 8000452:	f000 fd56 	bl	8000f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	2009      	movs	r0, #9
 800045c:	f000 fd35 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000460:	2009      	movs	r0, #9
 8000462:	f000 fd4e 	bl	8000f02 <HAL_NVIC_EnableIRQ>

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	48000800 	.word	0x48000800
 8000478:	10210000 	.word	0x10210000

0800047c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_I2C3_Init+0x74>)
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <MX_I2C3_Init+0x78>)
 8000484:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_I2C3_Init+0x74>)
 8000488:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <MX_I2C3_Init+0x7c>)
 800048a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_I2C3_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_I2C3_Init+0x74>)
 8000494:	2201      	movs	r2, #1
 8000496:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_I2C3_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_I2C3_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_I2C3_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_I2C3_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_I2C3_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <MX_I2C3_Init+0x74>)
 80004b8:	f000 ff30 	bl	800131c <HAL_I2C_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80004c2:	f000 f961 	bl	8000788 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c6:	2100      	movs	r1, #0
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <MX_I2C3_Init+0x74>)
 80004ca:	f001 fa93 	bl	80019f4 <HAL_I2CEx_ConfigAnalogFilter>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80004d4:	f000 f958 	bl	8000788 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80004d8:	2100      	movs	r1, #0
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_I2C3_Init+0x74>)
 80004dc:	f001 fad5 	bl	8001a8a <HAL_I2CEx_ConfigDigitalFilter>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80004e6:	f000 f94f 	bl	8000788 <Error_Handler>
  }

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000494 	.word	0x20000494
 80004f4:	40005c00 	.word	0x40005c00
 80004f8:	10909cec 	.word	0x10909cec

080004fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <HAL_I2C_MspInit+0x7c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d127      	bne.n	800056e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <HAL_I2C_MspInit+0x80>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a16      	ldr	r2, [pc, #88]	; (800057c <HAL_I2C_MspInit+0x80>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_I2C_MspInit+0x80>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000536:	2303      	movs	r3, #3
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800053a:	2312      	movs	r3, #18
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000546:	2304      	movs	r3, #4
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <HAL_I2C_MspInit+0x84>)
 8000552:	f000 fcf1 	bl	8000f38 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <HAL_I2C_MspInit+0x80>)
 8000558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_I2C_MspInit+0x80>)
 800055c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000560:	6593      	str	r3, [r2, #88]	; 0x58
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_I2C_MspInit+0x80>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40005c00 	.word	0x40005c00
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb2c 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f883 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f7ff fef5 	bl	8000380 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000596:	f000 f99f 	bl	80008d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800059a:	f000 fa15 	bl	80009c8 <MX_TIM3_Init>
  MX_I2C3_Init();
 800059e:	f7ff ff6d 	bl	800047c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  CurrentCase = 2; // array index - actual Case is + 1
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <main+0xe4>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	601a      	str	r2, [r3, #0]
  CurrentFrequency = CasesSet1[CurrentCase].Freq_1;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <main+0xe4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a2f      	ldr	r2, [pc, #188]	; (800066c <main+0xe8>)
 80005ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005b2:	4a2f      	ldr	r2, [pc, #188]	; (8000670 <main+0xec>)
 80005b4:	6013      	str	r3, [r2, #0]


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005b6:	2100      	movs	r1, #0
 80005b8:	482e      	ldr	r0, [pc, #184]	; (8000674 <main+0xf0>)
 80005ba:	f002 fea3 	bl	8003304 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3); // to be enabled
 80005be:	482e      	ldr	r0, [pc, #184]	; (8000678 <main+0xf4>)
 80005c0:	f002 fdce 	bl	8003160 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  ssd1306_Init();
 80005c4:	f003 ffc6 	bl	8004554 <ssd1306_Init>
  ssd1306_TestFonts();
 80005c8:	f004 f998 	bl	80048fc <ssd1306_TestFonts>
  HAL_Delay(300);
 80005cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005d0:	f000 fb7e 	bl	8000cd0 <HAL_Delay>

ssd1306_Fill(Black);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f004 f82b 	bl	8004630 <ssd1306_Fill>
ssd1306_SetCursor(0, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f004 f975 	bl	80048cc <ssd1306_SetCursor>
ssd1306_WriteString(" Case 1", Font_16x26, White);
 80005e2:	4a26      	ldr	r2, [pc, #152]	; (800067c <main+0xf8>)
 80005e4:	2301      	movs	r3, #1
 80005e6:	ca06      	ldmia	r2, {r1, r2}
 80005e8:	4825      	ldr	r0, [pc, #148]	; (8000680 <main+0xfc>)
 80005ea:	f004 f949 	bl	8004880 <ssd1306_WriteString>
ssd1306_SetCursor(0, 32);
 80005ee:	2120      	movs	r1, #32
 80005f0:	2000      	movs	r0, #0
 80005f2:	f004 f96b 	bl	80048cc <ssd1306_SetCursor>
ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <main+0x100>)
 80005f8:	2301      	movs	r3, #1
 80005fa:	ca06      	ldmia	r2, {r1, r2}
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <main+0x104>)
 80005fe:	f004 f93f 	bl	8004880 <ssd1306_WriteString>
ssd1306_SetCursor(0, 45);
 8000602:	212d      	movs	r1, #45	; 0x2d
 8000604:	2000      	movs	r0, #0
 8000606:	f004 f961 	bl	80048cc <ssd1306_SetCursor>
ssd1306_WriteString("2.324 3.535", Font_11x18, White);
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <main+0x108>)
 800060c:	2301      	movs	r3, #1
 800060e:	ca06      	ldmia	r2, {r1, r2}
 8000610:	481f      	ldr	r0, [pc, #124]	; (8000690 <main+0x10c>)
 8000612:	f004 f935 	bl	8004880 <ssd1306_WriteString>
ssd1306_UpdateScreen();
 8000616:	f004 f82d 	bl	8004674 <ssd1306_UpdateScreen>

char string1[20] = "a"; //{0};  //debug only
 800061a:	2361      	movs	r3, #97	; 0x61
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]

  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800062c:	2120      	movs	r1, #32
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fe41 	bl	80012b8 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000636:	20c8      	movs	r0, #200	; 0xc8
 8000638:	f000 fb4a 	bl	8000cd0 <HAL_Delay>

    update_OLED_display(OLEDDisplayState);
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <main+0x110>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdc1 	bl	80001c8 <update_OLED_display>
    HAL_Delay(200);
 8000646:	20c8      	movs	r0, #200	; 0xc8
 8000648:	f000 fb42 	bl	8000cd0 <HAL_Delay>

    ssd1306_SetCursor(0, 0);
 800064c:	2100      	movs	r1, #0
 800064e:	2000      	movs	r0, #0
 8000650:	f004 f93c 	bl	80048cc <ssd1306_SetCursor>
    ssd1306_WriteString(string1, Font_7x10, White);
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <main+0x100>)
 8000656:	1d38      	adds	r0, r7, #4
 8000658:	2301      	movs	r3, #1
 800065a:	ca06      	ldmia	r2, {r1, r2}
 800065c:	f004 f910 	bl	8004880 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000660:	f004 f808 	bl	8004674 <ssd1306_UpdateScreen>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000664:	e7e2      	b.n	800062c <main+0xa8>
 8000666:	bf00      	nop
 8000668:	20000484 	.word	0x20000484
 800066c:	20000000 	.word	0x20000000
 8000670:	2000048c 	.word	0x2000048c
 8000674:	2000052c 	.word	0x2000052c
 8000678:	200004e0 	.word	0x200004e0
 800067c:	20000054 	.word	0x20000054
 8000680:	08004a10 	.word	0x08004a10
 8000684:	20000044 	.word	0x20000044
 8000688:	08004a18 	.word	0x08004a18
 800068c:	2000004c 	.word	0x2000004c
 8000690:	08004a2c 	.word	0x08004a2c
 8000694:	20000078 	.word	0x20000078

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b8      	sub	sp, #224	; 0xe0
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 f980 	bl	80049ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2288      	movs	r2, #136	; 0x88
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f972 	bl	80049ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c8:	2310      	movs	r3, #16
 80006ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006da:	2360      	movs	r3, #96	; 0x60
 80006dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006f2:	2328      	movs	r3, #40	; 0x28
 80006f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fa6c 	bl	8001bec <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800071a:	f000 f835 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fe38 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800074e:	f000 f81b 	bl	8000788 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000758:	2300      	movs	r3, #0
 800075a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fff6 	bl	8002750 <HAL_RCCEx_PeriphCLKConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800076a:	f000 f80d 	bl	8000788 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000772:	f001 f9e5 	bl	8001b40 <HAL_PWREx_ControlVoltageScaling>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800077c:	f000 f804 	bl	8000788 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	37e0      	adds	r7, #224	; 0xe0
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x44>)
 80007a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6613      	str	r3, [r2, #96]	; 0x60
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x44>)
 80007b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x44>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6593      	str	r3, [r2, #88]	; 0x58
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 fa2c 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000840:	2004      	movs	r0, #4
 8000842:	f000 fd53 	bl	80012ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}

0800084a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800084e:	2008      	movs	r0, #8
 8000850:	f000 fd4c 	bl	80012ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <TIM3_IRQHandler+0x10>)
 800085e:	f002 fe57 	bl	8003510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200004e0 	.word	0x200004e0

0800086c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <SystemInit+0x64>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <SystemInit+0x64>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <SystemInit+0x68>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <SystemInit+0x68>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <SystemInit+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <SystemInit+0x68>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <SystemInit+0x68>)
 8000898:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800089c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <SystemInit+0x68>)
 80008a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <SystemInit+0x68>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <SystemInit+0x68>)
 80008b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <SystemInit+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SystemInit+0x64>)
 80008be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c2:	609a      	str	r2, [r3, #8]
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00
 80008d4:	40021000 	.word	0x40021000

080008d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
 8000906:	615a      	str	r2, [r3, #20]
 8000908:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_TIM2_Init+0xe8>)
 800090c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_TIM2_Init+0xe8>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_TIM2_Init+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 94118;
 800091e:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_TIM2_Init+0xe8>)
 8000920:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <MX_TIM2_Init+0xec>)
 8000922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_TIM2_Init+0xe8>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_TIM2_Init+0xe8>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000930:	4823      	ldr	r0, [pc, #140]	; (80009c0 <MX_TIM2_Init+0xe8>)
 8000932:	f002 fbbd 	bl	80030b0 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800093c:	f7ff ff24 	bl	8000788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	4619      	mov	r1, r3
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <MX_TIM2_Init+0xe8>)
 800094e:	f003 f80f 	bl	8003970 <HAL_TIM_ConfigClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000958:	f7ff ff16 	bl	8000788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800095c:	4818      	ldr	r0, [pc, #96]	; (80009c0 <MX_TIM2_Init+0xe8>)
 800095e:	f002 fc6f 	bl	8003240 <HAL_TIM_PWM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000968:	f7ff ff0e 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096c:	2320      	movs	r3, #32
 800096e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_TIM2_Init+0xe8>)
 800097c:	f003 fd0a 	bl	8004394 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000986:	f7ff feff 	bl	8000788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098a:	2360      	movs	r3, #96	; 0x60
 800098c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1600;
 800098e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000992:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000998:	2304      	movs	r3, #4
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <MX_TIM2_Init+0xe8>)
 80009a4:	f002 fed4 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009ae:	f7ff feeb 	bl	8000788 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_TIM2_Init+0xe8>)
 80009b4:	f000 f8ba 	bl	8000b2c <HAL_TIM_MspPostInit>

}
 80009b8:	bf00      	nop
 80009ba:	3738      	adds	r7, #56	; 0x38
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000052c 	.word	0x2000052c
 80009c4:	00016fa6 	.word	0x00016fa6

080009c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009e8:	4a20      	ldr	r2, [pc, #128]	; (8000a6c <MX_TIM3_Init+0xa4>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009fa:	220e      	movs	r2, #14
 80009fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0a:	4817      	ldr	r0, [pc, #92]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a0c:	f002 fb50 	bl	80030b0 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a16:	f7ff feb7 	bl	8000788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4619      	mov	r1, r3
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a34:	f002 ff9c 	bl	8003970 <HAL_TIM_ConfigClockSource>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000a3e:	f7ff fea3 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a50:	f003 fca0 	bl	8004394 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a5a:	f7ff fe95 	bl	8000788 <Error_Handler>
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200004e0 	.word	0x200004e0
 8000a6c:	40000400 	.word	0x40000400

08000a70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a90:	d10c      	bne.n	8000aac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000aaa:	e034      	b.n	8000b16 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <HAL_TIM_Base_MspInit+0xb4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12f      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_TIM_Base_MspInit+0xb0>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000af6:	2302      	movs	r3, #2
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000b02:	f000 fa19 	bl	8000f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	201d      	movs	r0, #29
 8000b0c:	f000 f9dd 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b10:	201d      	movs	r0, #29
 8000b12:	f000 f9f6 	bl	8000f02 <HAL_NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40000400 	.word	0x40000400
 8000b28:	48000c00 	.word	0x48000c00

08000b2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b4c:	d11c      	bne.n	8000b88 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_TIM_MspPostInit+0x64>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_TIM_MspPostInit+0x64>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_TIM_MspPostInit+0x64>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b66:	2301      	movs	r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f000 f9d8 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff fe68 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b9e:	e003      	b.n	8000ba8 <LoopCopyDataInit>

08000ba0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ba2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ba4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ba6:	3104      	adds	r1, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bb0:	d3f6      	bcc.n	8000ba0 <CopyDataInit>
	ldr	r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bb4:	e002      	b.n	8000bbc <LoopFillZerobss>

08000bb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bb8:	f842 3b04 	str.w	r3, [r2], #4

08000bbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <LoopForever+0x16>)
	cmp	r2, r3
 8000bbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bc0:	d3f9      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 fecf 	bl	8004964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fcdd 	bl	8000584 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bd0:	080072d8 	.word	0x080072d8
	ldr	r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bd8:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8000bdc:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8000be0:	2000057c 	.word	0x2000057c

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f95f 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff fdc6 	bl	8000798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f96b 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f935 	bl	8000eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000040 	.word	0x20000040
 8000c88:	20000038 	.word	0x20000038
 8000c8c:	2000003c 	.word	0x2000003c

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000040 	.word	0x20000040
 8000cb4:	20000578 	.word	0x20000578

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000578 	.word	0x20000578

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_Delay+0x40>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000040 	.word	0x20000040

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e17f      	b.n	8001248 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8171 	beq.w	8001242 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d00b      	beq.n	8000f80 <HAL_GPIO_Init+0x48>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f74:	2b11      	cmp	r3, #17
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b12      	cmp	r3, #18
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d118      	bne.n	8001020 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x128>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	6939      	ldr	r1, [r7, #16]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80ac 	beq.w	8001242 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <HAL_GPIO_Init+0x32c>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	4a5d      	ldr	r2, [pc, #372]	; (8001264 <HAL_GPIO_Init+0x32c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6613      	str	r3, [r2, #96]	; 0x60
 80010f6:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <HAL_GPIO_Init+0x32c>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001102:	4a59      	ldr	r2, [pc, #356]	; (8001268 <HAL_GPIO_Init+0x330>)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x242>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_Init+0x334>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x23e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x338>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x23a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x33c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x236>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <HAL_GPIO_Init+0x340>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x232>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	; (800127c <HAL_GPIO_Init+0x344>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x22e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_GPIO_Init+0x348>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x22a>
 800115e:	2306      	movs	r3, #6
 8001160:	e00c      	b.n	800117c <HAL_GPIO_Init+0x244>
 8001162:	2307      	movs	r3, #7
 8001164:	e00a      	b.n	800117c <HAL_GPIO_Init+0x244>
 8001166:	2305      	movs	r3, #5
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x244>
 800116a:	2304      	movs	r3, #4
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x244>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x244>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x244>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x244>
 800117a:	2300      	movs	r3, #0
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800118c:	4936      	ldr	r1, [pc, #216]	; (8001268 <HAL_GPIO_Init+0x330>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <HAL_GPIO_Init+0x34c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011be:	4a31      	ldr	r2, [pc, #196]	; (8001284 <HAL_GPIO_Init+0x34c>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_GPIO_Init+0x34c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <HAL_GPIO_Init+0x34c>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_GPIO_Init+0x34c>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <HAL_GPIO_Init+0x34c>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_GPIO_Init+0x34c>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_GPIO_Init+0x34c>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa22 f303 	lsr.w	r3, r2, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	f47f ae78 	bne.w	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000800 	.word	0x48000800
 8001274:	48000c00 	.word	0x48000c00
 8001278:	48001000 	.word	0x48001000
 800127c:	48001400 	.word	0x48001400
 8001280:	48001800 	.word	0x48001800
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43d9      	mvns	r1, r3
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	400b      	ands	r3, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f802 	bl	8000314 <HAL_GPIO_EXTI_Callback>
  }
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e081      	b.n	8001432 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff f8da 	bl	80004fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800136c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800137c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d107      	bne.n	8001396 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	e006      	b.n	80013a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d104      	bne.n	80013b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	ea42 0103 	orr.w	r1, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	021a      	lsls	r2, r3, #8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69d9      	ldr	r1, [r3, #28]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4603      	mov	r3, r0
 800144c:	817b      	strh	r3, [r7, #10]
 800144e:	460b      	mov	r3, r1
 8001450:	813b      	strh	r3, [r7, #8]
 8001452:	4613      	mov	r3, r2
 8001454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b20      	cmp	r3, #32
 8001460:	f040 80f9 	bne.w	8001656 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <HAL_I2C_Mem_Write+0x34>
 800146a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001476:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0ed      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_I2C_Mem_Write+0x4e>
 8001486:	2302      	movs	r3, #2
 8001488:	e0e6      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001492:	f7ff fc11 	bl	8000cb8 <HAL_GetTick>
 8001496:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2319      	movs	r3, #25
 800149e:	2201      	movs	r2, #1
 80014a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f955 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0d1      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2221      	movs	r2, #33	; 0x21
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014dc:	88f8      	ldrh	r0, [r7, #6]
 80014de:	893a      	ldrh	r2, [r7, #8]
 80014e0:	8979      	ldrh	r1, [r7, #10]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4603      	mov	r3, r0
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f8b9 	bl	8001664 <I2C_RequestMemoryWrite>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0a9      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29b      	uxth	r3, r3
 800150a:	2bff      	cmp	r3, #255	; 0xff
 800150c:	d90e      	bls.n	800152c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	22ff      	movs	r2, #255	; 0xff
 8001512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	b2da      	uxtb	r2, r3
 800151a:	8979      	ldrh	r1, [r7, #10]
 800151c:	2300      	movs	r3, #0
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fa37 	bl	8001998 <I2C_TransferConfig>
 800152a:	e00f      	b.n	800154c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153a:	b2da      	uxtb	r2, r3
 800153c:	8979      	ldrh	r1, [r7, #10]
 800153e:	2300      	movs	r3, #0
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 fa26 	bl	8001998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f93f 	bl	80017d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e07b      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157a:	b29b      	uxth	r3, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d034      	beq.n	8001604 <HAL_I2C_Mem_Write+0x1c8>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d130      	bne.n	8001604 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f8d1 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e04d      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2bff      	cmp	r3, #255	; 0xff
 80015c4:	d90e      	bls.n	80015e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	22ff      	movs	r2, #255	; 0xff
 80015ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	8979      	ldrh	r1, [r7, #10]
 80015d4:	2300      	movs	r3, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f9db 	bl	8001998 <I2C_TransferConfig>
 80015e2:	e00f      	b.n	8001604 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	8979      	ldrh	r1, [r7, #10]
 80015f6:	2300      	movs	r3, #0
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f9ca 	bl	8001998 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001608:	b29b      	uxth	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d19e      	bne.n	800154c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f91e 	bl	8001854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e01a      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2220      	movs	r2, #32
 8001628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_I2C_Mem_Write+0x224>)
 8001636:	400b      	ands	r3, r1
 8001638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001656:	2302      	movs	r3, #2
  }
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	fe00e800 	.word	0xfe00e800

08001664 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	817b      	strh	r3, [r7, #10]
 8001676:	460b      	mov	r3, r1
 8001678:	813b      	strh	r3, [r7, #8]
 800167a:	4613      	mov	r3, r2
 800167c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	8979      	ldrh	r1, [r7, #10]
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <I2C_RequestMemoryWrite+0xa4>)
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f983 	bl	8001998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	69b9      	ldr	r1, [r7, #24]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f89c 	bl	80017d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e02c      	b.n	8001700 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d105      	bne.n	80016b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016ac:	893b      	ldrh	r3, [r7, #8]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
 80016b6:	e015      	b.n	80016e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016b8:	893b      	ldrh	r3, [r7, #8]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	69b9      	ldr	r1, [r7, #24]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f882 	bl	80017d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e012      	b.n	8001700 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016da:	893b      	ldrh	r3, [r7, #8]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2200      	movs	r2, #0
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f830 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	80002000 	.word	0x80002000

0800170c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b02      	cmp	r3, #2
 8001720:	d103      	bne.n	800172a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d007      	beq.n	8001748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	619a      	str	r2, [r3, #24]
  }
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001764:	e022      	b.n	80017ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d01e      	beq.n	80017ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176e:	f7ff faa3 	bl	8000cb8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d302      	bcc.n	8001784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d113      	bne.n	80017ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2220      	movs	r2, #32
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e00f      	b.n	80017cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4013      	ands	r3, r2
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d0cd      	beq.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017e0:	e02c      	b.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f870 	bl	80018cc <I2C_IsAcknowledgeFailed>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e02a      	b.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d01e      	beq.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017fe:	f7ff fa5b 	bl	8000cb8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	d302      	bcc.n	8001814 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d113      	bne.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e007      	b.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d1cb      	bne.n	80017e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001860:	e028      	b.n	80018b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f830 	bl	80018cc <I2C_IsAcknowledgeFailed>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e026      	b.n	80018c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001876:	f7ff fa1f 	bl	8000cb8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	d302      	bcc.n	800188c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d113      	bne.n	80018b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f043 0220 	orr.w	r2, r3, #32
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e007      	b.n	80018c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d1cf      	bne.n	8001862 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d151      	bne.n	800198a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e6:	e022      	b.n	800192e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d01e      	beq.n	800192e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f0:	f7ff f9e2 	bl	8000cb8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d302      	bcc.n	8001906 <I2C_IsAcknowledgeFailed+0x3a>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d113      	bne.n	800192e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f043 0220 	orr.w	r2, r3, #32
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e02e      	b.n	800198c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b20      	cmp	r3, #32
 800193a:	d1d5      	bne.n	80018e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2210      	movs	r2, #16
 8001942:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2220      	movs	r2, #32
 800194a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fedd 	bl	800170c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <I2C_IsAcknowledgeFailed+0xc8>)
 800195e:	400b      	ands	r3, r1
 8001960:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f043 0204 	orr.w	r2, r3, #4
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2220      	movs	r2, #32
 8001972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	fe00e800 	.word	0xfe00e800

08001998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	4613      	mov	r3, r2
 80019a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	0d5b      	lsrs	r3, r3, #21
 80019b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <I2C_TransferConfig+0x58>)
 80019ba:	430b      	orrs	r3, r1
 80019bc:	43db      	mvns	r3, r3
 80019be:	ea02 0103 	and.w	r1, r2, r3
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019c8:	7a7b      	ldrb	r3, [r7, #9]
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	431a      	orrs	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	03ff63ff 	.word	0x03ff63ff

080019f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d138      	bne.n	8001a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e032      	b.n	8001a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6819      	ldr	r1, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d139      	bne.n	8001b14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e033      	b.n	8001b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2224      	movs	r2, #36	; 0x24
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001adc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40007000 	.word	0x40007000

08001b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4e:	d130      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5c:	d038      	beq.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2232      	movs	r2, #50	; 0x32
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	3301      	adds	r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b84:	e002      	b.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b98:	d102      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f2      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bac:	d110      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e00f      	b.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d007      	beq.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40007000 	.word	0x40007000
 8001be4:	20000038 	.word	0x20000038
 8001be8:	431bde83 	.word	0x431bde83

08001bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e3d4      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4ba1      	ldr	r3, [pc, #644]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c08:	4b9e      	ldr	r3, [pc, #632]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80e4 	beq.w	8001de8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_RCC_OscConfig+0x4a>
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	f040 808b 	bne.w	8001d44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	f040 8087 	bne.w	8001d44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c36:	4b93      	ldr	r3, [pc, #588]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x62>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e3ac      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_RCC_OscConfig+0x7c>
 8001c5e:	4b89      	ldr	r3, [pc, #548]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c66:	e005      	b.n	8001c74 <HAL_RCC_OscConfig+0x88>
 8001c68:	4b86      	ldr	r3, [pc, #536]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d223      	bcs.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fd07 	bl	8002690 <RCC_SetFlashLatencyFromMSIRange>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e38d      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8c:	4b7d      	ldr	r3, [pc, #500]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a7c      	ldr	r2, [pc, #496]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b7a      	ldr	r3, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4977      	ldr	r1, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	4972      	ldr	r1, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
 8001cbe:	e025      	b.n	8001d0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	496a      	ldr	r1, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cde:	4b69      	ldr	r3, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	4965      	ldr	r1, [pc, #404]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fcc7 	bl	8002690 <RCC_SetFlashLatencyFromMSIRange>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e34d      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d0c:	f000 fc36 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8001d10:	4601      	mov	r1, r0
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_RCC_OscConfig+0x29c>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	fa21 f303 	lsr.w	r3, r1, r3
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x2a0>)
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d2c:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <HAL_RCC_OscConfig+0x2a4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ff71 	bl	8000c18 <HAL_InitTick>
 8001d36:	4603      	mov	r3, r0
 8001d38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d052      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	e331      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d032      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d4c:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d58:	f7fe ffae 	bl	8000cb8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d60:	f7fe ffaa 	bl	8000cb8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e31a      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d72:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a40      	ldr	r2, [pc, #256]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	493b      	ldr	r1, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	4936      	ldr	r1, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e01a      	b.n	8001de8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ff7b 	bl	8000cb8 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc6:	f7fe ff77 	bl	8000cb8 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e2e7      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1da>
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d074      	beq.n	8001ede <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d005      	beq.n	8001e06 <HAL_RCC_OscConfig+0x21a>
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d10e      	bne.n	8001e1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d10b      	bne.n	8001e1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d064      	beq.n	8001edc <HAL_RCC_OscConfig+0x2f0>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d160      	bne.n	8001edc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e2c4      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x24a>
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e01d      	b.n	8001e72 <HAL_RCC_OscConfig+0x286>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x26e>
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x286>
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x298>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe ff1d 	bl	8000cb8 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e80:	e011      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2ba>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08004a7c 	.word	0x08004a7c
 8001e8c:	20000038 	.word	0x20000038
 8001e90:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe ff10 	bl	8000cb8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e280      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea6:	4baf      	ldr	r3, [pc, #700]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2a8>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe ff00 	bl	8000cb8 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7fe fefc 	bl	8000cb8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e26c      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ece:	4ba5      	ldr	r3, [pc, #660]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2d0>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d060      	beq.n	8001fac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x310>
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d119      	bne.n	8001f2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d116      	bne.n	8001f2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001efc:	4b99      	ldr	r3, [pc, #612]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x328>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e249      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b93      	ldr	r3, [pc, #588]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	4990      	ldr	r1, [pc, #576]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f28:	e040      	b.n	8001fac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d023      	beq.n	8001f7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f32:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a8b      	ldr	r2, [pc, #556]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe febb 	bl	8000cb8 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7fe feb7 	bl	8000cb8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e227      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f58:	4b82      	ldr	r3, [pc, #520]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	497c      	ldr	r1, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e018      	b.n	8001fac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a79      	ldr	r2, [pc, #484]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fe97 	bl	8000cb8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fe93 	bl	8000cb8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e203      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa0:	4b70      	ldr	r3, [pc, #448]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d03c      	beq.n	8002032 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc6:	4a67      	ldr	r2, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fe72 	bl	8000cb8 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fe6e 	bl	8000cb8 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1de      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ef      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x3ec>
 8001ff8:	e01b      	b.n	8002032 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7fe fe55 	bl	8000cb8 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7fe fe51 	bl	8000cb8 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1c1      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80a6 	beq.w	800218c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002044:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a43      	ldr	r2, [pc, #268]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206c:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <HAL_RCC_OscConfig+0x57c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d118      	bne.n	80020aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_RCC_OscConfig+0x57c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3a      	ldr	r2, [pc, #232]	; (8002168 <HAL_RCC_OscConfig+0x57c>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002084:	f7fe fe18 	bl	8000cb8 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208c:	f7fe fe14 	bl	8000cb8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e184      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <HAL_RCC_OscConfig+0x57c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4d8>
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c2:	e024      	b.n	800210e <HAL_RCC_OscConfig+0x522>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d110      	bne.n	80020ee <HAL_RCC_OscConfig+0x502>
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	4a20      	ldr	r2, [pc, #128]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ec:	e00f      	b.n	800210e <HAL_RCC_OscConfig+0x522>
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7fe fdcf 	bl	8000cb8 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fdcb 	bl	8000cb8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e139      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_OscConfig+0x578>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ed      	beq.n	800211e <HAL_RCC_OscConfig+0x532>
 8002142:	e01a      	b.n	800217a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe fdb8 	bl	8000cb8 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe fdb4 	bl	8000cb8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d906      	bls.n	800216c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e122      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800216c:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1e8      	bne.n	800214c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a8a      	ldr	r2, [pc, #552]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8108 	beq.w	80023a6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	2b02      	cmp	r3, #2
 800219c:	f040 80d0 	bne.w	8002340 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021a0:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d130      	bne.n	8002216 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	3b01      	subs	r3, #1
 80021c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d127      	bne.n	8002216 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d11f      	bne.n	8002216 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e0:	2a07      	cmp	r2, #7
 80021e2:	bf14      	ite	ne
 80021e4:	2201      	movne	r2, #1
 80021e6:	2200      	moveq	r2, #0
 80021e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d113      	bne.n	8002216 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d109      	bne.n	8002216 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	3b01      	subs	r3, #1
 8002210:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d06e      	beq.n	80022f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d069      	beq.n	80022f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800221c:	4b64      	ldr	r3, [pc, #400]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002228:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0b7      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002238:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800223e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002244:	f7fe fd38 	bl	8000cb8 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fd34 	bl	8000cb8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0a4      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225e:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226a:	4b51      	ldr	r3, [pc, #324]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <HAL_RCC_OscConfig+0x7c8>)
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800227a:	3a01      	subs	r2, #1
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002284:	0212      	lsls	r2, r2, #8
 8002286:	4311      	orrs	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800228c:	0852      	lsrs	r2, r2, #1
 800228e:	3a01      	subs	r2, #1
 8002290:	0552      	lsls	r2, r2, #21
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002298:	0852      	lsrs	r2, r2, #1
 800229a:	3a01      	subs	r2, #1
 800229c:	0652      	lsls	r2, r2, #25
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a4:	0912      	lsrs	r2, r2, #4
 80022a6:	0452      	lsls	r2, r2, #17
 80022a8:	430a      	orrs	r2, r1
 80022aa:	4941      	ldr	r1, [pc, #260]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3e      	ldr	r2, [pc, #248]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022bc:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a3b      	ldr	r2, [pc, #236]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80022c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c8:	f7fe fcf6 	bl	8000cb8 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fcf2 	bl	8000cb8 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e062      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ee:	e05a      	b.n	80023a6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e059      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f4:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d152      	bne.n	80023a6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002316:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002318:	f7fe fcce 	bl	8000cb8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fcca 	bl	8000cb8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e03a      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x734>
 800233e:	e032      	b.n	80023a6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d02d      	beq.n	80023a2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800234c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002350:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002364:	f023 0303 	bic.w	r3, r3, #3
 8002368:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002370:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002378:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fc9d 	bl	8000cb8 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe fc99 	bl	8000cb8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e009      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_RCC_OscConfig+0x7c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x796>
 80023a0:	e001      	b.n	80023a6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	f99d808c 	.word	0xf99d808c

080023b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0c8      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d910      	bls.n	80023fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4961      	ldr	r1, [pc, #388]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b5f      	ldr	r3, [pc, #380]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b0      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d04c      	beq.n	80024a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002410:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d121      	bne.n	8002460 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e09e      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d115      	bne.n	8002460 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e092      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002440:	4b4a      	ldr	r3, [pc, #296]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e086      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e07e      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002460:	4b42      	ldr	r3, [pc, #264]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 0203 	bic.w	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	493f      	ldr	r1, [pc, #252]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002472:	f7fe fc21 	bl	8000cb8 <HAL_GetTick>
 8002476:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002478:	e00a      	b.n	8002490 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247a:	f7fe fc1d 	bl	8000cb8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e066      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 020c 	and.w	r2, r3, #12
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	429a      	cmp	r2, r3
 80024a0:	d1eb      	bne.n	800247a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	492c      	ldr	r1, [pc, #176]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d210      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4924      	ldr	r1, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x1b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e036      	b.n	800255e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4918      	ldr	r1, [pc, #96]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4910      	ldr	r1, [pc, #64]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252e:	f000 f825 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002532:	4601      	mov	r1, r0
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fb60 	bl	8000c18 <HAL_InitTick>
 8002558:	4603      	mov	r3, r0
 800255a:	72fb      	strb	r3, [r7, #11]

  return status;
 800255c:	7afb      	ldrb	r3, [r7, #11]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000
 800256c:	40021000 	.word	0x40021000
 8002570:	08004a7c 	.word	0x08004a7c
 8002574:	20000038 	.word	0x20000038
 8002578:	2000003c 	.word	0x2000003c

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d121      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d11e      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025bc:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 80025be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e005      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d8:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e004      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <HAL_RCC_GetSysClockFreq+0x110>)
 8002602:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d133      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d002      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0xa4>
 800261a:	2b03      	cmp	r3, #3
 800261c:	d003      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0xaa>
 800261e:	e005      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002622:	617b      	str	r3, [r7, #20]
      break;
 8002624:	e005      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_GetSysClockFreq+0x110>)
 8002628:	617b      	str	r3, [r7, #20]
      break;
 800262a:	e002      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	617b      	str	r3, [r7, #20]
      break;
 8002630:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	3301      	adds	r3, #1
 800263e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	fb02 f203 	mul.w	r2, r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_GetSysClockFreq+0x104>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0e5b      	lsrs	r3, r3, #25
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002672:	69bb      	ldr	r3, [r7, #24]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3724      	adds	r7, #36	; 0x24
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40021000 	.word	0x40021000
 8002684:	08004a8c 	.word	0x08004a8c
 8002688:	00f42400 	.word	0x00f42400
 800268c:	007a1200 	.word	0x007a1200

08002690 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026a8:	f7ff fa3c 	bl	8001b24 <HAL_PWREx_GetVoltageRange>
 80026ac:	6178      	str	r0, [r7, #20]
 80026ae:	e014      	b.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	4a24      	ldr	r2, [pc, #144]	; (8002748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6593      	str	r3, [r2, #88]	; 0x58
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026c8:	f7ff fa2c 	bl	8001b24 <HAL_PWREx_GetVoltageRange>
 80026cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e0:	d10b      	bne.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d919      	bls.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2ba0      	cmp	r3, #160	; 0xa0
 80026ec:	d902      	bls.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ee:	2302      	movs	r3, #2
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	e013      	b.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	e010      	b.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b80      	cmp	r3, #128	; 0x80
 80026fe:	d902      	bls.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002700:	2303      	movs	r3, #3
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	e00a      	b.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d102      	bne.n	8002712 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800270c:	2302      	movs	r3, #2
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	e004      	b.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b70      	cmp	r3, #112	; 0x70
 8002716:	d101      	bne.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002718:	2301      	movs	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 0207 	bic.w	r2, r3, #7
 8002724:	4909      	ldr	r1, [pc, #36]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	429a      	cmp	r2, r3
 8002738:	d001      	beq.n	800273e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	40022000 	.word	0x40022000

08002750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002758:	2300      	movs	r3, #0
 800275a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800275c:	2300      	movs	r3, #0
 800275e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03f      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002774:	d01c      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800277a:	d802      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00e      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002780:	e01f      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002786:	d003      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002788:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800278c:	d01c      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800278e:	e018      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002790:	4b85      	ldr	r3, [pc, #532]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a84      	ldr	r2, [pc, #528]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800279c:	e015      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fab9 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027ae:	e00c      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3320      	adds	r3, #32
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fba0 	bl	8002efc <RCCEx_PLLSAI2_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c0:	e003      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	74fb      	strb	r3, [r7, #19]
      break;
 80027c6:	e000      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80027c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027d0:	4b75      	ldr	r3, [pc, #468]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027de:	4972      	ldr	r1, [pc, #456]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027e6:	e001      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03f      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002800:	d01c      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002806:	d802      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800280c:	e01f      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800280e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002812:	d003      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002818:	d01c      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800281a:	e018      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800281c:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a61      	ldr	r2, [pc, #388]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002826:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002828:	e015      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fa73 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800283a:	e00c      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3320      	adds	r3, #32
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fb5a 	bl	8002efc <RCCEx_PLLSAI2_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800284c:	e003      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	74fb      	strb	r3, [r7, #19]
      break;
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800285c:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286a:	494f      	ldr	r1, [pc, #316]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002872:	e001      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a0 	beq.w	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028bc:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3a      	ldr	r2, [pc, #232]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c8:	f7fe f9f6 	bl	8000cb8 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ce:	e009      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d0:	f7fe f9f2 	bl	8000cb8 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d902      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	74fb      	strb	r3, [r7, #19]
        break;
 80028e2:	e005      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028e4:	4b31      	ldr	r3, [pc, #196]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ef      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d15c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002900:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01f      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	d019      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	4a20      	ldr	r2, [pc, #128]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe f9b1 	bl	8000cb8 <HAL_GetTick>
 8002956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002958:	e00b      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe f9ad 	bl	8000cb8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d902      	bls.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	74fb      	strb	r3, [r7, #19]
            break;
 8002970:	e006      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ec      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002996:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800299e:	e009      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	74bb      	strb	r3, [r7, #18]
 80029a4:	e006      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b4:	7c7b      	ldrb	r3, [r7, #17]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b9e      	ldr	r3, [pc, #632]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	4a9d      	ldr	r2, [pc, #628]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d2:	4b98      	ldr	r3, [pc, #608]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f023 0203 	bic.w	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	4994      	ldr	r1, [pc, #592]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f4:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f023 020c 	bic.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	498c      	ldr	r1, [pc, #560]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a16:	4b87      	ldr	r3, [pc, #540]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	4983      	ldr	r1, [pc, #524]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a38:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	497b      	ldr	r1, [pc, #492]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a5a:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	4972      	ldr	r1, [pc, #456]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a7c:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	496a      	ldr	r1, [pc, #424]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	4961      	ldr	r1, [pc, #388]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ac0:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	4959      	ldr	r1, [pc, #356]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae2:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	4950      	ldr	r1, [pc, #320]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	4948      	ldr	r1, [pc, #288]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	493f      	ldr	r1, [pc, #252]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d028      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b48:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	4937      	ldr	r1, [pc, #220]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b66:	d106      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b72:	60d3      	str	r3, [r2, #12]
 8002b74:	e011      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f8c8 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d028      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	491f      	ldr	r1, [pc, #124]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd0:	60d3      	str	r3, [r2, #12]
 8002bd2:	e011      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2101      	movs	r1, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f899 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d02b      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c22:	d109      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a02      	ldr	r2, [pc, #8]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2e:	60d3      	str	r3, [r2, #12]
 8002c30:	e014      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f867 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02f      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c76:	4928      	ldr	r1, [pc, #160]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f844 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d014      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	74bb      	strb	r3, [r7, #18]
 8002ca2:	e011      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f921 	bl	8002efc <RCCEx_PLLSAI2_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce2:	490d      	ldr	r1, [pc, #52]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d06:	4904      	ldr	r1, [pc, #16]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d018      	beq.n	8002d68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0203 	and.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d10d      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
       ||
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d044      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	e041      	b.n	8002dec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d00c      	beq.n	8002d8a <RCCEx_PLLSAI1_Config+0x6e>
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d013      	beq.n	8002d9c <RCCEx_PLLSAI1_Config+0x80>
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d120      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d78:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d11d      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e01a      	b.n	8002dc0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9a:	e013      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9c:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002db8:	e006      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbe:	e004      	b.n	8002dca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dc0:	bf00      	nop
 8002dc2:	e002      	b.n	8002dca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dc8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dd0:	4b49      	ldr	r3, [pc, #292]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	430b      	orrs	r3, r1
 8002de6:	4944      	ldr	r1, [pc, #272]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d17d      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfe:	f7fd ff5b 	bl	8000cb8 <HAL_GetTick>
 8002e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e04:	e009      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e06:	f7fd ff57 	bl	8000cb8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d902      	bls.n	8002e1a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	73fb      	strb	r3, [r7, #15]
        break;
 8002e18:	e005      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e1a:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ef      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d160      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d111      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	0211      	lsls	r1, r2, #8
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68d2      	ldr	r2, [r2, #12]
 8002e48:	0912      	lsrs	r2, r2, #4
 8002e4a:	0452      	lsls	r2, r2, #17
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	492a      	ldr	r1, [pc, #168]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	610b      	str	r3, [r1, #16]
 8002e54:	e027      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d112      	bne.n	8002e82 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6892      	ldr	r2, [r2, #8]
 8002e6c:	0211      	lsls	r1, r2, #8
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6912      	ldr	r2, [r2, #16]
 8002e72:	0852      	lsrs	r2, r2, #1
 8002e74:	3a01      	subs	r2, #1
 8002e76:	0552      	lsls	r2, r2, #21
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	610b      	str	r3, [r1, #16]
 8002e80:	e011      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	0211      	lsls	r1, r2, #8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6952      	ldr	r2, [r2, #20]
 8002e98:	0852      	lsrs	r2, r2, #1
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0652      	lsls	r2, r2, #25
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	4915      	ldr	r1, [pc, #84]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fd ff01 	bl	8000cb8 <HAL_GetTick>
 8002eb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eb8:	e009      	b.n	8002ece <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eba:	f7fd fefd 	bl	8000cb8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d902      	bls.n	8002ece <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	73fb      	strb	r3, [r7, #15]
          break;
 8002ecc:	e005      	b.n	8002eda <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ef      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4903      	ldr	r1, [pc, #12]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000

08002efc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0a:	4b68      	ldr	r3, [pc, #416]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d018      	beq.n	8002f48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0203 	and.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d10d      	bne.n	8002f42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d044      	beq.n	8002fcc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e041      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d00c      	beq.n	8002f6a <RCCEx_PLLSAI2_Config+0x6e>
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d013      	beq.n	8002f7c <RCCEx_PLLSAI2_Config+0x80>
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d120      	bne.n	8002f9a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f58:	4b54      	ldr	r3, [pc, #336]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11d      	bne.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f68:	e01a      	b.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f6a:	4b50      	ldr	r3, [pc, #320]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7a:	e013      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10f      	bne.n	8002fa8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f98:	e006      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9e:	e004      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002fa0:	bf00      	nop
 8002fa2:	e002      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002fa8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10d      	bne.n	8002fcc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	4939      	ldr	r1, [pc, #228]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d167      	bne.n	80030a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a35      	ldr	r2, [pc, #212]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fde:	f7fd fe6b 	bl	8000cb8 <HAL_GetTick>
 8002fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fe4:	e009      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe6:	f7fd fe67 	bl	8000cb8 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d902      	bls.n	8002ffa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff8:	e005      	b.n	8003006 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ef      	bne.n	8002fe6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d14a      	bne.n	80030a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d111      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	0211      	lsls	r1, r2, #8
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68d2      	ldr	r2, [r2, #12]
 8003028:	0912      	lsrs	r2, r2, #4
 800302a:	0452      	lsls	r2, r2, #17
 800302c:	430a      	orrs	r2, r1
 800302e:	491f      	ldr	r1, [pc, #124]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003030:	4313      	orrs	r3, r2
 8003032:	614b      	str	r3, [r1, #20]
 8003034:	e011      	b.n	800305a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800303e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6892      	ldr	r2, [r2, #8]
 8003046:	0211      	lsls	r1, r2, #8
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6912      	ldr	r2, [r2, #16]
 800304c:	0852      	lsrs	r2, r2, #1
 800304e:	3a01      	subs	r2, #1
 8003050:	0652      	lsls	r2, r2, #25
 8003052:	430a      	orrs	r2, r1
 8003054:	4915      	ldr	r1, [pc, #84]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fd fe27 	bl	8000cb8 <HAL_GetTick>
 800306a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800306c:	e009      	b.n	8003082 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800306e:	f7fd fe23 	bl	8000cb8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d902      	bls.n	8003082 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	73fb      	strb	r3, [r7, #15]
          break;
 8003080:	e005      	b.n	800308e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ef      	beq.n	800306e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e049      	b.n	8003156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fcca 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 fd20 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d001      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e04f      	b.n	8003218 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a23      	ldr	r2, [pc, #140]	; (8003224 <HAL_TIM_Base_Start_IT+0xc4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d018      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <HAL_TIM_Base_Start_IT+0xc8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_TIM_Base_Start_IT+0xcc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_TIM_Base_Start_IT+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_TIM_Base_Start_IT+0xd4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_TIM_Base_Start_IT+0x76>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_TIM_Base_Start_IT+0xd8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d115      	bne.n	8003202 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_TIM_Base_Start_IT+0xdc>)
 80031de:	4013      	ands	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d015      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0xb4>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d011      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003200:	e008      	b.n	8003214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e000      	b.n	8003216 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40013400 	.word	0x40013400
 8003238:	40014000 	.word	0x40014000
 800323c:	00010007 	.word	0x00010007

08003240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e049      	b.n	80032e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f841 	bl	80032ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f000 fc58 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_TIM_PWM_Start+0x24>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e03c      	b.n	80033a2 <HAL_TIM_PWM_Start+0x9e>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d109      	bne.n	8003342 <HAL_TIM_PWM_Start+0x3e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e02f      	b.n	80033a2 <HAL_TIM_PWM_Start+0x9e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d109      	bne.n	800335c <HAL_TIM_PWM_Start+0x58>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e022      	b.n	80033a2 <HAL_TIM_PWM_Start+0x9e>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d109      	bne.n	8003376 <HAL_TIM_PWM_Start+0x72>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e015      	b.n	80033a2 <HAL_TIM_PWM_Start+0x9e>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d109      	bne.n	8003390 <HAL_TIM_PWM_Start+0x8c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e008      	b.n	80033a2 <HAL_TIM_PWM_Start+0x9e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e09c      	b.n	80034e4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d104      	bne.n	80033ba <HAL_TIM_PWM_Start+0xb6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b8:	e023      	b.n	8003402 <HAL_TIM_PWM_Start+0xfe>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d104      	bne.n	80033ca <HAL_TIM_PWM_Start+0xc6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c8:	e01b      	b.n	8003402 <HAL_TIM_PWM_Start+0xfe>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d104      	bne.n	80033da <HAL_TIM_PWM_Start+0xd6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d8:	e013      	b.n	8003402 <HAL_TIM_PWM_Start+0xfe>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d104      	bne.n	80033ea <HAL_TIM_PWM_Start+0xe6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033e8:	e00b      	b.n	8003402 <HAL_TIM_PWM_Start+0xfe>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d104      	bne.n	80033fa <HAL_TIM_PWM_Start+0xf6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f8:	e003      	b.n	8003402 <HAL_TIM_PWM_Start+0xfe>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 ff9c 	bl	8004348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a35      	ldr	r2, [pc, #212]	; (80034ec <HAL_TIM_PWM_Start+0x1e8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_TIM_PWM_Start+0x13e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <HAL_TIM_PWM_Start+0x1ec>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_TIM_PWM_Start+0x13e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <HAL_TIM_PWM_Start+0x1f0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_TIM_PWM_Start+0x13e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <HAL_TIM_PWM_Start+0x1f4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_TIM_PWM_Start+0x13e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2f      	ldr	r2, [pc, #188]	; (80034fc <HAL_TIM_PWM_Start+0x1f8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_TIM_PWM_Start+0x142>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_TIM_PWM_Start+0x144>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a22      	ldr	r2, [pc, #136]	; (80034ec <HAL_TIM_PWM_Start+0x1e8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x19e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d018      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x19e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <HAL_TIM_PWM_Start+0x1fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x19e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_TIM_PWM_Start+0x200>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x19e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_TIM_PWM_Start+0x204>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x19e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_TIM_PWM_Start+0x1ec>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x19e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <HAL_TIM_PWM_Start+0x1f0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d115      	bne.n	80034ce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_TIM_PWM_Start+0x208>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d015      	beq.n	80034e0 <HAL_TIM_PWM_Start+0x1dc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ba:	d011      	beq.n	80034e0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	e008      	b.n	80034e0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e000      	b.n	80034e2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40013400 	.word	0x40013400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	00010007 	.word	0x00010007

08003510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b02      	cmp	r3, #2
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0202 	mvn.w	r2, #2
 800353c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 facf 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fac1 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fad2 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b04      	cmp	r3, #4
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0204 	mvn.w	r2, #4
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 faa5 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa97 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 faa8 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0208 	mvn.w	r2, #8
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2204      	movs	r2, #4
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa7b 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa6d 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fa7e 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b10      	cmp	r3, #16
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b10      	cmp	r3, #16
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0210 	mvn.w	r2, #16
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2208      	movs	r2, #8
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa51 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa43 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa54 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10e      	bne.n	8003694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0201 	mvn.w	r2, #1
 800368c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fc fe12 	bl	80002b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d10e      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d107      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fefc 	bl	80044b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ce:	d10e      	bne.n	80036ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	d107      	bne.n	80036ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 feef 	bl	80044cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d10e      	bne.n	800371a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d107      	bne.n	800371a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fa02 	bl	8003b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b20      	cmp	r3, #32
 8003726:	d10e      	bne.n	8003746 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d107      	bne.n	8003746 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0220 	mvn.w	r2, #32
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 feaf 	bl	80044a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003766:	2302      	movs	r3, #2
 8003768:	e0fd      	b.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x216>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b14      	cmp	r3, #20
 8003776:	f200 80f0 	bhi.w	800395a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037d5 	.word	0x080037d5
 8003784:	0800395b 	.word	0x0800395b
 8003788:	0800395b 	.word	0x0800395b
 800378c:	0800395b 	.word	0x0800395b
 8003790:	08003815 	.word	0x08003815
 8003794:	0800395b 	.word	0x0800395b
 8003798:	0800395b 	.word	0x0800395b
 800379c:	0800395b 	.word	0x0800395b
 80037a0:	08003857 	.word	0x08003857
 80037a4:	0800395b 	.word	0x0800395b
 80037a8:	0800395b 	.word	0x0800395b
 80037ac:	0800395b 	.word	0x0800395b
 80037b0:	08003897 	.word	0x08003897
 80037b4:	0800395b 	.word	0x0800395b
 80037b8:	0800395b 	.word	0x0800395b
 80037bc:	0800395b 	.word	0x0800395b
 80037c0:	080038d9 	.word	0x080038d9
 80037c4:	0800395b 	.word	0x0800395b
 80037c8:	0800395b 	.word	0x0800395b
 80037cc:	0800395b 	.word	0x0800395b
 80037d0:	08003919 	.word	0x08003919
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fa44 	bl	8003c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0204 	bic.w	r2, r2, #4
 80037fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	619a      	str	r2, [r3, #24]
      break;
 8003812:	e0a3      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fab4 	bl	8003d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6999      	ldr	r1, [r3, #24]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	619a      	str	r2, [r3, #24]
      break;
 8003854:	e082      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fb1d 	bl	8003e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0208 	orr.w	r2, r2, #8
 8003870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0204 	bic.w	r2, r2, #4
 8003880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	61da      	str	r2, [r3, #28]
      break;
 8003894:	e062      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fb85 	bl	8003fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69d9      	ldr	r1, [r3, #28]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	021a      	lsls	r2, r3, #8
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	61da      	str	r2, [r3, #28]
      break;
 80038d6:	e041      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fbce 	bl	8004080 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003916:	e021      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fc12 	bl	8004148 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003958:	e000      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800395a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop

08003970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_TIM_ConfigClockSource+0x18>
 8003984:	2302      	movs	r3, #2
 8003986:	e0a8      	b.n	8003ada <HAL_TIM_ConfigClockSource+0x16a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d067      	beq.n	8003a94 <HAL_TIM_ConfigClockSource+0x124>
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d80b      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x70>
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d073      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x144>
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d802      	bhi.n	80039d6 <HAL_TIM_ConfigClockSource+0x66>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d06f      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039d4:	e078      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d06c      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x144>
 80039da:	2b30      	cmp	r3, #48	; 0x30
 80039dc:	d06a      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80039de:	e073      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039e0:	2b70      	cmp	r3, #112	; 0x70
 80039e2:	d00d      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0x90>
 80039e4:	2b70      	cmp	r3, #112	; 0x70
 80039e6:	d804      	bhi.n	80039f2 <HAL_TIM_ConfigClockSource+0x82>
 80039e8:	2b50      	cmp	r3, #80	; 0x50
 80039ea:	d033      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0xe4>
 80039ec:	2b60      	cmp	r3, #96	; 0x60
 80039ee:	d041      	beq.n	8003a74 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80039f0:	e06a      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	d066      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0x156>
 80039f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fc:	d017      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80039fe:	e063      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6899      	ldr	r1, [r3, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f000 fc7a 	bl	8004308 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	609a      	str	r2, [r3, #8]
      break;
 8003a2c:	e04c      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f000 fc63 	bl	8004308 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a50:	609a      	str	r2, [r3, #8]
      break;
 8003a52:	e039      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	461a      	mov	r2, r3
 8003a62:	f000 fbd7 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2150      	movs	r1, #80	; 0x50
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fc30 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003a72:	e029      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	461a      	mov	r2, r3
 8003a82:	f000 fbf6 	bl	8004272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2160      	movs	r1, #96	; 0x60
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fc20 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003a92:	e019      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f000 fbb7 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2140      	movs	r1, #64	; 0x40
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fc10 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003ab2:	e009      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 fc07 	bl	80042d2 <TIM_ITRx_SetConfig>
        break;
 8003ac4:	e000      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003ac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a40      	ldr	r2, [pc, #256]	; (8003c48 <TIM_Base_SetConfig+0x114>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b52:	d00f      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <TIM_Base_SetConfig+0x118>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3c      	ldr	r2, [pc, #240]	; (8003c50 <TIM_Base_SetConfig+0x11c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <TIM_Base_SetConfig+0x120>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <TIM_Base_SetConfig+0x124>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d108      	bne.n	8003b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <TIM_Base_SetConfig+0x114>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01f      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d01b      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <TIM_Base_SetConfig+0x118>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d017      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <TIM_Base_SetConfig+0x11c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <TIM_Base_SetConfig+0x120>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <TIM_Base_SetConfig+0x124>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a28      	ldr	r2, [pc, #160]	; (8003c5c <TIM_Base_SetConfig+0x128>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <TIM_Base_SetConfig+0x12c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <TIM_Base_SetConfig+0x130>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <TIM_Base_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00f      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <TIM_Base_SetConfig+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <TIM_Base_SetConfig+0x128>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <TIM_Base_SetConfig+0x12c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <TIM_Base_SetConfig+0x130>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d103      	bne.n	8003c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	615a      	str	r2, [r3, #20]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40013400 	.word	0x40013400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800

08003c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 0302 	bic.w	r3, r3, #2
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a2c      	ldr	r2, [pc, #176]	; (8003d74 <TIM_OC1_SetConfig+0x10c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00f      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x80>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <TIM_OC1_SetConfig+0x110>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x80>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <TIM_OC1_SetConfig+0x114>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x80>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <TIM_OC1_SetConfig+0x118>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x80>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a28      	ldr	r2, [pc, #160]	; (8003d84 <TIM_OC1_SetConfig+0x11c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <TIM_OC1_SetConfig+0x10c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00f      	beq.n	8003d2a <TIM_OC1_SetConfig+0xc2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <TIM_OC1_SetConfig+0x110>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <TIM_OC1_SetConfig+0xc2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a19      	ldr	r2, [pc, #100]	; (8003d7c <TIM_OC1_SetConfig+0x114>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <TIM_OC1_SetConfig+0xc2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <TIM_OC1_SetConfig+0x118>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_OC1_SetConfig+0xc2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <TIM_OC1_SetConfig+0x11c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d111      	bne.n	8003d4e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40013400 	.word	0x40013400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800

08003d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0210 	bic.w	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0320 	bic.w	r3, r3, #32
 8003dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <TIM_OC2_SetConfig+0x100>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_OC2_SetConfig+0x6c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <TIM_OC2_SetConfig+0x104>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10d      	bne.n	8003e10 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <TIM_OC2_SetConfig+0x100>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00f      	beq.n	8003e38 <TIM_OC2_SetConfig+0xb0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <TIM_OC2_SetConfig+0x104>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_OC2_SetConfig+0xb0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <TIM_OC2_SetConfig+0x108>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_OC2_SetConfig+0xb0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <TIM_OC2_SetConfig+0x10c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_OC2_SetConfig+0xb0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <TIM_OC2_SetConfig+0x110>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d113      	bne.n	8003e60 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800

08003e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <TIM_OC3_SetConfig+0xfc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_OC3_SetConfig+0x6a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <TIM_OC3_SetConfig+0x100>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10d      	bne.n	8003f22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <TIM_OC3_SetConfig+0xfc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00f      	beq.n	8003f4a <TIM_OC3_SetConfig+0xae>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <TIM_OC3_SetConfig+0x100>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_OC3_SetConfig+0xae>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <TIM_OC3_SetConfig+0x104>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_OC3_SetConfig+0xae>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <TIM_OC3_SetConfig+0x108>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_OC3_SetConfig+0xae>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <TIM_OC3_SetConfig+0x10c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d113      	bne.n	8003f72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40013400 	.word	0x40013400
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <TIM_OC4_SetConfig+0xc0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00f      	beq.n	8004030 <TIM_OC4_SetConfig+0x84>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a17      	ldr	r2, [pc, #92]	; (8004070 <TIM_OC4_SetConfig+0xc4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_OC4_SetConfig+0x84>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a16      	ldr	r2, [pc, #88]	; (8004074 <TIM_OC4_SetConfig+0xc8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_OC4_SetConfig+0x84>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a15      	ldr	r2, [pc, #84]	; (8004078 <TIM_OC4_SetConfig+0xcc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC4_SetConfig+0x84>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a14      	ldr	r2, [pc, #80]	; (800407c <TIM_OC4_SetConfig+0xd0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d109      	bne.n	8004044 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	019b      	lsls	r3, r3, #6
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40013400 	.word	0x40013400
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800

08004080 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <TIM_OC5_SetConfig+0xb4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00f      	beq.n	80040fa <TIM_OC5_SetConfig+0x7a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <TIM_OC5_SetConfig+0xb8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_OC5_SetConfig+0x7a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <TIM_OC5_SetConfig+0xbc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <TIM_OC5_SetConfig+0x7a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <TIM_OC5_SetConfig+0xc0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_OC5_SetConfig+0x7a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <TIM_OC5_SetConfig+0xc4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d109      	bne.n	800410e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004100:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	621a      	str	r2, [r3, #32]
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40013400 	.word	0x40013400
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800

08004148 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800418e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	051b      	lsls	r3, r3, #20
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <TIM_OC6_SetConfig+0xb8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00f      	beq.n	80041c4 <TIM_OC6_SetConfig+0x7c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a17      	ldr	r2, [pc, #92]	; (8004204 <TIM_OC6_SetConfig+0xbc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <TIM_OC6_SetConfig+0x7c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a16      	ldr	r2, [pc, #88]	; (8004208 <TIM_OC6_SetConfig+0xc0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <TIM_OC6_SetConfig+0x7c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <TIM_OC6_SetConfig+0xc4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_OC6_SetConfig+0x7c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a14      	ldr	r2, [pc, #80]	; (8004210 <TIM_OC6_SetConfig+0xc8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d109      	bne.n	80041d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40013400 	.word	0x40013400
 8004208:	40014000 	.word	0x40014000
 800420c:	40014400 	.word	0x40014400
 8004210:	40014800 	.word	0x40014800

08004214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800423e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 030a 	bic.w	r3, r3, #10
 8004250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004272:	b480      	push	{r7}
 8004274:	b087      	sub	sp, #28
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f023 0210 	bic.w	r2, r3, #16
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800429c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f043 0307 	orr.w	r3, r3, #7
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	431a      	orrs	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	2201      	movs	r2, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	43db      	mvns	r3, r3
 800436a:	401a      	ands	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1a      	ldr	r2, [r3, #32]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e068      	b.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2e      	ldr	r2, [pc, #184]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2d      	ldr	r2, [pc, #180]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1e      	ldr	r2, [pc, #120]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d018      	beq.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a13      	ldr	r2, [pc, #76]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10c      	bne.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4313      	orrs	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40012c00 	.word	0x40012c00
 8004490:	40013400 	.word	0x40013400
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40014000 	.word	0x40014000

080044a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af04      	add	r7, sp, #16
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	9302      	str	r3, [sp, #8]
 8004500:	2301      	movs	r3, #1
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2301      	movs	r3, #1
 800450a:	2200      	movs	r2, #0
 800450c:	2178      	movs	r1, #120	; 0x78
 800450e:	4803      	ldr	r0, [pc, #12]	; (800451c <ssd1306_WriteCommand+0x2c>)
 8004510:	f7fc ff94 	bl	800143c <HAL_I2C_Mem_Write>
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000494 	.word	0x20000494

08004520 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af04      	add	r7, sp, #16
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f04f 32ff 	mov.w	r2, #4294967295
 8004532:	9202      	str	r2, [sp, #8]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	2301      	movs	r3, #1
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	2178      	movs	r1, #120	; 0x78
 8004540:	4803      	ldr	r0, [pc, #12]	; (8004550 <ssd1306_WriteData+0x30>)
 8004542:	f7fc ff7b 	bl	800143c <HAL_I2C_Mem_Write>
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000494 	.word	0x20000494

08004554 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8004558:	f7ff ffc2 	bl	80044e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800455c:	2064      	movs	r0, #100	; 0x64
 800455e:	f7fc fbb7 	bl	8000cd0 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8004562:	20ae      	movs	r0, #174	; 0xae
 8004564:	f7ff ffc4 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004568:	2020      	movs	r0, #32
 800456a:	f7ff ffc1 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800456e:	2010      	movs	r0, #16
 8004570:	f7ff ffbe 	bl	80044f0 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004574:	20b0      	movs	r0, #176	; 0xb0
 8004576:	f7ff ffbb 	bl	80044f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800457a:	20c8      	movs	r0, #200	; 0xc8
 800457c:	f7ff ffb8 	bl	80044f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004580:	2000      	movs	r0, #0
 8004582:	f7ff ffb5 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004586:	2010      	movs	r0, #16
 8004588:	f7ff ffb2 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800458c:	2040      	movs	r0, #64	; 0x40
 800458e:	f7ff ffaf 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8004592:	2081      	movs	r0, #129	; 0x81
 8004594:	f7ff ffac 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8004598:	20ff      	movs	r0, #255	; 0xff
 800459a:	f7ff ffa9 	bl	80044f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800459e:	20a1      	movs	r0, #161	; 0xa1
 80045a0:	f7ff ffa6 	bl	80044f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80045a4:	20a6      	movs	r0, #166	; 0xa6
 80045a6:	f7ff ffa3 	bl	80044f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80045aa:	20a8      	movs	r0, #168	; 0xa8
 80045ac:	f7ff ffa0 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80045b0:	203f      	movs	r0, #63	; 0x3f
 80045b2:	f7ff ff9d 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80045b6:	20a4      	movs	r0, #164	; 0xa4
 80045b8:	f7ff ff9a 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80045bc:	20d3      	movs	r0, #211	; 0xd3
 80045be:	f7ff ff97 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7ff ff94 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80045c8:	20d5      	movs	r0, #213	; 0xd5
 80045ca:	f7ff ff91 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80045ce:	20f0      	movs	r0, #240	; 0xf0
 80045d0:	f7ff ff8e 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80045d4:	20d9      	movs	r0, #217	; 0xd9
 80045d6:	f7ff ff8b 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80045da:	2022      	movs	r0, #34	; 0x22
 80045dc:	f7ff ff88 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80045e0:	20da      	movs	r0, #218	; 0xda
 80045e2:	f7ff ff85 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80045e6:	2012      	movs	r0, #18
 80045e8:	f7ff ff82 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80045ec:	20db      	movs	r0, #219	; 0xdb
 80045ee:	f7ff ff7f 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80045f2:	2020      	movs	r0, #32
 80045f4:	f7ff ff7c 	bl	80044f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80045f8:	208d      	movs	r0, #141	; 0x8d
 80045fa:	f7ff ff79 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80045fe:	2014      	movs	r0, #20
 8004600:	f7ff ff76 	bl	80044f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004604:	20af      	movs	r0, #175	; 0xaf
 8004606:	f7ff ff73 	bl	80044f0 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800460a:	2000      	movs	r0, #0
 800460c:	f000 f810 	bl	8004630 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004610:	f000 f830 	bl	8004674 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <ssd1306_Init+0xd8>)
 8004616:	2200      	movs	r2, #0
 8004618:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800461a:	4b04      	ldr	r3, [pc, #16]	; (800462c <ssd1306_Init+0xd8>)
 800461c:	2200      	movs	r2, #0
 800461e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004620:	4b02      	ldr	r3, [pc, #8]	; (800462c <ssd1306_Init+0xd8>)
 8004622:	2201      	movs	r2, #1
 8004624:	715a      	strb	r2, [r3, #5]
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2000047c 	.word	0x2000047c

08004630 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e00d      	b.n	800465c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <ssd1306_Fill+0x1a>
 8004646:	2100      	movs	r1, #0
 8004648:	e000      	b.n	800464c <ssd1306_Fill+0x1c>
 800464a:	21ff      	movs	r1, #255	; 0xff
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <ssd1306_Fill+0x40>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	460a      	mov	r2, r1
 8004654:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d3ed      	bcc.n	8004640 <ssd1306_Fill+0x10>
    }
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	2000007c 	.word	0x2000007c

08004674 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 800467a:	2300      	movs	r3, #0
 800467c:	71fb      	strb	r3, [r7, #7]
 800467e:	e016      	b.n	80046ae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	3b50      	subs	r3, #80	; 0x50
 8004684:	b2db      	uxtb	r3, r3
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff32 	bl	80044f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800468c:	2000      	movs	r0, #0
 800468e:	f7ff ff2f 	bl	80044f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8004692:	2010      	movs	r0, #16
 8004694:	f7ff ff2c 	bl	80044f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	01db      	lsls	r3, r3, #7
 800469c:	4a07      	ldr	r2, [pc, #28]	; (80046bc <ssd1306_UpdateScreen+0x48>)
 800469e:	4413      	add	r3, r2
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff3c 	bl	8004520 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	3301      	adds	r3, #1
 80046ac:	71fb      	strb	r3, [r7, #7]
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	d9e5      	bls.n	8004680 <ssd1306_UpdateScreen+0xc>
    }
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	2000007c 	.word	0x2000007c

080046c0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
 80046ca:	460b      	mov	r3, r1
 80046cc:	71bb      	strb	r3, [r7, #6]
 80046ce:	4613      	mov	r3, r2
 80046d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	db48      	blt.n	800476c <ssd1306_DrawPixel+0xac>
 80046da:	79bb      	ldrb	r3, [r7, #6]
 80046dc:	2b3f      	cmp	r3, #63	; 0x3f
 80046de:	d845      	bhi.n	800476c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <ssd1306_DrawPixel+0xb8>)
 80046e2:	791b      	ldrb	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80046e8:	797b      	ldrb	r3, [r7, #5]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80046f6:	797b      	ldrb	r3, [r7, #5]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d11a      	bne.n	8004732 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80046fc:	79fa      	ldrb	r2, [r7, #7]
 80046fe:	79bb      	ldrb	r3, [r7, #6]
 8004700:	08db      	lsrs	r3, r3, #3
 8004702:	b2d8      	uxtb	r0, r3
 8004704:	4603      	mov	r3, r0
 8004706:	01db      	lsls	r3, r3, #7
 8004708:	4413      	add	r3, r2
 800470a:	4a1c      	ldr	r2, [pc, #112]	; (800477c <ssd1306_DrawPixel+0xbc>)
 800470c:	5cd3      	ldrb	r3, [r2, r3]
 800470e:	b25a      	sxtb	r2, r3
 8004710:	79bb      	ldrb	r3, [r7, #6]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	b25b      	sxtb	r3, r3
 800471e:	4313      	orrs	r3, r2
 8004720:	b259      	sxtb	r1, r3
 8004722:	79fa      	ldrb	r2, [r7, #7]
 8004724:	4603      	mov	r3, r0
 8004726:	01db      	lsls	r3, r3, #7
 8004728:	4413      	add	r3, r2
 800472a:	b2c9      	uxtb	r1, r1
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <ssd1306_DrawPixel+0xbc>)
 800472e:	54d1      	strb	r1, [r2, r3]
 8004730:	e01d      	b.n	800476e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004732:	79fa      	ldrb	r2, [r7, #7]
 8004734:	79bb      	ldrb	r3, [r7, #6]
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	b2d8      	uxtb	r0, r3
 800473a:	4603      	mov	r3, r0
 800473c:	01db      	lsls	r3, r3, #7
 800473e:	4413      	add	r3, r2
 8004740:	4a0e      	ldr	r2, [pc, #56]	; (800477c <ssd1306_DrawPixel+0xbc>)
 8004742:	5cd3      	ldrb	r3, [r2, r3]
 8004744:	b25a      	sxtb	r2, r3
 8004746:	79bb      	ldrb	r3, [r7, #6]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	b25b      	sxtb	r3, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	b25b      	sxtb	r3, r3
 8004758:	4013      	ands	r3, r2
 800475a:	b259      	sxtb	r1, r3
 800475c:	79fa      	ldrb	r2, [r7, #7]
 800475e:	4603      	mov	r3, r0
 8004760:	01db      	lsls	r3, r3, #7
 8004762:	4413      	add	r3, r2
 8004764:	b2c9      	uxtb	r1, r1
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <ssd1306_DrawPixel+0xbc>)
 8004768:	54d1      	strb	r1, [r2, r3]
 800476a:	e000      	b.n	800476e <ssd1306_DrawPixel+0xae>
        return;
 800476c:	bf00      	nop
    }
}
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	2000047c 	.word	0x2000047c
 800477c:	2000007c 	.word	0x2000007c

08004780 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	4604      	mov	r4, r0
 8004788:	1d38      	adds	r0, r7, #4
 800478a:	e880 0006 	stmia.w	r0, {r1, r2}
 800478e:	461a      	mov	r2, r3
 8004790:	4623      	mov	r3, r4
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	4613      	mov	r3, r2
 8004796:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004798:	4b38      	ldr	r3, [pc, #224]	; (800487c <ssd1306_WriteChar+0xfc>)
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	793b      	ldrb	r3, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	2b7f      	cmp	r3, #127	; 0x7f
 80047a4:	dc06      	bgt.n	80047b4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80047a6:	4b35      	ldr	r3, [pc, #212]	; (800487c <ssd1306_WriteChar+0xfc>)
 80047a8:	885b      	ldrh	r3, [r3, #2]
 80047aa:	461a      	mov	r2, r3
 80047ac:	797b      	ldrb	r3, [r7, #5]
 80047ae:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80047b0:	2b3f      	cmp	r3, #63	; 0x3f
 80047b2:	dd01      	ble.n	80047b8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e05d      	b.n	8004874 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	e04c      	b.n	8004858 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	3b20      	subs	r3, #32
 80047c4:	7979      	ldrb	r1, [r7, #5]
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	440b      	add	r3, r1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e034      	b.n	8004848 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d012      	beq.n	8004814 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <ssd1306_WriteChar+0xfc>)
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	b2d8      	uxtb	r0, r3
 80047fc:	4b1f      	ldr	r3, [pc, #124]	; (800487c <ssd1306_WriteChar+0xfc>)
 80047fe:	885b      	ldrh	r3, [r3, #2]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	4413      	add	r3, r2
 8004808:	b2db      	uxtb	r3, r3
 800480a:	7bba      	ldrb	r2, [r7, #14]
 800480c:	4619      	mov	r1, r3
 800480e:	f7ff ff57 	bl	80046c0 <ssd1306_DrawPixel>
 8004812:	e016      	b.n	8004842 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <ssd1306_WriteChar+0xfc>)
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4413      	add	r3, r2
 8004820:	b2d8      	uxtb	r0, r3
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <ssd1306_WriteChar+0xfc>)
 8004824:	885b      	ldrh	r3, [r3, #2]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	4413      	add	r3, r2
 800482e:	b2d9      	uxtb	r1, r3
 8004830:	7bbb      	ldrb	r3, [r7, #14]
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	f7ff ff3f 	bl	80046c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	3301      	adds	r3, #1
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	793b      	ldrb	r3, [r7, #4]
 800484a:	461a      	mov	r2, r3
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	4293      	cmp	r3, r2
 8004850:	d3c5      	bcc.n	80047de <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	797b      	ldrb	r3, [r7, #5]
 800485a:	461a      	mov	r2, r3
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4293      	cmp	r3, r2
 8004860:	d3ad      	bcc.n	80047be <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <ssd1306_WriteChar+0xfc>)
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	793b      	ldrb	r3, [r7, #4]
 8004868:	b29b      	uxth	r3, r3
 800486a:	4413      	add	r3, r2
 800486c:	b29a      	uxth	r2, r3
 800486e:	4b03      	ldr	r3, [pc, #12]	; (800487c <ssd1306_WriteChar+0xfc>)
 8004870:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3724      	adds	r7, #36	; 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	2000047c 	.word	0x2000047c

08004880 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	1d38      	adds	r0, r7, #4
 800488a:	e880 0006 	stmia.w	r0, {r1, r2}
 800488e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8004890:	e012      	b.n	80048b8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	7818      	ldrb	r0, [r3, #0]
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	1d3a      	adds	r2, r7, #4
 800489a:	ca06      	ldmia	r2, {r1, r2}
 800489c:	f7ff ff70 	bl	8004780 <ssd1306_WriteChar>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d002      	beq.n	80048b2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	e008      	b.n	80048c4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e8      	bne.n	8004892 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	781b      	ldrb	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	460a      	mov	r2, r1
 80048d6:	71fb      	strb	r3, [r7, #7]
 80048d8:	4613      	mov	r3, r2
 80048da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <ssd1306_SetCursor+0x2c>)
 80048e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80048e4:	79bb      	ldrb	r3, [r7, #6]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <ssd1306_SetCursor+0x2c>)
 80048ea:	805a      	strh	r2, [r3, #2]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	2000047c 	.word	0x2000047c

080048fc <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8004900:	2000      	movs	r0, #0
 8004902:	f7ff fe95 	bl	8004630 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8004906:	2100      	movs	r1, #0
 8004908:	2002      	movs	r0, #2
 800490a:	f7ff ffdf 	bl	80048cc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800490e:	4a0f      	ldr	r2, [pc, #60]	; (800494c <ssd1306_TestFonts+0x50>)
 8004910:	2301      	movs	r3, #1
 8004912:	ca06      	ldmia	r2, {r1, r2}
 8004914:	480e      	ldr	r0, [pc, #56]	; (8004950 <ssd1306_TestFonts+0x54>)
 8004916:	f7ff ffb3 	bl	8004880 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 800491a:	211a      	movs	r1, #26
 800491c:	2002      	movs	r0, #2
 800491e:	f7ff ffd5 	bl	80048cc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8004922:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <ssd1306_TestFonts+0x58>)
 8004924:	2301      	movs	r3, #1
 8004926:	ca06      	ldmia	r2, {r1, r2}
 8004928:	480b      	ldr	r0, [pc, #44]	; (8004958 <ssd1306_TestFonts+0x5c>)
 800492a:	f7ff ffa9 	bl	8004880 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 800492e:	212c      	movs	r1, #44	; 0x2c
 8004930:	2002      	movs	r0, #2
 8004932:	f7ff ffcb 	bl	80048cc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <ssd1306_TestFonts+0x60>)
 8004938:	2301      	movs	r3, #1
 800493a:	ca06      	ldmia	r2, {r1, r2}
 800493c:	4808      	ldr	r0, [pc, #32]	; (8004960 <ssd1306_TestFonts+0x64>)
 800493e:	f7ff ff9f 	bl	8004880 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8004942:	f7ff fe97 	bl	8004674 <ssd1306_UpdateScreen>
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000054 	.word	0x20000054
 8004950:	08004a38 	.word	0x08004a38
 8004954:	2000004c 	.word	0x2000004c
 8004958:	08004a44 	.word	0x08004a44
 800495c:	20000044 	.word	0x20000044
 8004960:	08004a50 	.word	0x08004a50

08004964 <__libc_init_array>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	4e0d      	ldr	r6, [pc, #52]	; (800499c <__libc_init_array+0x38>)
 8004968:	4c0d      	ldr	r4, [pc, #52]	; (80049a0 <__libc_init_array+0x3c>)
 800496a:	1ba4      	subs	r4, r4, r6
 800496c:	10a4      	asrs	r4, r4, #2
 800496e:	2500      	movs	r5, #0
 8004970:	42a5      	cmp	r5, r4
 8004972:	d109      	bne.n	8004988 <__libc_init_array+0x24>
 8004974:	4e0b      	ldr	r6, [pc, #44]	; (80049a4 <__libc_init_array+0x40>)
 8004976:	4c0c      	ldr	r4, [pc, #48]	; (80049a8 <__libc_init_array+0x44>)
 8004978:	f000 f820 	bl	80049bc <_init>
 800497c:	1ba4      	subs	r4, r4, r6
 800497e:	10a4      	asrs	r4, r4, #2
 8004980:	2500      	movs	r5, #0
 8004982:	42a5      	cmp	r5, r4
 8004984:	d105      	bne.n	8004992 <__libc_init_array+0x2e>
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800498c:	4798      	blx	r3
 800498e:	3501      	adds	r5, #1
 8004990:	e7ee      	b.n	8004970 <__libc_init_array+0xc>
 8004992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004996:	4798      	blx	r3
 8004998:	3501      	adds	r5, #1
 800499a:	e7f2      	b.n	8004982 <__libc_init_array+0x1e>
 800499c:	080072d0 	.word	0x080072d0
 80049a0:	080072d0 	.word	0x080072d0
 80049a4:	080072d0 	.word	0x080072d0
 80049a8:	080072d4 	.word	0x080072d4

080049ac <memset>:
 80049ac:	4402      	add	r2, r0
 80049ae:	4603      	mov	r3, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <_init>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr

080049c8 <_fini>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr
