
PWM_separate_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000290c  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073fc  080073fc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080073fc  080073fc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073fc  080073fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000005c  08007460  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08007460  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012be7  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002513  00000000  00000000  00032c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00035188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00036170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000272f2  00000000  00000000  00036ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea95  00000000  00000000  0005e2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efe23  00000000  00000000  0006cd7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  0015cc20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ad8 	.word	0x08004ad8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004ad8 	.word	0x08004ad8

080001c8 <update_OLED_display>:
OLEDStates_type OLEDDisplayState = Case1;
bool OLEDupToDate = false;


void update_OLED_display(OLEDStates_type State)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	switch(State)
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b06      	cmp	r3, #6
 80001d6:	f200 810d 	bhi.w	80003f4 <update_OLED_display+0x22c>
 80001da:	a201      	add	r2, pc, #4	; (adr r2, 80001e0 <update_OLED_display+0x18>)
 80001dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e0:	080001fd 	.word	0x080001fd
 80001e4:	08000245 	.word	0x08000245
 80001e8:	0800028d 	.word	0x0800028d
 80001ec:	080002d5 	.word	0x080002d5
 80001f0:	0800031d 	.word	0x0800031d
 80001f4:	08000365 	.word	0x08000365
 80001f8:	080003ad 	.word	0x080003ad
	{
	case Case1:
		ssd1306_Fill(Black);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f004 fad9 	bl	80047b4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000202:	2100      	movs	r1, #0
 8000204:	2000      	movs	r0, #0
 8000206:	f004 fc23 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 1", Font_16x26, White);
 800020a:	4a7e      	ldr	r2, [pc, #504]	; (8000404 <update_OLED_display+0x23c>)
 800020c:	2301      	movs	r3, #1
 800020e:	ca06      	ldmia	r2, {r1, r2}
 8000210:	487d      	ldr	r0, [pc, #500]	; (8000408 <update_OLED_display+0x240>)
 8000212:	f004 fbf7 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8000216:	2120      	movs	r1, #32
 8000218:	2000      	movs	r0, #0
 800021a:	f004 fc19 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 800021e:	4a7b      	ldr	r2, [pc, #492]	; (800040c <update_OLED_display+0x244>)
 8000220:	2301      	movs	r3, #1
 8000222:	ca06      	ldmia	r2, {r1, r2}
 8000224:	487a      	ldr	r0, [pc, #488]	; (8000410 <update_OLED_display+0x248>)
 8000226:	f004 fbed 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 800022a:	212d      	movs	r1, #45	; 0x2d
 800022c:	2000      	movs	r0, #0
 800022e:	f004 fc0f 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("0.850 1.925", Font_11x18, White);
 8000232:	4a78      	ldr	r2, [pc, #480]	; (8000414 <update_OLED_display+0x24c>)
 8000234:	2301      	movs	r3, #1
 8000236:	ca06      	ldmia	r2, {r1, r2}
 8000238:	4877      	ldr	r0, [pc, #476]	; (8000418 <update_OLED_display+0x250>)
 800023a:	f004 fbe3 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800023e:	f004 fadb 	bl	80047f8 <ssd1306_UpdateScreen>
		break;
 8000242:	e0d8      	b.n	80003f6 <update_OLED_display+0x22e>

	case Case2:
		ssd1306_Fill(Black);
 8000244:	2000      	movs	r0, #0
 8000246:	f004 fab5 	bl	80047b4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800024a:	2100      	movs	r1, #0
 800024c:	2000      	movs	r0, #0
 800024e:	f004 fbff 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 2", Font_16x26, White);
 8000252:	4a6c      	ldr	r2, [pc, #432]	; (8000404 <update_OLED_display+0x23c>)
 8000254:	2301      	movs	r3, #1
 8000256:	ca06      	ldmia	r2, {r1, r2}
 8000258:	4870      	ldr	r0, [pc, #448]	; (800041c <update_OLED_display+0x254>)
 800025a:	f004 fbd3 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 800025e:	2120      	movs	r1, #32
 8000260:	2000      	movs	r0, #0
 8000262:	f004 fbf5 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8000266:	4a69      	ldr	r2, [pc, #420]	; (800040c <update_OLED_display+0x244>)
 8000268:	2301      	movs	r3, #1
 800026a:	ca06      	ldmia	r2, {r1, r2}
 800026c:	4868      	ldr	r0, [pc, #416]	; (8000410 <update_OLED_display+0x248>)
 800026e:	f004 fbc9 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000272:	212d      	movs	r1, #45	; 0x2d
 8000274:	2000      	movs	r0, #0
 8000276:	f004 fbeb 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("1.350 1.800", Font_11x18, White);
 800027a:	4a66      	ldr	r2, [pc, #408]	; (8000414 <update_OLED_display+0x24c>)
 800027c:	2301      	movs	r3, #1
 800027e:	ca06      	ldmia	r2, {r1, r2}
 8000280:	4867      	ldr	r0, [pc, #412]	; (8000420 <update_OLED_display+0x258>)
 8000282:	f004 fbbf 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000286:	f004 fab7 	bl	80047f8 <ssd1306_UpdateScreen>
		break;
 800028a:	e0b4      	b.n	80003f6 <update_OLED_display+0x22e>

	case Case3:
		ssd1306_Fill(Black);
 800028c:	2000      	movs	r0, #0
 800028e:	f004 fa91 	bl	80047b4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000292:	2100      	movs	r1, #0
 8000294:	2000      	movs	r0, #0
 8000296:	f004 fbdb 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 3", Font_16x26, White);
 800029a:	4a5a      	ldr	r2, [pc, #360]	; (8000404 <update_OLED_display+0x23c>)
 800029c:	2301      	movs	r3, #1
 800029e:	ca06      	ldmia	r2, {r1, r2}
 80002a0:	4860      	ldr	r0, [pc, #384]	; (8000424 <update_OLED_display+0x25c>)
 80002a2:	f004 fbaf 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80002a6:	2120      	movs	r1, #32
 80002a8:	2000      	movs	r0, #0
 80002aa:	f004 fbd1 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80002ae:	4a57      	ldr	r2, [pc, #348]	; (800040c <update_OLED_display+0x244>)
 80002b0:	2301      	movs	r3, #1
 80002b2:	ca06      	ldmia	r2, {r1, r2}
 80002b4:	4856      	ldr	r0, [pc, #344]	; (8000410 <update_OLED_display+0x248>)
 80002b6:	f004 fba5 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 80002ba:	212d      	movs	r1, #45	; 0x2d
 80002bc:	2000      	movs	r0, #0
 80002be:	f004 fbc7 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("2.215 1.350", Font_11x18, White);
 80002c2:	4a54      	ldr	r2, [pc, #336]	; (8000414 <update_OLED_display+0x24c>)
 80002c4:	2301      	movs	r3, #1
 80002c6:	ca06      	ldmia	r2, {r1, r2}
 80002c8:	4857      	ldr	r0, [pc, #348]	; (8000428 <update_OLED_display+0x260>)
 80002ca:	f004 fb9b 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002ce:	f004 fa93 	bl	80047f8 <ssd1306_UpdateScreen>
		break;
 80002d2:	e090      	b.n	80003f6 <update_OLED_display+0x22e>

	case Case4:
		ssd1306_Fill(Black);
 80002d4:	2000      	movs	r0, #0
 80002d6:	f004 fa6d 	bl	80047b4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80002da:	2100      	movs	r1, #0
 80002dc:	2000      	movs	r0, #0
 80002de:	f004 fbb7 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 4", Font_16x26, White);
 80002e2:	4a48      	ldr	r2, [pc, #288]	; (8000404 <update_OLED_display+0x23c>)
 80002e4:	2301      	movs	r3, #1
 80002e6:	ca06      	ldmia	r2, {r1, r2}
 80002e8:	4850      	ldr	r0, [pc, #320]	; (800042c <update_OLED_display+0x264>)
 80002ea:	f004 fb8b 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80002ee:	2120      	movs	r1, #32
 80002f0:	2000      	movs	r0, #0
 80002f2:	f004 fbad 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80002f6:	4a45      	ldr	r2, [pc, #276]	; (800040c <update_OLED_display+0x244>)
 80002f8:	2301      	movs	r3, #1
 80002fa:	ca06      	ldmia	r2, {r1, r2}
 80002fc:	4844      	ldr	r0, [pc, #272]	; (8000410 <update_OLED_display+0x248>)
 80002fe:	f004 fb81 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000302:	212d      	movs	r1, #45	; 0x2d
 8000304:	2000      	movs	r0, #0
 8000306:	f004 fba3 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("0.725 1.800", Font_11x18, White);
 800030a:	4a42      	ldr	r2, [pc, #264]	; (8000414 <update_OLED_display+0x24c>)
 800030c:	2301      	movs	r3, #1
 800030e:	ca06      	ldmia	r2, {r1, r2}
 8000310:	4847      	ldr	r0, [pc, #284]	; (8000430 <update_OLED_display+0x268>)
 8000312:	f004 fb77 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000316:	f004 fa6f 	bl	80047f8 <ssd1306_UpdateScreen>
		break;
 800031a:	e06c      	b.n	80003f6 <update_OLED_display+0x22e>

	case Case5:
		ssd1306_Fill(Black);
 800031c:	2000      	movs	r0, #0
 800031e:	f004 fa49 	bl	80047b4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000322:	2100      	movs	r1, #0
 8000324:	2000      	movs	r0, #0
 8000326:	f004 fb93 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 5", Font_16x26, White);
 800032a:	4a36      	ldr	r2, [pc, #216]	; (8000404 <update_OLED_display+0x23c>)
 800032c:	2301      	movs	r3, #1
 800032e:	ca06      	ldmia	r2, {r1, r2}
 8000330:	4840      	ldr	r0, [pc, #256]	; (8000434 <update_OLED_display+0x26c>)
 8000332:	f004 fb67 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8000336:	2120      	movs	r1, #32
 8000338:	2000      	movs	r0, #0
 800033a:	f004 fb89 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 800033e:	4a33      	ldr	r2, [pc, #204]	; (800040c <update_OLED_display+0x244>)
 8000340:	2301      	movs	r3, #1
 8000342:	ca06      	ldmia	r2, {r1, r2}
 8000344:	4832      	ldr	r0, [pc, #200]	; (8000410 <update_OLED_display+0x248>)
 8000346:	f004 fb5d 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 800034a:	212d      	movs	r1, #45	; 0x2d
 800034c:	2000      	movs	r0, #0
 800034e:	f004 fb7f 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("2.250 1.350", Font_11x18, White);
 8000352:	4a30      	ldr	r2, [pc, #192]	; (8000414 <update_OLED_display+0x24c>)
 8000354:	2301      	movs	r3, #1
 8000356:	ca06      	ldmia	r2, {r1, r2}
 8000358:	4837      	ldr	r0, [pc, #220]	; (8000438 <update_OLED_display+0x270>)
 800035a:	f004 fb53 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800035e:	f004 fa4b 	bl	80047f8 <ssd1306_UpdateScreen>
		break;
 8000362:	e048      	b.n	80003f6 <update_OLED_display+0x22e>

	case Case6:
		ssd1306_Fill(Black);
 8000364:	2000      	movs	r0, #0
 8000366:	f004 fa25 	bl	80047b4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800036a:	2100      	movs	r1, #0
 800036c:	2000      	movs	r0, #0
 800036e:	f004 fb6f 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 6", Font_16x26, White);
 8000372:	4a24      	ldr	r2, [pc, #144]	; (8000404 <update_OLED_display+0x23c>)
 8000374:	2301      	movs	r3, #1
 8000376:	ca06      	ldmia	r2, {r1, r2}
 8000378:	4830      	ldr	r0, [pc, #192]	; (800043c <update_OLED_display+0x274>)
 800037a:	f004 fb43 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 800037e:	2120      	movs	r1, #32
 8000380:	2000      	movs	r0, #0
 8000382:	f004 fb65 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8000386:	4a21      	ldr	r2, [pc, #132]	; (800040c <update_OLED_display+0x244>)
 8000388:	2301      	movs	r3, #1
 800038a:	ca06      	ldmia	r2, {r1, r2}
 800038c:	4820      	ldr	r0, [pc, #128]	; (8000410 <update_OLED_display+0x248>)
 800038e:	f004 fb39 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000392:	212d      	movs	r1, #45	; 0x2d
 8000394:	2000      	movs	r0, #0
 8000396:	f004 fb5b 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("1.420 3.930", Font_11x18, White);
 800039a:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <update_OLED_display+0x24c>)
 800039c:	2301      	movs	r3, #1
 800039e:	ca06      	ldmia	r2, {r1, r2}
 80003a0:	4827      	ldr	r0, [pc, #156]	; (8000440 <update_OLED_display+0x278>)
 80003a2:	f004 fb2f 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80003a6:	f004 fa27 	bl	80047f8 <ssd1306_UpdateScreen>
		break;
 80003aa:	e024      	b.n	80003f6 <update_OLED_display+0x22e>

	case Case7:
		ssd1306_Fill(Black);
 80003ac:	2000      	movs	r0, #0
 80003ae:	f004 fa01 	bl	80047b4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80003b2:	2100      	movs	r1, #0
 80003b4:	2000      	movs	r0, #0
 80003b6:	f004 fb4b 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 7", Font_16x26, White);
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <update_OLED_display+0x23c>)
 80003bc:	2301      	movs	r3, #1
 80003be:	ca06      	ldmia	r2, {r1, r2}
 80003c0:	4820      	ldr	r0, [pc, #128]	; (8000444 <update_OLED_display+0x27c>)
 80003c2:	f004 fb1f 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80003c6:	2120      	movs	r1, #32
 80003c8:	2000      	movs	r0, #0
 80003ca:	f004 fb41 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80003ce:	4a0f      	ldr	r2, [pc, #60]	; (800040c <update_OLED_display+0x244>)
 80003d0:	2301      	movs	r3, #1
 80003d2:	ca06      	ldmia	r2, {r1, r2}
 80003d4:	480e      	ldr	r0, [pc, #56]	; (8000410 <update_OLED_display+0x248>)
 80003d6:	f004 fb15 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 80003da:	212d      	movs	r1, #45	; 0x2d
 80003dc:	2000      	movs	r0, #0
 80003de:	f004 fb37 	bl	8004a50 <ssd1306_SetCursor>
		ssd1306_WriteString("0.850 6.000", Font_11x18, White);
 80003e2:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <update_OLED_display+0x24c>)
 80003e4:	2301      	movs	r3, #1
 80003e6:	ca06      	ldmia	r2, {r1, r2}
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <update_OLED_display+0x280>)
 80003ea:	f004 fb0b 	bl	8004a04 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80003ee:	f004 fa03 	bl	80047f8 <ssd1306_UpdateScreen>
		break;
 80003f2:	e000      	b.n	80003f6 <update_OLED_display+0x22e>

	default:
		break;
 80003f4:	bf00      	nop
	}

	OLEDupToDate = true;
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <update_OLED_display+0x284>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]

}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000054 	.word	0x20000054
 8000408:	08004af0 	.word	0x08004af0
 800040c:	20000044 	.word	0x20000044
 8000410:	08004af8 	.word	0x08004af8
 8000414:	2000004c 	.word	0x2000004c
 8000418:	08004b0c 	.word	0x08004b0c
 800041c:	08004b18 	.word	0x08004b18
 8000420:	08004b20 	.word	0x08004b20
 8000424:	08004b2c 	.word	0x08004b2c
 8000428:	08004b34 	.word	0x08004b34
 800042c:	08004b40 	.word	0x08004b40
 8000430:	08004b48 	.word	0x08004b48
 8000434:	08004b54 	.word	0x08004b54
 8000438:	08004b5c 	.word	0x08004b5c
 800043c:	08004b68 	.word	0x08004b68
 8000440:	08004b70 	.word	0x08004b70
 8000444:	08004b7c 	.word	0x08004b7c
 8000448:	08004b84 	.word	0x08004b84
 800044c:	20000079 	.word	0x20000079

08000450 <Init_Freq>:
								 [5].Freq_1 = 56337, [5].Freq_2 = 20355,	// 1.42kHz / 3.93kHz
								 [6].Freq_1 = 94117, [6].Freq_2 = 13332,	// 0.85kHz / 6kHz
							};

void Init_Freq(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	//Initialise to Case1 and Freq1

	CurrentCase = 0; // array index - actual Case is + 1
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <Init_Freq+0x24>)
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
	CurrentFrequency = CasesSet1[CurrentCase].Freq_1;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <Init_Freq+0x24>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a06      	ldr	r2, [pc, #24]	; (8000478 <Init_Freq+0x28>)
 8000460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000464:	461a      	mov	r2, r3
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <Init_Freq+0x2c>)
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	20000484 	.word	0x20000484
 8000478:	20000000 	.word	0x20000000
 800047c:	2000048c 	.word	0x2000048c

08000480 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);				// just for debugging with scope

	  if(TIM2->ARR == CasesSet1[CurrentCase].Freq_1)	// writing directly to registers to avoid delays
 8000488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	490f      	ldr	r1, [pc, #60]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000494:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000498:	429a      	cmp	r2, r3
 800049a:	d109      	bne.n	80004b0 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_2;
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a4:	490a      	ldr	r1, [pc, #40]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	440b      	add	r3, r1
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	  }
	  else
	  {
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_1;
	  }
}
 80004ae:	e007      	b.n	80004c0 <HAL_TIM_PeriodElapsedCallback+0x40>
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_1;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b8:	4905      	ldr	r1, [pc, #20]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80004ba:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80004be:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	20000484 	.word	0x20000484
 80004d0:	20000000 	.word	0x20000000

080004d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)	// next case button pressed
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	d10b      	bne.n	80004fc <HAL_GPIO_EXTI_Callback+0x28>
	{
		CurrentCase++;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	4a14      	ldr	r2, [pc, #80]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 80004ec:	6013      	str	r3, [r2, #0]
		if(CurrentCase > 6)
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b06      	cmp	r3, #6
 80004f4:	dd02      	ble.n	80004fc <HAL_GPIO_EXTI_Callback+0x28>
			CurrentCase = 6;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 80004f8:	2206      	movs	r2, #6
 80004fa:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3)	// previous case down button pressed
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	2b08      	cmp	r3, #8
 8000500:	d10b      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0x46>
	{
		CurrentCase--;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3b01      	subs	r3, #1
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 800050a:	6013      	str	r3, [r2, #0]
		if(CurrentCase < 0)
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	da02      	bge.n	800051a <HAL_GPIO_EXTI_Callback+0x46>
			CurrentCase = 0;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
	}

	OLEDDisplayState = CurrentCase;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_GPIO_EXTI_Callback+0x68>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	b2da      	uxtb	r2, r3
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000522:	701a      	strb	r2, [r3, #0]
	OLEDupToDate = false;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <HAL_GPIO_EXTI_Callback+0x70>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // clear interrupt manually again (it is done already in library function before this callback function but interrupt can occur again when this function is running).
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_GPIO_EXTI_Callback+0x74>)
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	6153      	str	r3, [r2, #20]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000484 	.word	0x20000484
 8000540:	20000078 	.word	0x20000078
 8000544:	20000079 	.word	0x20000079
 8000548:	40010400 	.word	0x40010400

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <MX_GPIO_Init+0x108>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a3b      	ldr	r2, [pc, #236]	; (8000654 <MX_GPIO_Init+0x108>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b39      	ldr	r3, [pc, #228]	; (8000654 <MX_GPIO_Init+0x108>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b36      	ldr	r3, [pc, #216]	; (8000654 <MX_GPIO_Init+0x108>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a35      	ldr	r2, [pc, #212]	; (8000654 <MX_GPIO_Init+0x108>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <MX_GPIO_Init+0x108>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b30      	ldr	r3, [pc, #192]	; (8000654 <MX_GPIO_Init+0x108>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <MX_GPIO_Init+0x108>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <MX_GPIO_Init+0x108>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <MX_GPIO_Init+0x108>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a29      	ldr	r2, [pc, #164]	; (8000654 <MX_GPIO_Init+0x108>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_GPIO_Init+0x108>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 ff1f 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	4821      	ldr	r0, [pc, #132]	; (8000658 <MX_GPIO_Init+0x10c>)
 80005d4:	f000 ff1a 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005d8:	230c      	movs	r3, #12
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <MX_GPIO_Init+0x110>)
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <MX_GPIO_Init+0x10c>)
 80005ec:	f000 fd66 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005f0:	2320      	movs	r3, #32
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f000 fd57 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_GPIO_Init+0x10c>)
 8000626:	f000 fd49 	bl	80010bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fd0d 	bl	800104e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000634:	2008      	movs	r0, #8
 8000636:	f000 fd26 	bl	8001086 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2009      	movs	r0, #9
 8000640:	f000 fd05 	bl	800104e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000644:	2009      	movs	r0, #9
 8000646:	f000 fd1e 	bl	8001086 <HAL_NVIC_EnableIRQ>

}
 800064a:	bf00      	nop
 800064c:	3728      	adds	r7, #40	; 0x28
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	48000800 	.word	0x48000800
 800065c:	10210000 	.word	0x10210000

08000660 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C3_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C3_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C3_Init+0x74>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <MX_I2C3_Init+0x7c>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_I2C3_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_I2C3_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C3_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C3_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C3_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <MX_I2C3_Init+0x74>)
 800069c:	f000 ff00 	bl	80014a0 <HAL_I2C_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006a6:	f000 f932 	bl	800090e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_I2C3_Init+0x74>)
 80006ae:	f001 fa63 	bl	8001b78 <HAL_I2CEx_ConfigAnalogFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006b8:	f000 f929 	bl	800090e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_I2C3_Init+0x74>)
 80006c0:	f001 faa5 	bl	8001c0e <HAL_I2CEx_ConfigDigitalFilter>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f920 	bl	800090e <Error_Handler>
  }

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000494 	.word	0x20000494
 80006d8:	40005c00 	.word	0x40005c00
 80006dc:	10909cec 	.word	0x10909cec

080006e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_I2C_MspInit+0x7c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d127      	bne.n	8000752 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_I2C_MspInit+0x80>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <HAL_I2C_MspInit+0x80>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_I2C_MspInit+0x80>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071a:	2303      	movs	r3, #3
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071e:	2312      	movs	r3, #18
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000722:	2301      	movs	r3, #1
 8000724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800072a:	2304      	movs	r3, #4
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <HAL_I2C_MspInit+0x84>)
 8000736:	f000 fcc1 	bl	80010bc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_I2C_MspInit+0x80>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_I2C_MspInit+0x80>)
 8000740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_I2C_MspInit+0x80>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40005c00 	.word	0x40005c00
 8000760:	40021000 	.word	0x40021000
 8000764:	48000800 	.word	0x48000800

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fafd 	bl	8000d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f85a 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff feea 	bl	800054c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000778:	f000 f970 	bl	8000a5c <MX_TIM2_Init>
  MX_TIM3_Init();
 800077c:	f000 f9e6 	bl	8000b4c <MX_TIM3_Init>
  MX_I2C3_Init();
 8000780:	f7ff ff6e 	bl	8000660 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  Init_Freq();
 8000784:	f7ff fe64 	bl	8000450 <Init_Freq>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000788:	2100      	movs	r1, #0
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <main+0xa0>)
 800078c:	f002 fe7c 	bl	8003488 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000790:	481e      	ldr	r0, [pc, #120]	; (800080c <main+0xa4>)
 8000792:	f002 fda7 	bl	80032e4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  ssd1306_Init();
 8000796:	f003 ff9f 	bl	80046d8 <ssd1306_Init>

  HAL_Delay(300);
 800079a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800079e:	f000 fb59 	bl	8000e54 <HAL_Delay>

  ssd1306_Fill(Black);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f004 f806 	bl	80047b4 <ssd1306_Fill>
  ssd1306_SetCursor(0, 4);
 80007a8:	2104      	movs	r1, #4
 80007aa:	2000      	movs	r0, #0
 80007ac:	f004 f950 	bl	8004a50 <ssd1306_SetCursor>
  ssd1306_WriteString("    TMD", Font_11x18, White);
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <main+0xa8>)
 80007b2:	2301      	movs	r3, #1
 80007b4:	ca06      	ldmia	r2, {r1, r2}
 80007b6:	4817      	ldr	r0, [pc, #92]	; (8000814 <main+0xac>)
 80007b8:	f004 f924 	bl	8004a04 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 30);
 80007bc:	211e      	movs	r1, #30
 80007be:	2000      	movs	r0, #0
 80007c0:	f004 f946 	bl	8004a50 <ssd1306_SetCursor>
  ssd1306_WriteString("   Technologies", Font_7x10, White);
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <main+0xb0>)
 80007c6:	2301      	movs	r3, #1
 80007c8:	ca06      	ldmia	r2, {r1, r2}
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <main+0xb4>)
 80007cc:	f004 f91a 	bl	8004a04 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80007d0:	f004 f812 	bl	80047f8 <ssd1306_UpdateScreen>
  HAL_Delay(2000);
 80007d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007d8:	f000 fb3c 	bl	8000e54 <HAL_Delay>
 //	ssd1306_WriteString(string1, Font_7x10, White);
 //	ssd1306_UpdateScreen();

  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007dc:	2120      	movs	r1, #32
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fe2b 	bl	800143c <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 80007e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007ea:	f000 fb33 	bl	8000e54 <HAL_Delay>

    if(OLEDupToDate != true)
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <main+0xb8>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	f083 0301 	eor.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0ef      	beq.n	80007dc <main+0x74>
    {
        update_OLED_display(OLEDDisplayState);
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <main+0xbc>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fce1 	bl	80001c8 <update_OLED_display>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000806:	e7e9      	b.n	80007dc <main+0x74>
 8000808:	2000052c 	.word	0x2000052c
 800080c:	200004e0 	.word	0x200004e0
 8000810:	2000004c 	.word	0x2000004c
 8000814:	08004b90 	.word	0x08004b90
 8000818:	20000044 	.word	0x20000044
 800081c:	08004b98 	.word	0x08004b98
 8000820:	20000079 	.word	0x20000079
 8000824:	20000078 	.word	0x20000078

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b0b8      	sub	sp, #224	; 0xe0
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000832:	2244      	movs	r2, #68	; 0x44
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 f946 	bl	8004ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2288      	movs	r2, #136	; 0x88
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f004 f938 	bl	8004ac8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086c:	2303      	movs	r3, #3
 800086e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000878:	2314      	movs	r3, #20
 800087a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800087e:	2307      	movs	r3, #7
 8000880:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fa6b 	bl	8001d70 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008a0:	f000 f835 	bl	800090e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2303      	movs	r3, #3
 80008ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008c6:	2104      	movs	r1, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fe37 	bl	800253c <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008d4:	f000 f81b 	bl	800090e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008dc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008de:	2300      	movs	r3, #0
 80008e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fff5 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008f0:	f000 f80d 	bl	800090e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f8:	f001 f9e4 	bl	8001cc4 <HAL_PWREx_ControlVoltageScaling>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000902:	f000 f804 	bl	800090e <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	37e0      	adds	r7, #224	; 0xe0
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6613      	str	r3, [r2, #96]	; 0x60
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	; 0x58
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 fa2c 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80009c4:	2004      	movs	r0, #4
 80009c6:	f000 fd53 	bl	8001470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}

080009ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80009d2:	2008      	movs	r0, #8
 80009d4:	f000 fd4c 	bl	8001470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <TIM3_IRQHandler+0x10>)
 80009e2:	f002 fe57 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200004e0 	.word	0x200004e0

080009f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <SystemInit+0x64>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <SystemInit+0x64>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <SystemInit+0x68>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <SystemInit+0x68>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <SystemInit+0x68>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <SystemInit+0x68>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <SystemInit+0x68>)
 8000a1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <SystemInit+0x68>)
 8000a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <SystemInit+0x68>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <SystemInit+0x68>)
 8000a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <SystemInit+0x68>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SystemInit+0x64>)
 8000a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a46:	609a      	str	r2, [r3, #8]
#endif
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00
 8000a58:	40021000 	.word	0x40021000

08000a5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	; 0x38
 8000a60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 94118;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000aa4:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <MX_TIM2_Init+0xec>)
 8000aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab4:	4823      	ldr	r0, [pc, #140]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ab6:	f002 fbbd 	bl	8003234 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ac0:	f7ff ff25 	bl	800090e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481c      	ldr	r0, [pc, #112]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ad2:	f003 f80f 	bl	8003af4 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000adc:	f7ff ff17 	bl	800090e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ae0:	4818      	ldr	r0, [pc, #96]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ae2:	f002 fc6f 	bl	80033c4 <HAL_TIM_PWM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000aec:	f7ff ff0f 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000af0:	2320      	movs	r3, #32
 8000af2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000b00:	f003 fd0a 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b0a:	f7ff ff00 	bl	800090e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1600;
 8000b12:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000b16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000b28:	f002 fed4 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b32:	f7ff feec 	bl	800090e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000b38:	f000 f8ba 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000b3c:	bf00      	nop
 8000b3e:	3738      	adds	r7, #56	; 0x38
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000052c 	.word	0x2000052c
 8000b48:	00016fa6 	.word	0x00016fa6

08000b4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <MX_TIM3_Init+0xa4>)
 8000b6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000b7e:	220e      	movs	r2, #14
 8000b80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b8e:	4817      	ldr	r0, [pc, #92]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000b90:	f002 fb50 	bl	8003234 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b9a:	f7ff feb8 	bl	800090e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000bb8:	f002 ff9c 	bl	8003af4 <HAL_TIM_ConfigClockSource>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000bc2:	f7ff fea4 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_TIM3_Init+0xa0>)
 8000bd4:	f003 fca0 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bde:	f7ff fe96 	bl	800090e <Error_Handler>
  }

}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200004e0 	.word	0x200004e0
 8000bf0:	40000400 	.word	0x40000400

08000bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c14:	d10c      	bne.n	8000c30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6593      	str	r3, [r2, #88]	; 0x58
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c2e:	e034      	b.n	8000c9a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_TIM_Base_MspInit+0xb4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12f      	bne.n	8000c9a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6593      	str	r3, [r2, #88]	; 0x58
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_TIM_Base_MspInit+0xb8>)
 8000c86:	f000 fa19 	bl	80010bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	201d      	movs	r0, #29
 8000c90:	f000 f9dd 	bl	800104e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c94:	201d      	movs	r0, #29
 8000c96:	f000 f9f6 	bl	8001086 <HAL_NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40000400 	.word	0x40000400
 8000cac:	48000c00 	.word	0x48000c00

08000cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd0:	d11c      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_TIM_MspPostInit+0x64>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_TIM_MspPostInit+0x64>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_TIM_MspPostInit+0x64>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cea:	2301      	movs	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 f9d8 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d1c:	f7ff fe68 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d22:	e003      	b.n	8000d2c <LoopCopyDataInit>

08000d24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d2a:	3104      	adds	r1, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d2c:	480a      	ldr	r0, [pc, #40]	; (8000d58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d34:	d3f6      	bcc.n	8000d24 <CopyDataInit>
	ldr	r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d38:	e002      	b.n	8000d40 <LoopFillZerobss>

08000d3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d3c:	f842 3b04 	str.w	r3, [r2], #4

08000d40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LoopForever+0x16>)
	cmp	r2, r3
 8000d42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d44:	d3f9      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f003 fe9b 	bl	8004a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4a:	f7ff fd0d 	bl	8000768 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d50:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d54:	08007404 	.word	0x08007404
	ldr	r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d5c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8000d60:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8000d64:	2000057c 	.word	0x2000057c

08000d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_2_IRQHandler>

08000d6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f95f 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 f80e 	bl	8000d9c <HAL_InitTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e001      	b.n	8000d90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8c:	f7ff fdc6 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_InitTick+0x70>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f96b 	bl	80010a2 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10f      	bne.n	8000df2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d809      	bhi.n	8000dec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f935 	bl	800104e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_InitTick+0x74>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e001      	b.n	8000dfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000040 	.word	0x20000040
 8000e0c:	20000038 	.word	0x20000038
 8000e10:	2000003c 	.word	0x2000003c

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000040 	.word	0x20000040
 8000e38:	20000578 	.word	0x20000578

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000578 	.word	0x20000578

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_Delay+0x40>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000040 	.word	0x20000040

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff8e 	bl	8000f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff29 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff3e 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff8e 	bl	8000f8c <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5d 	bl	8000f38 <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff31 	bl	8000efc <__NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	e17f      	b.n	80013cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8171 	beq.w	80013c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d00b      	beq.n	8001104 <HAL_GPIO_Init+0x48>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f8:	2b11      	cmp	r3, #17
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b12      	cmp	r3, #18
 8001102:	d130      	bne.n	8001166 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 0201 	and.w	r2, r3, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b03      	cmp	r3, #3
 8001170:	d118      	bne.n	80011a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x128>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b12      	cmp	r3, #18
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	6939      	ldr	r1, [r7, #16]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80ac 	beq.w	80013c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b5e      	ldr	r3, [pc, #376]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	4a5d      	ldr	r2, [pc, #372]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6613      	str	r3, [r2, #96]	; 0x60
 800127a:	4b5b      	ldr	r3, [pc, #364]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001286:	4a59      	ldr	r2, [pc, #356]	; (80013ec <HAL_GPIO_Init+0x330>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x242>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <HAL_GPIO_Init+0x334>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x23e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <HAL_GPIO_Init+0x338>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x23a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_GPIO_Init+0x33c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x236>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <HAL_GPIO_Init+0x340>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x232>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <HAL_GPIO_Init+0x344>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a49      	ldr	r2, [pc, #292]	; (8001404 <HAL_GPIO_Init+0x348>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x22a>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00c      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00a      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012ea:	2305      	movs	r3, #5
 80012ec:	e008      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e004      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x244>
 80012fe:	2300      	movs	r3, #0
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	4093      	lsls	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001310:	4936      	ldr	r1, [pc, #216]	; (80013ec <HAL_GPIO_Init+0x330>)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_GPIO_Init+0x34c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001342:	4a31      	ldr	r2, [pc, #196]	; (8001408 <HAL_GPIO_Init+0x34c>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x34c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800136c:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_GPIO_Init+0x34c>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_GPIO_Init+0x34c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_GPIO_Init+0x34c>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x34c>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_GPIO_Init+0x34c>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f ae78 	bne.w	80010cc <HAL_GPIO_Init+0x10>
  }
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	48000400 	.word	0x48000400
 80013f4:	48000800 	.word	0x48000800
 80013f8:	48000c00 	.word	0x48000c00
 80013fc:	48001000 	.word	0x48001000
 8001400:	48001400 	.word	0x48001400
 8001404:	48001800 	.word	0x48001800
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001428:	e002      	b.n	8001430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43d9      	mvns	r1, r3
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	400b      	ands	r3, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f820 	bl	80004d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e081      	b.n	80015b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff f90a 	bl	80006e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2224      	movs	r2, #36	; 0x24
 80014d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	e006      	b.n	8001528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d104      	bne.n	800153a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001538:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800155c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	ea42 0103 	orr.w	r1, r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	021a      	lsls	r2, r3, #8
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69d9      	ldr	r1, [r3, #28]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	460b      	mov	r3, r1
 80015d4:	813b      	strh	r3, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	f040 80f9 	bne.w	80017da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <HAL_I2C_Mem_Write+0x34>
 80015ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0ed      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_I2C_Mem_Write+0x4e>
 800160a:	2302      	movs	r3, #2
 800160c:	e0e6      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001616:	f7ff fc11 	bl	8000e3c <HAL_GetTick>
 800161a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2319      	movs	r3, #25
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f955 	bl	80018d8 <I2C_WaitOnFlagUntilTimeout>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0d1      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2221      	movs	r2, #33	; 0x21
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a3a      	ldr	r2, [r7, #32]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001660:	88f8      	ldrh	r0, [r7, #6]
 8001662:	893a      	ldrh	r2, [r7, #8]
 8001664:	8979      	ldrh	r1, [r7, #10]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4603      	mov	r3, r0
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 f8b9 	bl	80017e8 <I2C_RequestMemoryWrite>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0a9      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168c:	b29b      	uxth	r3, r3
 800168e:	2bff      	cmp	r3, #255	; 0xff
 8001690:	d90e      	bls.n	80016b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	22ff      	movs	r2, #255	; 0xff
 8001696:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169c:	b2da      	uxtb	r2, r3
 800169e:	8979      	ldrh	r1, [r7, #10]
 80016a0:	2300      	movs	r3, #0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 fa37 	bl	8001b1c <I2C_TransferConfig>
 80016ae:	e00f      	b.n	80016d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	8979      	ldrh	r1, [r7, #10]
 80016c2:	2300      	movs	r3, #0
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 fa26 	bl	8001b1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f93f 	bl	8001958 <I2C_WaitOnTXISFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e07b      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001718:	b29b      	uxth	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d034      	beq.n	8001788 <HAL_I2C_Mem_Write+0x1c8>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	2b00      	cmp	r3, #0
 8001724:	d130      	bne.n	8001788 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	2200      	movs	r2, #0
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f8d1 	bl	80018d8 <I2C_WaitOnFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e04d      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d90e      	bls.n	8001768 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	22ff      	movs	r2, #255	; 0xff
 800174e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001754:	b2da      	uxtb	r2, r3
 8001756:	8979      	ldrh	r1, [r7, #10]
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f9db 	bl	8001b1c <I2C_TransferConfig>
 8001766:	e00f      	b.n	8001788 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	b2da      	uxtb	r2, r3
 8001778:	8979      	ldrh	r1, [r7, #10]
 800177a:	2300      	movs	r3, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f9ca 	bl	8001b1c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178c:	b29b      	uxth	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d19e      	bne.n	80016d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f91e 	bl	80019d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e01a      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_I2C_Mem_Write+0x224>)
 80017ba:	400b      	ands	r3, r1
 80017bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
  }
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	fe00e800 	.word	0xfe00e800

080017e8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	817b      	strh	r3, [r7, #10]
 80017fa:	460b      	mov	r3, r1
 80017fc:	813b      	strh	r3, [r7, #8]
 80017fe:	4613      	mov	r3, r2
 8001800:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	8979      	ldrh	r1, [r7, #10]
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <I2C_RequestMemoryWrite+0xa4>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f983 	bl	8001b1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	69b9      	ldr	r1, [r7, #24]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f89c 	bl	8001958 <I2C_WaitOnTXISFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e02c      	b.n	8001884 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001830:	893b      	ldrh	r3, [r7, #8]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
 800183a:	e015      	b.n	8001868 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800183c:	893b      	ldrh	r3, [r7, #8]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	b29b      	uxth	r3, r3
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	69b9      	ldr	r1, [r7, #24]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f882 	bl	8001958 <I2C_WaitOnTXISFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e012      	b.n	8001884 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800185e:	893b      	ldrh	r3, [r7, #8]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2200      	movs	r2, #0
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f830 	bl	80018d8 <I2C_WaitOnFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	80002000 	.word	0x80002000

08001890 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d103      	bne.n	80018ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d007      	beq.n	80018cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	619a      	str	r2, [r3, #24]
  }
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e8:	e022      	b.n	8001930 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d01e      	beq.n	8001930 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f2:	f7ff faa3 	bl	8000e3c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d302      	bcc.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d113      	bne.n	8001930 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e00f      	b.n	8001950 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699a      	ldr	r2, [r3, #24]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	4013      	ands	r3, r2
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	429a      	cmp	r2, r3
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	429a      	cmp	r2, r3
 800194c:	d0cd      	beq.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001964:	e02c      	b.n	80019c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f870 	bl	8001a50 <I2C_IsAcknowledgeFailed>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e02a      	b.n	80019d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d01e      	beq.n	80019c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001982:	f7ff fa5b 	bl	8000e3c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	429a      	cmp	r2, r3
 8001990:	d302      	bcc.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d113      	bne.n	80019c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	f043 0220 	orr.w	r2, r3, #32
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e007      	b.n	80019d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d1cb      	bne.n	8001966 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e4:	e028      	b.n	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f830 	bl	8001a50 <I2C_IsAcknowledgeFailed>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e026      	b.n	8001a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fa:	f7ff fa1f 	bl	8000e3c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d302      	bcc.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d113      	bne.n	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e007      	b.n	8001a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d1cf      	bne.n	80019e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d151      	bne.n	8001b0e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a6a:	e022      	b.n	8001ab2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d01e      	beq.n	8001ab2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a74:	f7ff f9e2 	bl	8000e3c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d302      	bcc.n	8001a8a <I2C_IsAcknowledgeFailed+0x3a>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d113      	bne.n	8001ab2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f043 0220 	orr.w	r2, r3, #32
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e02e      	b.n	8001b10 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d1d5      	bne.n	8001a6c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2220      	movs	r2, #32
 8001ace:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff fedd 	bl	8001890 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <I2C_IsAcknowledgeFailed+0xc8>)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	fe00e800 	.word	0xfe00e800

08001b1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	817b      	strh	r3, [r7, #10]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	0d5b      	lsrs	r3, r3, #21
 8001b38:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <I2C_TransferConfig+0x58>)
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	43db      	mvns	r3, r3
 8001b42:	ea02 0103 	and.w	r1, r2, r3
 8001b46:	897b      	ldrh	r3, [r7, #10]
 8001b48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b4c:	7a7b      	ldrb	r3, [r7, #9]
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	03ff63ff 	.word	0x03ff63ff

08001b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d138      	bne.n	8001c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e032      	b.n	8001c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2224      	movs	r2, #36	; 0x24
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d139      	bne.n	8001c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e033      	b.n	8001c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2224      	movs	r2, #36	; 0x24
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd2:	d130      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	d038      	beq.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2232      	movs	r2, #50	; 0x32
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d08:	e002      	b.n	8001d10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1c:	d102      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f2      	bne.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d30:	d110      	bne.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e00f      	b.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d007      	beq.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000
 8001d68:	20000038 	.word	0x20000038
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e3d4      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d82:	4ba1      	ldr	r3, [pc, #644]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d8c:	4b9e      	ldr	r3, [pc, #632]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80e4 	beq.w	8001f6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_RCC_OscConfig+0x4a>
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	f040 808b 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	f040 8087 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dba:	4b93      	ldr	r3, [pc, #588]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x62>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e3ac      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1a      	ldr	r2, [r3, #32]
 8001dd6:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_RCC_OscConfig+0x7c>
 8001de2:	4b89      	ldr	r3, [pc, #548]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_OscConfig+0x88>
 8001dec:	4b86      	ldr	r3, [pc, #536]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d223      	bcs.n	8001e44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fd07 	bl	8002814 <RCC_SetFlashLatencyFromMSIRange>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e38d      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e10:	4b7d      	ldr	r3, [pc, #500]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a7c      	ldr	r2, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4977      	ldr	r1, [pc, #476]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2e:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	4972      	ldr	r1, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
 8001e42:	e025      	b.n	8001e90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e44:	4b70      	ldr	r3, [pc, #448]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6f      	ldr	r2, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b6d      	ldr	r3, [pc, #436]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	496a      	ldr	r1, [pc, #424]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e62:	4b69      	ldr	r3, [pc, #420]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4965      	ldr	r1, [pc, #404]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fcc7 	bl	8002814 <RCC_SetFlashLatencyFromMSIRange>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e34d      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e90:	f000 fc36 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8001e94:	4601      	mov	r1, r0
 8001e96:	4b5c      	ldr	r3, [pc, #368]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	4a5a      	ldr	r2, [pc, #360]	; (800200c <HAL_RCC_OscConfig+0x29c>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa21 f303 	lsr.w	r3, r1, r3
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_RCC_OscConfig+0x2a0>)
 8001eae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eb0:	4b58      	ldr	r3, [pc, #352]	; (8002014 <HAL_RCC_OscConfig+0x2a4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff71 	bl	8000d9c <HAL_InitTick>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d052      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	e331      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d032      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a4c      	ldr	r2, [pc, #304]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001edc:	f7fe ffae 	bl	8000e3c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ee4:	f7fe ffaa 	bl	8000e3c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e31a      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a40      	ldr	r2, [pc, #256]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	493b      	ldr	r1, [pc, #236]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f20:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	4936      	ldr	r1, [pc, #216]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e01a      	b.n	8001f6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a33      	ldr	r2, [pc, #204]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f42:	f7fe ff7b 	bl	8000e3c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f4a:	f7fe ff77 	bl	8000e3c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e2e7      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x1da>
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d074      	beq.n	8002062 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x21a>
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d10e      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d10b      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d064      	beq.n	8002060 <HAL_RCC_OscConfig+0x2f0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d160      	bne.n	8002060 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e2c4      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x24a>
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a15      	ldr	r2, [pc, #84]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e01d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x286>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x26e>
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e00b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x286>
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_RCC_OscConfig+0x298>)
 8001ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01c      	beq.n	8002038 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe ff1d 	bl	8000e3c <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002004:	e011      	b.n	800202a <HAL_RCC_OscConfig+0x2ba>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	08004ba8 	.word	0x08004ba8
 8002010:	20000038 	.word	0x20000038
 8002014:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe ff10 	bl	8000e3c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e280      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202a:	4baf      	ldr	r3, [pc, #700]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x2a8>
 8002036:	e014      	b.n	8002062 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe ff00 	bl	8000e3c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7fe fefc 	bl	8000e3c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e26c      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002052:	4ba5      	ldr	r3, [pc, #660]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x2d0>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d060      	beq.n	8002130 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x310>
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d119      	bne.n	80020ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d116      	bne.n	80020ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002080:	4b99      	ldr	r3, [pc, #612]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x328>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e249      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b93      	ldr	r3, [pc, #588]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	4990      	ldr	r1, [pc, #576]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ac:	e040      	b.n	8002130 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d023      	beq.n	80020fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b6:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a8b      	ldr	r2, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe febb 	bl	8000e3c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7fe feb7 	bl	8000e3c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e227      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020dc:	4b82      	ldr	r3, [pc, #520]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b7f      	ldr	r3, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	497c      	ldr	r1, [pc, #496]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	e018      	b.n	8002130 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a79      	ldr	r2, [pc, #484]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7fe fe97 	bl	8000e3c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002112:	f7fe fe93 	bl	8000e3c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e203      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d03c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01c      	beq.n	800217e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fe72 	bl	8000e3c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7fe fe6e 	bl	8000e3c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1de      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216e:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ef      	beq.n	800215c <HAL_RCC_OscConfig+0x3ec>
 800217c:	e01b      	b.n	80021b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	4b5a      	ldr	r3, [pc, #360]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002184:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7fe fe55 	bl	8000e3c <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe fe51 	bl	8000e3c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1c1      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a8:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ef      	bne.n	8002196 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80a6 	beq.w	8002310 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	4b44      	ldr	r3, [pc, #272]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	4a43      	ldr	r2, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	6593      	str	r3, [r2, #88]	; 0x58
 80021e0:	4b41      	ldr	r3, [pc, #260]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f0:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <HAL_RCC_OscConfig+0x57c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d118      	bne.n	800222e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021fc:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x57c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a3a      	ldr	r2, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x57c>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002206:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002208:	f7fe fe18 	bl	8000e3c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7fe fe14 	bl	8000e3c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e184      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002222:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_RCC_OscConfig+0x57c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <HAL_RCC_OscConfig+0x4d8>
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002246:	e024      	b.n	8002292 <HAL_RCC_OscConfig+0x522>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d110      	bne.n	8002272 <HAL_RCC_OscConfig+0x502>
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002270:	e00f      	b.n	8002292 <HAL_RCC_OscConfig+0x522>
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d016      	beq.n	80022c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe fdcf 	bl	8000e3c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fdcb 	bl	8000e3c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e139      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x578>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ed      	beq.n	80022a2 <HAL_RCC_OscConfig+0x532>
 80022c6:	e01a      	b.n	80022fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe fdb8 	bl	8000e3c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ce:	e00f      	b.n	80022f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe fdb4 	bl	8000e3c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d906      	bls.n	80022f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e122      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f0:	4b90      	ldr	r3, [pc, #576]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e8      	bne.n	80022d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fe:	7ffb      	ldrb	r3, [r7, #31]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	4a8a      	ldr	r2, [pc, #552]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 800230a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8108 	beq.w	800252a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	2b02      	cmp	r3, #2
 8002320:	f040 80d0 	bne.w	80024c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002324:	4b83      	ldr	r3, [pc, #524]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	429a      	cmp	r2, r3
 8002336:	d130      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	3b01      	subs	r3, #1
 8002344:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d127      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d11f      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002364:	2a07      	cmp	r2, #7
 8002366:	bf14      	ite	ne
 8002368:	2201      	movne	r2, #1
 800236a:	2200      	moveq	r2, #0
 800236c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236e:	4293      	cmp	r3, r2
 8002370:	d113      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	3b01      	subs	r3, #1
 8002380:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d109      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d06e      	beq.n	8002478 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d069      	beq.n	8002474 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023a0:	4b64      	ldr	r3, [pc, #400]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b7      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023bc:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80023c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c8:	f7fe fd38 	bl	8000e3c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fd34 	bl	8000e3c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0a4      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e2:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b51      	ldr	r3, [pc, #324]	; (8002538 <HAL_RCC_OscConfig+0x7c8>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fe:	3a01      	subs	r2, #1
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002408:	0212      	lsls	r2, r2, #8
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002410:	0852      	lsrs	r2, r2, #1
 8002412:	3a01      	subs	r2, #1
 8002414:	0552      	lsls	r2, r2, #21
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800241c:	0852      	lsrs	r2, r2, #1
 800241e:	3a01      	subs	r2, #1
 8002420:	0652      	lsls	r2, r2, #25
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002428:	0912      	lsrs	r2, r2, #4
 800242a:	0452      	lsls	r2, r2, #17
 800242c:	430a      	orrs	r2, r1
 800242e:	4941      	ldr	r1, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002434:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800244c:	f7fe fcf6 	bl	8000e3c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fcf2 	bl	8000e3c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e062      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002472:	e05a      	b.n	800252a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e059      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d152      	bne.n	800252a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800249c:	f7fe fcce 	bl	8000e3c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fcca 	bl	8000e3c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e03a      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x734>
 80024c2:	e032      	b.n	800252a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d02d      	beq.n	8002526 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a13      	ldr	r2, [pc, #76]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024e8:	f023 0303 	bic.w	r3, r3, #3
 80024ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 80024f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fc9d 	bl	8000e3c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe fc99 	bl	8000e3c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e009      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x7c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x796>
 8002524:	e001      	b.n	800252a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	f99d808c 	.word	0xf99d808c

0800253c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0c8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d910      	bls.n	8002580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 0207 	bic.w	r2, r3, #7
 8002566:	4961      	ldr	r1, [pc, #388]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d04c      	beq.n	8002626 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002594:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d121      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e09e      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d115      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e092      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c4:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e086      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d4:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e07e      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 0203 	bic.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	493f      	ldr	r1, [pc, #252]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f6:	f7fe fc21 	bl	8000e3c <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fe:	f7fe fc1d 	bl	8000e3c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e066      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 020c 	and.w	r2, r3, #12
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	429a      	cmp	r2, r3
 8002624:	d1eb      	bne.n	80025fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	492c      	ldr	r1, [pc, #176]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d210      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4924      	ldr	r1, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1b0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e036      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4918      	ldr	r1, [pc, #96]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4910      	ldr	r1, [pc, #64]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b2:	f000 f825 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026b6:	4601      	mov	r1, r0
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCC_ClockConfig+0x1b4>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	fa21 f303 	lsr.w	r3, r1, r3
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb60 	bl	8000d9c <HAL_InitTick>
 80026dc:	4603      	mov	r3, r0
 80026de:	72fb      	strb	r3, [r7, #11]

  return status;
 80026e0:	7afb      	ldrb	r3, [r7, #11]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08004ba8 	.word	0x08004ba8
 80026f8:	20000038 	.word	0x20000038
 80026fc:	2000003c 	.word	0x2000003c

08002700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002718:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x34>
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d121      	bne.n	8002772 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d11e      	bne.n	8002772 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002734:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 8002742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e005      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800275c:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_RCC_GetSysClockFreq+0x108>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10d      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d102      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_GetSysClockFreq+0x10c>)
 800277a:	61bb      	str	r3, [r7, #24]
 800277c:	e004      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d101      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_RCC_GetSysClockFreq+0x110>)
 8002786:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b0c      	cmp	r3, #12
 800278c:	d133      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0xa4>
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0xaa>
 80027a2:	e005      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027a6:	617b      	str	r3, [r7, #20]
      break;
 80027a8:	e005      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ac:	617b      	str	r3, [r7, #20]
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	617b      	str	r3, [r7, #20]
      break;
 80027b4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	3301      	adds	r3, #1
 80027c2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	fb02 f203 	mul.w	r2, r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_GetSysClockFreq+0x104>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0e5b      	lsrs	r3, r3, #25
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	3301      	adds	r3, #1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027f6:	69bb      	ldr	r3, [r7, #24]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3724      	adds	r7, #36	; 0x24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40021000 	.word	0x40021000
 8002808:	08004bb8 	.word	0x08004bb8
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200

08002814 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800282c:	f7ff fa3c 	bl	8001ca8 <HAL_PWREx_GetVoltageRange>
 8002830:	6178      	str	r0, [r7, #20]
 8002832:	e014      	b.n	800285e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	4a24      	ldr	r2, [pc, #144]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283e:	6593      	str	r3, [r2, #88]	; 0x58
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800284c:	f7ff fa2c 	bl	8001ca8 <HAL_PWREx_GetVoltageRange>
 8002850:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002864:	d10b      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d919      	bls.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2ba0      	cmp	r3, #160	; 0xa0
 8002870:	d902      	bls.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002872:	2302      	movs	r3, #2
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e013      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002878:	2301      	movs	r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e010      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d902      	bls.n	800288a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002884:	2303      	movs	r3, #3
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e00a      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d102      	bne.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002890:	2302      	movs	r3, #2
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	e004      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d101      	bne.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800289c:	2301      	movs	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 0207 	bic.w	r2, r3, #7
 80028a8:	4909      	ldr	r1, [pc, #36]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d001      	beq.n	80028c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40022000 	.word	0x40022000

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028dc:	2300      	movs	r3, #0
 80028de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e0:	2300      	movs	r3, #0
 80028e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d03f      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f8:	d01c      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fe:	d802      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00e      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002904:	e01f      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290a:	d003      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800290c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002910:	d01c      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002912:	e018      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002914:	4b85      	ldr	r3, [pc, #532]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a84      	ldr	r2, [pc, #528]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002920:	e015      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fab9 	bl	8002ea0 <RCCEx_PLLSAI1_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002932:	e00c      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3320      	adds	r3, #32
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fba0 	bl	8003080 <RCCEx_PLLSAI2_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002944:	e003      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	74fb      	strb	r3, [r7, #19]
      break;
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800294c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002954:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002962:	4972      	ldr	r1, [pc, #456]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800296a:	e001      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d03f      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d01c      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298a:	d802      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00e      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002990:	e01f      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002996:	d003      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800299c:	d01c      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800299e:	e018      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a0:	4b62      	ldr	r3, [pc, #392]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a61      	ldr	r2, [pc, #388]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ac:	e015      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fa73 	bl	8002ea0 <RCCEx_PLLSAI1_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029be:	e00c      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3320      	adds	r3, #32
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fb5a 	bl	8003080 <RCCEx_PLLSAI2_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029d0:	e003      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	74fb      	strb	r3, [r7, #19]
      break;
 80029d6:	e000      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029e0:	4b52      	ldr	r3, [pc, #328]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ee:	494f      	ldr	r1, [pc, #316]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029f6:	e001      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a0 	beq.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00d      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	4a40      	ldr	r2, [pc, #256]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a30:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a40:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3a      	ldr	r2, [pc, #232]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe f9f6 	bl	8000e3c <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a52:	e009      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7fe f9f2 	bl	8000e3c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	74fb      	strb	r3, [r7, #19]
        break;
 8002a66:	e005      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a68:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d15c      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01f      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d019      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a98:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa4:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe f9b1 	bl	8000e3c <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002adc:	e00b      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe f9ad 	bl	8000e3c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d902      	bls.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	74fb      	strb	r3, [r7, #19]
            break;
 8002af4:	e006      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ec      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1a:	4904      	ldr	r1, [pc, #16]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b22:	e009      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
 8002b28:	e006      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b38:	7c7b      	ldrb	r3, [r7, #17]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3e:	4b9e      	ldr	r3, [pc, #632]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	4a9d      	ldr	r2, [pc, #628]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b56:	4b98      	ldr	r3, [pc, #608]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f023 0203 	bic.w	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	4994      	ldr	r1, [pc, #592]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b78:	4b8f      	ldr	r3, [pc, #572]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 020c 	bic.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	498c      	ldr	r1, [pc, #560]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b9a:	4b87      	ldr	r3, [pc, #540]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	4983      	ldr	r1, [pc, #524]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bbc:	4b7e      	ldr	r3, [pc, #504]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	497b      	ldr	r1, [pc, #492]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bde:	4b76      	ldr	r3, [pc, #472]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bec:	4972      	ldr	r1, [pc, #456]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c00:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	496a      	ldr	r1, [pc, #424]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c22:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	4961      	ldr	r1, [pc, #388]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c44:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	4959      	ldr	r1, [pc, #356]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c66:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c74:	4950      	ldr	r1, [pc, #320]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c88:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	4948      	ldr	r1, [pc, #288]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002caa:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	493f      	ldr	r1, [pc, #252]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d028      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cda:	4937      	ldr	r1, [pc, #220]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cea:	d106      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cec:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf6:	60d3      	str	r3, [r2, #12]
 8002cf8:	e011      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f8c8 	bl	8002ea0 <RCCEx_PLLSAI1_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d028      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d2a:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	491f      	ldr	r1, [pc, #124]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d48:	d106      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d54:	60d3      	str	r3, [r2, #12]
 8002d56:	e011      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f899 	bl	8002ea0 <RCCEx_PLLSAI1_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d02b      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	4908      	ldr	r1, [pc, #32]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da6:	d109      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a02      	ldr	r2, [pc, #8]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
 8002db4:	e014      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f867 	bl	8002ea0 <RCCEx_PLLSAI1_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d02f      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfa:	4928      	ldr	r1, [pc, #160]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e0a:	d10d      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	2102      	movs	r1, #2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f844 	bl	8002ea0 <RCCEx_PLLSAI1_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d014      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	74bb      	strb	r3, [r7, #18]
 8002e26:	e011      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3320      	adds	r3, #32
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 f921 	bl	8003080 <RCCEx_PLLSAI2_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e66:	490d      	ldr	r1, [pc, #52]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8a:	4904      	ldr	r1, [pc, #16]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eae:	4b73      	ldr	r3, [pc, #460]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d018      	beq.n	8002eec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eba:	4b70      	ldr	r3, [pc, #448]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0203 	and.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d10d      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d044      	beq.n	8002f70 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	e041      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d00c      	beq.n	8002f0e <RCCEx_PLLSAI1_Config+0x6e>
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d013      	beq.n	8002f20 <RCCEx_PLLSAI1_Config+0x80>
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d120      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002efc:	4b5f      	ldr	r3, [pc, #380]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11d      	bne.n	8002f44 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0c:	e01a      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1e:	e013      	b.n	8002f48 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f20:	4b56      	ldr	r3, [pc, #344]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f3c:	e006      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      break;
 8002f42:	e004      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f44:	bf00      	nop
 8002f46:	e002      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f4c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10d      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f54:	4b49      	ldr	r3, [pc, #292]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	4944      	ldr	r1, [pc, #272]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d17d      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a40      	ldr	r2, [pc, #256]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f82:	f7fd ff5b 	bl	8000e3c <HAL_GetTick>
 8002f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f88:	e009      	b.n	8002f9e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f8a:	f7fd ff57 	bl	8000e3c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d902      	bls.n	8002f9e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f9c:	e005      	b.n	8002faa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ef      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d160      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d111      	bne.n	8002fda <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6892      	ldr	r2, [r2, #8]
 8002fc6:	0211      	lsls	r1, r2, #8
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68d2      	ldr	r2, [r2, #12]
 8002fcc:	0912      	lsrs	r2, r2, #4
 8002fce:	0452      	lsls	r2, r2, #17
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	492a      	ldr	r1, [pc, #168]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	610b      	str	r3, [r1, #16]
 8002fd8:	e027      	b.n	800302a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d112      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	0211      	lsls	r1, r2, #8
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6912      	ldr	r2, [r2, #16]
 8002ff6:	0852      	lsrs	r2, r2, #1
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	0552      	lsls	r2, r2, #21
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	491f      	ldr	r1, [pc, #124]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	610b      	str	r3, [r1, #16]
 8003004:	e011      	b.n	800302a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800300e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6892      	ldr	r2, [r2, #8]
 8003016:	0211      	lsls	r1, r2, #8
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6952      	ldr	r2, [r2, #20]
 800301c:	0852      	lsrs	r2, r2, #1
 800301e:	3a01      	subs	r2, #1
 8003020:	0652      	lsls	r2, r2, #25
 8003022:	430a      	orrs	r2, r1
 8003024:	4915      	ldr	r1, [pc, #84]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a13      	ldr	r2, [pc, #76]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fd ff01 	bl	8000e3c <HAL_GetTick>
 800303a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800303c:	e009      	b.n	8003052 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800303e:	f7fd fefd 	bl	8000e3c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d902      	bls.n	8003052 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	73fb      	strb	r3, [r7, #15]
          break;
 8003050:	e005      	b.n	800305e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ef      	beq.n	800303e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4903      	ldr	r1, [pc, #12]	; (800307c <RCCEx_PLLSAI1_Config+0x1dc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000

08003080 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800308e:	4b68      	ldr	r3, [pc, #416]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d018      	beq.n	80030cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10d      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
       ||
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030b2:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
       ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d044      	beq.n	8003150 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e041      	b.n	8003150 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d00c      	beq.n	80030ee <RCCEx_PLLSAI2_Config+0x6e>
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d013      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x80>
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d120      	bne.n	800311e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030dc:	4b54      	ldr	r3, [pc, #336]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11d      	bne.n	8003124 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e01a      	b.n	8003124 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ee:	4b50      	ldr	r3, [pc, #320]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e013      	b.n	8003128 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003100:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10f      	bne.n	800312c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310c:	4b48      	ldr	r3, [pc, #288]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311c:	e006      	b.n	800312c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e004      	b.n	800312e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003124:	bf00      	nop
 8003126:	e002      	b.n	800312e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003128:	bf00      	nop
 800312a:	e000      	b.n	800312e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800312c:	bf00      	nop
    }

    if(status == HAL_OK)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003134:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	3b01      	subs	r3, #1
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	430b      	orrs	r3, r1
 800314a:	4939      	ldr	r1, [pc, #228]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d167      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a35      	ldr	r2, [pc, #212]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003162:	f7fd fe6b 	bl	8000e3c <HAL_GetTick>
 8003166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003168:	e009      	b.n	800317e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800316a:	f7fd fe67 	bl	8000e3c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d902      	bls.n	800317e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	73fb      	strb	r3, [r7, #15]
        break;
 800317c:	e005      	b.n	800318a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317e:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ef      	bne.n	800316a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d14a      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d111      	bne.n	80031ba <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800319e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6892      	ldr	r2, [r2, #8]
 80031a6:	0211      	lsls	r1, r2, #8
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68d2      	ldr	r2, [r2, #12]
 80031ac:	0912      	lsrs	r2, r2, #4
 80031ae:	0452      	lsls	r2, r2, #17
 80031b0:	430a      	orrs	r2, r1
 80031b2:	491f      	ldr	r1, [pc, #124]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	614b      	str	r3, [r1, #20]
 80031b8:	e011      	b.n	80031de <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6892      	ldr	r2, [r2, #8]
 80031ca:	0211      	lsls	r1, r2, #8
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6912      	ldr	r2, [r2, #16]
 80031d0:	0852      	lsrs	r2, r2, #1
 80031d2:	3a01      	subs	r2, #1
 80031d4:	0652      	lsls	r2, r2, #25
 80031d6:	430a      	orrs	r2, r1
 80031d8:	4915      	ldr	r1, [pc, #84]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a13      	ldr	r2, [pc, #76]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fd fe27 	bl	8000e3c <HAL_GetTick>
 80031ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031f0:	e009      	b.n	8003206 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031f2:	f7fd fe23 	bl	8000e3c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d902      	bls.n	8003206 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	73fb      	strb	r3, [r7, #15]
          break;
 8003204:	e005      	b.n	8003212 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0ef      	beq.n	80031f2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	4903      	ldr	r1, [pc, #12]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e049      	b.n	80032da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fcca 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 fd20 	bl	8003cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d001      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e04f      	b.n	800339c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_TIM_Base_Start_IT+0x76>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d018      	beq.n	800335a <HAL_TIM_Base_Start_IT+0x76>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <HAL_TIM_Base_Start_IT+0xc8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_TIM_Base_Start_IT+0x76>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_TIM_Base_Start_IT+0x76>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_TIM_Base_Start_IT+0x76>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIM_Base_Start_IT+0x76>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d115      	bne.n	8003386 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003362:	4013      	ands	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b06      	cmp	r3, #6
 800336a:	d015      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0xb4>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003372:	d011      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003384:	e008      	b.n	8003398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e000      	b.n	800339a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40013400 	.word	0x40013400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	00010007 	.word	0x00010007

080033c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e049      	b.n	800346a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f841 	bl	8003472 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 fc58 	bl	8003cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start+0x24>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e03c      	b.n	8003526 <HAL_TIM_PWM_Start+0x9e>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_PWM_Start+0x3e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e02f      	b.n	8003526 <HAL_TIM_PWM_Start+0x9e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_PWM_Start+0x58>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e022      	b.n	8003526 <HAL_TIM_PWM_Start+0x9e>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d109      	bne.n	80034fa <HAL_TIM_PWM_Start+0x72>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	e015      	b.n	8003526 <HAL_TIM_PWM_Start+0x9e>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d109      	bne.n	8003514 <HAL_TIM_PWM_Start+0x8c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e008      	b.n	8003526 <HAL_TIM_PWM_Start+0x9e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e09c      	b.n	8003668 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <HAL_TIM_PWM_Start+0xb6>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800353c:	e023      	b.n	8003586 <HAL_TIM_PWM_Start+0xfe>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d104      	bne.n	800354e <HAL_TIM_PWM_Start+0xc6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800354c:	e01b      	b.n	8003586 <HAL_TIM_PWM_Start+0xfe>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d104      	bne.n	800355e <HAL_TIM_PWM_Start+0xd6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355c:	e013      	b.n	8003586 <HAL_TIM_PWM_Start+0xfe>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0xe6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800356c:	e00b      	b.n	8003586 <HAL_TIM_PWM_Start+0xfe>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b10      	cmp	r3, #16
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0xf6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800357c:	e003      	b.n	8003586 <HAL_TIM_PWM_Start+0xfe>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2201      	movs	r2, #1
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 ff9c 	bl	80044cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a35      	ldr	r2, [pc, #212]	; (8003670 <HAL_TIM_PWM_Start+0x1e8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x13e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a34      	ldr	r2, [pc, #208]	; (8003674 <HAL_TIM_PWM_Start+0x1ec>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00e      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x13e>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a32      	ldr	r2, [pc, #200]	; (8003678 <HAL_TIM_PWM_Start+0x1f0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x13e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a31      	ldr	r2, [pc, #196]	; (800367c <HAL_TIM_PWM_Start+0x1f4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x13e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <HAL_TIM_PWM_Start+0x1f8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_Start+0x142>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_TIM_PWM_Start+0x144>
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_TIM_PWM_Start+0x1e8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_TIM_PWM_Start+0x19e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d018      	beq.n	8003626 <HAL_TIM_PWM_Start+0x19e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a22      	ldr	r2, [pc, #136]	; (8003684 <HAL_TIM_PWM_Start+0x1fc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_TIM_PWM_Start+0x19e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a21      	ldr	r2, [pc, #132]	; (8003688 <HAL_TIM_PWM_Start+0x200>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_TIM_PWM_Start+0x19e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1f      	ldr	r2, [pc, #124]	; (800368c <HAL_TIM_PWM_Start+0x204>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_TIM_PWM_Start+0x19e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_TIM_PWM_Start+0x1ec>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_TIM_PWM_Start+0x19e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <HAL_TIM_PWM_Start+0x1f0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d115      	bne.n	8003652 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_TIM_PWM_Start+0x208>)
 800362e:	4013      	ands	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b06      	cmp	r3, #6
 8003636:	d015      	beq.n	8003664 <HAL_TIM_PWM_Start+0x1dc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363e:	d011      	beq.n	8003664 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	e008      	b.n	8003664 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e000      	b.n	8003666 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	00010007 	.word	0x00010007

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 facf 	bl	8003c7a <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fac1 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fad2 	bl	8003c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 faa5 	bl	8003c7a <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa97 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 faa8 	bl	8003c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa7b 	bl	8003c7a <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa6d 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa7e 	bl	8003c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa51 	bl	8003c7a <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa43 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa54 	bl	8003c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fc fe34 	bl	8000480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fefc 	bl	800463c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003852:	d10e      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d107      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800386a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 feef 	bl	8004650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d10e      	bne.n	800389e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d107      	bne.n	800389e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa02 	bl	8003ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0220 	mvn.w	r2, #32
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 feaf 	bl	8004628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0fd      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x216>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b14      	cmp	r3, #20
 80038fa:	f200 80f0 	bhi.w	8003ade <HAL_TIM_PWM_ConfigChannel+0x20a>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003959 	.word	0x08003959
 8003908:	08003adf 	.word	0x08003adf
 800390c:	08003adf 	.word	0x08003adf
 8003910:	08003adf 	.word	0x08003adf
 8003914:	08003999 	.word	0x08003999
 8003918:	08003adf 	.word	0x08003adf
 800391c:	08003adf 	.word	0x08003adf
 8003920:	08003adf 	.word	0x08003adf
 8003924:	080039db 	.word	0x080039db
 8003928:	08003adf 	.word	0x08003adf
 800392c:	08003adf 	.word	0x08003adf
 8003930:	08003adf 	.word	0x08003adf
 8003934:	08003a1b 	.word	0x08003a1b
 8003938:	08003adf 	.word	0x08003adf
 800393c:	08003adf 	.word	0x08003adf
 8003940:	08003adf 	.word	0x08003adf
 8003944:	08003a5d 	.word	0x08003a5d
 8003948:	08003adf 	.word	0x08003adf
 800394c:	08003adf 	.word	0x08003adf
 8003950:	08003adf 	.word	0x08003adf
 8003954:	08003a9d 	.word	0x08003a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fa44 	bl	8003dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0204 	bic.w	r2, r2, #4
 8003982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	619a      	str	r2, [r3, #24]
      break;
 8003996:	e0a3      	b.n	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fab4 	bl	8003f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6999      	ldr	r1, [r3, #24]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	619a      	str	r2, [r3, #24]
      break;
 80039d8:	e082      	b.n	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fb1d 	bl	8004020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0208 	orr.w	r2, r2, #8
 80039f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0204 	bic.w	r2, r2, #4
 8003a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69d9      	ldr	r1, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	61da      	str	r2, [r3, #28]
      break;
 8003a18:	e062      	b.n	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fb85 	bl	8004130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69d9      	ldr	r1, [r3, #28]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	61da      	str	r2, [r3, #28]
      break;
 8003a5a:	e041      	b.n	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fbce 	bl	8004204 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a9a:	e021      	b.n	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fc12 	bl	80042cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003adc:	e000      	b.n	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003ade:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop

08003af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_ConfigClockSource+0x18>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0a8      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x16a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d067      	beq.n	8003c18 <HAL_TIM_ConfigClockSource+0x124>
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d80b      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x70>
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d073      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x144>
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d802      	bhi.n	8003b5a <HAL_TIM_ConfigClockSource+0x66>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d06f      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b58:	e078      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d06c      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x144>
 8003b5e:	2b30      	cmp	r3, #48	; 0x30
 8003b60:	d06a      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003b62:	e073      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b64:	2b70      	cmp	r3, #112	; 0x70
 8003b66:	d00d      	beq.n	8003b84 <HAL_TIM_ConfigClockSource+0x90>
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d804      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x82>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d033      	beq.n	8003bd8 <HAL_TIM_ConfigClockSource+0xe4>
 8003b70:	2b60      	cmp	r3, #96	; 0x60
 8003b72:	d041      	beq.n	8003bf8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003b74:	e06a      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d066      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x156>
 8003b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b80:	d017      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003b82:	e063      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6899      	ldr	r1, [r3, #8]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f000 fc7a 	bl	800448c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ba6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]
      break;
 8003bb0:	e04c      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f000 fc63 	bl	800448c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bd4:	609a      	str	r2, [r3, #8]
      break;
 8003bd6:	e039      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	461a      	mov	r2, r3
 8003be6:	f000 fbd7 	bl	8004398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2150      	movs	r1, #80	; 0x50
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fc30 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003bf6:	e029      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f000 fbf6 	bl	80043f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2160      	movs	r1, #96	; 0x60
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fc20 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003c16:	e019      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f000 fbb7 	bl	8004398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2140      	movs	r1, #64	; 0x40
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fc10 	bl	8004456 <TIM_ITRx_SetConfig>
      break;
 8003c36:	e009      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f000 fc07 	bl	8004456 <TIM_ITRx_SetConfig>
        break;
 8003c48:	e000      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <TIM_Base_SetConfig+0x114>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d00f      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3d      	ldr	r2, [pc, #244]	; (8003dd0 <TIM_Base_SetConfig+0x118>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3c      	ldr	r2, [pc, #240]	; (8003dd4 <TIM_Base_SetConfig+0x11c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3b      	ldr	r2, [pc, #236]	; (8003dd8 <TIM_Base_SetConfig+0x120>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3a      	ldr	r2, [pc, #232]	; (8003ddc <TIM_Base_SetConfig+0x124>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d108      	bne.n	8003d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <TIM_Base_SetConfig+0x114>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01f      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d01b      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2c      	ldr	r2, [pc, #176]	; (8003dd0 <TIM_Base_SetConfig+0x118>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d017      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <TIM_Base_SetConfig+0x11c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <TIM_Base_SetConfig+0x120>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00f      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a29      	ldr	r2, [pc, #164]	; (8003ddc <TIM_Base_SetConfig+0x124>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a28      	ldr	r2, [pc, #160]	; (8003de0 <TIM_Base_SetConfig+0x128>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a27      	ldr	r2, [pc, #156]	; (8003de4 <TIM_Base_SetConfig+0x12c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0x9a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <TIM_Base_SetConfig+0x130>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <TIM_Base_SetConfig+0x114>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00f      	beq.n	8003db0 <TIM_Base_SetConfig+0xf8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <TIM_Base_SetConfig+0x124>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0xf8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a11      	ldr	r2, [pc, #68]	; (8003de0 <TIM_Base_SetConfig+0x128>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0xf8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a10      	ldr	r2, [pc, #64]	; (8003de4 <TIM_Base_SetConfig+0x12c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0xf8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <TIM_Base_SetConfig+0x130>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	615a      	str	r2, [r3, #20]
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800

08003dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <TIM_OC1_SetConfig+0x10c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00f      	beq.n	8003e6c <TIM_OC1_SetConfig+0x80>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <TIM_OC1_SetConfig+0x110>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_OC1_SetConfig+0x80>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <TIM_OC1_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_OC1_SetConfig+0x80>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <TIM_OC1_SetConfig+0x118>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_OC1_SetConfig+0x80>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <TIM_OC1_SetConfig+0x11c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10c      	bne.n	8003e86 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0308 	bic.w	r3, r3, #8
 8003e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <TIM_OC1_SetConfig+0x10c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00f      	beq.n	8003eae <TIM_OC1_SetConfig+0xc2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <TIM_OC1_SetConfig+0x110>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00b      	beq.n	8003eae <TIM_OC1_SetConfig+0xc2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <TIM_OC1_SetConfig+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <TIM_OC1_SetConfig+0xc2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <TIM_OC1_SetConfig+0x118>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_OC1_SetConfig+0xc2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <TIM_OC1_SetConfig+0x11c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d111      	bne.n	8003ed2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40013400 	.word	0x40013400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800

08003f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0210 	bic.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0320 	bic.w	r3, r3, #32
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a28      	ldr	r2, [pc, #160]	; (800400c <TIM_OC2_SetConfig+0x100>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC2_SetConfig+0x6c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a27      	ldr	r2, [pc, #156]	; (8004010 <TIM_OC2_SetConfig+0x104>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10d      	bne.n	8003f94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a1d      	ldr	r2, [pc, #116]	; (800400c <TIM_OC2_SetConfig+0x100>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00f      	beq.n	8003fbc <TIM_OC2_SetConfig+0xb0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <TIM_OC2_SetConfig+0x104>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00b      	beq.n	8003fbc <TIM_OC2_SetConfig+0xb0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a1b      	ldr	r2, [pc, #108]	; (8004014 <TIM_OC2_SetConfig+0x108>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <TIM_OC2_SetConfig+0xb0>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <TIM_OC2_SetConfig+0x10c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC2_SetConfig+0xb0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a19      	ldr	r2, [pc, #100]	; (800401c <TIM_OC2_SetConfig+0x110>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d113      	bne.n	8003fe4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40013400 	.word	0x40013400
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800406c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_OC3_SetConfig+0xfc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_OC3_SetConfig+0x6a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <TIM_OC3_SetConfig+0x100>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10d      	bne.n	80040a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	; (800411c <TIM_OC3_SetConfig+0xfc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <TIM_OC3_SetConfig+0xae>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <TIM_OC3_SetConfig+0x100>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_OC3_SetConfig+0xae>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <TIM_OC3_SetConfig+0x104>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <TIM_OC3_SetConfig+0xae>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <TIM_OC3_SetConfig+0x108>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_OC3_SetConfig+0xae>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <TIM_OC3_SetConfig+0x10c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d113      	bne.n	80040f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40013400 	.word	0x40013400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800417e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	031b      	lsls	r3, r3, #12
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <TIM_OC4_SetConfig+0xc0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00f      	beq.n	80041b4 <TIM_OC4_SetConfig+0x84>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <TIM_OC4_SetConfig+0xc4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00b      	beq.n	80041b4 <TIM_OC4_SetConfig+0x84>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <TIM_OC4_SetConfig+0xc8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_OC4_SetConfig+0x84>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <TIM_OC4_SetConfig+0xcc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC4_SetConfig+0x84>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a14      	ldr	r2, [pc, #80]	; (8004200 <TIM_OC4_SetConfig+0xd0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40013400 	.word	0x40013400
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40014400 	.word	0x40014400
 8004200:	40014800 	.word	0x40014800

08004204 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004248:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <TIM_OC5_SetConfig+0xb4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00f      	beq.n	800427e <TIM_OC5_SetConfig+0x7a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_OC5_SetConfig+0xb8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00b      	beq.n	800427e <TIM_OC5_SetConfig+0x7a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <TIM_OC5_SetConfig+0xbc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <TIM_OC5_SetConfig+0x7a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <TIM_OC5_SetConfig+0xc0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d003      	beq.n	800427e <TIM_OC5_SetConfig+0x7a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <TIM_OC5_SetConfig+0xc4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d109      	bne.n	8004292 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004284:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	621a      	str	r2, [r3, #32]
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800

080042cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	051b      	lsls	r3, r3, #20
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a18      	ldr	r2, [pc, #96]	; (8004384 <TIM_OC6_SetConfig+0xb8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00f      	beq.n	8004348 <TIM_OC6_SetConfig+0x7c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <TIM_OC6_SetConfig+0xbc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_OC6_SetConfig+0x7c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a16      	ldr	r2, [pc, #88]	; (800438c <TIM_OC6_SetConfig+0xc0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_OC6_SetConfig+0x7c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <TIM_OC6_SetConfig+0xc4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC6_SetConfig+0x7c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a14      	ldr	r2, [pc, #80]	; (8004394 <TIM_OC6_SetConfig+0xc8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d109      	bne.n	800435c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40013400 	.word	0x40013400
 800438c:	40014000 	.word	0x40014000
 8004390:	40014400 	.word	0x40014400
 8004394:	40014800 	.word	0x40014800

08004398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0201 	bic.w	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 030a 	bic.w	r3, r3, #10
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0210 	bic.w	r2, r3, #16
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	031b      	lsls	r3, r3, #12
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	f043 0307 	orr.w	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	021a      	lsls	r2, r3, #8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	609a      	str	r2, [r3, #8]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2201      	movs	r2, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e068      	b.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800456a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d018      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d10c      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40014000 	.word	0x40014000

08004628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af04      	add	r7, sp, #16
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	2301      	movs	r3, #1
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	1dfb      	adds	r3, r7, #7
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2301      	movs	r3, #1
 800468e:	2200      	movs	r2, #0
 8004690:	2178      	movs	r1, #120	; 0x78
 8004692:	4803      	ldr	r0, [pc, #12]	; (80046a0 <ssd1306_WriteCommand+0x2c>)
 8004694:	f7fc ff94 	bl	80015c0 <HAL_I2C_Mem_Write>
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000494 	.word	0x20000494

080046a4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af04      	add	r7, sp, #16
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	9202      	str	r2, [sp, #8]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2301      	movs	r3, #1
 80046c0:	2240      	movs	r2, #64	; 0x40
 80046c2:	2178      	movs	r1, #120	; 0x78
 80046c4:	4803      	ldr	r0, [pc, #12]	; (80046d4 <ssd1306_WriteData+0x30>)
 80046c6:	f7fc ff7b 	bl	80015c0 <HAL_I2C_Mem_Write>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000494 	.word	0x20000494

080046d8 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80046dc:	f7ff ffc2 	bl	8004664 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80046e0:	2064      	movs	r0, #100	; 0x64
 80046e2:	f7fc fbb7 	bl	8000e54 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80046e6:	20ae      	movs	r0, #174	; 0xae
 80046e8:	f7ff ffc4 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80046ec:	2020      	movs	r0, #32
 80046ee:	f7ff ffc1 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 80046f2:	2010      	movs	r0, #16
 80046f4:	f7ff ffbe 	bl	8004674 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80046f8:	20b0      	movs	r0, #176	; 0xb0
 80046fa:	f7ff ffbb 	bl	8004674 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80046fe:	20c8      	movs	r0, #200	; 0xc8
 8004700:	f7ff ffb8 	bl	8004674 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004704:	2000      	movs	r0, #0
 8004706:	f7ff ffb5 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800470a:	2010      	movs	r0, #16
 800470c:	f7ff ffb2 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004710:	2040      	movs	r0, #64	; 0x40
 8004712:	f7ff ffaf 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8004716:	2081      	movs	r0, #129	; 0x81
 8004718:	f7ff ffac 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 800471c:	20ff      	movs	r0, #255	; 0xff
 800471e:	f7ff ffa9 	bl	8004674 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004722:	20a1      	movs	r0, #161	; 0xa1
 8004724:	f7ff ffa6 	bl	8004674 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004728:	20a6      	movs	r0, #166	; 0xa6
 800472a:	f7ff ffa3 	bl	8004674 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800472e:	20a8      	movs	r0, #168	; 0xa8
 8004730:	f7ff ffa0 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8004734:	203f      	movs	r0, #63	; 0x3f
 8004736:	f7ff ff9d 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800473a:	20a4      	movs	r0, #164	; 0xa4
 800473c:	f7ff ff9a 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004740:	20d3      	movs	r0, #211	; 0xd3
 8004742:	f7ff ff97 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004746:	2000      	movs	r0, #0
 8004748:	f7ff ff94 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800474c:	20d5      	movs	r0, #213	; 0xd5
 800474e:	f7ff ff91 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004752:	20f0      	movs	r0, #240	; 0xf0
 8004754:	f7ff ff8e 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004758:	20d9      	movs	r0, #217	; 0xd9
 800475a:	f7ff ff8b 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800475e:	2022      	movs	r0, #34	; 0x22
 8004760:	f7ff ff88 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004764:	20da      	movs	r0, #218	; 0xda
 8004766:	f7ff ff85 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800476a:	2012      	movs	r0, #18
 800476c:	f7ff ff82 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004770:	20db      	movs	r0, #219	; 0xdb
 8004772:	f7ff ff7f 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004776:	2020      	movs	r0, #32
 8004778:	f7ff ff7c 	bl	8004674 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800477c:	208d      	movs	r0, #141	; 0x8d
 800477e:	f7ff ff79 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004782:	2014      	movs	r0, #20
 8004784:	f7ff ff76 	bl	8004674 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004788:	20af      	movs	r0, #175	; 0xaf
 800478a:	f7ff ff73 	bl	8004674 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800478e:	2000      	movs	r0, #0
 8004790:	f000 f810 	bl	80047b4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004794:	f000 f830 	bl	80047f8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <ssd1306_Init+0xd8>)
 800479a:	2200      	movs	r2, #0
 800479c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <ssd1306_Init+0xd8>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <ssd1306_Init+0xd8>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	715a      	strb	r2, [r3, #5]
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	2000047c 	.word	0x2000047c

080047b4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e00d      	b.n	80047e0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <ssd1306_Fill+0x1a>
 80047ca:	2100      	movs	r1, #0
 80047cc:	e000      	b.n	80047d0 <ssd1306_Fill+0x1c>
 80047ce:	21ff      	movs	r1, #255	; 0xff
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <ssd1306_Fill+0x40>)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	460a      	mov	r2, r1
 80047d8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3301      	adds	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e6:	d3ed      	bcc.n	80047c4 <ssd1306_Fill+0x10>
    }
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	2000007c 	.word	0x2000007c

080047f8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80047fe:	2300      	movs	r3, #0
 8004800:	71fb      	strb	r3, [r7, #7]
 8004802:	e016      	b.n	8004832 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	3b50      	subs	r3, #80	; 0x50
 8004808:	b2db      	uxtb	r3, r3
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff ff32 	bl	8004674 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8004810:	2000      	movs	r0, #0
 8004812:	f7ff ff2f 	bl	8004674 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8004816:	2010      	movs	r0, #16
 8004818:	f7ff ff2c 	bl	8004674 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	01db      	lsls	r3, r3, #7
 8004820:	4a07      	ldr	r2, [pc, #28]	; (8004840 <ssd1306_UpdateScreen+0x48>)
 8004822:	4413      	add	r3, r2
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ff3c 	bl	80046a4 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	3301      	adds	r3, #1
 8004830:	71fb      	strb	r3, [r7, #7]
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	2b07      	cmp	r3, #7
 8004836:	d9e5      	bls.n	8004804 <ssd1306_UpdateScreen+0xc>
    }
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	2000007c 	.word	0x2000007c

08004844 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
 800484e:	460b      	mov	r3, r1
 8004850:	71bb      	strb	r3, [r7, #6]
 8004852:	4613      	mov	r3, r2
 8004854:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485a:	2b00      	cmp	r3, #0
 800485c:	db48      	blt.n	80048f0 <ssd1306_DrawPixel+0xac>
 800485e:	79bb      	ldrb	r3, [r7, #6]
 8004860:	2b3f      	cmp	r3, #63	; 0x3f
 8004862:	d845      	bhi.n	80048f0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <ssd1306_DrawPixel+0xb8>)
 8004866:	791b      	ldrb	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d006      	beq.n	800487a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 800486c:	797b      	ldrb	r3, [r7, #5]
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800487a:	797b      	ldrb	r3, [r7, #5]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11a      	bne.n	80048b6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004880:	79fa      	ldrb	r2, [r7, #7]
 8004882:	79bb      	ldrb	r3, [r7, #6]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	b2d8      	uxtb	r0, r3
 8004888:	4603      	mov	r3, r0
 800488a:	01db      	lsls	r3, r3, #7
 800488c:	4413      	add	r3, r2
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <ssd1306_DrawPixel+0xbc>)
 8004890:	5cd3      	ldrb	r3, [r2, r3]
 8004892:	b25a      	sxtb	r2, r3
 8004894:	79bb      	ldrb	r3, [r7, #6]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	2101      	movs	r1, #1
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b259      	sxtb	r1, r3
 80048a6:	79fa      	ldrb	r2, [r7, #7]
 80048a8:	4603      	mov	r3, r0
 80048aa:	01db      	lsls	r3, r3, #7
 80048ac:	4413      	add	r3, r2
 80048ae:	b2c9      	uxtb	r1, r1
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <ssd1306_DrawPixel+0xbc>)
 80048b2:	54d1      	strb	r1, [r2, r3]
 80048b4:	e01d      	b.n	80048f2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80048b6:	79fa      	ldrb	r2, [r7, #7]
 80048b8:	79bb      	ldrb	r3, [r7, #6]
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	b2d8      	uxtb	r0, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	01db      	lsls	r3, r3, #7
 80048c2:	4413      	add	r3, r2
 80048c4:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <ssd1306_DrawPixel+0xbc>)
 80048c6:	5cd3      	ldrb	r3, [r2, r3]
 80048c8:	b25a      	sxtb	r2, r3
 80048ca:	79bb      	ldrb	r3, [r7, #6]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	4013      	ands	r3, r2
 80048de:	b259      	sxtb	r1, r3
 80048e0:	79fa      	ldrb	r2, [r7, #7]
 80048e2:	4603      	mov	r3, r0
 80048e4:	01db      	lsls	r3, r3, #7
 80048e6:	4413      	add	r3, r2
 80048e8:	b2c9      	uxtb	r1, r1
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <ssd1306_DrawPixel+0xbc>)
 80048ec:	54d1      	strb	r1, [r2, r3]
 80048ee:	e000      	b.n	80048f2 <ssd1306_DrawPixel+0xae>
        return;
 80048f0:	bf00      	nop
    }
}
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	2000047c 	.word	0x2000047c
 8004900:	2000007c 	.word	0x2000007c

08004904 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b089      	sub	sp, #36	; 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	4604      	mov	r4, r0
 800490c:	1d38      	adds	r0, r7, #4
 800490e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004912:	461a      	mov	r2, r3
 8004914:	4623      	mov	r3, r4
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	4613      	mov	r3, r2
 800491a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800491c:	4b38      	ldr	r3, [pc, #224]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	793b      	ldrb	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	2b7f      	cmp	r3, #127	; 0x7f
 8004928:	dc06      	bgt.n	8004938 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800492a:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 800492c:	885b      	ldrh	r3, [r3, #2]
 800492e:	461a      	mov	r2, r3
 8004930:	797b      	ldrb	r3, [r7, #5]
 8004932:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004934:	2b3f      	cmp	r3, #63	; 0x3f
 8004936:	dd01      	ble.n	800493c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8004938:	2300      	movs	r3, #0
 800493a:	e05d      	b.n	80049f8 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	e04c      	b.n	80049dc <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	3b20      	subs	r3, #32
 8004948:	7979      	ldrb	r1, [r7, #5]
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	4619      	mov	r1, r3
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	440b      	add	r3, r1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	e034      	b.n	80049cc <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d012      	beq.n	8004998 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004972:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	4413      	add	r3, r2
 800497e:	b2d8      	uxtb	r0, r3
 8004980:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 8004982:	885b      	ldrh	r3, [r3, #2]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4413      	add	r3, r2
 800498c:	b2db      	uxtb	r3, r3
 800498e:	7bba      	ldrb	r2, [r7, #14]
 8004990:	4619      	mov	r1, r3
 8004992:	f7ff ff57 	bl	8004844 <ssd1306_DrawPixel>
 8004996:	e016      	b.n	80049c6 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	b2d8      	uxtb	r0, r3
 80049a6:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 80049a8:	885b      	ldrh	r3, [r3, #2]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	b2d9      	uxtb	r1, r3
 80049b4:	7bbb      	ldrb	r3, [r7, #14]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	f7ff ff3f 	bl	8004844 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	793b      	ldrb	r3, [r7, #4]
 80049ce:	461a      	mov	r2, r3
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d3c5      	bcc.n	8004962 <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3301      	adds	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	797b      	ldrb	r3, [r7, #5]
 80049de:	461a      	mov	r2, r3
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d3ad      	bcc.n	8004942 <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 80049e8:	881a      	ldrh	r2, [r3, #0]
 80049ea:	793b      	ldrb	r3, [r7, #4]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <ssd1306_WriteChar+0xfc>)
 80049f4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3724      	adds	r7, #36	; 0x24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd90      	pop	{r4, r7, pc}
 8004a00:	2000047c 	.word	0x2000047c

08004a04 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	1d38      	adds	r0, r7, #4
 8004a0e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004a12:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8004a14:	e012      	b.n	8004a3c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	7818      	ldrb	r0, [r3, #0]
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	1d3a      	adds	r2, r7, #4
 8004a1e:	ca06      	ldmia	r2, {r1, r2}
 8004a20:	f7ff ff70 	bl	8004904 <ssd1306_WriteChar>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d002      	beq.n	8004a36 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	e008      	b.n	8004a48 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e8      	bne.n	8004a16 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	781b      	ldrb	r3, [r3, #0]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	460a      	mov	r2, r1
 8004a5a:	71fb      	strb	r3, [r7, #7]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <ssd1306_SetCursor+0x2c>)
 8004a66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004a68:	79bb      	ldrb	r3, [r7, #6]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <ssd1306_SetCursor+0x2c>)
 8004a6e:	805a      	strh	r2, [r3, #2]
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	2000047c 	.word	0x2000047c

08004a80 <__libc_init_array>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	4e0d      	ldr	r6, [pc, #52]	; (8004ab8 <__libc_init_array+0x38>)
 8004a84:	4c0d      	ldr	r4, [pc, #52]	; (8004abc <__libc_init_array+0x3c>)
 8004a86:	1ba4      	subs	r4, r4, r6
 8004a88:	10a4      	asrs	r4, r4, #2
 8004a8a:	2500      	movs	r5, #0
 8004a8c:	42a5      	cmp	r5, r4
 8004a8e:	d109      	bne.n	8004aa4 <__libc_init_array+0x24>
 8004a90:	4e0b      	ldr	r6, [pc, #44]	; (8004ac0 <__libc_init_array+0x40>)
 8004a92:	4c0c      	ldr	r4, [pc, #48]	; (8004ac4 <__libc_init_array+0x44>)
 8004a94:	f000 f820 	bl	8004ad8 <_init>
 8004a98:	1ba4      	subs	r4, r4, r6
 8004a9a:	10a4      	asrs	r4, r4, #2
 8004a9c:	2500      	movs	r5, #0
 8004a9e:	42a5      	cmp	r5, r4
 8004aa0:	d105      	bne.n	8004aae <__libc_init_array+0x2e>
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
 8004aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aa8:	4798      	blx	r3
 8004aaa:	3501      	adds	r5, #1
 8004aac:	e7ee      	b.n	8004a8c <__libc_init_array+0xc>
 8004aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ab2:	4798      	blx	r3
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	e7f2      	b.n	8004a9e <__libc_init_array+0x1e>
 8004ab8:	080073fc 	.word	0x080073fc
 8004abc:	080073fc 	.word	0x080073fc
 8004ac0:	080073fc 	.word	0x080073fc
 8004ac4:	08007400 	.word	0x08007400

08004ac8 <memset>:
 8004ac8:	4402      	add	r2, r0
 8004aca:	4603      	mov	r3, r0
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d100      	bne.n	8004ad2 <memset+0xa>
 8004ad0:	4770      	bx	lr
 8004ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad6:	e7f9      	b.n	8004acc <memset+0x4>

08004ad8 <_init>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr

08004ae4 <_fini>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	bf00      	nop
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr
