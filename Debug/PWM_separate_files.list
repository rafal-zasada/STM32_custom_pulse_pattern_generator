
PWM_separate_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e70  08009250  08009250  00019250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c0  0800c0c0  000204c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0c0  0800c0c0  000204c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0c0  0800c0c0  000204c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c8  20000000  0800c0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200004c8  0800c590  000204c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  0800c590  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017930  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fbb  00000000  00000000  00037e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  0003ade8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff8  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a46  00000000  00000000  0003cf78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011372  00000000  00000000  000659be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1608  00000000  00000000  00076d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  001683b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c8 	.word	0x200004c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009234 	.word	0x08009234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004cc 	.word	0x200004cc
 80001cc:	08009234 	.word	0x08009234

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_f2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	f7ff fc5d 	bl	8000548 <__aeabi_f2d>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <__aeabi_f2ulz+0x40>)
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	f7ff ff85 	bl	8000ba8 <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc30 	bl	8000504 <__aeabi_ui2d>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <__aeabi_f2ulz+0x44>)
 8000ca8:	f7ff fca6 	bl	80005f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fae8 	bl	8000288 <__aeabi_dsub>
 8000cb8:	f7ff ff76 	bl	8000ba8 <__aeabi_d2uiz>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	4310      	orrs	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	3df00000 	.word	0x3df00000
 8000ccc:	41f00000 	.word	0x41f00000

08000cd0 <OLED_WriteCaseNumber>:
//	}
//}

// writes number to buffer only
static void OLED_WriteCaseNumber(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
	char StringBuffer[10] = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	811a      	strh	r2, [r3, #8]

	snprintf(StringBuffer, 10, "%2d", CurrentCase + 1);
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <OLED_WriteCaseNumber+0x3c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	1d38      	adds	r0, r7, #4
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <OLED_WriteCaseNumber+0x40>)
 8000cea:	210a      	movs	r1, #10
 8000cec:	f006 fe7a 	bl	80079e4 <sniprintf>
	ssd1306_SetCursor(110, 52);
 8000cf0:	2134      	movs	r1, #52	; 0x34
 8000cf2:	206e      	movs	r0, #110	; 0x6e
 8000cf4:	f006 f9b6 	bl	8007064 <ssd1306_SetCursor>
	ssd1306_WriteString(StringBuffer, Font_7x10, White);
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <OLED_WriteCaseNumber+0x44>)
 8000cfa:	1d38      	adds	r0, r7, #4
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	ca06      	ldmia	r2, {r1, r2}
 8000d00:	f006 f98a 	bl	8007018 <ssd1306_WriteString>

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000928 	.word	0x20000928
 8000d10:	08009250 	.word	0x08009250
 8000d14:	200002e0 	.word	0x200002e0

08000d18 <OLED_Update_Display_Case>:

void OLED_Update_Display_Case(OLEDStates_type State)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	switch(State)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b14      	cmp	r3, #20
 8000d26:	f200 8497 	bhi.w	8001658 <OLED_Update_Display_Case+0x940>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <OLED_Update_Display_Case+0x18>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d85 	.word	0x08000d85
 8000d34:	08000de7 	.word	0x08000de7
 8000d38:	08000e49 	.word	0x08000e49
 8000d3c:	08000ea9 	.word	0x08000ea9
 8000d40:	08000f09 	.word	0x08000f09
 8000d44:	08000f69 	.word	0x08000f69
 8000d48:	08000fc9 	.word	0x08000fc9
 8000d4c:	08001029 	.word	0x08001029
 8000d50:	080010f1 	.word	0x080010f1
 8000d54:	08001151 	.word	0x08001151
 8000d58:	080011b1 	.word	0x080011b1
 8000d5c:	08001211 	.word	0x08001211
 8000d60:	08001271 	.word	0x08001271
 8000d64:	080012d1 	.word	0x080012d1
 8000d68:	08001331 	.word	0x08001331
 8000d6c:	08001391 	.word	0x08001391
 8000d70:	08001465 	.word	0x08001465
 8000d74:	080014c5 	.word	0x080014c5
 8000d78:	08001525 	.word	0x08001525
 8000d7c:	08001585 	.word	0x08001585
 8000d80:	080015f9 	.word	0x080015f9
	{
	case Leonardo_TC1:
		ssd1306_Fill(Black);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f006 f81f 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f006 f969 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("TC 1", Font_16x26, White);
 8000d92:	4abd      	ldr	r2, [pc, #756]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000d94:	2301      	movs	r3, #1
 8000d96:	ca06      	ldmia	r2, {r1, r2}
 8000d98:	48bc      	ldr	r0, [pc, #752]	; (800108c <OLED_Update_Display_Case+0x374>)
 8000d9a:	f006 f93d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000d9e:	211d      	movs	r1, #29
 8000da0:	2000      	movs	r0, #0
 8000da2:	f006 f95f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 10 kHz", Font_7x10, White);
 8000da6:	4aba      	ldr	r2, [pc, #744]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000da8:	2301      	movs	r3, #1
 8000daa:	ca06      	ldmia	r2, {r1, r2}
 8000dac:	48b9      	ldr	r0, [pc, #740]	; (8001094 <OLED_Update_Display_Case+0x37c>)
 8000dae:	f006 f933 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000db2:	2129      	movs	r1, #41	; 0x29
 8000db4:	2000      	movs	r0, #0
 8000db6:	f006 f955 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 10 us", Font_7x10, White);
 8000dba:	4ab5      	ldr	r2, [pc, #724]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	ca06      	ldmia	r2, {r1, r2}
 8000dc0:	48b5      	ldr	r0, [pc, #724]	; (8001098 <OLED_Update_Display_Case+0x380>)
 8000dc2:	f006 f929 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000dc6:	2135      	movs	r1, #53	; 0x35
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f006 f94b 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("Duty= 10 %", Font_7x10, White);
 8000dce:	4ab0      	ldr	r2, [pc, #704]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	ca06      	ldmia	r2, {r1, r2}
 8000dd4:	48b1      	ldr	r0, [pc, #708]	; (800109c <OLED_Update_Display_Case+0x384>)
 8000dd6:	f006 f91f 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000dda:	f7ff ff79 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000dde:	f006 f815 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8000de2:	f000 bc3a 	b.w	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_TC2:
		ssd1306_Fill(Black);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f005 ffee 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2000      	movs	r0, #0
 8000df0:	f006 f938 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("TC 2", Font_16x26, White);
 8000df4:	4aa4      	ldr	r2, [pc, #656]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000df6:	2301      	movs	r3, #1
 8000df8:	ca06      	ldmia	r2, {r1, r2}
 8000dfa:	48a9      	ldr	r0, [pc, #676]	; (80010a0 <OLED_Update_Display_Case+0x388>)
 8000dfc:	f006 f90c 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000e00:	211d      	movs	r1, #29
 8000e02:	2000      	movs	r0, #0
 8000e04:	f006 f92e 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 12 kHz", Font_7x10, White);
 8000e08:	4aa1      	ldr	r2, [pc, #644]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	ca06      	ldmia	r2, {r1, r2}
 8000e0e:	48a5      	ldr	r0, [pc, #660]	; (80010a4 <OLED_Update_Display_Case+0x38c>)
 8000e10:	f006 f902 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000e14:	2129      	movs	r1, #41	; 0x29
 8000e16:	2000      	movs	r0, #0
 8000e18:	f006 f924 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 10 us", Font_7x10, White);
 8000e1c:	4a9c      	ldr	r2, [pc, #624]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e1e:	2301      	movs	r3, #1
 8000e20:	ca06      	ldmia	r2, {r1, r2}
 8000e22:	489d      	ldr	r0, [pc, #628]	; (8001098 <OLED_Update_Display_Case+0x380>)
 8000e24:	f006 f8f8 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000e28:	2135      	movs	r1, #53	; 0x35
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f006 f91a 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("Duty= 12 %", Font_7x10, White);
 8000e30:	4a97      	ldr	r2, [pc, #604]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e32:	2301      	movs	r3, #1
 8000e34:	ca06      	ldmia	r2, {r1, r2}
 8000e36:	489c      	ldr	r0, [pc, #624]	; (80010a8 <OLED_Update_Display_Case+0x390>)
 8000e38:	f006 f8ee 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000e3c:	f7ff ff48 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000e40:	f005 ffe4 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8000e44:	f000 bc09 	b.w	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case1:
		ssd1306_Fill(Black);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f005 ffbd 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f006 f907 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 1", Font_16x26, White);
 8000e56:	4a8c      	ldr	r2, [pc, #560]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000e58:	2301      	movs	r3, #1
 8000e5a:	ca06      	ldmia	r2, {r1, r2}
 8000e5c:	4893      	ldr	r0, [pc, #588]	; (80010ac <OLED_Update_Display_Case+0x394>)
 8000e5e:	f006 f8db 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000e62:	211d      	movs	r1, #29
 8000e64:	2000      	movs	r0, #0
 8000e66:	f006 f8fd 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 0.850 kHz", Font_7x10, White);
 8000e6a:	4a89      	ldr	r2, [pc, #548]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	ca06      	ldmia	r2, {r1, r2}
 8000e70:	488f      	ldr	r0, [pc, #572]	; (80010b0 <OLED_Update_Display_Case+0x398>)
 8000e72:	f006 f8d1 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000e76:	2129      	movs	r1, #41	; 0x29
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f006 f8f3 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.925 kHz", Font_7x10, White);
 8000e7e:	4a84      	ldr	r2, [pc, #528]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e80:	2301      	movs	r3, #1
 8000e82:	ca06      	ldmia	r2, {r1, r2}
 8000e84:	488b      	ldr	r0, [pc, #556]	; (80010b4 <OLED_Update_Display_Case+0x39c>)
 8000e86:	f006 f8c7 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000e8a:	2135      	movs	r1, #53	; 0x35
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f006 f8e9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000e92:	4a7f      	ldr	r2, [pc, #508]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e94:	2301      	movs	r3, #1
 8000e96:	ca06      	ldmia	r2, {r1, r2}
 8000e98:	4887      	ldr	r0, [pc, #540]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000e9a:	f006 f8bd 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000e9e:	f7ff ff17 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000ea2:	f005 ffb3 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8000ea6:	e3d8      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case2:
		ssd1306_Fill(Black);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f005 ff8d 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f006 f8d7 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 2", Font_16x26, White);
 8000eb6:	4a74      	ldr	r2, [pc, #464]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000eb8:	2301      	movs	r3, #1
 8000eba:	ca06      	ldmia	r2, {r1, r2}
 8000ebc:	487f      	ldr	r0, [pc, #508]	; (80010bc <OLED_Update_Display_Case+0x3a4>)
 8000ebe:	f006 f8ab 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000ec2:	211d      	movs	r1, #29
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f006 f8cd 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 1.350 kHz", Font_7x10, White);
 8000eca:	4a71      	ldr	r2, [pc, #452]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000ecc:	2301      	movs	r3, #1
 8000ece:	ca06      	ldmia	r2, {r1, r2}
 8000ed0:	487b      	ldr	r0, [pc, #492]	; (80010c0 <OLED_Update_Display_Case+0x3a8>)
 8000ed2:	f006 f8a1 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000ed6:	2129      	movs	r1, #41	; 0x29
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f006 f8c3 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.800 kHz", Font_7x10, White);
 8000ede:	4a6c      	ldr	r2, [pc, #432]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	ca06      	ldmia	r2, {r1, r2}
 8000ee4:	4877      	ldr	r0, [pc, #476]	; (80010c4 <OLED_Update_Display_Case+0x3ac>)
 8000ee6:	f006 f897 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000eea:	2135      	movs	r1, #53	; 0x35
 8000eec:	2000      	movs	r0, #0
 8000eee:	f006 f8b9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000ef2:	4a67      	ldr	r2, [pc, #412]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	ca06      	ldmia	r2, {r1, r2}
 8000ef8:	486f      	ldr	r0, [pc, #444]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000efa:	f006 f88d 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000efe:	f7ff fee7 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000f02:	f005 ff83 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8000f06:	e3a8      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case3:
		ssd1306_Fill(Black);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f005 ff5d 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	f006 f8a7 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 3", Font_16x26, White);
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000f18:	2301      	movs	r3, #1
 8000f1a:	ca06      	ldmia	r2, {r1, r2}
 8000f1c:	486a      	ldr	r0, [pc, #424]	; (80010c8 <OLED_Update_Display_Case+0x3b0>)
 8000f1e:	f006 f87b 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000f22:	211d      	movs	r1, #29
 8000f24:	2000      	movs	r0, #0
 8000f26:	f006 f89d 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 2.215 kHz", Font_7x10, White);
 8000f2a:	4a59      	ldr	r2, [pc, #356]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	ca06      	ldmia	r2, {r1, r2}
 8000f30:	4866      	ldr	r0, [pc, #408]	; (80010cc <OLED_Update_Display_Case+0x3b4>)
 8000f32:	f006 f871 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000f36:	2129      	movs	r1, #41	; 0x29
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f006 f893 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.350 kHz", Font_7x10, White);
 8000f3e:	4a54      	ldr	r2, [pc, #336]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f40:	2301      	movs	r3, #1
 8000f42:	ca06      	ldmia	r2, {r1, r2}
 8000f44:	4862      	ldr	r0, [pc, #392]	; (80010d0 <OLED_Update_Display_Case+0x3b8>)
 8000f46:	f006 f867 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000f4a:	2135      	movs	r1, #53	; 0x35
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f006 f889 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000f52:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f54:	2301      	movs	r3, #1
 8000f56:	ca06      	ldmia	r2, {r1, r2}
 8000f58:	4857      	ldr	r0, [pc, #348]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000f5a:	f006 f85d 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000f5e:	f7ff feb7 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000f62:	f005 ff53 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8000f66:	e378      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case4:
		ssd1306_Fill(Black);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f005 ff2d 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2000      	movs	r0, #0
 8000f72:	f006 f877 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 4", Font_16x26, White);
 8000f76:	4a44      	ldr	r2, [pc, #272]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000f78:	2301      	movs	r3, #1
 8000f7a:	ca06      	ldmia	r2, {r1, r2}
 8000f7c:	4855      	ldr	r0, [pc, #340]	; (80010d4 <OLED_Update_Display_Case+0x3bc>)
 8000f7e:	f006 f84b 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000f82:	211d      	movs	r1, #29
 8000f84:	2000      	movs	r0, #0
 8000f86:	f006 f86d 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 0.725 kHz", Font_7x10, White);
 8000f8a:	4a41      	ldr	r2, [pc, #260]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	ca06      	ldmia	r2, {r1, r2}
 8000f90:	4851      	ldr	r0, [pc, #324]	; (80010d8 <OLED_Update_Display_Case+0x3c0>)
 8000f92:	f006 f841 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000f96:	2129      	movs	r1, #41	; 0x29
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f006 f863 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.800 kHz", Font_7x10, White);
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	ca06      	ldmia	r2, {r1, r2}
 8000fa4:	4847      	ldr	r0, [pc, #284]	; (80010c4 <OLED_Update_Display_Case+0x3ac>)
 8000fa6:	f006 f837 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000faa:	2135      	movs	r1, #53	; 0x35
 8000fac:	2000      	movs	r0, #0
 8000fae:	f006 f859 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000fb2:	4a37      	ldr	r2, [pc, #220]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	ca06      	ldmia	r2, {r1, r2}
 8000fb8:	483f      	ldr	r0, [pc, #252]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000fba:	f006 f82d 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000fbe:	f7ff fe87 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000fc2:	f005 ff23 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8000fc6:	e348      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case5:
		ssd1306_Fill(Black);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f005 fefd 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f006 f847 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 5", Font_16x26, White);
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000fd8:	2301      	movs	r3, #1
 8000fda:	ca06      	ldmia	r2, {r1, r2}
 8000fdc:	483f      	ldr	r0, [pc, #252]	; (80010dc <OLED_Update_Display_Case+0x3c4>)
 8000fde:	f006 f81b 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000fe2:	211d      	movs	r1, #29
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f006 f83d 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 2.250 kHz", Font_7x10, White);
 8000fea:	4a29      	ldr	r2, [pc, #164]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000fec:	2301      	movs	r3, #1
 8000fee:	ca06      	ldmia	r2, {r1, r2}
 8000ff0:	483b      	ldr	r0, [pc, #236]	; (80010e0 <OLED_Update_Display_Case+0x3c8>)
 8000ff2:	f006 f811 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000ff6:	2129      	movs	r1, #41	; 0x29
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f006 f833 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.350 kHz", Font_7x10, White);
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001000:	2301      	movs	r3, #1
 8001002:	ca06      	ldmia	r2, {r1, r2}
 8001004:	4832      	ldr	r0, [pc, #200]	; (80010d0 <OLED_Update_Display_Case+0x3b8>)
 8001006:	f006 f807 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 800100a:	2135      	movs	r1, #53	; 0x35
 800100c:	2000      	movs	r0, #0
 800100e:	f006 f829 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8001012:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001014:	2301      	movs	r3, #1
 8001016:	ca06      	ldmia	r2, {r1, r2}
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 800101a:	f005 fffd 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800101e:	f7ff fe57 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8001022:	f005 fef3 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8001026:	e318      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case6:
		ssd1306_Fill(Black);
 8001028:	2000      	movs	r0, #0
 800102a:	f005 fecd 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800102e:	2100      	movs	r1, #0
 8001030:	2000      	movs	r0, #0
 8001032:	f006 f817 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 6", Font_16x26, White);
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8001038:	2301      	movs	r3, #1
 800103a:	ca06      	ldmia	r2, {r1, r2}
 800103c:	4829      	ldr	r0, [pc, #164]	; (80010e4 <OLED_Update_Display_Case+0x3cc>)
 800103e:	f005 ffeb 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8001042:	211d      	movs	r1, #29
 8001044:	2000      	movs	r0, #0
 8001046:	f006 f80d 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 1.420 kHz", Font_7x10, White);
 800104a:	4a11      	ldr	r2, [pc, #68]	; (8001090 <OLED_Update_Display_Case+0x378>)
 800104c:	2301      	movs	r3, #1
 800104e:	ca06      	ldmia	r2, {r1, r2}
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <OLED_Update_Display_Case+0x3d0>)
 8001052:	f005 ffe1 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001056:	2129      	movs	r1, #41	; 0x29
 8001058:	2000      	movs	r0, #0
 800105a:	f006 f803 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 3.930 kHz", Font_7x10, White);
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001060:	2301      	movs	r3, #1
 8001062:	ca06      	ldmia	r2, {r1, r2}
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <OLED_Update_Display_Case+0x3d4>)
 8001066:	f005 ffd7 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 800106a:	2135      	movs	r1, #53	; 0x35
 800106c:	2000      	movs	r0, #0
 800106e:	f005 fff9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001074:	2301      	movs	r3, #1
 8001076:	ca06      	ldmia	r2, {r1, r2}
 8001078:	480f      	ldr	r0, [pc, #60]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 800107a:	f005 ffcd 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800107e:	f7ff fe27 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8001082:	f005 fec3 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8001086:	e2e8      	b.n	800165a <OLED_Update_Display_Case+0x942>
 8001088:	200002f0 	.word	0x200002f0
 800108c:	08009254 	.word	0x08009254
 8001090:	200002e0 	.word	0x200002e0
 8001094:	0800925c 	.word	0x0800925c
 8001098:	08009268 	.word	0x08009268
 800109c:	08009274 	.word	0x08009274
 80010a0:	08009280 	.word	0x08009280
 80010a4:	08009288 	.word	0x08009288
 80010a8:	08009294 	.word	0x08009294
 80010ac:	080092a0 	.word	0x080092a0
 80010b0:	080092a8 	.word	0x080092a8
 80010b4:	080092b8 	.word	0x080092b8
 80010b8:	080092c8 	.word	0x080092c8
 80010bc:	080092d4 	.word	0x080092d4
 80010c0:	080092dc 	.word	0x080092dc
 80010c4:	080092ec 	.word	0x080092ec
 80010c8:	080092fc 	.word	0x080092fc
 80010cc:	08009304 	.word	0x08009304
 80010d0:	08009314 	.word	0x08009314
 80010d4:	08009324 	.word	0x08009324
 80010d8:	0800932c 	.word	0x0800932c
 80010dc:	0800933c 	.word	0x0800933c
 80010e0:	08009344 	.word	0x08009344
 80010e4:	08009354 	.word	0x08009354
 80010e8:	0800935c 	.word	0x0800935c
 80010ec:	0800936c 	.word	0x0800936c

	case Leonardo_Case7:
		ssd1306_Fill(Black);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f005 fe69 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f005 ffb3 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 7", Font_16x26, White);
 80010fe:	4abc      	ldr	r2, [pc, #752]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001100:	2301      	movs	r3, #1
 8001102:	ca06      	ldmia	r2, {r1, r2}
 8001104:	48bb      	ldr	r0, [pc, #748]	; (80013f4 <OLED_Update_Display_Case+0x6dc>)
 8001106:	f005 ff87 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800110a:	211d      	movs	r1, #29
 800110c:	2000      	movs	r0, #0
 800110e:	f005 ffa9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 0.850 kHz", Font_7x10, White);
 8001112:	4ab9      	ldr	r2, [pc, #740]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001114:	2301      	movs	r3, #1
 8001116:	ca06      	ldmia	r2, {r1, r2}
 8001118:	48b8      	ldr	r0, [pc, #736]	; (80013fc <OLED_Update_Display_Case+0x6e4>)
 800111a:	f005 ff7d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800111e:	2129      	movs	r1, #41	; 0x29
 8001120:	2000      	movs	r0, #0
 8001122:	f005 ff9f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 6.000 kHz", Font_7x10, White);
 8001126:	4ab4      	ldr	r2, [pc, #720]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001128:	2301      	movs	r3, #1
 800112a:	ca06      	ldmia	r2, {r1, r2}
 800112c:	48b4      	ldr	r0, [pc, #720]	; (8001400 <OLED_Update_Display_Case+0x6e8>)
 800112e:	f005 ff73 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001132:	2135      	movs	r1, #53	; 0x35
 8001134:	2000      	movs	r0, #0
 8001136:	f005 ff95 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 800113a:	4aaf      	ldr	r2, [pc, #700]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800113c:	2301      	movs	r3, #1
 800113e:	ca06      	ldmia	r2, {r1, r2}
 8001140:	48b0      	ldr	r0, [pc, #704]	; (8001404 <OLED_Update_Display_Case+0x6ec>)
 8001142:	f005 ff69 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001146:	f7ff fdc3 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800114a:	f005 fe5f 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 800114e:	e284      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF1:
		ssd1306_Fill(Black);
 8001150:	2000      	movs	r0, #0
 8001152:	f005 fe39 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f005 ff83 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 1", Font_16x26, White);
 800115e:	4aa4      	ldr	r2, [pc, #656]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001160:	2301      	movs	r3, #1
 8001162:	ca06      	ldmia	r2, {r1, r2}
 8001164:	48a8      	ldr	r0, [pc, #672]	; (8001408 <OLED_Update_Display_Case+0x6f0>)
 8001166:	f005 ff57 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800116a:	211d      	movs	r1, #29
 800116c:	2000      	movs	r0, #0
 800116e:	f005 ff79 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 2 kHz", Font_7x10, White);
 8001172:	4aa1      	ldr	r2, [pc, #644]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001174:	2301      	movs	r3, #1
 8001176:	ca06      	ldmia	r2, {r1, r2}
 8001178:	48a4      	ldr	r0, [pc, #656]	; (800140c <OLED_Update_Display_Case+0x6f4>)
 800117a:	f005 ff4d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800117e:	2129      	movs	r1, #41	; 0x29
 8001180:	2000      	movs	r0, #0
 8001182:	f005 ff6f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 50 us", Font_7x10, White);
 8001186:	4a9c      	ldr	r2, [pc, #624]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001188:	2301      	movs	r3, #1
 800118a:	ca06      	ldmia	r2, {r1, r2}
 800118c:	48a0      	ldr	r0, [pc, #640]	; (8001410 <OLED_Update_Display_Case+0x6f8>)
 800118e:	f005 ff43 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001192:	2135      	movs	r1, #53	; 0x35
 8001194:	2000      	movs	r0, #0
 8001196:	f005 ff65 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 10 %", Font_7x10, White);
 800119a:	4a97      	ldr	r2, [pc, #604]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800119c:	2301      	movs	r3, #1
 800119e:	ca06      	ldmia	r2, {r1, r2}
 80011a0:	489c      	ldr	r0, [pc, #624]	; (8001414 <OLED_Update_Display_Case+0x6fc>)
 80011a2:	f005 ff39 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80011a6:	f7ff fd93 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80011aa:	f005 fe2f 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 80011ae:	e254      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF2:
		ssd1306_Fill(Black);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f005 fe09 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f005 ff53 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 2", Font_16x26, White);
 80011be:	4a8c      	ldr	r2, [pc, #560]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 80011c0:	2301      	movs	r3, #1
 80011c2:	ca06      	ldmia	r2, {r1, r2}
 80011c4:	4894      	ldr	r0, [pc, #592]	; (8001418 <OLED_Update_Display_Case+0x700>)
 80011c6:	f005 ff27 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80011ca:	211d      	movs	r1, #29
 80011cc:	2000      	movs	r0, #0
 80011ce:	f005 ff49 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 10 kHz", Font_7x10, White);
 80011d2:	4a89      	ldr	r2, [pc, #548]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80011d4:	2301      	movs	r3, #1
 80011d6:	ca06      	ldmia	r2, {r1, r2}
 80011d8:	4890      	ldr	r0, [pc, #576]	; (800141c <OLED_Update_Display_Case+0x704>)
 80011da:	f005 ff1d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80011de:	2129      	movs	r1, #41	; 0x29
 80011e0:	2000      	movs	r0, #0
 80011e2:	f005 ff3f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 12 us", Font_7x10, White);
 80011e6:	4a84      	ldr	r2, [pc, #528]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80011e8:	2301      	movs	r3, #1
 80011ea:	ca06      	ldmia	r2, {r1, r2}
 80011ec:	488c      	ldr	r0, [pc, #560]	; (8001420 <OLED_Update_Display_Case+0x708>)
 80011ee:	f005 ff13 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80011f2:	2135      	movs	r1, #53	; 0x35
 80011f4:	2000      	movs	r0, #0
 80011f6:	f005 ff35 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80011fa:	4a7f      	ldr	r2, [pc, #508]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80011fc:	2301      	movs	r3, #1
 80011fe:	ca06      	ldmia	r2, {r1, r2}
 8001200:	4888      	ldr	r0, [pc, #544]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001202:	f005 ff09 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001206:	f7ff fd63 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800120a:	f005 fdff 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 800120e:	e224      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF3:
		ssd1306_Fill(Black);
 8001210:	2000      	movs	r0, #0
 8001212:	f005 fdd9 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001216:	2100      	movs	r1, #0
 8001218:	2000      	movs	r0, #0
 800121a:	f005 ff23 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 3", Font_16x26, White);
 800121e:	4a74      	ldr	r2, [pc, #464]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001220:	2301      	movs	r3, #1
 8001222:	ca06      	ldmia	r2, {r1, r2}
 8001224:	4880      	ldr	r0, [pc, #512]	; (8001428 <OLED_Update_Display_Case+0x710>)
 8001226:	f005 fef7 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800122a:	211d      	movs	r1, #29
 800122c:	2000      	movs	r0, #0
 800122e:	f005 ff19 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 20 kHz", Font_7x10, White);
 8001232:	4a71      	ldr	r2, [pc, #452]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001234:	2301      	movs	r3, #1
 8001236:	ca06      	ldmia	r2, {r1, r2}
 8001238:	487c      	ldr	r0, [pc, #496]	; (800142c <OLED_Update_Display_Case+0x714>)
 800123a:	f005 feed 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800123e:	2129      	movs	r1, #41	; 0x29
 8001240:	2000      	movs	r0, #0
 8001242:	f005 ff0f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 6 us", Font_7x10, White);
 8001246:	4a6c      	ldr	r2, [pc, #432]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001248:	2301      	movs	r3, #1
 800124a:	ca06      	ldmia	r2, {r1, r2}
 800124c:	4878      	ldr	r0, [pc, #480]	; (8001430 <OLED_Update_Display_Case+0x718>)
 800124e:	f005 fee3 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001252:	2135      	movs	r1, #53	; 0x35
 8001254:	2000      	movs	r0, #0
 8001256:	f005 ff05 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 800125a:	4a67      	ldr	r2, [pc, #412]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800125c:	2301      	movs	r3, #1
 800125e:	ca06      	ldmia	r2, {r1, r2}
 8001260:	4870      	ldr	r0, [pc, #448]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001262:	f005 fed9 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001266:	f7ff fd33 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800126a:	f005 fdcf 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 800126e:	e1f4      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF4:
		ssd1306_Fill(Black);
 8001270:	2000      	movs	r0, #0
 8001272:	f005 fda9 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001276:	2100      	movs	r1, #0
 8001278:	2000      	movs	r0, #0
 800127a:	f005 fef3 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 4", Font_16x26, White);
 800127e:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001280:	2301      	movs	r3, #1
 8001282:	ca06      	ldmia	r2, {r1, r2}
 8001284:	486b      	ldr	r0, [pc, #428]	; (8001434 <OLED_Update_Display_Case+0x71c>)
 8001286:	f005 fec7 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800128a:	211d      	movs	r1, #29
 800128c:	2000      	movs	r0, #0
 800128e:	f005 fee9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 30 kHz", Font_7x10, White);
 8001292:	4a59      	ldr	r2, [pc, #356]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001294:	2301      	movs	r3, #1
 8001296:	ca06      	ldmia	r2, {r1, r2}
 8001298:	4867      	ldr	r0, [pc, #412]	; (8001438 <OLED_Update_Display_Case+0x720>)
 800129a:	f005 febd 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800129e:	2129      	movs	r1, #41	; 0x29
 80012a0:	2000      	movs	r0, #0
 80012a2:	f005 fedf 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 4 us", Font_7x10, White);
 80012a6:	4a54      	ldr	r2, [pc, #336]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80012a8:	2301      	movs	r3, #1
 80012aa:	ca06      	ldmia	r2, {r1, r2}
 80012ac:	4863      	ldr	r0, [pc, #396]	; (800143c <OLED_Update_Display_Case+0x724>)
 80012ae:	f005 feb3 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80012b2:	2135      	movs	r1, #53	; 0x35
 80012b4:	2000      	movs	r0, #0
 80012b6:	f005 fed5 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80012ba:	4a4f      	ldr	r2, [pc, #316]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80012bc:	2301      	movs	r3, #1
 80012be:	ca06      	ldmia	r2, {r1, r2}
 80012c0:	4858      	ldr	r0, [pc, #352]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 80012c2:	f005 fea9 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80012c6:	f7ff fd03 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80012ca:	f005 fd9f 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 80012ce:	e1c4      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF5:
		ssd1306_Fill(Black);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f005 fd79 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80012d6:	2100      	movs	r1, #0
 80012d8:	2000      	movs	r0, #0
 80012da:	f005 fec3 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 5", Font_16x26, White);
 80012de:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 80012e0:	2301      	movs	r3, #1
 80012e2:	ca06      	ldmia	r2, {r1, r2}
 80012e4:	4856      	ldr	r0, [pc, #344]	; (8001440 <OLED_Update_Display_Case+0x728>)
 80012e6:	f005 fe97 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80012ea:	211d      	movs	r1, #29
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 feb9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 40 kHz", Font_7x10, White);
 80012f2:	4a41      	ldr	r2, [pc, #260]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80012f4:	2301      	movs	r3, #1
 80012f6:	ca06      	ldmia	r2, {r1, r2}
 80012f8:	4852      	ldr	r0, [pc, #328]	; (8001444 <OLED_Update_Display_Case+0x72c>)
 80012fa:	f005 fe8d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80012fe:	2129      	movs	r1, #41	; 0x29
 8001300:	2000      	movs	r0, #0
 8001302:	f005 feaf 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 3 us", Font_7x10, White);
 8001306:	4a3c      	ldr	r2, [pc, #240]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001308:	2301      	movs	r3, #1
 800130a:	ca06      	ldmia	r2, {r1, r2}
 800130c:	484e      	ldr	r0, [pc, #312]	; (8001448 <OLED_Update_Display_Case+0x730>)
 800130e:	f005 fe83 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001312:	2135      	movs	r1, #53	; 0x35
 8001314:	2000      	movs	r0, #0
 8001316:	f005 fea5 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 800131a:	4a37      	ldr	r2, [pc, #220]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800131c:	2301      	movs	r3, #1
 800131e:	ca06      	ldmia	r2, {r1, r2}
 8001320:	4840      	ldr	r0, [pc, #256]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001322:	f005 fe79 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001326:	f7ff fcd3 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800132a:	f005 fd6f 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 800132e:	e194      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF6:
		ssd1306_Fill(Black);
 8001330:	2000      	movs	r0, #0
 8001332:	f005 fd49 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f005 fe93 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 6", Font_16x26, White);
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001340:	2301      	movs	r3, #1
 8001342:	ca06      	ldmia	r2, {r1, r2}
 8001344:	4841      	ldr	r0, [pc, #260]	; (800144c <OLED_Update_Display_Case+0x734>)
 8001346:	f005 fe67 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800134a:	211d      	movs	r1, #29
 800134c:	2000      	movs	r0, #0
 800134e:	f005 fe89 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 50 kHz", Font_7x10, White);
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001354:	2301      	movs	r3, #1
 8001356:	ca06      	ldmia	r2, {r1, r2}
 8001358:	483d      	ldr	r0, [pc, #244]	; (8001450 <OLED_Update_Display_Case+0x738>)
 800135a:	f005 fe5d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800135e:	2129      	movs	r1, #41	; 0x29
 8001360:	2000      	movs	r0, #0
 8001362:	f005 fe7f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 2.4 us", Font_7x10, White);
 8001366:	4a24      	ldr	r2, [pc, #144]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001368:	2301      	movs	r3, #1
 800136a:	ca06      	ldmia	r2, {r1, r2}
 800136c:	4839      	ldr	r0, [pc, #228]	; (8001454 <OLED_Update_Display_Case+0x73c>)
 800136e:	f005 fe53 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001372:	2135      	movs	r1, #53	; 0x35
 8001374:	2000      	movs	r0, #0
 8001376:	f005 fe75 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 800137a:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800137c:	2301      	movs	r3, #1
 800137e:	ca06      	ldmia	r2, {r1, r2}
 8001380:	4828      	ldr	r0, [pc, #160]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001382:	f005 fe49 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001386:	f7ff fca3 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800138a:	f005 fd3f 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 800138e:	e164      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF7:
		ssd1306_Fill(Black);
 8001390:	2000      	movs	r0, #0
 8001392:	f005 fd19 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001396:	2100      	movs	r1, #0
 8001398:	2000      	movs	r0, #0
 800139a:	f005 fe63 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 7", Font_16x26, White);
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 80013a0:	2301      	movs	r3, #1
 80013a2:	ca06      	ldmia	r2, {r1, r2}
 80013a4:	482c      	ldr	r0, [pc, #176]	; (8001458 <OLED_Update_Display_Case+0x740>)
 80013a6:	f005 fe37 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80013aa:	211d      	movs	r1, #29
 80013ac:	2000      	movs	r0, #0
 80013ae:	f005 fe59 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 60 kHz", Font_7x10, White);
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80013b4:	2301      	movs	r3, #1
 80013b6:	ca06      	ldmia	r2, {r1, r2}
 80013b8:	4828      	ldr	r0, [pc, #160]	; (800145c <OLED_Update_Display_Case+0x744>)
 80013ba:	f005 fe2d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80013be:	2129      	movs	r1, #41	; 0x29
 80013c0:	2000      	movs	r0, #0
 80013c2:	f005 fe4f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 2 us", Font_7x10, White);
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80013c8:	2301      	movs	r3, #1
 80013ca:	ca06      	ldmia	r2, {r1, r2}
 80013cc:	4824      	ldr	r0, [pc, #144]	; (8001460 <OLED_Update_Display_Case+0x748>)
 80013ce:	f005 fe23 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80013d2:	2135      	movs	r1, #53	; 0x35
 80013d4:	2000      	movs	r0, #0
 80013d6:	f005 fe45 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80013dc:	2301      	movs	r3, #1
 80013de:	ca06      	ldmia	r2, {r1, r2}
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 80013e2:	f005 fe19 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80013e6:	f7ff fc73 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80013ea:	f005 fd0f 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 80013ee:	e134      	b.n	800165a <OLED_Update_Display_Case+0x942>
 80013f0:	200002f0 	.word	0x200002f0
 80013f4:	0800937c 	.word	0x0800937c
 80013f8:	200002e0 	.word	0x200002e0
 80013fc:	080092a8 	.word	0x080092a8
 8001400:	08009384 	.word	0x08009384
 8001404:	080092c8 	.word	0x080092c8
 8001408:	08009394 	.word	0x08009394
 800140c:	0800939c 	.word	0x0800939c
 8001410:	080093a8 	.word	0x080093a8
 8001414:	080093b4 	.word	0x080093b4
 8001418:	080093c0 	.word	0x080093c0
 800141c:	0800925c 	.word	0x0800925c
 8001420:	080093c8 	.word	0x080093c8
 8001424:	080093d4 	.word	0x080093d4
 8001428:	080093e0 	.word	0x080093e0
 800142c:	080093e8 	.word	0x080093e8
 8001430:	080093f4 	.word	0x080093f4
 8001434:	08009400 	.word	0x08009400
 8001438:	08009408 	.word	0x08009408
 800143c:	08009414 	.word	0x08009414
 8001440:	08009420 	.word	0x08009420
 8001444:	08009428 	.word	0x08009428
 8001448:	08009434 	.word	0x08009434
 800144c:	08009440 	.word	0x08009440
 8001450:	08009448 	.word	0x08009448
 8001454:	08009454 	.word	0x08009454
 8001458:	08009460 	.word	0x08009460
 800145c:	08009468 	.word	0x08009468
 8001460:	08009474 	.word	0x08009474

	case Leonardo_PRF8:
		ssd1306_Fill(Black);
 8001464:	2000      	movs	r0, #0
 8001466:	f005 fcaf 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f005 fdf9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 8", Font_16x26, White);
 8001472:	4a7c      	ldr	r2, [pc, #496]	; (8001664 <OLED_Update_Display_Case+0x94c>)
 8001474:	2301      	movs	r3, #1
 8001476:	ca06      	ldmia	r2, {r1, r2}
 8001478:	487b      	ldr	r0, [pc, #492]	; (8001668 <OLED_Update_Display_Case+0x950>)
 800147a:	f005 fdcd 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800147e:	211d      	movs	r1, #29
 8001480:	2000      	movs	r0, #0
 8001482:	f005 fdef 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 70 kHz", Font_7x10, White);
 8001486:	4a79      	ldr	r2, [pc, #484]	; (800166c <OLED_Update_Display_Case+0x954>)
 8001488:	2301      	movs	r3, #1
 800148a:	ca06      	ldmia	r2, {r1, r2}
 800148c:	4878      	ldr	r0, [pc, #480]	; (8001670 <OLED_Update_Display_Case+0x958>)
 800148e:	f005 fdc3 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001492:	2129      	movs	r1, #41	; 0x29
 8001494:	2000      	movs	r0, #0
 8001496:	f005 fde5 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 1.7 us", Font_7x10, White);
 800149a:	4a74      	ldr	r2, [pc, #464]	; (800166c <OLED_Update_Display_Case+0x954>)
 800149c:	2301      	movs	r3, #1
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	4874      	ldr	r0, [pc, #464]	; (8001674 <OLED_Update_Display_Case+0x95c>)
 80014a2:	f005 fdb9 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80014a6:	2135      	movs	r1, #53	; 0x35
 80014a8:	2000      	movs	r0, #0
 80014aa:	f005 fddb 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80014ae:	4a6f      	ldr	r2, [pc, #444]	; (800166c <OLED_Update_Display_Case+0x954>)
 80014b0:	2301      	movs	r3, #1
 80014b2:	ca06      	ldmia	r2, {r1, r2}
 80014b4:	4870      	ldr	r0, [pc, #448]	; (8001678 <OLED_Update_Display_Case+0x960>)
 80014b6:	f005 fdaf 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80014ba:	f7ff fc09 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80014be:	f005 fca5 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 80014c2:	e0ca      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF9:
		ssd1306_Fill(Black);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f005 fc7f 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f005 fdc9 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 9", Font_16x26, White);
 80014d2:	4a64      	ldr	r2, [pc, #400]	; (8001664 <OLED_Update_Display_Case+0x94c>)
 80014d4:	2301      	movs	r3, #1
 80014d6:	ca06      	ldmia	r2, {r1, r2}
 80014d8:	4868      	ldr	r0, [pc, #416]	; (800167c <OLED_Update_Display_Case+0x964>)
 80014da:	f005 fd9d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80014de:	211d      	movs	r1, #29
 80014e0:	2000      	movs	r0, #0
 80014e2:	f005 fdbf 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 70 kHz", Font_7x10, White);
 80014e6:	4a61      	ldr	r2, [pc, #388]	; (800166c <OLED_Update_Display_Case+0x954>)
 80014e8:	2301      	movs	r3, #1
 80014ea:	ca06      	ldmia	r2, {r1, r2}
 80014ec:	4860      	ldr	r0, [pc, #384]	; (8001670 <OLED_Update_Display_Case+0x958>)
 80014ee:	f005 fd93 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80014f2:	2129      	movs	r1, #41	; 0x29
 80014f4:	2000      	movs	r0, #0
 80014f6:	f005 fdb5 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 0.2 us", Font_7x10, White);
 80014fa:	4a5c      	ldr	r2, [pc, #368]	; (800166c <OLED_Update_Display_Case+0x954>)
 80014fc:	2301      	movs	r3, #1
 80014fe:	ca06      	ldmia	r2, {r1, r2}
 8001500:	485f      	ldr	r0, [pc, #380]	; (8001680 <OLED_Update_Display_Case+0x968>)
 8001502:	f005 fd89 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001506:	2135      	movs	r1, #53	; 0x35
 8001508:	2000      	movs	r0, #0
 800150a:	f005 fdab 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 1.4 %", Font_7x10, White);
 800150e:	4a57      	ldr	r2, [pc, #348]	; (800166c <OLED_Update_Display_Case+0x954>)
 8001510:	2301      	movs	r3, #1
 8001512:	ca06      	ldmia	r2, {r1, r2}
 8001514:	485b      	ldr	r0, [pc, #364]	; (8001684 <OLED_Update_Display_Case+0x96c>)
 8001516:	f005 fd7f 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800151a:	f7ff fbd9 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800151e:	f005 fc75 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8001522:	e09a      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Duty_12P:
		ssd1306_Fill(Black);
 8001524:	2000      	movs	r0, #0
 8001526:	f005 fc4f 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f005 fd99 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("D-y 12", Font_16x26, White);
 8001532:	4a4c      	ldr	r2, [pc, #304]	; (8001664 <OLED_Update_Display_Case+0x94c>)
 8001534:	2301      	movs	r3, #1
 8001536:	ca06      	ldmia	r2, {r1, r2}
 8001538:	4853      	ldr	r0, [pc, #332]	; (8001688 <OLED_Update_Display_Case+0x970>)
 800153a:	f005 fd6d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(100, 3);
 800153e:	2103      	movs	r1, #3
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f005 fd8f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("%", Font_11x18, White);
 8001546:	4a51      	ldr	r2, [pc, #324]	; (800168c <OLED_Update_Display_Case+0x974>)
 8001548:	2301      	movs	r3, #1
 800154a:	ca06      	ldmia	r2, {r1, r2}
 800154c:	4850      	ldr	r0, [pc, #320]	; (8001690 <OLED_Update_Display_Case+0x978>)
 800154e:	f005 fd63 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8001552:	211d      	movs	r1, #29
 8001554:	2000      	movs	r0, #0
 8001556:	f005 fd85 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 2.4 kHz", Font_7x10, White);
 800155a:	4a44      	ldr	r2, [pc, #272]	; (800166c <OLED_Update_Display_Case+0x954>)
 800155c:	2301      	movs	r3, #1
 800155e:	ca06      	ldmia	r2, {r1, r2}
 8001560:	484c      	ldr	r0, [pc, #304]	; (8001694 <OLED_Update_Display_Case+0x97c>)
 8001562:	f005 fd59 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001566:	2129      	movs	r1, #41	; 0x29
 8001568:	2000      	movs	r0, #0
 800156a:	f005 fd7b 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 50 us", Font_7x10, White);
 800156e:	4a3f      	ldr	r2, [pc, #252]	; (800166c <OLED_Update_Display_Case+0x954>)
 8001570:	2301      	movs	r3, #1
 8001572:	ca06      	ldmia	r2, {r1, r2}
 8001574:	4848      	ldr	r0, [pc, #288]	; (8001698 <OLED_Update_Display_Case+0x980>)
 8001576:	f005 fd4f 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800157a:	f7ff fba9 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800157e:	f005 fc45 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8001582:	e06a      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Duty_15P:
		ssd1306_Fill(Black);
 8001584:	2000      	movs	r0, #0
 8001586:	f005 fc1f 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	f005 fd69 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("D-y 15", Font_16x26, White);
 8001592:	4a34      	ldr	r2, [pc, #208]	; (8001664 <OLED_Update_Display_Case+0x94c>)
 8001594:	2301      	movs	r3, #1
 8001596:	ca06      	ldmia	r2, {r1, r2}
 8001598:	4840      	ldr	r0, [pc, #256]	; (800169c <OLED_Update_Display_Case+0x984>)
 800159a:	f005 fd3d 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(100, 3);
 800159e:	2103      	movs	r1, #3
 80015a0:	2064      	movs	r0, #100	; 0x64
 80015a2:	f005 fd5f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("%", Font_11x18, White);
 80015a6:	4a39      	ldr	r2, [pc, #228]	; (800168c <OLED_Update_Display_Case+0x974>)
 80015a8:	2301      	movs	r3, #1
 80015aa:	ca06      	ldmia	r2, {r1, r2}
 80015ac:	4838      	ldr	r0, [pc, #224]	; (8001690 <OLED_Update_Display_Case+0x978>)
 80015ae:	f005 fd33 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80015b2:	211d      	movs	r1, #29
 80015b4:	2000      	movs	r0, #0
 80015b6:	f005 fd55 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 15 kHz", Font_7x10, White);
 80015ba:	4a2c      	ldr	r2, [pc, #176]	; (800166c <OLED_Update_Display_Case+0x954>)
 80015bc:	2301      	movs	r3, #1
 80015be:	ca06      	ldmia	r2, {r1, r2}
 80015c0:	4837      	ldr	r0, [pc, #220]	; (80016a0 <OLED_Update_Display_Case+0x988>)
 80015c2:	f005 fd29 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80015c6:	2129      	movs	r1, #41	; 0x29
 80015c8:	2000      	movs	r0, #0
 80015ca:	f005 fd4b 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 11.57 kHz", Font_7x10, White);
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <OLED_Update_Display_Case+0x954>)
 80015d0:	2301      	movs	r3, #1
 80015d2:	ca06      	ldmia	r2, {r1, r2}
 80015d4:	4833      	ldr	r0, [pc, #204]	; (80016a4 <OLED_Update_Display_Case+0x98c>)
 80015d6:	f005 fd1f 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80015da:	2135      	movs	r1, #53	; 0x35
 80015dc:	2000      	movs	r0, #0
 80015de:	f005 fd41 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 10 us", Font_7x10, White);
 80015e2:	4a22      	ldr	r2, [pc, #136]	; (800166c <OLED_Update_Display_Case+0x954>)
 80015e4:	2301      	movs	r3, #1
 80015e6:	ca06      	ldmia	r2, {r1, r2}
 80015e8:	482f      	ldr	r0, [pc, #188]	; (80016a8 <OLED_Update_Display_Case+0x990>)
 80015ea:	f005 fd15 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80015ee:	f7ff fb6f 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80015f2:	f005 fc0b 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 80015f6:	e030      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Pattern_Q:
		ssd1306_Fill(Black);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f005 fbe5 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80015fe:	2100      	movs	r1, #0
 8001600:	2000      	movs	r0, #0
 8001602:	f005 fd2f 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRN Q", Font_16x26, White);
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <OLED_Update_Display_Case+0x94c>)
 8001608:	2301      	movs	r3, #1
 800160a:	ca06      	ldmia	r2, {r1, r2}
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <OLED_Update_Display_Case+0x994>)
 800160e:	f005 fd03 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8001612:	211d      	movs	r1, #29
 8001614:	2000      	movs	r0, #0
 8001616:	f005 fd25 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 10 kHz", Font_7x10, White);
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <OLED_Update_Display_Case+0x954>)
 800161c:	2301      	movs	r3, #1
 800161e:	ca06      	ldmia	r2, {r1, r2}
 8001620:	4823      	ldr	r0, [pc, #140]	; (80016b0 <OLED_Update_Display_Case+0x998>)
 8001622:	f005 fcf9 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001626:	2129      	movs	r1, #41	; 0x29
 8001628:	2000      	movs	r0, #0
 800162a:	f005 fd1b 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW1= 20 us", Font_7x10, White);
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <OLED_Update_Display_Case+0x954>)
 8001630:	2301      	movs	r3, #1
 8001632:	ca06      	ldmia	r2, {r1, r2}
 8001634:	481f      	ldr	r0, [pc, #124]	; (80016b4 <OLED_Update_Display_Case+0x99c>)
 8001636:	f005 fcef 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 800163a:	2135      	movs	r1, #53	; 0x35
 800163c:	2000      	movs	r0, #0
 800163e:	f005 fd11 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("PW2= 10 us", Font_7x10, White);
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <OLED_Update_Display_Case+0x954>)
 8001644:	2301      	movs	r3, #1
 8001646:	ca06      	ldmia	r2, {r1, r2}
 8001648:	481b      	ldr	r0, [pc, #108]	; (80016b8 <OLED_Update_Display_Case+0x9a0>)
 800164a:	f005 fce5 	bl	8007018 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800164e:	f7ff fb3f 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8001652:	f005 fbdb 	bl	8006e0c <ssd1306_UpdateScreen>
		break;
 8001656:	e000      	b.n	800165a <OLED_Update_Display_Case+0x942>

	default:
		break;
 8001658:	bf00      	nop
	}
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002f0 	.word	0x200002f0
 8001668:	08009480 	.word	0x08009480
 800166c:	200002e0 	.word	0x200002e0
 8001670:	08009488 	.word	0x08009488
 8001674:	08009494 	.word	0x08009494
 8001678:	080093d4 	.word	0x080093d4
 800167c:	080094a0 	.word	0x080094a0
 8001680:	080094a8 	.word	0x080094a8
 8001684:	080094b4 	.word	0x080094b4
 8001688:	080094c0 	.word	0x080094c0
 800168c:	200002e8 	.word	0x200002e8
 8001690:	080094c8 	.word	0x080094c8
 8001694:	080094cc 	.word	0x080094cc
 8001698:	080093a8 	.word	0x080093a8
 800169c:	080094dc 	.word	0x080094dc
 80016a0:	080094e4 	.word	0x080094e4
 80016a4:	080094f4 	.word	0x080094f4
 80016a8:	08009268 	.word	0x08009268
 80016ac:	08009504 	.word	0x08009504
 80016b0:	0800925c 	.word	0x0800925c
 80016b4:	0800950c 	.word	0x0800950c
 80016b8:	08009518 	.word	0x08009518

080016bc <InitDataInFlashSettings>:
#define FREQUENCY_CF_LOWER_LIMIT  0.99	// 1%
#define PW_OFFSET_UPPER_LIMIT  50			// 50 * 12.5ns = 625 ns
#define PW_OFFSET_LOWER_LIMIT  -10			// 125 ns

void InitDataInFlashSettings(void)	// initialisation needed only for erase function before write to EEPROM
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <InitDataInFlashSettings+0x28>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks       = FLASH_BANK_2;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <InitDataInFlashSettings+0x28>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Page        = 511;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <InitDataInFlashSettings+0x28>)
 80016ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80016d2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages     = 1;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <InitDataInFlashSettings+0x28>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	60da      	str	r2, [r3, #12]
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	200004e8 	.word	0x200004e8

080016e8 <SaveCalibrationFactorInFlash>:

void SaveCalibrationFactorInFlash()
{
 80016e8:	b598      	push	{r3, r4, r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80016ec:	f001 feec 	bl	80034c8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 80016f0:	4916      	ldr	r1, [pc, #88]	; (800174c <SaveCalibrationFactorInFlash+0x64>)
 80016f2:	4817      	ldr	r0, [pc, #92]	; (8001750 <SaveCalibrationFactorInFlash+0x68>)
 80016f4:	f001 ffc8 	bl	8003688 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, FrequencyCalibrationFactorFlashAddress, FrequencyCalibrationFactor * 1000000);
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <SaveCalibrationFactorInFlash+0x6c>)
 80016fa:	681c      	ldr	r4, [r3, #0]
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <SaveCalibrationFactorInFlash+0x70>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800175c <SaveCalibrationFactorInFlash+0x74>
 8001706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170a:	ee17 0a90 	vmov	r0, s15
 800170e:	f7ff fabb 	bl	8000c88 <__aeabi_f2ulz>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4621      	mov	r1, r4
 8001718:	2000      	movs	r0, #0
 800171a:	f001 fe69 	bl	80033f0 <HAL_FLASH_Program>
	HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, PulseWitdhOffsetFlashAddress, PulseWidthOffset * 1000);
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <SaveCalibrationFactorInFlash+0x78>)
 8001720:	681c      	ldr	r4, [r3, #0]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SaveCalibrationFactorInFlash+0x7c>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001768 <SaveCalibrationFactorInFlash+0x80>
 800172c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001730:	ee17 0a90 	vmov	r0, s15
 8001734:	f7ff faa8 	bl	8000c88 <__aeabi_f2ulz>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4621      	mov	r1, r4
 800173e:	2000      	movs	r0, #0
 8001740:	f001 fe56 	bl	80033f0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8001744:	f001 fee2 	bl	800350c <HAL_FLASH_Lock>
}
 8001748:	bf00      	nop
 800174a:	bd98      	pop	{r3, r4, r7, pc}
 800174c:	200004e4 	.word	0x200004e4
 8001750:	200004e8 	.word	0x200004e8
 8001754:	20000004 	.word	0x20000004
 8001758:	20000924 	.word	0x20000924
 800175c:	49742400 	.word	0x49742400
 8001760:	20000008 	.word	0x20000008
 8001764:	20000934 	.word	0x20000934
 8001768:	447a0000 	.word	0x447a0000
 800176c:	00000000 	.word	0x00000000

08001770 <ReadFrequencyCalibrationFactorFromFlash>:

float ReadFrequencyCalibrationFactorFromFlash(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	uint32_t raw_value_calibration_factor = *(ptrCalibrationFactorInFlashAddress);
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <ReadFrequencyCalibrationFactorFromFlash+0x78>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	607b      	str	r3, [r7, #4]
	float calibration_factor = (float)raw_value_calibration_factor / 1000000;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001788:	eddf 6a18 	vldr	s13, [pc, #96]	; 80017ec <ReadFrequencyCalibrationFactorFromFlash+0x7c>
 800178c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001790:	edc7 7a00 	vstr	s15, [r7]

	if((calibration_factor > FREQUENCY_CF_UPPER_LIMIT) || (calibration_factor < FREQUENCY_CF_LOWER_LIMIT))
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f7fe fed7 	bl	8000548 <__aeabi_f2d>
 800179a:	a30f      	add	r3, pc, #60	; (adr r3, 80017d8 <ReadFrequencyCalibrationFactorFromFlash+0x68>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f9ba 	bl	8000b18 <__aeabi_dcmpgt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10a      	bne.n	80017c0 <ReadFrequencyCalibrationFactorFromFlash+0x50>
 80017aa:	6838      	ldr	r0, [r7, #0]
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	a30b      	add	r3, pc, #44	; (adr r3, 80017e0 <ReadFrequencyCalibrationFactorFromFlash+0x70>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7ff f991 	bl	8000adc <__aeabi_dcmplt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <ReadFrequencyCalibrationFactorFromFlash+0x56>
		return 1;						 // if not programmed yet or unexpected value then set to default
 80017c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017c4:	e000      	b.n	80017c8 <ReadFrequencyCalibrationFactorFromFlash+0x58>
	else
		return calibration_factor;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	ee07 3a90 	vmov	s15, r3
}
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	c28f5c29 	.word	0xc28f5c29
 80017dc:	3ff028f5 	.word	0x3ff028f5
 80017e0:	7ae147ae 	.word	0x7ae147ae
 80017e4:	3fefae14 	.word	0x3fefae14
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	49742400 	.word	0x49742400

080017f0 <ReadPulseWidthOffsetFromFlash>:

float ReadPulseWidthOffsetFromFlash(void)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
	uint32_t raw_value_PW_offset_factor = *(ptrPulseWidthOffsetInFlashAddress);
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <ReadPulseWidthOffsetFromFlash+0x6c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	607b      	str	r3, [r7, #4]
	int32_t PW_Offset = round((float)raw_value_PW_offset_factor / 1000);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001808:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001860 <ReadPulseWidthOffsetFromFlash+0x70>
 800180c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001810:	ee16 0a90 	vmov	r0, s13
 8001814:	f7fe fe98 	bl	8000548 <__aeabi_f2d>
 8001818:	4603      	mov	r3, r0
 800181a:	460c      	mov	r4, r1
 800181c:	ec44 3b10 	vmov	d0, r3, r4
 8001820:	f007 fcbe 	bl	80091a0 <round>
 8001824:	ec54 3b10 	vmov	r3, r4, d0
 8001828:	4618      	mov	r0, r3
 800182a:	4621      	mov	r1, r4
 800182c:	f7ff f994 	bl	8000b58 <__aeabi_d2iz>
 8001830:	4603      	mov	r3, r0
 8001832:	603b      	str	r3, [r7, #0]

	if((PW_Offset > PW_OFFSET_UPPER_LIMIT) || (PW_Offset < PW_OFFSET_LOWER_LIMIT))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b32      	cmp	r3, #50	; 0x32
 8001838:	dc03      	bgt.n	8001842 <ReadPulseWidthOffsetFromFlash+0x52>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f113 0f0a 	cmn.w	r3, #10
 8001840:	da02      	bge.n	8001848 <ReadPulseWidthOffsetFromFlash+0x58>
		return 0;						 // if not programmed yet or unexpected value then set to default
 8001842:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001864 <ReadPulseWidthOffsetFromFlash+0x74>
 8001846:	e004      	b.n	8001852 <ReadPulseWidthOffsetFromFlash+0x62>
	else
		return PW_Offset;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	20000010 	.word	0x20000010
 8001860:	447a0000 	.word	0x447a0000
 8001864:	00000000 	.word	0x00000000

08001868 <UpdateFrequencyCalibrationDisplay>:

static void UpdateFrequencyCalibrationDisplay(void)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800186e:	2000      	movs	r0, #0
 8001870:	f005 faaa 	bl	8006dc8 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001874:	2100      	movs	r1, #0
 8001876:	2000      	movs	r0, #0
 8001878:	f005 fbf4 	bl	8007064 <ssd1306_SetCursor>
	ssd1306_WriteString("FREQ. CALIBRATION:", Font_7x10, White);
 800187c:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <UpdateFrequencyCalibrationDisplay+0x84>)
 800187e:	2301      	movs	r3, #1
 8001880:	ca06      	ldmia	r2, {r1, r2}
 8001882:	481b      	ldr	r0, [pc, #108]	; (80018f0 <UpdateFrequencyCalibrationDisplay+0x88>)
 8001884:	f005 fbc8 	bl	8007018 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 14);
 8001888:	210e      	movs	r1, #14
 800188a:	2000      	movs	r0, #0
 800188c:	f005 fbea 	bl	8007064 <ssd1306_SetCursor>
	ssd1306_WriteString("ADJUST FREQ. TO", Font_7x10, White);
 8001890:	4a16      	ldr	r2, [pc, #88]	; (80018ec <UpdateFrequencyCalibrationDisplay+0x84>)
 8001892:	2301      	movs	r3, #1
 8001894:	ca06      	ldmia	r2, {r1, r2}
 8001896:	4817      	ldr	r0, [pc, #92]	; (80018f4 <UpdateFrequencyCalibrationDisplay+0x8c>)
 8001898:	f005 fbbe 	bl	8007018 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 800189c:	211c      	movs	r1, #28
 800189e:	2000      	movs	r0, #0
 80018a0:	f005 fbe0 	bl	8007064 <ssd1306_SetCursor>
	ssd1306_WriteString("10kHz WITH TOGGLE", Font_7x10, White);
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <UpdateFrequencyCalibrationDisplay+0x84>)
 80018a6:	2301      	movs	r3, #1
 80018a8:	ca06      	ldmia	r2, {r1, r2}
 80018aa:	4813      	ldr	r0, [pc, #76]	; (80018f8 <UpdateFrequencyCalibrationDisplay+0x90>)
 80018ac:	f005 fbb4 	bl	8007018 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 44);
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	2000      	movs	r0, #0
 80018b4:	f005 fbd6 	bl	8007064 <ssd1306_SetCursor>
	snprintf(string_buffer, 20, "CF= %.4f", FrequencyCalibrationFactor);
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <UpdateFrequencyCalibrationDisplay+0x94>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe43 	bl	8000548 <__aeabi_f2d>
 80018c2:	4603      	mov	r3, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	e9cd 3400 	strd	r3, r4, [sp]
 80018ca:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <UpdateFrequencyCalibrationDisplay+0x98>)
 80018cc:	2114      	movs	r1, #20
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <UpdateFrequencyCalibrationDisplay+0x9c>)
 80018d0:	f006 f888 	bl	80079e4 <sniprintf>
	ssd1306_WriteString(string_buffer, Font_11x18, White);
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <UpdateFrequencyCalibrationDisplay+0xa0>)
 80018d6:	2301      	movs	r3, #1
 80018d8:	ca06      	ldmia	r2, {r1, r2}
 80018da:	480a      	ldr	r0, [pc, #40]	; (8001904 <UpdateFrequencyCalibrationDisplay+0x9c>)
 80018dc:	f005 fb9c 	bl	8007018 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018e0:	f005 fa94 	bl	8006e0c <ssd1306_UpdateScreen>
}
 80018e4:	bf00      	nop
 80018e6:	3704      	adds	r7, #4
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	200002e0 	.word	0x200002e0
 80018f0:	08009524 	.word	0x08009524
 80018f4:	08009538 	.word	0x08009538
 80018f8:	08009548 	.word	0x08009548
 80018fc:	20000924 	.word	0x20000924
 8001900:	0800955c 	.word	0x0800955c
 8001904:	200004f8 	.word	0x200004f8
 8001908:	200002e8 	.word	0x200002e8

0800190c <UpdatePulseAdjustmentDisplay>:

static void UpdatePulseAdjustmentDisplay(void)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b083      	sub	sp, #12
 8001910:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001912:	2000      	movs	r0, #0
 8001914:	f005 fa58 	bl	8006dc8 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001918:	2100      	movs	r1, #0
 800191a:	2000      	movs	r0, #0
 800191c:	f005 fba2 	bl	8007064 <ssd1306_SetCursor>
	ssd1306_WriteString("PULSE ADJUSTMENT:", Font_7x10, White);
 8001920:	4a1e      	ldr	r2, [pc, #120]	; (800199c <UpdatePulseAdjustmentDisplay+0x90>)
 8001922:	2301      	movs	r3, #1
 8001924:	ca06      	ldmia	r2, {r1, r2}
 8001926:	481e      	ldr	r0, [pc, #120]	; (80019a0 <UpdatePulseAdjustmentDisplay+0x94>)
 8001928:	f005 fb76 	bl	8007018 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 14);
 800192c:	210e      	movs	r1, #14
 800192e:	2000      	movs	r0, #0
 8001930:	f005 fb98 	bl	8007064 <ssd1306_SetCursor>
	ssd1306_WriteString("ADJUST OFFSET WITH", Font_7x10, White);
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <UpdatePulseAdjustmentDisplay+0x90>)
 8001936:	2301      	movs	r3, #1
 8001938:	ca06      	ldmia	r2, {r1, r2}
 800193a:	481a      	ldr	r0, [pc, #104]	; (80019a4 <UpdatePulseAdjustmentDisplay+0x98>)
 800193c:	f005 fb6c 	bl	8007018 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 8001940:	211c      	movs	r1, #28
 8001942:	2000      	movs	r0, #0
 8001944:	f005 fb8e 	bl	8007064 <ssd1306_SetCursor>
	ssd1306_WriteString("TOGGLE FOR PW 0.2u", Font_7x10, White);
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <UpdatePulseAdjustmentDisplay+0x90>)
 800194a:	2301      	movs	r3, #1
 800194c:	ca06      	ldmia	r2, {r1, r2}
 800194e:	4816      	ldr	r0, [pc, #88]	; (80019a8 <UpdatePulseAdjustmentDisplay+0x9c>)
 8001950:	f005 fb62 	bl	8007018 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 44);
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	2000      	movs	r0, #0
 8001958:	f005 fb84 	bl	8007064 <ssd1306_SetCursor>
	snprintf(string_buffer, 20, "%+7.1f ns", PulseWidthOffset * 12.5);
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <UpdatePulseAdjustmentDisplay+0xa0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdf1 	bl	8000548 <__aeabi_f2d>
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <UpdatePulseAdjustmentDisplay+0xa4>)
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4603      	mov	r3, r0
 8001972:	460c      	mov	r4, r1
 8001974:	e9cd 3400 	strd	r3, r4, [sp]
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <UpdatePulseAdjustmentDisplay+0xa8>)
 800197a:	2114      	movs	r1, #20
 800197c:	480e      	ldr	r0, [pc, #56]	; (80019b8 <UpdatePulseAdjustmentDisplay+0xac>)
 800197e:	f006 f831 	bl	80079e4 <sniprintf>
	ssd1306_WriteString(string_buffer, Font_11x18, White);
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <UpdatePulseAdjustmentDisplay+0xb0>)
 8001984:	2301      	movs	r3, #1
 8001986:	ca06      	ldmia	r2, {r1, r2}
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <UpdatePulseAdjustmentDisplay+0xac>)
 800198a:	f005 fb45 	bl	8007018 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800198e:	f005 fa3d 	bl	8006e0c <ssd1306_UpdateScreen>
}
 8001992:	bf00      	nop
 8001994:	3704      	adds	r7, #4
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e0 	.word	0x200002e0
 80019a0:	08009568 	.word	0x08009568
 80019a4:	0800957c 	.word	0x0800957c
 80019a8:	08009590 	.word	0x08009590
 80019ac:	20000934 	.word	0x20000934
 80019b0:	40290000 	.word	0x40290000
 80019b4:	080095a4 	.word	0x080095a4
 80019b8:	200004f8 	.word	0x200004f8
 80019bc:	200002e8 	.word	0x200002e8

080019c0 <Freq_Calibration_Mode>:

void Freq_Calibration_Mode(void)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
	bool FrequencyCalibrationUpdated = false;
 80019c6:	2300      	movs	r3, #0
 80019c8:	77fb      	strb	r3, [r7, #31]
	bool Previous_Pin6_State = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	72fb      	strb	r3, [r7, #11]
	bool Previous_Pin8_State = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	72bb      	strb	r3, [r7, #10]
	uint32_t CalibrationFrequency_ARR = 7999;
 80019d2:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80019d6:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < 1000000; i++); // about 140 ms delay for de-bouncing
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	e002      	b.n	80019e4 <Freq_Calibration_Mode+0x24>
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	4aa4      	ldr	r2, [pc, #656]	; (8001c78 <Freq_Calibration_Mode+0x2b8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	ddf8      	ble.n	80019de <Freq_Calibration_Mode+0x1e>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	// disable switch function implemented in ISR to use this switch here for calibration
 80019ec:	2017      	movs	r0, #23
 80019ee:	f001 fce4 	bl	80033ba <HAL_NVIC_DisableIRQ>
	UpdateFrequencyCalibrationDisplay();
 80019f2:	f7ff ff39 	bl	8001868 <UpdateFrequencyCalibrationDisplay>
	HAL_TIM_Base_Stop_IT(&htim3);	// stop frequency switching
 80019f6:	48a1      	ldr	r0, [pc, #644]	; (8001c7c <Freq_Calibration_Mode+0x2bc>)
 80019f8:	f004 f926 	bl	8005c48 <HAL_TIM_Base_Stop_IT>
	TIM3->CNT = 0;
 80019fc:	4ba0      	ldr	r3, [pc, #640]	; (8001c80 <Freq_Calibration_Mode+0x2c0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8001a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = round(CalibrationFrequency_ARR * FrequencyCalibrationFactor);	//Set timer2 period to 100us --> 10 kHz (calibration frequency)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a14:	4b9b      	ldr	r3, [pc, #620]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	ee17 0a90 	vmov	r0, s15
 8001a22:	f7fe fd91 	bl	8000548 <__aeabi_f2d>
 8001a26:	4603      	mov	r3, r0
 8001a28:	460c      	mov	r4, r1
 8001a2a:	ec44 3b10 	vmov	d0, r3, r4
 8001a2e:	f007 fbb7 	bl	80091a0 <round>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8b3 	bl	8000ba8 <__aeabi_d2uiz>
 8001a42:	4603      	mov	r3, r0
 8001a44:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->CCR1 = round(80 * FrequencyCalibrationFactor + PulseWidthOffset);  	//  1us nominal pulse width for frequency calibration
 8001a46:	4b8f      	ldr	r3, [pc, #572]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001c88 <Freq_Calibration_Mode+0x2c8>
 8001a50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a54:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <Freq_Calibration_Mode+0x2cc>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	ee17 0a90 	vmov	r0, s15
 8001a62:	f7fe fd71 	bl	8000548 <__aeabi_f2d>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	ec44 3b10 	vmov	d0, r3, r4
 8001a6e:	f007 fb97 	bl	80091a0 <round>
 8001a72:	ec53 2b10 	vmov	r2, r3, d0
 8001a76:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f893 	bl	8000ba8 <__aeabi_d2uiz>
 8001a82:	4603      	mov	r3, r0
 8001a84:	6363      	str	r3, [r4, #52]	; 0x34

	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8001a86:	e0de      	b.n	8001c46 <Freq_Calibration_Mode+0x286>
	{
		//just for scope trigger output
		GPIOC->BSRR |= (1u << 4); // set pin 4
 8001a88:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a80      	ldr	r2, [pc, #512]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6193      	str	r3, [r2, #24]
		for(int i = 0; i < 25; i++); // about 3 us
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e002      	b.n	8001aa0 <Freq_Calibration_Mode+0xe0>
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b18      	cmp	r3, #24
 8001aa4:	ddf9      	ble.n	8001a9a <Freq_Calibration_Mode+0xda>
		GPIOC->BSRR |= (1u << 20); // reset pin 4
 8001aa6:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a79      	ldr	r2, [pc, #484]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ab0:	6193      	str	r3, [r2, #24]

		Previous_Pin6_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	4876      	ldr	r0, [pc, #472]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001ab6:	f002 f8d3 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	72fb      	strb	r3, [r7, #11]
		Previous_Pin8_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aca:	4871      	ldr	r0, [pc, #452]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001acc:	f002 f8c8 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	72bb      	strb	r3, [r7, #10]
		for(int i = 0; i < 100000; i++); // wait between consecutive pin reads (above) to avoid bouncing around threshold (about 14 ms)
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	e002      	b.n	8001ae8 <Freq_Calibration_Mode+0x128>
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <Freq_Calibration_Mode+0x2d4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	ddf8      	ble.n	8001ae2 <Freq_Calibration_Mode+0x122>

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0 && Previous_Pin6_State == 1)
 8001af0:	2140      	movs	r1, #64	; 0x40
 8001af2:	4867      	ldr	r0, [pc, #412]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001af4:	f002 f8b4 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d14d      	bne.n	8001b9a <Freq_Calibration_Mode+0x1da>
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d04a      	beq.n	8001b9a <Freq_Calibration_Mode+0x1da>
		{
			FrequencyCalibrationFactor += 0.0001;
 8001b04:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd1d 	bl	8000548 <__aeabi_f2d>
 8001b0e:	a354      	add	r3, pc, #336	; (adr r3, 8001c60 <Freq_Calibration_Mode+0x2a0>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fbba 	bl	800028c <__adddf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	460c      	mov	r4, r1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	4621      	mov	r1, r4
 8001b20:	f7ff f862 	bl	8000be8 <__aeabi_d2f>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001b28:	601a      	str	r2, [r3, #0]
			if(FrequencyCalibrationFactor > FREQUENCY_CF_UPPER_LIMIT) FrequencyCalibrationFactor = FREQUENCY_CF_UPPER_LIMIT;
 8001b2a:	4b56      	ldr	r3, [pc, #344]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd0a 	bl	8000548 <__aeabi_f2d>
 8001b34:	a34c      	add	r3, pc, #304	; (adr r3, 8001c68 <Freq_Calibration_Mode+0x2a8>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe ffed 	bl	8000b18 <__aeabi_dcmpgt>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <Freq_Calibration_Mode+0x18a>
 8001b44:	4b4f      	ldr	r3, [pc, #316]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001b46:	4a54      	ldr	r2, [pc, #336]	; (8001c98 <Freq_Calibration_Mode+0x2d8>)
 8001b48:	601a      	str	r2, [r3, #0]
			Previous_Pin6_State = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	72fb      	strb	r3, [r7, #11]
			TIM2->CNT = 0;
 8001b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = round(CalibrationFrequency_ARR * FrequencyCalibrationFactor);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b60:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	ee17 0a90 	vmov	r0, s15
 8001b6e:	f7fe fceb 	bl	8000548 <__aeabi_f2d>
 8001b72:	4603      	mov	r3, r0
 8001b74:	460c      	mov	r4, r1
 8001b76:	ec44 3b10 	vmov	d0, r3, r4
 8001b7a:	f007 fb11 	bl	80091a0 <round>
 8001b7e:	ec53 2b10 	vmov	r2, r3, d0
 8001b82:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f80d 	bl	8000ba8 <__aeabi_d2uiz>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	62e3      	str	r3, [r4, #44]	; 0x2c
			UpdateFrequencyCalibrationDisplay();
 8001b92:	f7ff fe69 	bl	8001868 <UpdateFrequencyCalibrationDisplay>
			FrequencyCalibrationUpdated = true;
 8001b96:	2301      	movs	r3, #1
 8001b98:	77fb      	strb	r3, [r7, #31]
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && Previous_Pin8_State == 1)
 8001b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9e:	483c      	ldr	r0, [pc, #240]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001ba0:	f002 f85e 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d14d      	bne.n	8001c46 <Freq_Calibration_Mode+0x286>
 8001baa:	7abb      	ldrb	r3, [r7, #10]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d04a      	beq.n	8001c46 <Freq_Calibration_Mode+0x286>
		{
			FrequencyCalibrationFactor -= 0.0001;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcc7 	bl	8000548 <__aeabi_f2d>
 8001bba:	a329      	add	r3, pc, #164	; (adr r3, 8001c60 <Freq_Calibration_Mode+0x2a0>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fb62 	bl	8000288 <__aeabi_dsub>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f7ff f80c 	bl	8000be8 <__aeabi_d2f>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001bd4:	601a      	str	r2, [r3, #0]
			if(FrequencyCalibrationFactor < FREQUENCY_CF_LOWER_LIMIT) FrequencyCalibrationFactor = FREQUENCY_CF_LOWER_LIMIT;
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcb4 	bl	8000548 <__aeabi_f2d>
 8001be0:	a323      	add	r3, pc, #140	; (adr r3, 8001c70 <Freq_Calibration_Mode+0x2b0>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe ff79 	bl	8000adc <__aeabi_dcmplt>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <Freq_Calibration_Mode+0x236>
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <Freq_Calibration_Mode+0x2dc>)
 8001bf4:	601a      	str	r2, [r3, #0]
			Previous_Pin8_State = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	72bb      	strb	r3, [r7, #10]
			TIM2->CNT = 0;
 8001bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = round(CalibrationFrequency_ARR * FrequencyCalibrationFactor);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <Freq_Calibration_Mode+0x2c4>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c16:	ee17 0a90 	vmov	r0, s15
 8001c1a:	f7fe fc95 	bl	8000548 <__aeabi_f2d>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460c      	mov	r4, r1
 8001c22:	ec44 3b10 	vmov	d0, r3, r4
 8001c26:	f007 fabb 	bl	80091a0 <round>
 8001c2a:	ec53 2b10 	vmov	r2, r3, d0
 8001c2e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7fe ffb7 	bl	8000ba8 <__aeabi_d2uiz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
			UpdateFrequencyCalibrationDisplay();
 8001c3e:	f7ff fe13 	bl	8001868 <UpdateFrequencyCalibrationDisplay>
			FrequencyCalibrationUpdated = true;
 8001c42:	2301      	movs	r3, #1
 8001c44:	77fb      	strb	r3, [r7, #31]
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	4811      	ldr	r0, [pc, #68]	; (8001c90 <Freq_Calibration_Mode+0x2d0>)
 8001c4c:	f002 f808 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f43f af18 	beq.w	8001a88 <Freq_Calibration_Mode+0xc8>
		}
	}

	for(int i = 0; i < 1000000; i++); // about 140 ms
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e023      	b.n	8001ca6 <Freq_Calibration_Mode+0x2e6>
 8001c5e:	bf00      	nop
 8001c60:	eb1c432d 	.word	0xeb1c432d
 8001c64:	3f1a36e2 	.word	0x3f1a36e2
 8001c68:	c28f5c29 	.word	0xc28f5c29
 8001c6c:	3ff028f5 	.word	0x3ff028f5
 8001c70:	7ae147ae 	.word	0x7ae147ae
 8001c74:	3fefae14 	.word	0x3fefae14
 8001c78:	000f423f 	.word	0x000f423f
 8001c7c:	20000988 	.word	0x20000988
 8001c80:	40000400 	.word	0x40000400
 8001c84:	20000924 	.word	0x20000924
 8001c88:	42a00000 	.word	0x42a00000
 8001c8c:	20000934 	.word	0x20000934
 8001c90:	48000800 	.word	0x48000800
 8001c94:	0001869f 	.word	0x0001869f
 8001c98:	3f8147ae 	.word	0x3f8147ae
 8001c9c:	3f7d70a4 	.word	0x3f7d70a4
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <Freq_Calibration_Mode+0x368>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	ddf8      	ble.n	8001ca0 <Freq_Calibration_Mode+0x2e0>
	FrequencyCalibrationModeFlag = false;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <Freq_Calibration_Mode+0x36c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]


	if(FrequencyCalibrationUpdated)
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <Freq_Calibration_Mode+0x33c>
	{
		UpdateCalibratedCasesArray();
 8001cba:	f000 f9e7 	bl	800208c <UpdateCalibratedCasesArray>
		SaveCalibrationFactorInFlash();
 8001cbe:	f7ff fd13 	bl	80016e8 <SaveCalibrationFactorInFlash>

		// Calibration saved message on Display
		ssd1306_Fill(Black);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f005 f880 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 10);
 8001cc8:	210a      	movs	r1, #10
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f005 f9ca 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("CALIBRATION:", Font_11x18, White);
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <Freq_Calibration_Mode+0x370>)
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	ca06      	ldmia	r2, {r1, r2}
 8001cd6:	4817      	ldr	r0, [pc, #92]	; (8001d34 <Freq_Calibration_Mode+0x374>)
 8001cd8:	f005 f99e 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8001cdc:	211e      	movs	r1, #30
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f005 f9c0 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("   SAVED", Font_11x18, White);
 8001ce4:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <Freq_Calibration_Mode+0x370>)
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	ca06      	ldmia	r2, {r1, r2}
 8001cea:	4813      	ldr	r0, [pc, #76]	; (8001d38 <Freq_Calibration_Mode+0x378>)
 8001cec:	f005 f994 	bl	8007018 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001cf0:	f005 f88c 	bl	8006e0c <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8001cf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cf8:	f001 fa16 	bl	8003128 <HAL_Delay>
	}

	OLED_Update_Display_Case(OLEDDisplayState);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <Freq_Calibration_Mode+0x37c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f809 	bl	8000d18 <OLED_Update_Display_Case>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);	// buttons used here are used somewhere else as EXTI so any flags has to be cleared
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <Freq_Calibration_Mode+0x380>)
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <Freq_Calibration_Mode+0x380>)
 8001d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d12:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d14:	2017      	movs	r0, #23
 8001d16:	f001 fb42 	bl	800339e <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim3); // start frequency switching
 8001d1a:	480a      	ldr	r0, [pc, #40]	; (8001d44 <Freq_Calibration_Mode+0x384>)
 8001d1c:	f003 ff24 	bl	8005b68 <HAL_TIM_Base_Start_IT>
}
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	000f423f 	.word	0x000f423f
 8001d2c:	20000921 	.word	0x20000921
 8001d30:	200002e8 	.word	0x200002e8
 8001d34:	080095b0 	.word	0x080095b0
 8001d38:	080095c0 	.word	0x080095c0
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	40010400 	.word	0x40010400
 8001d44:	20000988 	.word	0x20000988

08001d48 <Pulse_Adjustment_Mode>:


void Pulse_Adjustment_Mode(void)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
	bool PW_OffsetUpdated = false;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	77fb      	strb	r3, [r7, #31]
	bool Previous_Pin6_State = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	72fb      	strb	r3, [r7, #11]
	bool Previous_Pin8_State = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	72bb      	strb	r3, [r7, #10]
	uint32_t CalibrationPulseWidth_CCR1 = 16; // nominal pulse width = 0.2u
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < 1000000; i++); // about 140 ms
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	e002      	b.n	8001d6a <Pulse_Adjustment_Mode+0x22>
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	3301      	adds	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4ab6      	ldr	r2, [pc, #728]	; (8002048 <Pulse_Adjustment_Mode+0x300>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	ddf8      	ble.n	8001d64 <Pulse_Adjustment_Mode+0x1c>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	// disable switch function implemented in ISR to use this switch here for calibration
 8001d72:	2017      	movs	r0, #23
 8001d74:	f001 fb21 	bl	80033ba <HAL_NVIC_DisableIRQ>
	UpdatePulseAdjustmentDisplay();
 8001d78:	f7ff fdc8 	bl	800190c <UpdatePulseAdjustmentDisplay>

	HAL_TIM_Base_Stop_IT(&htim3);	// stop frequency switching
 8001d7c:	48b3      	ldr	r0, [pc, #716]	; (800204c <Pulse_Adjustment_Mode+0x304>)
 8001d7e:	f003 ff63 	bl	8005c48 <HAL_TIM_Base_Stop_IT>
	TIM3->CNT = 0;
 8001d82:	4bb3      	ldr	r3, [pc, #716]	; (8002050 <Pulse_Adjustment_Mode+0x308>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8001d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = round(7999 * FrequencyCalibrationFactor);	// frequency = 10 kHz (arbitrary number for pulse calibration)
 8001d90:	4bb0      	ldr	r3, [pc, #704]	; (8002054 <Pulse_Adjustment_Mode+0x30c>)
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002058 <Pulse_Adjustment_Mode+0x310>
 8001d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9e:	ee17 0a90 	vmov	r0, s15
 8001da2:	f7fe fbd1 	bl	8000548 <__aeabi_f2d>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	ec44 3b10 	vmov	d0, r3, r4
 8001dae:	f007 f9f7 	bl	80091a0 <round>
 8001db2:	ec53 2b10 	vmov	r2, r3, d0
 8001db6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fef3 	bl	8000ba8 <__aeabi_d2uiz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->CCR1 = round(CalibrationPulseWidth_CCR1 * FrequencyCalibrationFactor + PulseWidthOffset);  // set pulse width
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <Pulse_Adjustment_Mode+0x30c>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dda:	4ba0      	ldr	r3, [pc, #640]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	ee17 0a90 	vmov	r0, s15
 8001de8:	f7fe fbae 	bl	8000548 <__aeabi_f2d>
 8001dec:	4603      	mov	r3, r0
 8001dee:	460c      	mov	r4, r1
 8001df0:	ec44 3b10 	vmov	d0, r3, r4
 8001df4:	f007 f9d4 	bl	80091a0 <round>
 8001df8:	ec53 2b10 	vmov	r2, r3, d0
 8001dfc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fed0 	bl	8000ba8 <__aeabi_d2uiz>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	6363      	str	r3, [r4, #52]	; 0x34

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 8001e0c:	e0cb      	b.n	8001fa6 <Pulse_Adjustment_Mode+0x25e>
	{
		//just for scope trigger output
		GPIOC->BSRR |= (1u << 4); // set pin 4
 8001e0e:	4b94      	ldr	r3, [pc, #592]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a93      	ldr	r2, [pc, #588]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001e14:	f043 0310 	orr.w	r3, r3, #16
 8001e18:	6193      	str	r3, [r2, #24]
		for(int i = 0; i < 25; i++); // about 3 us
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e002      	b.n	8001e26 <Pulse_Adjustment_Mode+0xde>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b18      	cmp	r3, #24
 8001e2a:	ddf9      	ble.n	8001e20 <Pulse_Adjustment_Mode+0xd8>
		GPIOC->BSRR |= (1u << 20); // reset pin 4
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a8b      	ldr	r2, [pc, #556]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e36:	6193      	str	r3, [r2, #24]

		Previous_Pin6_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8001e38:	2140      	movs	r1, #64	; 0x40
 8001e3a:	4889      	ldr	r0, [pc, #548]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001e3c:	f001 ff10 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	72fb      	strb	r3, [r7, #11]
		Previous_Pin8_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e50:	4883      	ldr	r0, [pc, #524]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001e52:	f001 ff05 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	72bb      	strb	r3, [r7, #10]

		for(int i = 0; i < 100000; i++); // de-bouncing (about 14 ms)
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e002      	b.n	8001e6e <Pulse_Adjustment_Mode+0x126>
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4a7c      	ldr	r2, [pc, #496]	; (8002064 <Pulse_Adjustment_Mode+0x31c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	ddf8      	ble.n	8001e68 <Pulse_Adjustment_Mode+0x120>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0 && Previous_Pin6_State == 1)
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	4879      	ldr	r0, [pc, #484]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001e7a:	f001 fef1 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d146      	bne.n	8001f12 <Pulse_Adjustment_Mode+0x1ca>
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d043      	beq.n	8001f12 <Pulse_Adjustment_Mode+0x1ca>
		{
			PulseWidthOffset += 1;
 8001e8a:	4b74      	ldr	r3, [pc, #464]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e98:	4b70      	ldr	r3, [pc, #448]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
			if(PulseWidthOffset > PW_OFFSET_UPPER_LIMIT) PulseWidthOffset = PW_OFFSET_UPPER_LIMIT;
 8001e9e:	4b6f      	ldr	r3, [pc, #444]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002068 <Pulse_Adjustment_Mode+0x320>
 8001ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	dd02      	ble.n	8001eb8 <Pulse_Adjustment_Mode+0x170>
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001eb4:	4a6d      	ldr	r2, [pc, #436]	; (800206c <Pulse_Adjustment_Mode+0x324>)
 8001eb6:	601a      	str	r2, [r3, #0]
			Previous_Pin6_State = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	72fb      	strb	r3, [r7, #11]
			TIM2->CNT = 0;
 8001ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->CCR1 = round(CalibrationPulseWidth_CCR1 * FrequencyCalibrationFactor + PulseWidthOffset);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ece:	4b61      	ldr	r3, [pc, #388]	; (8002054 <Pulse_Adjustment_Mode+0x30c>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed8:	4b60      	ldr	r3, [pc, #384]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee2:	ee17 0a90 	vmov	r0, s15
 8001ee6:	f7fe fb2f 	bl	8000548 <__aeabi_f2d>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	ec44 3b10 	vmov	d0, r3, r4
 8001ef2:	f007 f955 	bl	80091a0 <round>
 8001ef6:	ec53 2b10 	vmov	r2, r3, d0
 8001efa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fe51 	bl	8000ba8 <__aeabi_d2uiz>
 8001f06:	4603      	mov	r3, r0
 8001f08:	6363      	str	r3, [r4, #52]	; 0x34
			UpdatePulseAdjustmentDisplay();
 8001f0a:	f7ff fcff 	bl	800190c <UpdatePulseAdjustmentDisplay>
			PW_OffsetUpdated = true;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	77fb      	strb	r3, [r7, #31]
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && Previous_Pin8_State == 1)
 8001f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f16:	4852      	ldr	r0, [pc, #328]	; (8002060 <Pulse_Adjustment_Mode+0x318>)
 8001f18:	f001 fea2 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d141      	bne.n	8001fa6 <Pulse_Adjustment_Mode+0x25e>
 8001f22:	7abb      	ldrb	r3, [r7, #10]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d03e      	beq.n	8001fa6 <Pulse_Adjustment_Mode+0x25e>
		{
			PulseWidthOffset -= 1;
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f36:	4b49      	ldr	r3, [pc, #292]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001f38:	edc3 7a00 	vstr	s15, [r3]
			if(PulseWidthOffset < PW_OFFSET_LOWER_LIMIT) PulseWidthOffset = PW_OFFSET_LOWER_LIMIT; // limit offset
 8001f3c:	4b47      	ldr	r3, [pc, #284]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d502      	bpl.n	8001f56 <Pulse_Adjustment_Mode+0x20e>
 8001f50:	4b42      	ldr	r3, [pc, #264]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001f52:	4a47      	ldr	r2, [pc, #284]	; (8002070 <Pulse_Adjustment_Mode+0x328>)
 8001f54:	601a      	str	r2, [r3, #0]
			Previous_Pin8_State = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	72bb      	strb	r3, [r7, #10]
			TIM2->CNT = 0;
 8001f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->CCR1 = round(CalibrationPulseWidth_CCR1 - PulseWidthOffset);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <Pulse_Adjustment_Mode+0x314>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f76:	ee17 0a90 	vmov	r0, s15
 8001f7a:	f7fe fae5 	bl	8000548 <__aeabi_f2d>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	ec44 3b10 	vmov	d0, r3, r4
 8001f86:	f007 f90b 	bl	80091a0 <round>
 8001f8a:	ec53 2b10 	vmov	r2, r3, d0
 8001f8e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fe07 	bl	8000ba8 <__aeabi_d2uiz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6363      	str	r3, [r4, #52]	; 0x34
			UpdatePulseAdjustmentDisplay();
 8001f9e:	f7ff fcb5 	bl	800190c <UpdatePulseAdjustmentDisplay>
			PW_OffsetUpdated = true;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 8001fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f001 fe57 	bl	8003c60 <HAL_GPIO_ReadPin>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f43f af2a 	beq.w	8001e0e <Pulse_Adjustment_Mode+0xc6>
		}
	}

	for(int i = 0; i < 1000000; i++); // about 140 ms
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e002      	b.n	8001fc6 <Pulse_Adjustment_Mode+0x27e>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <Pulse_Adjustment_Mode+0x300>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	ddf8      	ble.n	8001fc0 <Pulse_Adjustment_Mode+0x278>
	PulseOffsetAdjustmentModeFlag = false;
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <Pulse_Adjustment_Mode+0x32c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]


	if(PW_OffsetUpdated)
 8001fd4:	7ffb      	ldrb	r3, [r7, #31]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d020      	beq.n	800201c <Pulse_Adjustment_Mode+0x2d4>
	{
		UpdateCalibratedCasesArray();
 8001fda:	f000 f857 	bl	800208c <UpdateCalibratedCasesArray>
		SaveCalibrationFactorInFlash();
 8001fde:	f7ff fb83 	bl	80016e8 <SaveCalibrationFactorInFlash>

		// Calibration saved message on Display
		ssd1306_Fill(Black);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f004 fef0 	bl	8006dc8 <ssd1306_Fill>
		ssd1306_SetCursor(0, 10);
 8001fe8:	210a      	movs	r1, #10
 8001fea:	2000      	movs	r0, #0
 8001fec:	f005 f83a 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString(" PW OFFSET", Font_11x18, White);
 8001ff0:	4a21      	ldr	r2, [pc, #132]	; (8002078 <Pulse_Adjustment_Mode+0x330>)
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	ca06      	ldmia	r2, {r1, r2}
 8001ff6:	4821      	ldr	r0, [pc, #132]	; (800207c <Pulse_Adjustment_Mode+0x334>)
 8001ff8:	f005 f80e 	bl	8007018 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8001ffc:	211e      	movs	r1, #30
 8001ffe:	2000      	movs	r0, #0
 8002000:	f005 f830 	bl	8007064 <ssd1306_SetCursor>
		ssd1306_WriteString("   SAVED", Font_11x18, White);
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <Pulse_Adjustment_Mode+0x330>)
 8002006:	2301      	movs	r3, #1
 8002008:	ca06      	ldmia	r2, {r1, r2}
 800200a:	481d      	ldr	r0, [pc, #116]	; (8002080 <Pulse_Adjustment_Mode+0x338>)
 800200c:	f005 f804 	bl	8007018 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002010:	f004 fefc 	bl	8006e0c <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8002014:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002018:	f001 f886 	bl	8003128 <HAL_Delay>
	}

	OLED_Update_Display_Case(OLEDDisplayState);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <Pulse_Adjustment_Mode+0x33c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fe79 	bl	8000d18 <OLED_Update_Display_Case>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);	// buttons used here are used somewhere else as EXTI so it has to be cleared
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <Pulse_Adjustment_Mode+0x340>)
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <Pulse_Adjustment_Mode+0x340>)
 800202e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002032:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002034:	2017      	movs	r0, #23
 8002036:	f001 f9b2 	bl	800339e <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim3); // start frequency switching
 800203a:	4804      	ldr	r0, [pc, #16]	; (800204c <Pulse_Adjustment_Mode+0x304>)
 800203c:	f003 fd94 	bl	8005b68 <HAL_TIM_Base_Start_IT>
}
 8002040:	bf00      	nop
 8002042:	3724      	adds	r7, #36	; 0x24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd90      	pop	{r4, r7, pc}
 8002048:	000f423f 	.word	0x000f423f
 800204c:	20000988 	.word	0x20000988
 8002050:	40000400 	.word	0x40000400
 8002054:	20000924 	.word	0x20000924
 8002058:	45f9f800 	.word	0x45f9f800
 800205c:	20000934 	.word	0x20000934
 8002060:	48000800 	.word	0x48000800
 8002064:	0001869f 	.word	0x0001869f
 8002068:	42480000 	.word	0x42480000
 800206c:	42480000 	.word	0x42480000
 8002070:	c1200000 	.word	0xc1200000
 8002074:	20000920 	.word	0x20000920
 8002078:	200002e8 	.word	0x200002e8
 800207c:	080095cc 	.word	0x080095cc
 8002080:	080095c0 	.word	0x080095c0
 8002084:	20000000 	.word	0x20000000
 8002088:	40010400 	.word	0x40010400

0800208c <UpdateCalibratedCasesArray>:
												 [Leonardo_Duty_15P].Pulse1 = 800, [Leonardo_Duty_15P].Pulse2 = 800,		// 10 us
												 [Leonardo_Pattern_Q].Pulse1 = 1600, [Leonardo_Pattern_Q].Pulse2 = 800,		// 20 us / 10 us (Pattern Q)
											};

void UpdateCalibratedCasesArray(void)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
	for(int i = 0;i < (  (sizeof(UncalibratedCasesLeonardo)) / sizeof(UncalibratedCasesLeonardo[0])  ); i++)
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	e0a2      	b.n	80021de <UpdateCalibratedCasesArray+0x152>
	{
		CalibratedCasesLeonardo[i].Freq1 = round(UncalibratedCasesLeonardo[i].Freq1 * FrequencyCalibrationFactor);
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <UpdateCalibratedCasesArray+0x164>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020aa:	4b52      	ldr	r3, [pc, #328]	; (80021f4 <UpdateCalibratedCasesArray+0x168>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b4:	ee17 0a90 	vmov	r0, s15
 80020b8:	f7fe fa46 	bl	8000548 <__aeabi_f2d>
 80020bc:	4603      	mov	r3, r0
 80020be:	460c      	mov	r4, r1
 80020c0:	ec44 3b10 	vmov	d0, r3, r4
 80020c4:	f007 f86c 	bl	80091a0 <round>
 80020c8:	ec54 3b10 	vmov	r3, r4, d0
 80020cc:	4618      	mov	r0, r3
 80020ce:	4621      	mov	r1, r4
 80020d0:	f7fe fd6a 	bl	8000ba8 <__aeabi_d2uiz>
 80020d4:	4601      	mov	r1, r0
 80020d6:	4a48      	ldr	r2, [pc, #288]	; (80021f8 <UpdateCalibratedCasesArray+0x16c>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	6019      	str	r1, [r3, #0]
		CalibratedCasesLeonardo[i].Freq2 = round(UncalibratedCasesLeonardo[i].Freq2 * FrequencyCalibrationFactor);
 80020e0:	4a43      	ldr	r2, [pc, #268]	; (80021f0 <UpdateCalibratedCasesArray+0x164>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f4:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <UpdateCalibratedCasesArray+0x168>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fe:	ee17 0a90 	vmov	r0, s15
 8002102:	f7fe fa21 	bl	8000548 <__aeabi_f2d>
 8002106:	4603      	mov	r3, r0
 8002108:	460c      	mov	r4, r1
 800210a:	ec44 3b10 	vmov	d0, r3, r4
 800210e:	f007 f847 	bl	80091a0 <round>
 8002112:	ec54 3b10 	vmov	r3, r4, d0
 8002116:	4618      	mov	r0, r3
 8002118:	4621      	mov	r1, r4
 800211a:	f7fe fd45 	bl	8000ba8 <__aeabi_d2uiz>
 800211e:	4601      	mov	r1, r0
 8002120:	4a35      	ldr	r2, [pc, #212]	; (80021f8 <UpdateCalibratedCasesArray+0x16c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	6019      	str	r1, [r3, #0]
		CalibratedCasesLeonardo[i].Pulse1 = round(UncalibratedCasesLeonardo[i].Pulse1 * FrequencyCalibrationFactor + PulseWidthOffset);
 800212c:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <UpdateCalibratedCasesArray+0x164>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	4413      	add	r3, r2
 8002134:	3308      	adds	r3, #8
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <UpdateCalibratedCasesArray+0x168>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <UpdateCalibratedCasesArray+0x170>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	ee17 0a90 	vmov	r0, s15
 8002158:	f7fe f9f6 	bl	8000548 <__aeabi_f2d>
 800215c:	4603      	mov	r3, r0
 800215e:	460c      	mov	r4, r1
 8002160:	ec44 3b10 	vmov	d0, r3, r4
 8002164:	f007 f81c 	bl	80091a0 <round>
 8002168:	ec54 3b10 	vmov	r3, r4, d0
 800216c:	4618      	mov	r0, r3
 800216e:	4621      	mov	r1, r4
 8002170:	f7fe fd1a 	bl	8000ba8 <__aeabi_d2uiz>
 8002174:	4601      	mov	r1, r0
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <UpdateCalibratedCasesArray+0x16c>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	3308      	adds	r3, #8
 8002180:	6019      	str	r1, [r3, #0]
		CalibratedCasesLeonardo[i].Pulse2 = round(UncalibratedCasesLeonardo[i].Pulse2 * FrequencyCalibrationFactor + PulseWidthOffset);
 8002182:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <UpdateCalibratedCasesArray+0x164>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	4413      	add	r3, r2
 800218a:	330c      	adds	r3, #12
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <UpdateCalibratedCasesArray+0x168>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <UpdateCalibratedCasesArray+0x170>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021aa:	ee17 0a90 	vmov	r0, s15
 80021ae:	f7fe f9cb 	bl	8000548 <__aeabi_f2d>
 80021b2:	4603      	mov	r3, r0
 80021b4:	460c      	mov	r4, r1
 80021b6:	ec44 3b10 	vmov	d0, r3, r4
 80021ba:	f006 fff1 	bl	80091a0 <round>
 80021be:	ec54 3b10 	vmov	r3, r4, d0
 80021c2:	4618      	mov	r0, r3
 80021c4:	4621      	mov	r1, r4
 80021c6:	f7fe fcef 	bl	8000ba8 <__aeabi_d2uiz>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <UpdateCalibratedCasesArray+0x16c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	330c      	adds	r3, #12
 80021d6:	6019      	str	r1, [r3, #0]
	for(int i = 0;i < (  (sizeof(UncalibratedCasesLeonardo)) / sizeof(UncalibratedCasesLeonardo[0])  ); i++)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b14      	cmp	r3, #20
 80021e2:	f67f af59 	bls.w	8002098 <UpdateCalibratedCasesArray+0xc>
	}
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000014 	.word	0x20000014
 80021f4:	20000924 	.word	0x20000924
 80021f8:	20000164 	.word	0x20000164
 80021fc:	20000934 	.word	0x20000934

08002200 <InitPatternGenerator>:
*/



void InitPatternGenerator(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	UpdateCalibratedCasesArray();
 8002204:	f7ff ff42 	bl	800208c <UpdateCalibratedCasesArray>

	//Initialise to Case1 and Freq1
	OLEDDisplayState = Leonardo_TC1;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <InitPatternGenerator+0x20>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
	CurrentCase = Leonardo_TC1;
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <InitPatternGenerator+0x24>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
	CurrentFrequency = 1;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <InitPatternGenerator+0x28>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000
 8002224:	20000928 	.word	0x20000928
 8002228:	20000930 	.word	0x20000930

0800222c <TIM3_IRQHandler>:

// interrupt handler without HAL to fix pin toggle jitter
void TIM3_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
//	char PC_GUI_message[200] = {0};		// debug only
//	extern UART_HandleTypeDef huart2; 	// debug only

	// cases with varying frequency (interval = 15 pulses)
	if(CurrentCase >= Leonardo_Case1 && CurrentCase <= Leonardo_Case7)
 8002232:	4b77      	ldr	r3, [pc, #476]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	dd3b      	ble.n	80022b2 <TIM3_IRQHandler+0x86>
 800223a:	4b75      	ldr	r3, [pc, #468]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b08      	cmp	r3, #8
 8002240:	dc37      	bgt.n	80022b2 <TIM3_IRQHandler+0x86>
	{
		ScopeTriggerFromISR();
 8002242:	f000 f8ef 	bl	8002424 <ScopeTriggerFromISR>

		if(TIM2->ARR == CalibratedCasesLeonardo[CurrentCase].Freq1)
 8002246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224c:	4b70      	ldr	r3, [pc, #448]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4970      	ldr	r1, [pc, #448]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	440b      	add	r3, r1
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d114      	bne.n	8002286 <TIM3_IRQHandler+0x5a>
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq2;
 800225c:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002264:	496b      	ldr	r1, [pc, #428]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	440b      	add	r3, r1
 800226a:	3304      	adds	r3, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse2;
 8002270:	4b67      	ldr	r3, [pc, #412]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002278:	4966      	ldr	r1, [pc, #408]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	440b      	add	r3, r1
 800227e:	330c      	adds	r3, #12
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6353      	str	r3, [r2, #52]	; 0x34
 8002284:	e012      	b.n	80022ac <TIM3_IRQHandler+0x80>
		}
		else
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 8002286:	4b62      	ldr	r3, [pc, #392]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800228e:	4961      	ldr	r1, [pc, #388]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	440b      	add	r3, r1
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;
 8002298:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022a0:	495c      	ldr	r1, [pc, #368]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	440b      	add	r3, r1
 80022a6:	3308      	adds	r3, #8
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6353      	str	r3, [r2, #52]	; 0x34
		}
		TIM3->ARR = 14;
 80022ac:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <TIM3_IRQHandler+0x1ec>)
 80022ae:	220e      	movs	r2, #14
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	// cases with constant frequency and constant pulse
	if((CurrentCase >= Leonardo_PRF1 && CurrentCase <= Leonardo_PRF9) || CurrentCase == Leonardo_Duty_12P || CurrentCase == Leonardo_TC1 || CurrentCase == Leonardo_TC2)
 80022b2:	4b57      	ldr	r3, [pc, #348]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	dd03      	ble.n	80022c2 <TIM3_IRQHandler+0x96>
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b11      	cmp	r3, #17
 80022c0:	dd0b      	ble.n	80022da <TIM3_IRQHandler+0xae>
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d007      	beq.n	80022da <TIM3_IRQHandler+0xae>
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <TIM3_IRQHandler+0xae>
 80022d2:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d117      	bne.n	800230a <TIM3_IRQHandler+0xde>
	{
		ScopeTriggerFromISR();
 80022da:	f000 f8a3 	bl	8002424 <ScopeTriggerFromISR>

		TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 80022de:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e6:	494b      	ldr	r1, [pc, #300]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	440b      	add	r3, r1
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;  // capture/compare register used for pulse length
 80022f0:	4b47      	ldr	r3, [pc, #284]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f8:	4946      	ldr	r1, [pc, #280]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	440b      	add	r3, r1
 80022fe:	3308      	adds	r3, #8
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->ARR = 14;	// arbitrary number
 8002304:	4b44      	ldr	r3, [pc, #272]	; (8002418 <TIM3_IRQHandler+0x1ec>)
 8002306:	220e      	movs	r2, #14
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
//		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;  // capture/compare register used for pulse length
//		TIM3->ARR = 14;	// arbitrary number
//	}

	// case with varying frequency (custom interval)
	if(CurrentCase == Leonardo_Duty_15P)
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b13      	cmp	r3, #19
 8002310:	d130      	bne.n	8002374 <TIM3_IRQHandler+0x148>
	{
		ScopeTriggerFromISR();
 8002312:	f000 f887 	bl	8002424 <ScopeTriggerFromISR>
		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231e:	493d      	ldr	r1, [pc, #244]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	440b      	add	r3, r1
 8002324:	3308      	adds	r3, #8
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6353      	str	r3, [r2, #52]	; 0x34

		if(TIM2->ARR == CalibratedCasesLeonardo[CurrentCase].Freq1)
 800232a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	4b37      	ldr	r3, [pc, #220]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4937      	ldr	r1, [pc, #220]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	440b      	add	r3, r1
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d10d      	bne.n	800235c <TIM3_IRQHandler+0x130>
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq2;
 8002340:	4b33      	ldr	r3, [pc, #204]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002348:	4932      	ldr	r1, [pc, #200]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	440b      	add	r3, r1
 800234e:	3304      	adds	r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->ARR = 2;
 8002354:	4b30      	ldr	r3, [pc, #192]	; (8002418 <TIM3_IRQHandler+0x1ec>)
 8002356:	2202      	movs	r2, #2
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
 800235a:	e00b      	b.n	8002374 <TIM3_IRQHandler+0x148>
		}
		else
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002364:	492b      	ldr	r1, [pc, #172]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	440b      	add	r3, r1
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->ARR = 23;
 800236e:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <TIM3_IRQHandler+0x1ec>)
 8002370:	2217      	movs	r2, #23
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	// "hand made" pattern and scope trigger
	if(CurrentCase == Leonardo_Pattern_Q)
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b14      	cmp	r3, #20
 800237a:	d13f      	bne.n	80023fc <TIM3_IRQHandler+0x1d0>
	{
		//scope trigger
		GPIOC->BSRR |= (1u << 4); // set pin 4
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <TIM3_IRQHandler+0x1f0>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <TIM3_IRQHandler+0x1f0>)
 8002382:	f043 0310 	orr.w	r3, r3, #16
 8002386:	6193      	str	r3, [r2, #24]
		for(int i = 0; i < 25; i++); // about 3 us
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e002      	b.n	8002394 <TIM3_IRQHandler+0x168>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3301      	adds	r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b18      	cmp	r3, #24
 8002398:	ddf9      	ble.n	800238e <TIM3_IRQHandler+0x162>
		GPIOC->BSRR |= (1u << 20); // reset pin 4
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <TIM3_IRQHandler+0x1f0>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <TIM3_IRQHandler+0x1f0>)
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a4:	6193      	str	r3, [r2, #24]

		TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ae:	4919      	ldr	r1, [pc, #100]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	440b      	add	r3, r1
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->ARR = 23; // set to trigger this ISR
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <TIM3_IRQHandler+0x1ec>)
 80023ba:	2217      	movs	r2, #23
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c6:	4913      	ldr	r1, [pc, #76]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	440b      	add	r3, r1
 80023cc:	3308      	adds	r3, #8
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6353      	str	r3, [r2, #52]	; 0x34
		for(int i = 0; i < 1250; i++); // about 150 us (allow one pulse - dirty trick)
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	e002      	b.n	80023de <TIM3_IRQHandler+0x1b2>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80023e4:	4293      	cmp	r3, r2
 80023e6:	ddf7      	ble.n	80023d8 <TIM3_IRQHandler+0x1ac>
		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse2;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <TIM3_IRQHandler+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f0:	4908      	ldr	r1, [pc, #32]	; (8002414 <TIM3_IRQHandler+0x1e8>)
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	440b      	add	r3, r1
 80023f6:	330c      	adds	r3, #12
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6353      	str	r3, [r2, #52]	; 0x34
	}

//	  snprintf(PC_GUI_message, 200, " TIM2->CCR1 = %lu\n TIM3->ARR = %lu\n", TIM2->CCR1, TIM3->ARR);	// debug only
//	  HAL_UART_Transmit(&huart2, (unsigned char*)PC_GUI_message, strlen(PC_GUI_message), 100);			// debug only

	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE); // not using HAL callback so it has to be done manually
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <TIM3_IRQHandler+0x1f4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0201 	mvn.w	r2, #1
 8002404:	611a      	str	r2, [r3, #16]
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000928 	.word	0x20000928
 8002414:	20000164 	.word	0x20000164
 8002418:	40000400 	.word	0x40000400
 800241c:	48000800 	.word	0x48000800
 8002420:	20000988 	.word	0x20000988

08002424 <ScopeTriggerFromISR>:
}
*/


void ScopeTriggerFromISR(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	// scope trigger for dual frequency cases
	if(CalibratedCasesLeonardo[CurrentCase].Freq1 != CalibratedCasesLeonardo[CurrentCase].Freq2)
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <ScopeTriggerFromISR+0xa8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <ScopeTriggerFromISR+0xac>)
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <ScopeTriggerFromISR+0xa8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4925      	ldr	r1, [pc, #148]	; (80024d0 <ScopeTriggerFromISR+0xac>)
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	440b      	add	r3, r1
 800243e:	3304      	adds	r3, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d017      	beq.n	8002476 <ScopeTriggerFromISR+0x52>
	{
		if(TIM2->ARR == CalibratedCasesLeonardo[CurrentCase].Freq1)
 8002446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <ScopeTriggerFromISR+0xa8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	491f      	ldr	r1, [pc, #124]	; (80024d0 <ScopeTriggerFromISR+0xac>)
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	440b      	add	r3, r1
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d106      	bne.n	800246a <ScopeTriggerFromISR+0x46>
		{
			GPIOC->BSRR |= (1u << 4); // set pin 4
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 8002462:	f043 0310 	orr.w	r3, r3, #16
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	e005      	b.n	8002476 <ScopeTriggerFromISR+0x52>
		}
		else
		{
			GPIOC->BSRR |= (1u << 20); // reset pin 4
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 8002470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002474:	6193      	str	r3, [r2, #24]
		}
	}


	// scope trigger for single frequency cases (unnecessary but added for convenience to avoid need for switching trigger source in the scope)
	if(CalibratedCasesLeonardo[CurrentCase].Freq1 == CalibratedCasesLeonardo[CurrentCase].Freq2)
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <ScopeTriggerFromISR+0xa8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <ScopeTriggerFromISR+0xac>)
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <ScopeTriggerFromISR+0xa8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4912      	ldr	r1, [pc, #72]	; (80024d0 <ScopeTriggerFromISR+0xac>)
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	440b      	add	r3, r1
 800248c:	3304      	adds	r3, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d116      	bne.n	80024c2 <ScopeTriggerFromISR+0x9e>
	{
		if(CurrentFrequency == 1)
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <ScopeTriggerFromISR+0xb4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d109      	bne.n	80024b0 <ScopeTriggerFromISR+0x8c>
		{
			GPIOC->BSRR |= (1u << 4); // set pin 4
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 80024a2:	f043 0310 	orr.w	r3, r3, #16
 80024a6:	6193      	str	r3, [r2, #24]
			CurrentFrequency = 2;
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <ScopeTriggerFromISR+0xb4>)
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
		{
			GPIOC->BSRR |= (1u << 20); // reset pin 4
			CurrentFrequency = 1;
		}
	}
}
 80024ae:	e008      	b.n	80024c2 <ScopeTriggerFromISR+0x9e>
			GPIOC->BSRR |= (1u << 20); // reset pin 4
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <ScopeTriggerFromISR+0xb0>)
 80024b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ba:	6193      	str	r3, [r2, #24]
			CurrentFrequency = 1;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <ScopeTriggerFromISR+0xb4>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	20000928 	.word	0x20000928
 80024d0:	20000164 	.word	0x20000164
 80024d4:	48000800 	.word	0x48000800
 80024d8:	20000930 	.word	0x20000930

080024dc <NextFrequency>:

void NextFrequency(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	CurrentCase++;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <NextFrequency+0x34>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <NextFrequency+0x34>)
 80024e8:	6013      	str	r3, [r2, #0]
	if(CurrentCase > NUMBER_OF_CASES - 1)
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <NextFrequency+0x34>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b14      	cmp	r3, #20
 80024f0:	dd02      	ble.n	80024f8 <NextFrequency+0x1c>
		CurrentCase = 0;	// go to the beginning
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <NextFrequency+0x34>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

	OLEDDisplayState = CurrentCase;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <NextFrequency+0x34>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <NextFrequency+0x38>)
 8002500:	701a      	strb	r2, [r3, #0]
	OLED_Update_Display_Case(OLEDDisplayState);
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <NextFrequency+0x38>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fc06 	bl	8000d18 <OLED_Update_Display_Case>
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000928 	.word	0x20000928
 8002514:	20000000 	.word	0x20000000

08002518 <PreviousFrequency>:

void PreviousFrequency(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	CurrentCase--;
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <PreviousFrequency+0x34>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3b01      	subs	r3, #1
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <PreviousFrequency+0x34>)
 8002524:	6013      	str	r3, [r2, #0]
	if(CurrentCase < 0)
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <PreviousFrequency+0x34>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da02      	bge.n	8002534 <PreviousFrequency+0x1c>
		CurrentCase = NUMBER_OF_CASES - 1; 		// go to the last one
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <PreviousFrequency+0x34>)
 8002530:	2214      	movs	r2, #20
 8002532:	601a      	str	r2, [r3, #0]

	OLEDDisplayState = CurrentCase;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <PreviousFrequency+0x34>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <PreviousFrequency+0x38>)
 800253c:	701a      	strb	r2, [r3, #0]
	OLED_Update_Display_Case(OLEDDisplayState);
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <PreviousFrequency+0x38>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fbe8 	bl	8000d18 <OLED_Update_Display_Case>
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000928 	.word	0x20000928
 8002550:	20000000 	.word	0x20000000

08002554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	4a62      	ldr	r2, [pc, #392]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002576:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 8002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258e:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a6:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025be:	4b4e      	ldr	r3, [pc, #312]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ca:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d6:	4b48      	ldr	r3, [pc, #288]	; (80026f8 <MX_GPIO_Init+0x1a4>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80025e2:	2200      	movs	r2, #0
 80025e4:	f641 61bc 	movw	r1, #7868	; 0x1ebc
 80025e8:	4844      	ldr	r0, [pc, #272]	; (80026fc <MX_GPIO_Init+0x1a8>)
 80025ea:	f001 fb51 	bl	8003c90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80025ee:	2200      	movs	r2, #0
 80025f0:	f249 71fe 	movw	r1, #38910	; 0x97fe
 80025f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f8:	f001 fb4a 	bl	8003c90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80025fc:	2200      	movs	r2, #0
 80025fe:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8002602:	483f      	ldr	r0, [pc, #252]	; (8002700 <MX_GPIO_Init+0x1ac>)
 8002604:	f001 fb44 	bl	8003c90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <MX_GPIO_Init+0x1b0>)
 8002610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4837      	ldr	r0, [pc, #220]	; (80026fc <MX_GPIO_Init+0x1a8>)
 800261e:	f001 f977 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002622:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8002626:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4830      	ldr	r0, [pc, #192]	; (80026fc <MX_GPIO_Init+0x1a8>)
 800263c:	f001 f968 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002640:	f249 73fe 	movw	r3, #38910	; 0x97fe
 8002644:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002646:	2301      	movs	r3, #1
 8002648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265c:	f001 f958 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002660:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8002664:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002666:	2301      	movs	r3, #1
 8002668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4821      	ldr	r0, [pc, #132]	; (8002700 <MX_GPIO_Init+0x1ac>)
 800267a:	f001 f949 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800267e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <MX_GPIO_Init+0x1b0>)
 8002686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002688:	2301      	movs	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	481a      	ldr	r0, [pc, #104]	; (80026fc <MX_GPIO_Init+0x1a8>)
 8002694:	f001 f93c 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269c:	2301      	movs	r3, #1
 800269e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	4813      	ldr	r0, [pc, #76]	; (80026fc <MX_GPIO_Init+0x1a8>)
 80026b0:	f001 f92e 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_GPIO_Init+0x1b0>)
 80026bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026cc:	f001 f920 	bl	8003910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2017      	movs	r0, #23
 80026d6:	f000 fe46 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026da:	2017      	movs	r0, #23
 80026dc:	f000 fe5f 	bl	800339e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	2028      	movs	r0, #40	; 0x28
 80026e6:	f000 fe3e 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026ea:	2028      	movs	r0, #40	; 0x28
 80026ec:	f000 fe57 	bl	800339e <HAL_NVIC_EnableIRQ>

}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	48000800 	.word	0x48000800
 8002700:	48000400 	.word	0x48000400
 8002704:	10210000 	.word	0x10210000

08002708 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 30000; i++);			// about 3.7 ms delay
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e002      	b.n	800271e <HAL_GPIO_EXTI_Callback+0x16>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f247 522f 	movw	r2, #29999	; 0x752f
 8002724:	4293      	cmp	r3, r2
 8002726:	ddf7      	ble.n	8002718 <HAL_GPIO_EXTI_Callback+0x10>

	for(int i = 0; i < 100; i++)			// if none of EXTI are stable (noise) then return
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e032      	b.n	8002794 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) != 0)
 800272e:	2140      	movs	r1, #64	; 0x40
 8002730:	483e      	ldr	r0, [pc, #248]	; (800282c <HAL_GPIO_EXTI_Callback+0x124>)
 8002732:	f001 fa95 	bl	8003c60 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d028      	beq.n	800278e <HAL_GPIO_EXTI_Callback+0x86>
 800273c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002740:	483a      	ldr	r0, [pc, #232]	; (800282c <HAL_GPIO_EXTI_Callback+0x124>)
 8002742:	f001 fa8d 	bl	8003c60 <HAL_GPIO_ReadPin>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_GPIO_EXTI_Callback+0x86>
 800274c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002750:	4836      	ldr	r0, [pc, #216]	; (800282c <HAL_GPIO_EXTI_Callback+0x124>)
 8002752:	f001 fa85 	bl	8003c60 <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <HAL_GPIO_EXTI_Callback+0x86>
 800275c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f001 fa7c 	bl	8003c60 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00f      	beq.n	800278e <HAL_GPIO_EXTI_Callback+0x86>
		{
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_GPIO_EXTI_Callback+0x128>)
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	615a      	str	r2, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8002774:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <HAL_GPIO_EXTI_Callback+0x128>)
 8002776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277a:	615a      	str	r2, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800277c:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <HAL_GPIO_EXTI_Callback+0x128>)
 800277e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002782:	615a      	str	r2, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_GPIO_EXTI_Callback+0x128>)
 8002786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800278a:	615a      	str	r2, [r3, #20]
			return;
 800278c:	e04a      	b.n	8002824 <HAL_GPIO_EXTI_Callback+0x11c>
	for(int i = 0; i < 100; i++)			// if none of EXTI are stable (noise) then return
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3301      	adds	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b63      	cmp	r3, #99	; 0x63
 8002798:	ddc9      	ble.n	800272e <HAL_GPIO_EXTI_Callback+0x26>
		}

	}


	if(GPIO_Pin == GPIO_PIN_6)	// next case button pressed (PC6)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d115      	bne.n	80027cc <HAL_GPIO_EXTI_Callback+0xc4>
	{
		NextFrequency();
 80027a0:	f7ff fe9c 	bl	80024dc <NextFrequency>
		for(int i = 0; i < 100000; i++); 		// about 14 ms debounce
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_EXTI_Callback+0xa8>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_GPIO_EXTI_Callback+0x12c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	ddf8      	ble.n	80027aa <HAL_GPIO_EXTI_Callback+0xa2>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_GPIO_EXTI_Callback+0x128>)
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	615a      	str	r2, [r3, #20]
		TIM2->CNT = 0;							// avoid timer overflow when ARR register is changed
 80027be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027c2:	2200      	movs	r2, #0
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = 0;							// avoid timer overflow when ARR register is changed
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_GPIO_EXTI_Callback+0x130>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if(GPIO_Pin == GPIO_PIN_8)	// previous case down button pressed (PC8)
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d2:	d116      	bne.n	8002802 <HAL_GPIO_EXTI_Callback+0xfa>
	{
		PreviousFrequency();
 80027d4:	f7ff fea0 	bl	8002518 <PreviousFrequency>
		for(int i = 0; i < 100000; i++); // about 14 ms debounce
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0xdc>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3301      	adds	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <HAL_GPIO_EXTI_Callback+0x12c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	ddf8      	ble.n	80027de <HAL_GPIO_EXTI_Callback+0xd6>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_GPIO_EXTI_Callback+0x128>)
 80027ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f2:	615a      	str	r2, [r3, #20]
		TIM2->CNT = 0;							// avoid timer overflow when ARR register is changed
 80027f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027f8:	2200      	movs	r2, #0
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = 0;							// avoid timer overflow when ARR register is changed
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_GPIO_EXTI_Callback+0x130>)
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if(GPIO_Pin == GPIO_PIN_13)	// Frequency calibration button (PC13)
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	d102      	bne.n	8002810 <HAL_GPIO_EXTI_Callback+0x108>
	{
		FrequencyCalibrationModeFlag = true;
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_GPIO_EXTI_Callback+0x134>)
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
	}


	if(GPIO_Pin == GPIO_PIN_11)	// Pulse adjustment button (PA11)
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002816:	d102      	bne.n	800281e <HAL_GPIO_EXTI_Callback+0x116>
	{
		PulseOffsetAdjustmentModeFlag = true;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_GPIO_EXTI_Callback+0x138>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
	}


	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // clear interrupt manually again (it is done already in library function before this callback function but interrupt can occur again when this function is running).
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_GPIO_EXTI_Callback+0x128>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
}
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	48000800 	.word	0x48000800
 8002830:	40010400 	.word	0x40010400
 8002834:	0001869f 	.word	0x0001869f
 8002838:	40000400 	.word	0x40000400
 800283c:	20000921 	.word	0x20000921
 8002840:	20000920 	.word	0x20000920

08002844 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <MX_I2C3_Init+0x74>)
 800284a:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <MX_I2C3_Init+0x78>)
 800284c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <MX_I2C3_Init+0x7c>)
 8002852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <MX_I2C3_Init+0x74>)
 800285c:	2201      	movs	r2, #1
 800285e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <MX_I2C3_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_I2C3_Init+0x74>)
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800287e:	480e      	ldr	r0, [pc, #56]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002880:	f001 fa50 	bl	8003d24 <HAL_I2C_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800288a:	f000 f964 	bl	8002b56 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800288e:	2100      	movs	r1, #0
 8002890:	4809      	ldr	r0, [pc, #36]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002892:	f001 fdb3 	bl	80043fc <HAL_I2CEx_ConfigAnalogFilter>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800289c:	f000 f95b 	bl	8002b56 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028a0:	2100      	movs	r1, #0
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_I2C3_Init+0x74>)
 80028a4:	f001 fdf5 	bl	8004492 <HAL_I2CEx_ConfigDigitalFilter>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80028ae:	f000 f952 	bl	8002b56 <Error_Handler>
  }

}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000093c 	.word	0x2000093c
 80028bc:	40005c00 	.word	0x40005c00
 80028c0:	10909cec 	.word	0x10909cec

080028c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_I2C_MspInit+0x7c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d127      	bne.n	8002936 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_I2C_MspInit+0x80>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_I2C_MspInit+0x80>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_I2C_MspInit+0x80>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028fe:	2303      	movs	r3, #3
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002902:	2312      	movs	r3, #18
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002906:	2301      	movs	r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800290e:	2304      	movs	r3, #4
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	480b      	ldr	r0, [pc, #44]	; (8002948 <HAL_I2C_MspInit+0x84>)
 800291a:	f000 fff9 	bl	8003910 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_I2C_MspInit+0x80>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_I2C_MspInit+0x80>)
 8002924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002928:	6593      	str	r3, [r2, #88]	; 0x58
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_I2C_MspInit+0x80>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40005c00 	.word	0x40005c00
 8002944:	40021000 	.word	0x40021000
 8002948:	48000800 	.word	0x48000800

0800294c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002950:	f000 fb75 	bl	800303e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002954:	f000 f88c 	bl	8002a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002958:	f7ff fdfc 	bl	8002554 <MX_GPIO_Init>
  MX_TIM2_Init();
 800295c:	f000 f9e8 	bl	8002d30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002960:	f000 fa5e 	bl	8002e20 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002964:	f7ff ff6e 	bl	8002844 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  //snprintf(PC_GUI_message, 200, "System Clock = %lu\n",  SystemCoreClock);					// debug only
  //HAL_UART_Transmit(&huart2, (unsigned char*)PC_GUI_message, strlen(PC_GUI_message), 100);	// debug only

  HAL_Delay(300);
 8002968:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800296c:	f000 fbdc 	bl	8003128 <HAL_Delay>

  // start screen
  ssd1306_Init();
 8002970:	f004 f9bc 	bl	8006cec <ssd1306_Init>
  ssd1306_Fill(Black);
 8002974:	2000      	movs	r0, #0
 8002976:	f004 fa27 	bl	8006dc8 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 800297a:	2100      	movs	r1, #0
 800297c:	2000      	movs	r0, #0
 800297e:	f004 fb71 	bl	8007064 <ssd1306_SetCursor>
  ssd1306_WriteString("       TMD", Font_7x10, White);
 8002982:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <main+0xf0>)
 8002984:	2301      	movs	r3, #1
 8002986:	ca06      	ldmia	r2, {r1, r2}
 8002988:	482d      	ldr	r0, [pc, #180]	; (8002a40 <main+0xf4>)
 800298a:	f004 fb45 	bl	8007018 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 10);
 800298e:	210a      	movs	r1, #10
 8002990:	2000      	movs	r0, #0
 8002992:	f004 fb67 	bl	8007064 <ssd1306_SetCursor>
  ssd1306_WriteString("   Technologies", Font_7x10, White);
 8002996:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <main+0xf0>)
 8002998:	2301      	movs	r3, #1
 800299a:	ca06      	ldmia	r2, {r1, r2}
 800299c:	4829      	ldr	r0, [pc, #164]	; (8002a44 <main+0xf8>)
 800299e:	f004 fb3b 	bl	8007018 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 24);
 80029a2:	2118      	movs	r1, #24
 80029a4:	2000      	movs	r0, #0
 80029a6:	f004 fb5d 	bl	8007064 <ssd1306_SetCursor>
  ssd1306_WriteString("  PATTERN", Font_11x18, White);
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <main+0xfc>)
 80029ac:	2301      	movs	r3, #1
 80029ae:	ca06      	ldmia	r2, {r1, r2}
 80029b0:	4826      	ldr	r0, [pc, #152]	; (8002a4c <main+0x100>)
 80029b2:	f004 fb31 	bl	8007018 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 44);
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	2000      	movs	r0, #0
 80029ba:	f004 fb53 	bl	8007064 <ssd1306_SetCursor>
  ssd1306_WriteString(" GENERATOR", Font_11x18, White);
 80029be:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <main+0xfc>)
 80029c0:	2301      	movs	r3, #1
 80029c2:	ca06      	ldmia	r2, {r1, r2}
 80029c4:	4822      	ldr	r0, [pc, #136]	; (8002a50 <main+0x104>)
 80029c6:	f004 fb27 	bl	8007018 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80029ca:	f004 fa1f 	bl	8006e0c <ssd1306_UpdateScreen>
  HAL_Delay(2500);
 80029ce:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80029d2:	f000 fba9 	bl	8003128 <HAL_Delay>

  InitDataInFlashSettings();
 80029d6:	f7fe fe71 	bl	80016bc <InitDataInFlashSettings>
  FrequencyCalibrationFactor = ReadFrequencyCalibrationFactorFromFlash();
 80029da:	f7fe fec9 	bl	8001770 <ReadFrequencyCalibrationFactorFromFlash>
 80029de:	eef0 7a40 	vmov.f32	s15, s0
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <main+0x108>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
  PulseWidthOffset = ReadPulseWidthOffsetFromFlash();
 80029e8:	f7fe ff02 	bl	80017f0 <ReadPulseWidthOffsetFromFlash>
 80029ec:	eef0 7a40 	vmov.f32	s15, s0
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <main+0x10c>)
 80029f2:	edc3 7a00 	vstr	s15, [r3]
  InitPatternGenerator();
 80029f6:	f7ff fc03 	bl	8002200 <InitPatternGenerator>
  OLED_Update_Display_Case(OLEDDisplayState); //current case
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <main+0x110>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f98a 	bl	8000d18 <OLED_Update_Display_Case>


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a04:	2100      	movs	r1, #0
 8002a06:	4816      	ldr	r0, [pc, #88]	; (8002a60 <main+0x114>)
 8002a08:	f003 f9ae 	bl	8005d68 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002a0c:	4815      	ldr	r0, [pc, #84]	; (8002a64 <main+0x118>)
 8002a0e:	f003 f8ab 	bl	8005b68 <HAL_TIM_Base_Start_IT>
//	SystemCoreClockUpdate(); // Updates SystemCoreClock according to register settings. This function must be called if clock settings has been changed. Be aware that a value stored to SystemCoreClock during low level initialisation (i.e. SystemInit()) might get overwritten by C library startup code and/or .bss section initialization. Thus its highly recommended to call SystemCoreClockUpdate at the beginning of the user main() routine.
//	SysTick_Config(SystemCoreClock/1000); // SystemCoreClock - global variable that contains the system frequency. Configure SysTick to generate an interrupt timing (it will produce the same interval for any clock speed). SysTick can be used for timing if it is not used for operating system.  /1000 gives SysTick every 1ms, /100 gives SysTick every 10 ms

  while (1)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a12:	2120      	movs	r1, #32
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f001 f952 	bl	8003cc0 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002a1c:	2064      	movs	r0, #100	; 0x64
 8002a1e:	f000 fb83 	bl	8003128 <HAL_Delay>

    if(FrequencyCalibrationModeFlag)
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <main+0x11c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <main+0xe2>
    {
    	Freq_Calibration_Mode();
 8002a2a:	f7fe ffc9 	bl	80019c0 <Freq_Calibration_Mode>
    }

    if(PulseOffsetAdjustmentModeFlag)
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <main+0x120>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ed      	beq.n	8002a12 <main+0xc6>
    {
    	Pulse_Adjustment_Mode();
 8002a36:	f7ff f987 	bl	8001d48 <Pulse_Adjustment_Mode>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a3a:	e7ea      	b.n	8002a12 <main+0xc6>
 8002a3c:	200002e0 	.word	0x200002e0
 8002a40:	080095d8 	.word	0x080095d8
 8002a44:	080095e4 	.word	0x080095e4
 8002a48:	200002e8 	.word	0x200002e8
 8002a4c:	080095f4 	.word	0x080095f4
 8002a50:	08009600 	.word	0x08009600
 8002a54:	20000924 	.word	0x20000924
 8002a58:	20000934 	.word	0x20000934
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	200009d4 	.word	0x200009d4
 8002a64:	20000988 	.word	0x20000988
 8002a68:	20000921 	.word	0x20000921
 8002a6c:	20000920 	.word	0x20000920

08002a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0b8      	sub	sp, #224	; 0xe0
 8002a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a7a:	2244      	movs	r2, #68	; 0x44
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 fb4b 	bl	800711a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a94:	463b      	mov	r3, r7
 8002a96:	2288      	movs	r2, #136	; 0x88
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 fb3d 	bl	800711a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002ac0:	2314      	movs	r3, #20
 8002ac2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 fd89 	bl	80045f4 <HAL_RCC_OscConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002ae8:	f000 f835 	bl	8002b56 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aec:	230f      	movs	r3, #15
 8002aee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af2:	2303      	movs	r3, #3
 8002af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b0a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002b0e:	2104      	movs	r1, #4
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 f955 	bl	8004dc0 <HAL_RCC_ClockConfig>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002b1c:	f000 f81b 	bl	8002b56 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b24:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002b26:	2300      	movs	r3, #0
 8002b28:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 fb13 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002b38:	f000 f80d 	bl	8002b56 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b40:	f001 fd02 	bl	8004548 <HAL_PWREx_ControlVoltageScaling>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002b4a:	f000 f804 	bl	8002b56 <Error_Handler>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	37e0      	adds	r7, #224	; 0xe0
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_MspInit+0x64>)
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_MspInit+0x64>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6613      	str	r3, [r2, #96]	; 0x60
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_MspInit+0x64>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_MspInit+0x64>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_MspInit+0x64>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_MspInit+0x64>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	f06f 0004 	mvn.w	r0, #4
 8002ba2:	f000 fbe0 	bl	8003366 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2101      	movs	r1, #1
 8002baa:	f06f 0003 	mvn.w	r0, #3
 8002bae:	f000 fbda 	bl	8003366 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	f06f 0001 	mvn.w	r0, #1
 8002bba:	f000 fbd4 	bl	8003366 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler+0x4>

08002be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <BusFault_Handler+0x4>

08002bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <UsageFault_Handler+0x4>

08002bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 fa62 	bl	80030e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c2c:	2040      	movs	r0, #64	; 0x40
 8002c2e:	f001 f861 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c36:	f001 f85d 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002c42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c46:	f001 f855 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c4e:	f001 f851 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <_sbrk+0x5c>)
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <_sbrk+0x60>)
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <_sbrk+0x64>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <_sbrk+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c88:	f004 fa04 	bl	8007094 <__errno>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	230c      	movs	r3, #12
 8002c90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e009      	b.n	8002cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <_sbrk+0x64>)
 8002ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20018000 	.word	0x20018000
 8002cb8:	00000400 	.word	0x00000400
 8002cbc:	2000050c 	.word	0x2000050c
 8002cc0:	20000a28 	.word	0x20000a28

08002cc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <SystemInit+0x64>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <SystemInit+0x64>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <SystemInit+0x68>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <SystemInit+0x68>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <SystemInit+0x68>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <SystemInit+0x68>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <SystemInit+0x68>)
 8002cf0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002cf4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <SystemInit+0x68>)
 8002cfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <SystemInit+0x68>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <SystemInit+0x68>)
 8002d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <SystemInit+0x68>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <SystemInit+0x64>)
 8002d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d1a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00
 8002d2c:	40021000 	.word	0x40021000

08002d30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	; 0x38
 8002d34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d50:	463b      	mov	r3, r7
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
 8002d5e:	615a      	str	r2, [r3, #20]
 8002d60:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002d64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 94117;
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002d78:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <MX_TIM2_Init+0xec>)
 8002d7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7c:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d88:	4823      	ldr	r0, [pc, #140]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002d8a:	f002 fe95 	bl	8005ab8 <HAL_TIM_Base_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d94:	f7ff fedf 	bl	8002b56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da2:	4619      	mov	r1, r3
 8002da4:	481c      	ldr	r0, [pc, #112]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002da6:	f003 f9f5 	bl	8006194 <HAL_TIM_ConfigClockSource>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002db0:	f7ff fed1 	bl	8002b56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002db4:	4818      	ldr	r0, [pc, #96]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002db6:	f002 ff76 	bl	8005ca6 <HAL_TIM_PWM_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002dc0:	f7ff fec9 	bl	8002b56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4811      	ldr	r0, [pc, #68]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002dd4:	f003 fec8 	bl	8006b68 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002dde:	f7ff feba 	bl	8002b56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de2:	2360      	movs	r3, #96	; 0x60
 8002de4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1600;
 8002de6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002dea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002df0:	2304      	movs	r3, #4
 8002df2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df4:	463b      	mov	r3, r7
 8002df6:	2200      	movs	r2, #0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4807      	ldr	r0, [pc, #28]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002dfc:	f003 f8ba 	bl	8005f74 <HAL_TIM_PWM_ConfigChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e06:	f7ff fea6 	bl	8002b56 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002e0a:	4803      	ldr	r0, [pc, #12]	; (8002e18 <MX_TIM2_Init+0xe8>)
 8002e0c:	f000 f8ba 	bl	8002f84 <HAL_TIM_MspPostInit>

}
 8002e10:	bf00      	nop
 8002e12:	3738      	adds	r7, #56	; 0x38
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200009d4 	.word	0x200009d4
 8002e1c:	00016fa5 	.word	0x00016fa5

08002e20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e40:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <MX_TIM3_Init+0xa4>)
 8002e42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e52:	220e      	movs	r2, #14
 8002e54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e62:	4817      	ldr	r0, [pc, #92]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e64:	f002 fe28 	bl	8005ab8 <HAL_TIM_Base_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e6e:	f7ff fe72 	bl	8002b56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e76:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480d      	ldr	r0, [pc, #52]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002e8c:	f003 f982 	bl	8006194 <HAL_TIM_ConfigClockSource>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002e96:	f7ff fe5e 	bl	8002b56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4806      	ldr	r0, [pc, #24]	; (8002ec0 <MX_TIM3_Init+0xa0>)
 8002ea8:	f003 fe5e 	bl	8006b68 <HAL_TIMEx_MasterConfigSynchronization>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002eb2:	f7ff fe50 	bl	8002b56 <Error_Handler>
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000988 	.word	0x20000988
 8002ec4:	40000400 	.word	0x40000400

08002ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f02:	e034      	b.n	8002f6e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIM_Base_MspInit+0xb4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d12f      	bne.n	8002f6e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6593      	str	r3, [r2, #88]	; 0x58
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_TIM_Base_MspInit+0xb0>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	4619      	mov	r1, r3
 8002f58:	4809      	ldr	r0, [pc, #36]	; (8002f80 <HAL_TIM_Base_MspInit+0xb8>)
 8002f5a:	f000 fcd9 	bl	8003910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	201d      	movs	r0, #29
 8002f64:	f000 f9ff 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f68:	201d      	movs	r0, #29
 8002f6a:	f000 fa18 	bl	800339e <HAL_NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	48000c00 	.word	0x48000c00

08002f84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_TIM_MspPostInit+0x64>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <HAL_TIM_MspPostInit+0x64>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_TIM_MspPostInit+0x64>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 030c 	add.w	r3, r7, #12
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fdc:	f000 fc98 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fe0:	bf00      	nop
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003024 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ff0:	f7ff fe68 	bl	8002cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ff4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ff6:	e003      	b.n	8003000 <LoopCopyDataInit>

08002ff8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ffa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ffc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ffe:	3104      	adds	r1, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003000:	480a      	ldr	r0, [pc, #40]	; (800302c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003004:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003006:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003008:	d3f6      	bcc.n	8002ff8 <CopyDataInit>
	ldr	r2, =_sbss
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <LoopForever+0x12>)
	b	LoopFillZerobss
 800300c:	e002      	b.n	8003014 <LoopFillZerobss>

0800300e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800300e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003010:	f842 3b04 	str.w	r3, [r2], #4

08003014 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <LoopForever+0x16>)
	cmp	r2, r3
 8003016:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003018:	d3f9      	bcc.n	800300e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301a:	f004 f841 	bl	80070a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800301e:	f7ff fc95 	bl	800294c <main>

08003022 <LoopForever>:

LoopForever:
    b LoopForever
 8003022:	e7fe      	b.n	8003022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003024:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003028:	0800c0c8 	.word	0x0800c0c8
	ldr	r0, =_sdata
 800302c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003030:	200004c8 	.word	0x200004c8
	ldr	r2, =_sbss
 8003034:	200004c8 	.word	0x200004c8
	ldr	r3, = _ebss
 8003038:	20000a28 	.word	0x20000a28

0800303c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC1_2_IRQHandler>

0800303e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f000 f981 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800304e:	2001      	movs	r0, #1
 8003050:	f000 f80e 	bl	8003070 <HAL_InitTick>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	71fb      	strb	r3, [r7, #7]
 800305e:	e001      	b.n	8003064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003060:	f7ff fd80 	bl	8002b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003064:	79fb      	ldrb	r3, [r7, #7]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_InitTick+0x6c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d023      	beq.n	80030cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003084:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_InitTick+0x70>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_InitTick+0x6c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f99b 	bl	80033d6 <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d809      	bhi.n	80030c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ac:	2200      	movs	r2, #0
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	f000 f957 	bl	8003366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_InitTick+0x74>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e007      	b.n	80030d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	e004      	b.n	80030d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e001      	b.n	80030d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200002bc 	.word	0x200002bc
 80030e0:	200002b4 	.word	0x200002b4
 80030e4:	200002b8 	.word	0x200002b8

080030e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x20>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x24>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_IncTick+0x24>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200002bc 	.word	0x200002bc
 800310c:	20000a20 	.word	0x20000a20

08003110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return uwTick;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_GetTick+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000a20 	.word	0x20000a20

08003128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff ffee 	bl	8003110 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d005      	beq.n	800314e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_Delay+0x40>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800314e:	bf00      	nop
 8003150:	f7ff ffde 	bl	8003110 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d8f7      	bhi.n	8003150 <HAL_Delay+0x28>
  {
  }
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200002bc 	.word	0x200002bc

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db0b      	blt.n	80031fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4907      	ldr	r1, [pc, #28]	; (8003208 <__NVIC_EnableIRQ+0x38>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100

0800320c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db10      	blt.n	8003240 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4909      	ldr	r1, [pc, #36]	; (800324c <__NVIC_DisableIRQ+0x40>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	3320      	adds	r3, #32
 8003234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800323c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	; 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7ff ff8e 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff07 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff1c 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff8e 	bl	80032a4 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5d 	bl	8003250 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff0f 	bl	80031d0 <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff1f 	bl	800320c <__NVIC_DisableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ff94 	bl	800330c <SysTick_Config>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003402:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <HAL_FLASH_Program+0xd0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_FLASH_Program+0x1e>
 800340a:	2302      	movs	r3, #2
 800340c:	e053      	b.n	80034b6 <HAL_FLASH_Program+0xc6>
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_FLASH_Program+0xd0>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003414:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003418:	f000 f888 	bl	800352c <FLASH_WaitForLastOperation>
 800341c:	4603      	mov	r3, r0
 800341e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d143      	bne.n	80034ae <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_FLASH_Program+0xd0>)
 8003428:	2200      	movs	r2, #0
 800342a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_FLASH_Program+0xd4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003438:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_FLASH_Program+0xd4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_FLASH_Program+0xd4>)
 800343e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003442:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003444:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <HAL_FLASH_Program+0xd0>)
 8003446:	2202      	movs	r2, #2
 8003448:	771a      	strb	r2, [r3, #28]
 800344a:	e002      	b.n	8003452 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_FLASH_Program+0xd0>)
 800344e:	2200      	movs	r2, #0
 8003450:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800345c:	68b8      	ldr	r0, [r7, #8]
 800345e:	f000 f8bb 	bl	80035d8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003462:	2301      	movs	r3, #1
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e010      	b.n	800348a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d002      	beq.n	8003474 <HAL_FLASH_Program+0x84>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d10a      	bne.n	800348a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f000 f8d1 	bl	8003620 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d102      	bne.n	800348a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003484:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003488:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800348a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800348e:	f000 f84d 	bl	800352c <FLASH_WaitForLastOperation>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d006      	beq.n	80034aa <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_FLASH_Program+0xd4>)
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	4907      	ldr	r1, [pc, #28]	; (80034c4 <HAL_FLASH_Program+0xd4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80034aa:	f000 f9ed 	bl	8003888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_FLASH_Program+0xd0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]

  return status;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200002c0 	.word	0x200002c0
 80034c4:	40022000 	.word	0x40022000

080034c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da0b      	bge.n	80034f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_FLASH_Unlock+0x3c>)
 80034de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_FLASH_Unlock+0x40>)
 80034e4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_FLASH_Unlock+0x38>)
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	da01      	bge.n	80034f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034f2:	79fb      	ldrb	r3, [r7, #7]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40022000 	.word	0x40022000
 8003504:	45670123 	.word	0x45670123
 8003508:	cdef89ab 	.word	0xcdef89ab

0800350c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_FLASH_Lock+0x1c>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_FLASH_Lock+0x1c>)
 8003516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800351a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40022000 	.word	0x40022000

0800352c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003534:	f7ff fdec 	bl	8003110 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800353a:	e00d      	b.n	8003558 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d009      	beq.n	8003558 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003544:	f7ff fde4 	bl	8003110 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d801      	bhi.n	8003558 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e037      	b.n	80035c8 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <FLASH_WaitForLastOperation+0xa4>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1eb      	bne.n	800353c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <FLASH_WaitForLastOperation+0xa4>)
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01e      	beq.n	80035b4 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <FLASH_WaitForLastOperation+0xa8>)
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4313      	orrs	r3, r2
 800357e:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <FLASH_WaitForLastOperation+0xa8>)
 8003580:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <FLASH_WaitForLastOperation+0x70>
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <FLASH_WaitForLastOperation+0xa4>)
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003596:	490e      	ldr	r1, [pc, #56]	; (80035d0 <FLASH_WaitForLastOperation+0xa4>)
 8003598:	4313      	orrs	r3, r2
 800359a:	618b      	str	r3, [r1, #24]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <FLASH_WaitForLastOperation+0x84>
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <FLASH_WaitForLastOperation+0xa4>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035ae:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e009      	b.n	80035c8 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <FLASH_WaitForLastOperation+0xa4>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <FLASH_WaitForLastOperation+0xa4>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40022000 	.word	0x40022000
 80035d4:	200002c0 	.word	0x200002c0

080035d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80035d8:	b490      	push	{r4, r7}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <FLASH_Program_DoubleWord+0x44>)
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	4a0c      	ldr	r2, [pc, #48]	; (800361c <FLASH_Program_DoubleWord+0x44>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80035fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	0013      	movs	r3, r2
 8003608:	2400      	movs	r4, #0
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	3204      	adds	r2, #4
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bc90      	pop	{r4, r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40022000 	.word	0x40022000

08003620 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800362a:	2340      	movs	r3, #64	; 0x40
 800362c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <FLASH_Program_Fast+0x64>)
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <FLASH_Program_Fast+0x64>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003640:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003642:	f3ef 8310 	mrs	r3, PRIMASK
 8003646:	60fb      	str	r3, [r7, #12]
  return(result);
 8003648:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800364a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800364c:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3304      	adds	r3, #4
 800365a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3304      	adds	r3, #4
 8003660:	617b      	str	r3, [r7, #20]
    row_index--;
 8003662:	7ffb      	ldrb	r3, [r7, #31]
 8003664:	3b01      	subs	r3, #1
 8003666:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003668:	7ffb      	ldrb	r3, [r7, #31]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ef      	bne.n	800364e <FLASH_Program_Fast+0x2e>
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003678:	bf00      	nop
 800367a:	3724      	adds	r7, #36	; 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40022000 	.word	0x40022000

08003688 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003692:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_FLASHEx_Erase+0x16>
 800369a:	2302      	movs	r3, #2
 800369c:	e08d      	b.n	80037ba <HAL_FLASHEx_Erase+0x132>
 800369e:	4b49      	ldr	r3, [pc, #292]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036a8:	f7ff ff40 	bl	800352c <FLASH_WaitForLastOperation>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d17d      	bne.n	80037b2 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80036bc:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d019      	beq.n	80036fc <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3e      	ldr	r2, [pc, #248]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 80036ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036d2:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036d4:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a38      	ldr	r2, [pc, #224]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 80036e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80036ec:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 80036ee:	2203      	movs	r2, #3
 80036f0:	771a      	strb	r2, [r3, #28]
 80036f2:	e016      	b.n	8003722 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	771a      	strb	r2, [r3, #28]
 80036fa:	e012      	b.n	8003722 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036fc:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2e      	ldr	r2, [pc, #184]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 800370e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003712:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 8003716:	2202      	movs	r2, #2
 8003718:	771a      	strb	r2, [r3, #28]
 800371a:	e002      	b.n	8003722 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800371c:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 800371e:	2200      	movs	r2, #0
 8003720:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d113      	bne.n	8003752 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f84c 	bl	80037cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003738:	f7ff fef8 	bl	800352c <FLASH_WaitForLastOperation>
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 8003746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6153      	str	r3, [r2, #20]
 8003750:	e02d      	b.n	80037ae <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	e01d      	b.n	800379e <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4619      	mov	r1, r3
 8003768:	68b8      	ldr	r0, [r7, #8]
 800376a:	f000 f857 	bl	800381c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800376e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003772:	f7ff fedb 	bl	800352c <FLASH_WaitForLastOperation>
 8003776:	4603      	mov	r3, r0
 8003778:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <HAL_FLASHEx_Erase+0x140>)
 8003780:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003784:	f023 0302 	bic.w	r3, r3, #2
 8003788:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	601a      	str	r2, [r3, #0]
          break;
 8003796:	e00a      	b.n	80037ae <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d3d9      	bcc.n	8003762 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80037ae:	f000 f86b 	bl	8003888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037b2:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_FLASHEx_Erase+0x13c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]

  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200002c0 	.word	0x200002c0
 80037c8:	40022000 	.word	0x40022000

080037cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <FLASH_MassErase+0x4c>)
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <FLASH_MassErase+0x4c>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <FLASH_MassErase+0x4c>)
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	4a07      	ldr	r2, [pc, #28]	; (8003818 <FLASH_MassErase+0x4c>)
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <FLASH_MassErase+0x4c>)
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <FLASH_MassErase+0x4c>)
 8003806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380a:	6153      	str	r3, [r2, #20]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40022000 	.word	0x40022000

0800381c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <FLASH_PageErase+0x68>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	4a13      	ldr	r2, [pc, #76]	; (8003884 <FLASH_PageErase+0x68>)
 8003836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383a:	6153      	str	r3, [r2, #20]
 800383c:	e005      	b.n	800384a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <FLASH_PageErase+0x68>)
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	4a10      	ldr	r2, [pc, #64]	; (8003884 <FLASH_PageErase+0x68>)
 8003844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003848:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <FLASH_PageErase+0x68>)
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800385a:	490a      	ldr	r1, [pc, #40]	; (8003884 <FLASH_PageErase+0x68>)
 800385c:	4313      	orrs	r3, r2
 800385e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <FLASH_PageErase+0x68>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	4a07      	ldr	r2, [pc, #28]	; (8003884 <FLASH_PageErase+0x68>)
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <FLASH_PageErase+0x68>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <FLASH_PageErase+0x68>)
 8003872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003876:	6153      	str	r3, [r2, #20]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40022000 	.word	0x40022000

08003888 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800388e:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <FLASH_FlushCaches+0x80>)
 8003890:	7f1b      	ldrb	r3, [r3, #28]
 8003892:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d002      	beq.n	80038a0 <FLASH_FlushCaches+0x18>
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d111      	bne.n	80038c4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <FLASH_FlushCaches+0x84>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <FLASH_FlushCaches+0x84>)
 80038a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <FLASH_FlushCaches+0x84>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <FLASH_FlushCaches+0x84>)
 80038b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <FLASH_FlushCaches+0x84>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <FLASH_FlushCaches+0x84>)
 80038be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d002      	beq.n	80038d0 <FLASH_FlushCaches+0x48>
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d111      	bne.n	80038f4 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <FLASH_FlushCaches+0x84>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <FLASH_FlushCaches+0x84>)
 80038d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <FLASH_FlushCaches+0x84>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <FLASH_FlushCaches+0x84>)
 80038e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <FLASH_FlushCaches+0x84>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <FLASH_FlushCaches+0x84>)
 80038ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <FLASH_FlushCaches+0x80>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	771a      	strb	r2, [r3, #28]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	200002c0 	.word	0x200002c0
 800390c:	40022000 	.word	0x40022000

08003910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800391e:	e17f      	b.n	8003c20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8171 	beq.w	8003c1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d00b      	beq.n	8003958 <HAL_GPIO_Init+0x48>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d007      	beq.n	8003958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800394c:	2b11      	cmp	r3, #17
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b12      	cmp	r3, #18
 8003956:	d130      	bne.n	80039ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800398e:	2201      	movs	r2, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f003 0201 	and.w	r2, r3, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d118      	bne.n	80039f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039cc:	2201      	movs	r2, #1
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	f003 0201 	and.w	r2, r3, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	2203      	movs	r2, #3
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x128>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b12      	cmp	r3, #18
 8003a36:	d123      	bne.n	8003a80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	220f      	movs	r2, #15
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	6939      	ldr	r1, [r7, #16]
 8003a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80ac 	beq.w	8003c1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac2:	4b5e      	ldr	r3, [pc, #376]	; (8003c3c <HAL_GPIO_Init+0x32c>)
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac6:	4a5d      	ldr	r2, [pc, #372]	; (8003c3c <HAL_GPIO_Init+0x32c>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6613      	str	r3, [r2, #96]	; 0x60
 8003ace:	4b5b      	ldr	r3, [pc, #364]	; (8003c3c <HAL_GPIO_Init+0x32c>)
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ada:	4a59      	ldr	r2, [pc, #356]	; (8003c40 <HAL_GPIO_Init+0x330>)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	220f      	movs	r2, #15
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b04:	d025      	beq.n	8003b52 <HAL_GPIO_Init+0x242>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4e      	ldr	r2, [pc, #312]	; (8003c44 <HAL_GPIO_Init+0x334>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01f      	beq.n	8003b4e <HAL_GPIO_Init+0x23e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4d      	ldr	r2, [pc, #308]	; (8003c48 <HAL_GPIO_Init+0x338>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d019      	beq.n	8003b4a <HAL_GPIO_Init+0x23a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4c      	ldr	r2, [pc, #304]	; (8003c4c <HAL_GPIO_Init+0x33c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_GPIO_Init+0x236>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4b      	ldr	r2, [pc, #300]	; (8003c50 <HAL_GPIO_Init+0x340>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00d      	beq.n	8003b42 <HAL_GPIO_Init+0x232>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4a      	ldr	r2, [pc, #296]	; (8003c54 <HAL_GPIO_Init+0x344>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <HAL_GPIO_Init+0x22e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <HAL_GPIO_Init+0x348>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_GPIO_Init+0x22a>
 8003b36:	2306      	movs	r3, #6
 8003b38:	e00c      	b.n	8003b54 <HAL_GPIO_Init+0x244>
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	e00a      	b.n	8003b54 <HAL_GPIO_Init+0x244>
 8003b3e:	2305      	movs	r3, #5
 8003b40:	e008      	b.n	8003b54 <HAL_GPIO_Init+0x244>
 8003b42:	2304      	movs	r3, #4
 8003b44:	e006      	b.n	8003b54 <HAL_GPIO_Init+0x244>
 8003b46:	2303      	movs	r3, #3
 8003b48:	e004      	b.n	8003b54 <HAL_GPIO_Init+0x244>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e002      	b.n	8003b54 <HAL_GPIO_Init+0x244>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_GPIO_Init+0x244>
 8003b52:	2300      	movs	r3, #0
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	f002 0203 	and.w	r2, r2, #3
 8003b5a:	0092      	lsls	r2, r2, #2
 8003b5c:	4093      	lsls	r3, r2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b64:	4936      	ldr	r1, [pc, #216]	; (8003c40 <HAL_GPIO_Init+0x330>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003b9c:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bc6:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c14:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f47f ae78 	bne.w	8003920 <HAL_GPIO_Init+0x10>
  }
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40010000 	.word	0x40010000
 8003c44:	48000400 	.word	0x48000400
 8003c48:	48000800 	.word	0x48000800
 8003c4c:	48000c00 	.word	0x48000c00
 8003c50:	48001000 	.word	0x48001000
 8003c54:	48001400 	.word	0x48001400
 8003c58:	48001800 	.word	0x48001800
 8003c5c:	40010400 	.word	0x40010400

08003c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e001      	b.n	8003c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	041a      	lsls	r2, r3, #16
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	43d9      	mvns	r1, r3
 8003cde:	887b      	ldrh	r3, [r7, #2]
 8003ce0:	400b      	ands	r3, r1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fcf8 	bl	8002708 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40010400 	.word	0x40010400

08003d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e081      	b.n	8003e3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe fdba 	bl	80028c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	e006      	b.n	8003dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d104      	bne.n	8003dbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	ea42 0103 	orr.w	r1, r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	f040 80f9 	bne.w	800405e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_I2C_Mem_Write+0x34>
 8003e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0ed      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2C_Mem_Write+0x4e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0e6      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e9a:	f7ff f939 	bl	8003110 <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2319      	movs	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f955 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d1      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2240      	movs	r2, #64	; 0x40
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ee4:	88f8      	ldrh	r0, [r7, #6]
 8003ee6:	893a      	ldrh	r2, [r7, #8]
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f8b9 	bl	800406c <I2C_RequestMemoryWrite>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0a9      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2bff      	cmp	r3, #255	; 0xff
 8003f14:	d90e      	bls.n	8003f34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	8979      	ldrh	r1, [r7, #10]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fa37 	bl	80043a0 <I2C_TransferConfig>
 8003f32:	e00f      	b.n	8003f54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	8979      	ldrh	r1, [r7, #10]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fa26 	bl	80043a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f93f 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e07b      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d034      	beq.n	800400c <HAL_I2C_Mem_Write+0x1c8>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d130      	bne.n	800400c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f8d1 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e04d      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2bff      	cmp	r3, #255	; 0xff
 8003fcc:	d90e      	bls.n	8003fec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	22ff      	movs	r2, #255	; 0xff
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f9db 	bl	80043a0 <I2C_TransferConfig>
 8003fea:	e00f      	b.n	800400c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f9ca 	bl	80043a0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d19e      	bne.n	8003f54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f91e 	bl	800425c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e01a      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2220      	movs	r2, #32
 8004030:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_I2C_Mem_Write+0x224>)
 800403e:	400b      	ands	r3, r1
 8004040:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	fe00e800 	.word	0xfe00e800

0800406c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	8979      	ldrh	r1, [r7, #10]
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <I2C_RequestMemoryWrite+0xa4>)
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f983 	bl	80043a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f89c 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e02c      	b.n	8004108 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
 80040be:	e015      	b.n	80040ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f882 	bl	80041dc <I2C_WaitOnTXISFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e012      	b.n	8004108 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040e2:	893b      	ldrh	r3, [r7, #8]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f830 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	80002000 	.word	0x80002000

08004114 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d103      	bne.n	8004132 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d007      	beq.n	8004150 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	619a      	str	r2, [r3, #24]
  }
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416c:	e022      	b.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d01e      	beq.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7fe ffcb 	bl	8003110 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d113      	bne.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e00f      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d0cd      	beq.n	800416e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041e8:	e02c      	b.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f870 	bl	80042d4 <I2C_IsAcknowledgeFailed>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e02a      	b.n	8004254 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d01e      	beq.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fe ff83 	bl	8003110 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d113      	bne.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d1cb      	bne.n	80041ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004268:	e028      	b.n	80042bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f830 	bl	80042d4 <I2C_IsAcknowledgeFailed>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e026      	b.n	80042cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fe ff47 	bl	8003110 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e007      	b.n	80042cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d1cf      	bne.n	800426a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d151      	bne.n	8004392 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ee:	e022      	b.n	8004336 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d01e      	beq.n	8004336 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f8:	f7fe ff0a 	bl	8003110 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <I2C_IsAcknowledgeFailed+0x3a>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d113      	bne.n	8004336 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e02e      	b.n	8004394 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b20      	cmp	r3, #32
 8004342:	d1d5      	bne.n	80042f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2210      	movs	r2, #16
 800434a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2220      	movs	r2, #32
 8004352:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff fedd 	bl	8004114 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b0d      	ldr	r3, [pc, #52]	; (800439c <I2C_IsAcknowledgeFailed+0xc8>)
 8004366:	400b      	ands	r3, r1
 8004368:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f043 0204 	orr.w	r2, r3, #4
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	817b      	strh	r3, [r7, #10]
 80043ae:	4613      	mov	r3, r2
 80043b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	0d5b      	lsrs	r3, r3, #21
 80043bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <I2C_TransferConfig+0x58>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	43db      	mvns	r3, r3
 80043c6:	ea02 0103 	and.w	r1, r2, r3
 80043ca:	897b      	ldrh	r3, [r7, #10]
 80043cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043d0:	7a7b      	ldrb	r3, [r7, #9]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	431a      	orrs	r2, r3
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	03ff63ff 	.word	0x03ff63ff

080043fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b20      	cmp	r3, #32
 8004410:	d138      	bne.n	8004484 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800441c:	2302      	movs	r3, #2
 800441e:	e032      	b.n	8004486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800444e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d139      	bne.n	800451c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e033      	b.n	800451e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2224      	movs	r2, #36	; 0x24
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_PWREx_GetVoltageRange+0x18>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40007000 	.word	0x40007000

08004548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004556:	d130      	bne.n	80045ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004558:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004564:	d038      	beq.n	80045d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004574:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2232      	movs	r2, #50	; 0x32
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0c9b      	lsrs	r3, r3, #18
 8004588:	3301      	adds	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800458c:	e002      	b.n	8004594 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b01      	subs	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004594:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d102      	bne.n	80045a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f2      	bne.n	800458e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b4:	d110      	bne.n	80045d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e00f      	b.n	80045da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c6:	d007      	beq.n	80045d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045c8:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045d0:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40007000 	.word	0x40007000
 80045ec:	200002b4 	.word	0x200002b4
 80045f0:	431bde83 	.word	0x431bde83

080045f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e3d4      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004606:	4ba1      	ldr	r3, [pc, #644]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004610:	4b9e      	ldr	r3, [pc, #632]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80e4 	beq.w	80047f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_RCC_OscConfig+0x4a>
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	f040 808b 	bne.w	800474c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b01      	cmp	r3, #1
 800463a:	f040 8087 	bne.w	800474c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800463e:	4b93      	ldr	r3, [pc, #588]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x62>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e3ac      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1a      	ldr	r2, [r3, #32]
 800465a:	4b8c      	ldr	r3, [pc, #560]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <HAL_RCC_OscConfig+0x7c>
 8004666:	4b89      	ldr	r3, [pc, #548]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466e:	e005      	b.n	800467c <HAL_RCC_OscConfig+0x88>
 8004670:	4b86      	ldr	r3, [pc, #536]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467c:	4293      	cmp	r3, r2
 800467e:	d223      	bcs.n	80046c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fd07 	bl	8005098 <RCC_SetFlashLatencyFromMSIRange>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e38d      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004694:	4b7d      	ldr	r3, [pc, #500]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a7c      	ldr	r2, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800469a:	f043 0308 	orr.w	r3, r3, #8
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b7a      	ldr	r3, [pc, #488]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	4977      	ldr	r1, [pc, #476]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b2:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	4972      	ldr	r1, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
 80046c6:	e025      	b.n	8004714 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c8:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6f      	ldr	r2, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046ce:	f043 0308 	orr.w	r3, r3, #8
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b6d      	ldr	r3, [pc, #436]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	496a      	ldr	r1, [pc, #424]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e6:	4b69      	ldr	r3, [pc, #420]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	4965      	ldr	r1, [pc, #404]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fcc7 	bl	8005098 <RCC_SetFlashLatencyFromMSIRange>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e34d      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004714:	f000 fc36 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004718:	4601      	mov	r1, r0
 800471a:	4b5c      	ldr	r3, [pc, #368]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	4a5a      	ldr	r2, [pc, #360]	; (8004890 <HAL_RCC_OscConfig+0x29c>)
 8004726:	5cd3      	ldrb	r3, [r2, r3]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	fa21 f303 	lsr.w	r3, r1, r3
 8004730:	4a58      	ldr	r2, [pc, #352]	; (8004894 <HAL_RCC_OscConfig+0x2a0>)
 8004732:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004734:	4b58      	ldr	r3, [pc, #352]	; (8004898 <HAL_RCC_OscConfig+0x2a4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fc99 	bl	8003070 <HAL_InitTick>
 800473e:	4603      	mov	r3, r0
 8004740:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d052      	beq.n	80047ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	e331      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d032      	beq.n	80047ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004754:	4b4d      	ldr	r3, [pc, #308]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a4c      	ldr	r2, [pc, #304]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004760:	f7fe fcd6 	bl	8003110 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004768:	f7fe fcd2 	bl	8003110 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e31a      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477a:	4b44      	ldr	r3, [pc, #272]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004786:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a40      	ldr	r2, [pc, #256]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b3e      	ldr	r3, [pc, #248]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	493b      	ldr	r1, [pc, #236]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047a4:	4b39      	ldr	r3, [pc, #228]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	4936      	ldr	r1, [pc, #216]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
 80047b8:	e01a      	b.n	80047f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047ba:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a33      	ldr	r2, [pc, #204]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047c6:	f7fe fca3 	bl	8003110 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047ce:	f7fe fc9f 	bl	8003110 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e2e7      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047e0:	4b2a      	ldr	r3, [pc, #168]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x1da>
 80047ec:	e000      	b.n	80047f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d074      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d005      	beq.n	800480e <HAL_RCC_OscConfig+0x21a>
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d10e      	bne.n	8004826 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d10b      	bne.n	8004826 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480e:	4b1f      	ldr	r3, [pc, #124]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d064      	beq.n	80048e4 <HAL_RCC_OscConfig+0x2f0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d160      	bne.n	80048e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e2c4      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x24a>
 8004830:	4b16      	ldr	r3, [pc, #88]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a15      	ldr	r2, [pc, #84]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e01d      	b.n	800487a <HAL_RCC_OscConfig+0x286>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004846:	d10c      	bne.n	8004862 <HAL_RCC_OscConfig+0x26e>
 8004848:	4b10      	ldr	r3, [pc, #64]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a0f      	ldr	r2, [pc, #60]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800484e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0c      	ldr	r2, [pc, #48]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800485a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e00b      	b.n	800487a <HAL_RCC_OscConfig+0x286>
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a06      	ldr	r2, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004878:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01c      	beq.n	80048bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fe fc45 	bl	8003110 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004888:	e011      	b.n	80048ae <HAL_RCC_OscConfig+0x2ba>
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	0800960c 	.word	0x0800960c
 8004894:	200002b4 	.word	0x200002b4
 8004898:	200002b8 	.word	0x200002b8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fe fc38 	bl	8003110 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e280      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ae:	4baf      	ldr	r3, [pc, #700]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x2a8>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe fc28 	bl	8003110 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fe fc24 	bl	8003110 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e26c      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d6:	4ba5      	ldr	r3, [pc, #660]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x2d0>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d060      	beq.n	80049b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_OscConfig+0x310>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d119      	bne.n	8004932 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d116      	bne.n	8004932 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004904:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x328>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e249      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b93      	ldr	r3, [pc, #588]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	4990      	ldr	r1, [pc, #576]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004930:	e040      	b.n	80049b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d023      	beq.n	8004982 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800493a:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a8b      	ldr	r2, [pc, #556]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fe fbe3 	bl	8003110 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494e:	f7fe fbdf 	bl	8003110 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e227      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004960:	4b82      	ldr	r3, [pc, #520]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496c:	4b7f      	ldr	r3, [pc, #508]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	497c      	ldr	r1, [pc, #496]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
 8004980:	e018      	b.n	80049b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004982:	4b7a      	ldr	r3, [pc, #488]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a79      	ldr	r2, [pc, #484]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fe fbbf 	bl	8003110 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004996:	f7fe fbbb 	bl	8003110 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e203      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a8:	4b70      	ldr	r3, [pc, #448]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d03c      	beq.n	8004a3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01c      	beq.n	8004a02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c8:	4b68      	ldr	r3, [pc, #416]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	4a67      	ldr	r2, [pc, #412]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fe fb9a 	bl	8003110 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e0:	f7fe fb96 	bl	8003110 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e1de      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f2:	4b5e      	ldr	r3, [pc, #376]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ef      	beq.n	80049e0 <HAL_RCC_OscConfig+0x3ec>
 8004a00:	e01b      	b.n	8004a3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a02:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a12:	f7fe fb7d 	bl	8003110 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1a:	f7fe fb79 	bl	8003110 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e1c1      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a2c:	4b4f      	ldr	r3, [pc, #316]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ef      	bne.n	8004a1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a6 	beq.w	8004b94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a4c:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10d      	bne.n	8004a74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a58:	4b44      	ldr	r3, [pc, #272]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	4a43      	ldr	r2, [pc, #268]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a62:	6593      	str	r3, [r2, #88]	; 0x58
 8004a64:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a70:	2301      	movs	r3, #1
 8004a72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a74:	4b3e      	ldr	r3, [pc, #248]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d118      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a80:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3a      	ldr	r2, [pc, #232]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8c:	f7fe fb40 	bl	8003110 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a94:	f7fe fb3c 	bl	8003110 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e184      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa6:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d108      	bne.n	8004acc <HAL_RCC_OscConfig+0x4d8>
 8004aba:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aca:	e024      	b.n	8004b16 <HAL_RCC_OscConfig+0x522>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d110      	bne.n	8004af6 <HAL_RCC_OscConfig+0x502>
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	4a24      	ldr	r2, [pc, #144]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af4:	e00f      	b.n	8004b16 <HAL_RCC_OscConfig+0x522>
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	4a1b      	ldr	r2, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b06:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fe faf7 	bl	8003110 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f7fe faf3 	bl	8003110 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e139      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ed      	beq.n	8004b26 <HAL_RCC_OscConfig+0x532>
 8004b4a:	e01a      	b.n	8004b82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fe fae0 	bl	8003110 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b52:	e00f      	b.n	8004b74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fe fadc 	bl	8003110 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d906      	bls.n	8004b74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e122      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b74:	4b90      	ldr	r3, [pc, #576]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e8      	bne.n	8004b54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b82:	7ffb      	ldrb	r3, [r7, #31]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b88:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	4a8a      	ldr	r2, [pc, #552]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8108 	beq.w	8004dae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	f040 80d0 	bne.w	8004d48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ba8:	4b83      	ldr	r3, [pc, #524]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0203 	and.w	r2, r3, #3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d130      	bne.n	8004c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d127      	bne.n	8004c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d11f      	bne.n	8004c1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004be8:	2a07      	cmp	r2, #7
 8004bea:	bf14      	ite	ne
 8004bec:	2201      	movne	r2, #1
 8004bee:	2200      	moveq	r2, #0
 8004bf0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d113      	bne.n	8004c1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	3b01      	subs	r3, #1
 8004c04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d109      	bne.n	8004c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	3b01      	subs	r3, #1
 8004c18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d06e      	beq.n	8004cfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d069      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c24:	4b64      	ldr	r3, [pc, #400]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c30:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0b7      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c40:	4b5d      	ldr	r3, [pc, #372]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5c      	ldr	r2, [pc, #368]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c4c:	f7fe fa60 	bl	8003110 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c54:	f7fe fa5c 	bl	8003110 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e0a4      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c66:	4b54      	ldr	r3, [pc, #336]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c72:	4b51      	ldr	r3, [pc, #324]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	4b51      	ldr	r3, [pc, #324]	; (8004dbc <HAL_RCC_OscConfig+0x7c8>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0112      	lsls	r2, r2, #4
 8004c86:	4311      	orrs	r1, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c8c:	0212      	lsls	r2, r2, #8
 8004c8e:	4311      	orrs	r1, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c94:	0852      	lsrs	r2, r2, #1
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0552      	lsls	r2, r2, #21
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ca0:	0852      	lsrs	r2, r2, #1
 8004ca2:	3a01      	subs	r2, #1
 8004ca4:	0652      	lsls	r2, r2, #25
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cac:	0912      	lsrs	r2, r2, #4
 8004cae:	0452      	lsls	r2, r2, #17
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	4941      	ldr	r1, [pc, #260]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cb8:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc4:	4b3c      	ldr	r3, [pc, #240]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a3b      	ldr	r2, [pc, #236]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cd0:	f7fe fa1e 	bl	8003110 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fe fa1a 	bl	8003110 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e062      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cea:	4b33      	ldr	r3, [pc, #204]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cf6:	e05a      	b.n	8004dae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e059      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d152      	bne.n	8004dae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d14:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a27      	ldr	r2, [pc, #156]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d20:	f7fe f9f6 	bl	8003110 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fe f9f2 	bl	8003110 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e03a      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x734>
 8004d46:	e032      	b.n	8004dae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d02d      	beq.n	8004daa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d6c:	f023 0303 	bic.w	r3, r3, #3
 8004d70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fe f9c5 	bl	8003110 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fe f9c1 	bl	8003110 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e009      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_OscConfig+0x7c4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0x796>
 8004da8:	e001      	b.n	8004dae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	f99d808c 	.word	0xf99d808c

08004dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0c8      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b66      	ldr	r3, [pc, #408]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d910      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b63      	ldr	r3, [pc, #396]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 0207 	bic.w	r2, r3, #7
 8004dea:	4961      	ldr	r1, [pc, #388]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b5f      	ldr	r3, [pc, #380]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0b0      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d04c      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e18:	4b56      	ldr	r3, [pc, #344]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d121      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e09e      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e30:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d115      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e092      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d107      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e48:	4b4a      	ldr	r3, [pc, #296]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e086      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e58:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e07e      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e68:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 0203 	bic.w	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	493f      	ldr	r1, [pc, #252]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7a:	f7fe f949 	bl	8003110 <HAL_GetTick>
 8004e7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e82:	f7fe f945 	bl	8003110 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e066      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e98:	4b36      	ldr	r3, [pc, #216]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 020c 	and.w	r2, r3, #12
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d1eb      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	492c      	ldr	r1, [pc, #176]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec8:	4b29      	ldr	r3, [pc, #164]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d210      	bcs.n	8004ef8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed6:	4b26      	ldr	r3, [pc, #152]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 0207 	bic.w	r2, r3, #7
 8004ede:	4924      	ldr	r1, [pc, #144]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_RCC_ClockConfig+0x1b0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e036      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4918      	ldr	r1, [pc, #96]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f22:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4910      	ldr	r1, [pc, #64]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f36:	f000 f825 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <HAL_RCC_ClockConfig+0x1b4>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	5cd3      	ldrb	r3, [r2, r3]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <HAL_RCC_ClockConfig+0x1c0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe f888 	bl	8003070 <HAL_InitTick>
 8004f60:	4603      	mov	r3, r0
 8004f62:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f64:	7afb      	ldrb	r3, [r7, #11]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40022000 	.word	0x40022000
 8004f74:	40021000 	.word	0x40021000
 8004f78:	0800960c 	.word	0x0800960c
 8004f7c:	200002b4 	.word	0x200002b4
 8004f80:	200002b8 	.word	0x200002b8

08004f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f92:	4b3d      	ldr	r3, [pc, #244]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f9c:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d121      	bne.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d11e      	bne.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fb8:	4b33      	ldr	r3, [pc, #204]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fc4:	4b30      	ldr	r3, [pc, #192]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	0a1b      	lsrs	r3, r3, #8
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fd4:	4b2c      	ldr	r3, [pc, #176]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fe0:	4a2a      	ldr	r2, [pc, #168]	; (800508c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10d      	bne.n	800500c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff4:	e00a      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d102      	bne.n	8005002 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	e004      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b08      	cmp	r3, #8
 8005006:	d101      	bne.n	800500c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005008:	4b22      	ldr	r3, [pc, #136]	; (8005094 <HAL_RCC_GetSysClockFreq+0x110>)
 800500a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b0c      	cmp	r3, #12
 8005010:	d133      	bne.n	800507a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005012:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d002      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0xa4>
 8005022:	2b03      	cmp	r3, #3
 8005024:	d003      	beq.n	800502e <HAL_RCC_GetSysClockFreq+0xaa>
 8005026:	e005      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_RCC_GetSysClockFreq+0x10c>)
 800502a:	617b      	str	r3, [r7, #20]
      break;
 800502c:	e005      	b.n	800503a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800502e:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_RCC_GetSysClockFreq+0x110>)
 8005030:	617b      	str	r3, [r7, #20]
      break;
 8005032:	e002      	b.n	800503a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	617b      	str	r3, [r7, #20]
      break;
 8005038:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	3301      	adds	r3, #1
 8005046:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	fb02 f203 	mul.w	r2, r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_RCC_GetSysClockFreq+0x104>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	0e5b      	lsrs	r3, r3, #25
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	3301      	adds	r3, #1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800507a:	69bb      	ldr	r3, [r7, #24]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3724      	adds	r7, #36	; 0x24
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40021000 	.word	0x40021000
 800508c:	0800961c 	.word	0x0800961c
 8005090:	00f42400 	.word	0x00f42400
 8005094:	007a1200 	.word	0x007a1200

08005098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050a4:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050b0:	f7ff fa3c 	bl	800452c <HAL_PWREx_GetVoltageRange>
 80050b4:	6178      	str	r0, [r7, #20]
 80050b6:	e014      	b.n	80050e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050bc:	4a24      	ldr	r2, [pc, #144]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	6593      	str	r3, [r2, #88]	; 0x58
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050d0:	f7ff fa2c 	bl	800452c <HAL_PWREx_GetVoltageRange>
 80050d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050d6:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d10b      	bne.n	8005102 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d919      	bls.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2ba0      	cmp	r3, #160	; 0xa0
 80050f4:	d902      	bls.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050f6:	2302      	movs	r3, #2
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e013      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050fc:	2301      	movs	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	e010      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b80      	cmp	r3, #128	; 0x80
 8005106:	d902      	bls.n	800510e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005108:	2303      	movs	r3, #3
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	e00a      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d102      	bne.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005114:	2302      	movs	r3, #2
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e004      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b70      	cmp	r3, #112	; 0x70
 800511e:	d101      	bne.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005120:	2301      	movs	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f023 0207 	bic.w	r2, r3, #7
 800512c:	4909      	ldr	r1, [pc, #36]	; (8005154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d001      	beq.n	8005146 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000
 8005154:	40022000 	.word	0x40022000

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005160:	2300      	movs	r3, #0
 8005162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005164:	2300      	movs	r3, #0
 8005166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005170:	2b00      	cmp	r3, #0
 8005172:	d03f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800517c:	d01c      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800517e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005182:	d802      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00e      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005188:	e01f      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x72>
 800518a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800518e:	d003      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005190:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005194:	d01c      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005196:	e018      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005198:	4b85      	ldr	r3, [pc, #532]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a84      	ldr	r2, [pc, #528]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800519e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a4:	e015      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fab9 	bl	8005724 <RCCEx_PLLSAI1_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b6:	e00c      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3320      	adds	r3, #32
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fba0 	bl	8005904 <RCCEx_PLLSAI2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	74fb      	strb	r3, [r7, #19]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d8:	4b75      	ldr	r3, [pc, #468]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e6:	4972      	ldr	r1, [pc, #456]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051ee:	e001      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d03f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005208:	d01c      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800520a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800520e:	d802      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00e      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005214:	e01f      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800521a:	d003      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800521c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005220:	d01c      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005222:	e018      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005224:	4b62      	ldr	r3, [pc, #392]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a61      	ldr	r2, [pc, #388]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005230:	e015      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fa73 	bl	8005724 <RCCEx_PLLSAI1_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005242:	e00c      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3320      	adds	r3, #32
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fb5a 	bl	8005904 <RCCEx_PLLSAI2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005254:	e003      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	74fb      	strb	r3, [r7, #19]
      break;
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800525c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10b      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005264:	4b52      	ldr	r3, [pc, #328]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005272:	494f      	ldr	r1, [pc, #316]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800527a:	e001      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80a0 	beq.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005292:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00d      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ac:	4a40      	ldr	r2, [pc, #256]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b2:	6593      	str	r3, [r2, #88]	; 0x58
 80052b4:	4b3e      	ldr	r3, [pc, #248]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c0:	2301      	movs	r3, #1
 80052c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c4:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a3a      	ldr	r2, [pc, #232]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052d0:	f7fd ff1e 	bl	8003110 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052d6:	e009      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d8:	f7fd ff1a 	bl	8003110 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	74fb      	strb	r3, [r7, #19]
        break;
 80052ea:	e005      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ec:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ef      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d15c      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052fe:	4b2c      	ldr	r3, [pc, #176]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005308:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01f      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	429a      	cmp	r2, r3
 800531a:	d019      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800531c:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005328:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005338:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	4a1c      	ldr	r2, [pc, #112]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d016      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fd fed9 	bl	8003110 <HAL_GetTick>
 800535e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005360:	e00b      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fd fed5 	bl	8003110 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d902      	bls.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	74fb      	strb	r3, [r7, #19]
            break;
 8005378:	e006      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ec      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10c      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539e:	4904      	ldr	r1, [pc, #16]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053a6:	e009      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	74bb      	strb	r3, [r7, #18]
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053bc:	7c7b      	ldrb	r3, [r7, #17]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c2:	4b9e      	ldr	r3, [pc, #632]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	4a9d      	ldr	r2, [pc, #628]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053da:	4b98      	ldr	r3, [pc, #608]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f023 0203 	bic.w	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	4994      	ldr	r1, [pc, #592]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053fc:	4b8f      	ldr	r3, [pc, #572]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 020c 	bic.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	498c      	ldr	r1, [pc, #560]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800541e:	4b87      	ldr	r3, [pc, #540]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	4983      	ldr	r1, [pc, #524]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005440:	4b7e      	ldr	r3, [pc, #504]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	497b      	ldr	r1, [pc, #492]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005470:	4972      	ldr	r1, [pc, #456]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005484:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005492:	496a      	ldr	r1, [pc, #424]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a6:	4b65      	ldr	r3, [pc, #404]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b4:	4961      	ldr	r1, [pc, #388]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054c8:	4b5c      	ldr	r3, [pc, #368]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	4959      	ldr	r1, [pc, #356]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ea:	4b54      	ldr	r3, [pc, #336]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	4950      	ldr	r1, [pc, #320]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800550c:	4b4b      	ldr	r3, [pc, #300]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	4948      	ldr	r1, [pc, #288]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800552e:	4b43      	ldr	r3, [pc, #268]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	493f      	ldr	r1, [pc, #252]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d028      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005550:	4b3a      	ldr	r3, [pc, #232]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555e:	4937      	ldr	r1, [pc, #220]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556e:	d106      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005570:	4b32      	ldr	r3, [pc, #200]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a31      	ldr	r2, [pc, #196]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557a:	60d3      	str	r3, [r2, #12]
 800557c:	e011      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005586:	d10c      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	2101      	movs	r1, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f8c8 	bl	8005724 <RCCEx_PLLSAI1_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800559e:	7cfb      	ldrb	r3, [r7, #19]
 80055a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d028      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055ae:	4b23      	ldr	r3, [pc, #140]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	491f      	ldr	r1, [pc, #124]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055cc:	d106      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4a1a      	ldr	r2, [pc, #104]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d8:	60d3      	str	r3, [r2, #12]
 80055da:	e011      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f899 	bl	8005724 <RCCEx_PLLSAI1_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02b      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561a:	4908      	ldr	r1, [pc, #32]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562a:	d109      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a02      	ldr	r2, [pc, #8]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005636:	60d3      	str	r3, [r2, #12]
 8005638:	e014      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005648:	d10c      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	2101      	movs	r1, #1
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f867 	bl	8005724 <RCCEx_PLLSAI1_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02f      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800567e:	4928      	ldr	r1, [pc, #160]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800568e:	d10d      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f844 	bl	8005724 <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d014      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	74bb      	strb	r3, [r7, #18]
 80056aa:	e011      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3320      	adds	r3, #32
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f921 	bl	8005904 <RCCEx_PLLSAI2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ea:	490d      	ldr	r1, [pc, #52]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800570e:	4904      	ldr	r1, [pc, #16]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005716:	7cbb      	ldrb	r3, [r7, #18]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40021000 	.word	0x40021000

08005724 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005732:	4b73      	ldr	r3, [pc, #460]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800573e:	4b70      	ldr	r3, [pc, #448]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0203 	and.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d10d      	bne.n	800576a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
       ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005756:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
       ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d044      	beq.n	80057f4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
 800576e:	e041      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d00c      	beq.n	8005792 <RCCEx_PLLSAI1_Config+0x6e>
 8005778:	2b03      	cmp	r3, #3
 800577a:	d013      	beq.n	80057a4 <RCCEx_PLLSAI1_Config+0x80>
 800577c:	2b01      	cmp	r3, #1
 800577e:	d120      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005780:	4b5f      	ldr	r3, [pc, #380]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11d      	bne.n	80057c8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005790:	e01a      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579a:	2b00      	cmp	r3, #0
 800579c:	d116      	bne.n	80057cc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a2:	e013      	b.n	80057cc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057a4:	4b56      	ldr	r3, [pc, #344]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057b0:	4b53      	ldr	r3, [pc, #332]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057c0:	e006      	b.n	80057d0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	e004      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80057c8:	bf00      	nop
 80057ca:	e002      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80057cc:	bf00      	nop
 80057ce:	e000      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80057d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10d      	bne.n	80057f4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057d8:	4b49      	ldr	r3, [pc, #292]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	430b      	orrs	r3, r1
 80057ee:	4944      	ldr	r1, [pc, #272]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d17d      	bne.n	80058f6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057fa:	4b41      	ldr	r3, [pc, #260]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a40      	ldr	r2, [pc, #256]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005806:	f7fd fc83 	bl	8003110 <HAL_GetTick>
 800580a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800580c:	e009      	b.n	8005822 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800580e:	f7fd fc7f 	bl	8003110 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d902      	bls.n	8005822 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	73fb      	strb	r3, [r7, #15]
        break;
 8005820:	e005      	b.n	800582e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005822:	4b37      	ldr	r3, [pc, #220]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1ef      	bne.n	800580e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d160      	bne.n	80058f6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d111      	bne.n	800585e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800583a:	4b31      	ldr	r3, [pc, #196]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6892      	ldr	r2, [r2, #8]
 800584a:	0211      	lsls	r1, r2, #8
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68d2      	ldr	r2, [r2, #12]
 8005850:	0912      	lsrs	r2, r2, #4
 8005852:	0452      	lsls	r2, r2, #17
 8005854:	430a      	orrs	r2, r1
 8005856:	492a      	ldr	r1, [pc, #168]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005858:	4313      	orrs	r3, r2
 800585a:	610b      	str	r3, [r1, #16]
 800585c:	e027      	b.n	80058ae <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d112      	bne.n	800588a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005864:	4b26      	ldr	r3, [pc, #152]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800586c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6892      	ldr	r2, [r2, #8]
 8005874:	0211      	lsls	r1, r2, #8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6912      	ldr	r2, [r2, #16]
 800587a:	0852      	lsrs	r2, r2, #1
 800587c:	3a01      	subs	r2, #1
 800587e:	0552      	lsls	r2, r2, #21
 8005880:	430a      	orrs	r2, r1
 8005882:	491f      	ldr	r1, [pc, #124]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005884:	4313      	orrs	r3, r2
 8005886:	610b      	str	r3, [r1, #16]
 8005888:	e011      	b.n	80058ae <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005892:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	0211      	lsls	r1, r2, #8
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6952      	ldr	r2, [r2, #20]
 80058a0:	0852      	lsrs	r2, r2, #1
 80058a2:	3a01      	subs	r2, #1
 80058a4:	0652      	lsls	r2, r2, #25
 80058a6:	430a      	orrs	r2, r1
 80058a8:	4915      	ldr	r1, [pc, #84]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a13      	ldr	r2, [pc, #76]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fd fc29 	bl	8003110 <HAL_GetTick>
 80058be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058c0:	e009      	b.n	80058d6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058c2:	f7fd fc25 	bl	8003110 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d902      	bls.n	80058d6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	73fb      	strb	r3, [r7, #15]
          break;
 80058d4:	e005      	b.n	80058e2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ef      	beq.n	80058c2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000

08005904 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005912:	4b68      	ldr	r3, [pc, #416]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d018      	beq.n	8005950 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800591e:	4b65      	ldr	r3, [pc, #404]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0203 	and.w	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d10d      	bne.n	800594a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
       ||
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005936:	4b5f      	ldr	r3, [pc, #380]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
       ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d044      	beq.n	80059d4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
 800594e:	e041      	b.n	80059d4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d00c      	beq.n	8005972 <RCCEx_PLLSAI2_Config+0x6e>
 8005958:	2b03      	cmp	r3, #3
 800595a:	d013      	beq.n	8005984 <RCCEx_PLLSAI2_Config+0x80>
 800595c:	2b01      	cmp	r3, #1
 800595e:	d120      	bne.n	80059a2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005960:	4b54      	ldr	r3, [pc, #336]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11d      	bne.n	80059a8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005970:	e01a      	b.n	80059a8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005972:	4b50      	ldr	r3, [pc, #320]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597a:	2b00      	cmp	r3, #0
 800597c:	d116      	bne.n	80059ac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005982:	e013      	b.n	80059ac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10f      	bne.n	80059b0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005990:	4b48      	ldr	r3, [pc, #288]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059a0:	e006      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
      break;
 80059a6:	e004      	b.n	80059b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80059a8:	bf00      	nop
 80059aa:	e002      	b.n	80059b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80059b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059b8:	4b3e      	ldr	r3, [pc, #248]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	430b      	orrs	r3, r1
 80059ce:	4939      	ldr	r1, [pc, #228]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d167      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059da:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a35      	ldr	r2, [pc, #212]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e6:	f7fd fb93 	bl	8003110 <HAL_GetTick>
 80059ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ec:	e009      	b.n	8005a02 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059ee:	f7fd fb8f 	bl	8003110 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d902      	bls.n	8005a02 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	73fb      	strb	r3, [r7, #15]
        break;
 8005a00:	e005      	b.n	8005a0e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a02:	4b2c      	ldr	r3, [pc, #176]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ef      	bne.n	80059ee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d14a      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d111      	bne.n	8005a3e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a1a:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6892      	ldr	r2, [r2, #8]
 8005a2a:	0211      	lsls	r1, r2, #8
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	0912      	lsrs	r2, r2, #4
 8005a32:	0452      	lsls	r2, r2, #17
 8005a34:	430a      	orrs	r2, r1
 8005a36:	491f      	ldr	r1, [pc, #124]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	614b      	str	r3, [r1, #20]
 8005a3c:	e011      	b.n	8005a62 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6892      	ldr	r2, [r2, #8]
 8005a4e:	0211      	lsls	r1, r2, #8
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6912      	ldr	r2, [r2, #16]
 8005a54:	0852      	lsrs	r2, r2, #1
 8005a56:	3a01      	subs	r2, #1
 8005a58:	0652      	lsls	r2, r2, #25
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	4915      	ldr	r1, [pc, #84]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a62:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6e:	f7fd fb4f 	bl	8003110 <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a74:	e009      	b.n	8005a8a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a76:	f7fd fb4b 	bl	8003110 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d902      	bls.n	8005a8a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	73fb      	strb	r3, [r7, #15]
          break;
 8005a88:	e005      	b.n	8005a96 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ef      	beq.n	8005a76 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	4903      	ldr	r1, [pc, #12]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40021000 	.word	0x40021000

08005ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e049      	b.n	8005b5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fd f9f2 	bl	8002ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 fc06 	bl	8006308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d001      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e04f      	b.n	8005c20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x76>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d018      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x76>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x76>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1e      	ldr	r2, [pc, #120]	; (8005c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x76>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x76>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1b      	ldr	r2, [pc, #108]	; (8005c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x76>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d115      	bne.n	8005c0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	4b17      	ldr	r3, [pc, #92]	; (8005c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b06      	cmp	r3, #6
 8005bee:	d015      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0xb4>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf6:	d011      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	e008      	b.n	8005c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e000      	b.n	8005c1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40013400 	.word	0x40013400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	00010007 	.word	0x00010007

08005c48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6a1a      	ldr	r2, [r3, #32]
 8005c66:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10f      	bne.n	8005c90 <HAL_TIM_Base_Stop_IT+0x48>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6a1a      	ldr	r2, [r3, #32]
 8005c76:	f240 4344 	movw	r3, #1092	; 0x444
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_Base_Stop_IT+0x48>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e049      	b.n	8005d4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f841 	bl	8005d54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f000 fb0f 	bl	8006308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <HAL_TIM_PWM_Start+0x24>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	bf14      	ite	ne
 8005d84:	2301      	movne	r3, #1
 8005d86:	2300      	moveq	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	e03c      	b.n	8005e06 <HAL_TIM_PWM_Start+0x9e>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d109      	bne.n	8005da6 <HAL_TIM_PWM_Start+0x3e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	bf14      	ite	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	2300      	moveq	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	e02f      	b.n	8005e06 <HAL_TIM_PWM_Start+0x9e>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d109      	bne.n	8005dc0 <HAL_TIM_PWM_Start+0x58>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	e022      	b.n	8005e06 <HAL_TIM_PWM_Start+0x9e>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d109      	bne.n	8005dda <HAL_TIM_PWM_Start+0x72>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	bf14      	ite	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	2300      	moveq	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	e015      	b.n	8005e06 <HAL_TIM_PWM_Start+0x9e>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d109      	bne.n	8005df4 <HAL_TIM_PWM_Start+0x8c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e008      	b.n	8005e06 <HAL_TIM_PWM_Start+0x9e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e09c      	b.n	8005f48 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0xb6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e1c:	e023      	b.n	8005e66 <HAL_TIM_PWM_Start+0xfe>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Start+0xc6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e2c:	e01b      	b.n	8005e66 <HAL_TIM_PWM_Start+0xfe>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Start+0xd6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3c:	e013      	b.n	8005e66 <HAL_TIM_PWM_Start+0xfe>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_PWM_Start+0xe6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e4c:	e00b      	b.n	8005e66 <HAL_TIM_PWM_Start+0xfe>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_PWM_Start+0xf6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5c:	e003      	b.n	8005e66 <HAL_TIM_PWM_Start+0xfe>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fe54 	bl	8006b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a35      	ldr	r2, [pc, #212]	; (8005f50 <HAL_TIM_PWM_Start+0x1e8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x13e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a34      	ldr	r2, [pc, #208]	; (8005f54 <HAL_TIM_PWM_Start+0x1ec>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x13e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a32      	ldr	r2, [pc, #200]	; (8005f58 <HAL_TIM_PWM_Start+0x1f0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x13e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a31      	ldr	r2, [pc, #196]	; (8005f5c <HAL_TIM_PWM_Start+0x1f4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x13e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2f      	ldr	r2, [pc, #188]	; (8005f60 <HAL_TIM_PWM_Start+0x1f8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_PWM_Start+0x142>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_PWM_Start+0x144>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <HAL_TIM_PWM_Start+0x1e8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d01d      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x19e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed2:	d018      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x19e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <HAL_TIM_PWM_Start+0x1fc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x19e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <HAL_TIM_PWM_Start+0x200>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00e      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x19e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_TIM_PWM_Start+0x204>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x19e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <HAL_TIM_PWM_Start+0x1ec>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d004      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x19e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <HAL_TIM_PWM_Start+0x1f0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d115      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <HAL_TIM_PWM_Start+0x208>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b06      	cmp	r3, #6
 8005f16:	d015      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1dc>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1e:	d011      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	e008      	b.n	8005f44 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e000      	b.n	8005f46 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800
 8005f6c:	40000c00 	.word	0x40000c00
 8005f70:	00010007 	.word	0x00010007

08005f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0fd      	b.n	800618a <HAL_TIM_PWM_ConfigChannel+0x216>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b14      	cmp	r3, #20
 8005f9a:	f200 80f0 	bhi.w	800617e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005ff9 	.word	0x08005ff9
 8005fa8:	0800617f 	.word	0x0800617f
 8005fac:	0800617f 	.word	0x0800617f
 8005fb0:	0800617f 	.word	0x0800617f
 8005fb4:	08006039 	.word	0x08006039
 8005fb8:	0800617f 	.word	0x0800617f
 8005fbc:	0800617f 	.word	0x0800617f
 8005fc0:	0800617f 	.word	0x0800617f
 8005fc4:	0800607b 	.word	0x0800607b
 8005fc8:	0800617f 	.word	0x0800617f
 8005fcc:	0800617f 	.word	0x0800617f
 8005fd0:	0800617f 	.word	0x0800617f
 8005fd4:	080060bb 	.word	0x080060bb
 8005fd8:	0800617f 	.word	0x0800617f
 8005fdc:	0800617f 	.word	0x0800617f
 8005fe0:	0800617f 	.word	0x0800617f
 8005fe4:	080060fd 	.word	0x080060fd
 8005fe8:	0800617f 	.word	0x0800617f
 8005fec:	0800617f 	.word	0x0800617f
 8005ff0:	0800617f 	.word	0x0800617f
 8005ff4:	0800613d 	.word	0x0800613d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fa1c 	bl	800643c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0208 	orr.w	r2, r2, #8
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0204 	bic.w	r2, r2, #4
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	619a      	str	r2, [r3, #24]
      break;
 8006036:	e0a3      	b.n	8006180 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fa8c 	bl	800655c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	619a      	str	r2, [r3, #24]
      break;
 8006078:	e082      	b.n	8006180 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 faf5 	bl	8006670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0208 	orr.w	r2, r2, #8
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0204 	bic.w	r2, r2, #4
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	61da      	str	r2, [r3, #28]
      break;
 80060b8:	e062      	b.n	8006180 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fb5d 	bl	8006780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	021a      	lsls	r2, r3, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	61da      	str	r2, [r3, #28]
      break;
 80060fa:	e041      	b.n	8006180 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fba6 	bl	8006854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0208 	orr.w	r2, r2, #8
 8006116:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0204 	bic.w	r2, r2, #4
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800613a:	e021      	b.n	8006180 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fbea 	bl	800691c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006156:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800617c:	e000      	b.n	8006180 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800617e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x18>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e0a8      	b.n	80062fe <HAL_TIM_ConfigClockSource+0x16a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d067      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x124>
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d80b      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x70>
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d073      	beq.n	80062d8 <HAL_TIM_ConfigClockSource+0x144>
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d802      	bhi.n	80061fa <HAL_TIM_ConfigClockSource+0x66>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d06f      	beq.n	80062d8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061f8:	e078      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d06c      	beq.n	80062d8 <HAL_TIM_ConfigClockSource+0x144>
 80061fe:	2b30      	cmp	r3, #48	; 0x30
 8006200:	d06a      	beq.n	80062d8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006202:	e073      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006204:	2b70      	cmp	r3, #112	; 0x70
 8006206:	d00d      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x90>
 8006208:	2b70      	cmp	r3, #112	; 0x70
 800620a:	d804      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x82>
 800620c:	2b50      	cmp	r3, #80	; 0x50
 800620e:	d033      	beq.n	8006278 <HAL_TIM_ConfigClockSource+0xe4>
 8006210:	2b60      	cmp	r3, #96	; 0x60
 8006212:	d041      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006214:	e06a      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621a:	d066      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x156>
 800621c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006220:	d017      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006222:	e063      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	6899      	ldr	r1, [r3, #8]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f000 fc52 	bl	8006adc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006246:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	609a      	str	r2, [r3, #8]
      break;
 8006250:	e04c      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6899      	ldr	r1, [r3, #8]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f000 fc3b 	bl	8006adc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006274:	609a      	str	r2, [r3, #8]
      break;
 8006276:	e039      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	461a      	mov	r2, r3
 8006286:	f000 fbaf 	bl	80069e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2150      	movs	r1, #80	; 0x50
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fc08 	bl	8006aa6 <TIM_ITRx_SetConfig>
      break;
 8006296:	e029      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f000 fbce 	bl	8006a46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2160      	movs	r1, #96	; 0x60
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fbf8 	bl	8006aa6 <TIM_ITRx_SetConfig>
      break;
 80062b6:	e019      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	461a      	mov	r2, r3
 80062c6:	f000 fb8f 	bl	80069e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2140      	movs	r1, #64	; 0x40
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fbe8 	bl	8006aa6 <TIM_ITRx_SetConfig>
      break;
 80062d6:	e009      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f000 fbdf 	bl	8006aa6 <TIM_ITRx_SetConfig>
        break;
 80062e8:	e000      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x158>
      break;
 80062ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a40      	ldr	r2, [pc, #256]	; (800641c <TIM_Base_SetConfig+0x114>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d00f      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3d      	ldr	r2, [pc, #244]	; (8006420 <TIM_Base_SetConfig+0x118>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00b      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <TIM_Base_SetConfig+0x11c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3b      	ldr	r2, [pc, #236]	; (8006428 <TIM_Base_SetConfig+0x120>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3a      	ldr	r2, [pc, #232]	; (800642c <TIM_Base_SetConfig+0x124>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d108      	bne.n	800635a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2f      	ldr	r2, [pc, #188]	; (800641c <TIM_Base_SetConfig+0x114>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01f      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d01b      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <TIM_Base_SetConfig+0x118>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d017      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2b      	ldr	r2, [pc, #172]	; (8006424 <TIM_Base_SetConfig+0x11c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <TIM_Base_SetConfig+0x120>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00f      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a29      	ldr	r2, [pc, #164]	; (800642c <TIM_Base_SetConfig+0x124>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a28      	ldr	r2, [pc, #160]	; (8006430 <TIM_Base_SetConfig+0x128>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a27      	ldr	r2, [pc, #156]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a26      	ldr	r2, [pc, #152]	; (8006438 <TIM_Base_SetConfig+0x130>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d108      	bne.n	80063b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <TIM_Base_SetConfig+0x114>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a12      	ldr	r2, [pc, #72]	; (800642c <TIM_Base_SetConfig+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a11      	ldr	r2, [pc, #68]	; (8006430 <TIM_Base_SetConfig+0x128>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <TIM_Base_SetConfig+0x130>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d103      	bne.n	8006408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	615a      	str	r2, [r3, #20]
}
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800

0800643c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f023 0302 	bic.w	r3, r3, #2
 8006488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a2b      	ldr	r2, [pc, #172]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a29      	ldr	r2, [pc, #164]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a28      	ldr	r2, [pc, #160]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10c      	bne.n	80064d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0308 	bic.w	r3, r3, #8
 80064c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a17      	ldr	r2, [pc, #92]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f023 0320 	bic.w	r3, r3, #32
 80065aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a28      	ldr	r2, [pc, #160]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC2_SetConfig+0x6c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a27      	ldr	r2, [pc, #156]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d10d      	bne.n	80065e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a1d      	ldr	r2, [pc, #116]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1b      	ldr	r2, [pc, #108]	; (8006664 <TIM_OC2_SetConfig+0x108>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <TIM_OC2_SetConfig+0x10c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a19      	ldr	r2, [pc, #100]	; (800666c <TIM_OC2_SetConfig+0x110>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d113      	bne.n	8006634 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40013400 	.word	0x40013400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800

08006670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_OC3_SetConfig+0x6a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d10d      	bne.n	80066f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1c      	ldr	r2, [pc, #112]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00f      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1b      	ldr	r2, [pc, #108]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00b      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <TIM_OC3_SetConfig+0x104>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <TIM_OC3_SetConfig+0x108>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a18      	ldr	r2, [pc, #96]	; (800677c <TIM_OC3_SetConfig+0x10c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d113      	bne.n	8006746 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a18      	ldr	r2, [pc, #96]	; (8006840 <TIM_OC4_SetConfig+0xc0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a17      	ldr	r2, [pc, #92]	; (8006844 <TIM_OC4_SetConfig+0xc4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00b      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a16      	ldr	r2, [pc, #88]	; (8006848 <TIM_OC4_SetConfig+0xc8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <TIM_OC4_SetConfig+0xcc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a14      	ldr	r2, [pc, #80]	; (8006850 <TIM_OC4_SetConfig+0xd0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d109      	bne.n	8006818 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	019b      	lsls	r3, r3, #6
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40012c00 	.word	0x40012c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006898:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a17      	ldr	r2, [pc, #92]	; (8006908 <TIM_OC5_SetConfig+0xb4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00f      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a16      	ldr	r2, [pc, #88]	; (800690c <TIM_OC5_SetConfig+0xb8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a15      	ldr	r2, [pc, #84]	; (8006910 <TIM_OC5_SetConfig+0xbc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a14      	ldr	r2, [pc, #80]	; (8006914 <TIM_OC5_SetConfig+0xc0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a13      	ldr	r2, [pc, #76]	; (8006918 <TIM_OC5_SetConfig+0xc4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d109      	bne.n	80068e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	621a      	str	r2, [r3, #32]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	051b      	lsls	r3, r3, #20
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <TIM_OC6_SetConfig+0xb8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00f      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <TIM_OC6_SetConfig+0xbc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00b      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a16      	ldr	r2, [pc, #88]	; (80069dc <TIM_OC6_SetConfig+0xc0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d007      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <TIM_OC6_SetConfig+0xc4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d003      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <TIM_OC6_SetConfig+0xc8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d109      	bne.n	80069ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	029b      	lsls	r3, r3, #10
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 030a 	bic.w	r3, r3, #10
 8006a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0210 	bic.w	r2, r3, #16
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f043 0307 	orr.w	r3, r3, #7
 8006ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	609a      	str	r2, [r3, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	021a      	lsls	r2, r3, #8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	2201      	movs	r2, #1
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	401a      	ands	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	431a      	orrs	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e068      	b.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2e      	ldr	r2, [pc, #184]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2d      	ldr	r2, [pc, #180]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d108      	bne.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01d      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1a      	ldr	r2, [pc, #104]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40012c00 	.word	0x40012c00
 8006c64:	40013400 	.word	0x40013400
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40014000 	.word	0x40014000

08006c78 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af04      	add	r7, sp, #16
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295
 8006c96:	9302      	str	r3, [sp, #8]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	1dfb      	adds	r3, r7, #7
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2178      	movs	r1, #120	; 0x78
 8006ca6:	4803      	ldr	r0, [pc, #12]	; (8006cb4 <ssd1306_WriteCommand+0x2c>)
 8006ca8:	f7fd f8cc 	bl	8003e44 <HAL_I2C_Mem_Write>
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	2000093c 	.word	0x2000093c

08006cb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af04      	add	r7, sp, #16
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	9202      	str	r2, [sp, #8]
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	2240      	movs	r2, #64	; 0x40
 8006cd6:	2178      	movs	r1, #120	; 0x78
 8006cd8:	4803      	ldr	r0, [pc, #12]	; (8006ce8 <ssd1306_WriteData+0x30>)
 8006cda:	f7fd f8b3 	bl	8003e44 <HAL_I2C_Mem_Write>
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	2000093c 	.word	0x2000093c

08006cec <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8006cf0:	f7ff ffc2 	bl	8006c78 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006cf4:	2064      	movs	r0, #100	; 0x64
 8006cf6:	f7fc fa17 	bl	8003128 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8006cfa:	20ae      	movs	r0, #174	; 0xae
 8006cfc:	f7ff ffc4 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8006d00:	2020      	movs	r0, #32
 8006d02:	f7ff ffc1 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8006d06:	2010      	movs	r0, #16
 8006d08:	f7ff ffbe 	bl	8006c88 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006d0c:	20b0      	movs	r0, #176	; 0xb0
 8006d0e:	f7ff ffbb 	bl	8006c88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006d12:	20c8      	movs	r0, #200	; 0xc8
 8006d14:	f7ff ffb8 	bl	8006c88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006d18:	2000      	movs	r0, #0
 8006d1a:	f7ff ffb5 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006d1e:	2010      	movs	r0, #16
 8006d20:	f7ff ffb2 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006d24:	2040      	movs	r0, #64	; 0x40
 8006d26:	f7ff ffaf 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8006d2a:	2081      	movs	r0, #129	; 0x81
 8006d2c:	f7ff ffac 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8006d30:	20ff      	movs	r0, #255	; 0xff
 8006d32:	f7ff ffa9 	bl	8006c88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006d36:	20a1      	movs	r0, #161	; 0xa1
 8006d38:	f7ff ffa6 	bl	8006c88 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006d3c:	20a6      	movs	r0, #166	; 0xa6
 8006d3e:	f7ff ffa3 	bl	8006c88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006d42:	20a8      	movs	r0, #168	; 0xa8
 8006d44:	f7ff ffa0 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8006d48:	203f      	movs	r0, #63	; 0x3f
 8006d4a:	f7ff ff9d 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006d4e:	20a4      	movs	r0, #164	; 0xa4
 8006d50:	f7ff ff9a 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006d54:	20d3      	movs	r0, #211	; 0xd3
 8006d56:	f7ff ff97 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f7ff ff94 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006d60:	20d5      	movs	r0, #213	; 0xd5
 8006d62:	f7ff ff91 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006d66:	20f0      	movs	r0, #240	; 0xf0
 8006d68:	f7ff ff8e 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006d6c:	20d9      	movs	r0, #217	; 0xd9
 8006d6e:	f7ff ff8b 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006d72:	2022      	movs	r0, #34	; 0x22
 8006d74:	f7ff ff88 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006d78:	20da      	movs	r0, #218	; 0xda
 8006d7a:	f7ff ff85 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8006d7e:	2012      	movs	r0, #18
 8006d80:	f7ff ff82 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006d84:	20db      	movs	r0, #219	; 0xdb
 8006d86:	f7ff ff7f 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006d8a:	2020      	movs	r0, #32
 8006d8c:	f7ff ff7c 	bl	8006c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006d90:	208d      	movs	r0, #141	; 0x8d
 8006d92:	f7ff ff79 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006d96:	2014      	movs	r0, #20
 8006d98:	f7ff ff76 	bl	8006c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8006d9c:	20af      	movs	r0, #175	; 0xaf
 8006d9e:	f7ff ff73 	bl	8006c88 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8006da2:	2000      	movs	r0, #0
 8006da4:	f000 f810 	bl	8006dc8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006da8:	f000 f830 	bl	8006e0c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <ssd1306_Init+0xd8>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006db2:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <ssd1306_Init+0xd8>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006db8:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <ssd1306_Init+0xd8>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	715a      	strb	r2, [r3, #5]
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000910 	.word	0x20000910

08006dc8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e00d      	b.n	8006df4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <ssd1306_Fill+0x1a>
 8006dde:	2100      	movs	r1, #0
 8006de0:	e000      	b.n	8006de4 <ssd1306_Fill+0x1c>
 8006de2:	21ff      	movs	r1, #255	; 0xff
 8006de4:	4a08      	ldr	r2, [pc, #32]	; (8006e08 <ssd1306_Fill+0x40>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	460a      	mov	r2, r1
 8006dec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfa:	d3ed      	bcc.n	8006dd8 <ssd1306_Fill+0x10>
    }
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	20000510 	.word	0x20000510

08006e0c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8006e12:	2300      	movs	r3, #0
 8006e14:	71fb      	strb	r3, [r7, #7]
 8006e16:	e016      	b.n	8006e46 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	3b50      	subs	r3, #80	; 0x50
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff ff32 	bl	8006c88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7ff ff2f 	bl	8006c88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8006e2a:	2010      	movs	r0, #16
 8006e2c:	f7ff ff2c 	bl	8006c88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <ssd1306_UpdateScreen+0x48>)
 8006e36:	4413      	add	r3, r2
 8006e38:	2180      	movs	r1, #128	; 0x80
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ff3c 	bl	8006cb8 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	3301      	adds	r3, #1
 8006e44:	71fb      	strb	r3, [r7, #7]
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	2b07      	cmp	r3, #7
 8006e4a:	d9e5      	bls.n	8006e18 <ssd1306_UpdateScreen+0xc>
    }
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000510 	.word	0x20000510

08006e58 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	71fb      	strb	r3, [r7, #7]
 8006e62:	460b      	mov	r3, r1
 8006e64:	71bb      	strb	r3, [r7, #6]
 8006e66:	4613      	mov	r3, r2
 8006e68:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	db48      	blt.n	8006f04 <ssd1306_DrawPixel+0xac>
 8006e72:	79bb      	ldrb	r3, [r7, #6]
 8006e74:	2b3f      	cmp	r3, #63	; 0x3f
 8006e76:	d845      	bhi.n	8006f04 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <ssd1306_DrawPixel+0xb8>)
 8006e7a:	791b      	ldrb	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8006e80:	797b      	ldrb	r3, [r7, #5]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bf0c      	ite	eq
 8006e86:	2301      	moveq	r3, #1
 8006e88:	2300      	movne	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8006e8e:	797b      	ldrb	r3, [r7, #5]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d11a      	bne.n	8006eca <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006e94:	79fa      	ldrb	r2, [r7, #7]
 8006e96:	79bb      	ldrb	r3, [r7, #6]
 8006e98:	08db      	lsrs	r3, r3, #3
 8006e9a:	b2d8      	uxtb	r0, r3
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	01db      	lsls	r3, r3, #7
 8006ea0:	4413      	add	r3, r2
 8006ea2:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <ssd1306_DrawPixel+0xbc>)
 8006ea4:	5cd3      	ldrb	r3, [r2, r3]
 8006ea6:	b25a      	sxtb	r2, r3
 8006ea8:	79bb      	ldrb	r3, [r7, #6]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	2101      	movs	r1, #1
 8006eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb4:	b25b      	sxtb	r3, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b259      	sxtb	r1, r3
 8006eba:	79fa      	ldrb	r2, [r7, #7]
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	01db      	lsls	r3, r3, #7
 8006ec0:	4413      	add	r3, r2
 8006ec2:	b2c9      	uxtb	r1, r1
 8006ec4:	4a13      	ldr	r2, [pc, #76]	; (8006f14 <ssd1306_DrawPixel+0xbc>)
 8006ec6:	54d1      	strb	r1, [r2, r3]
 8006ec8:	e01d      	b.n	8006f06 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006eca:	79fa      	ldrb	r2, [r7, #7]
 8006ecc:	79bb      	ldrb	r3, [r7, #6]
 8006ece:	08db      	lsrs	r3, r3, #3
 8006ed0:	b2d8      	uxtb	r0, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	01db      	lsls	r3, r3, #7
 8006ed6:	4413      	add	r3, r2
 8006ed8:	4a0e      	ldr	r2, [pc, #56]	; (8006f14 <ssd1306_DrawPixel+0xbc>)
 8006eda:	5cd3      	ldrb	r3, [r2, r3]
 8006edc:	b25a      	sxtb	r2, r3
 8006ede:	79bb      	ldrb	r3, [r7, #6]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	b25b      	sxtb	r3, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	b25b      	sxtb	r3, r3
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	b259      	sxtb	r1, r3
 8006ef4:	79fa      	ldrb	r2, [r7, #7]
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	01db      	lsls	r3, r3, #7
 8006efa:	4413      	add	r3, r2
 8006efc:	b2c9      	uxtb	r1, r1
 8006efe:	4a05      	ldr	r2, [pc, #20]	; (8006f14 <ssd1306_DrawPixel+0xbc>)
 8006f00:	54d1      	strb	r1, [r2, r3]
 8006f02:	e000      	b.n	8006f06 <ssd1306_DrawPixel+0xae>
        return;
 8006f04:	bf00      	nop
    }
}
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	20000910 	.word	0x20000910
 8006f14:	20000510 	.word	0x20000510

08006f18 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b089      	sub	sp, #36	; 0x24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4604      	mov	r4, r0
 8006f20:	1d38      	adds	r0, r7, #4
 8006f22:	e880 0006 	stmia.w	r0, {r1, r2}
 8006f26:	461a      	mov	r2, r3
 8006f28:	4623      	mov	r3, r4
 8006f2a:	73fb      	strb	r3, [r7, #15]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006f30:	4b38      	ldr	r3, [pc, #224]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	793b      	ldrb	r3, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f3c:	dc06      	bgt.n	8006f4c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8006f3e:	4b35      	ldr	r3, [pc, #212]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8006f40:	885b      	ldrh	r3, [r3, #2]
 8006f42:	461a      	mov	r2, r3
 8006f44:	797b      	ldrb	r3, [r7, #5]
 8006f46:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006f48:	2b3f      	cmp	r3, #63	; 0x3f
 8006f4a:	dd01      	ble.n	8006f50 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	e05d      	b.n	800700c <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006f50:	2300      	movs	r3, #0
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	e04c      	b.n	8006ff0 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	3b20      	subs	r3, #32
 8006f5c:	7979      	ldrb	r1, [r7, #5]
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	440b      	add	r3, r1
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e034      	b.n	8006fe0 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d012      	beq.n	8006fac <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006f86:	4b23      	ldr	r3, [pc, #140]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4413      	add	r3, r2
 8006f92:	b2d8      	uxtb	r0, r3
 8006f94:	4b1f      	ldr	r3, [pc, #124]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8006f96:	885b      	ldrh	r3, [r3, #2]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	7bba      	ldrb	r2, [r7, #14]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f7ff ff57 	bl	8006e58 <ssd1306_DrawPixel>
 8006faa:	e016      	b.n	8006fda <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006fac:	4b19      	ldr	r3, [pc, #100]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	b2d8      	uxtb	r0, r3
 8006fba:	4b16      	ldr	r3, [pc, #88]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8006fbc:	885b      	ldrh	r3, [r3, #2]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	b2d9      	uxtb	r1, r3
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf0c      	ite	eq
 8006fce:	2301      	moveq	r3, #1
 8006fd0:	2300      	movne	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f7ff ff3f 	bl	8006e58 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	793b      	ldrb	r3, [r7, #4]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d3c5      	bcc.n	8006f76 <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3301      	adds	r3, #1
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	797b      	ldrb	r3, [r7, #5]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d3ad      	bcc.n	8006f56 <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006ffa:	4b06      	ldr	r3, [pc, #24]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8006ffc:	881a      	ldrh	r2, [r3, #0]
 8006ffe:	793b      	ldrb	r3, [r7, #4]
 8007000:	b29b      	uxth	r3, r3
 8007002:	4413      	add	r3, r2
 8007004:	b29a      	uxth	r2, r3
 8007006:	4b03      	ldr	r3, [pc, #12]	; (8007014 <ssd1306_WriteChar+0xfc>)
 8007008:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3724      	adds	r7, #36	; 0x24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd90      	pop	{r4, r7, pc}
 8007014:	20000910 	.word	0x20000910

08007018 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	1d38      	adds	r0, r7, #4
 8007022:	e880 0006 	stmia.w	r0, {r1, r2}
 8007026:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8007028:	e012      	b.n	8007050 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	7818      	ldrb	r0, [r3, #0]
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	1d3a      	adds	r2, r7, #4
 8007032:	ca06      	ldmia	r2, {r1, r2}
 8007034:	f7ff ff70 	bl	8006f18 <ssd1306_WriteChar>
 8007038:	4603      	mov	r3, r0
 800703a:	461a      	mov	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d002      	beq.n	800704a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	e008      	b.n	800705c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e8      	bne.n	800702a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	781b      	ldrb	r3, [r3, #0]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	460a      	mov	r2, r1
 800706e:	71fb      	strb	r3, [r7, #7]
 8007070:	4613      	mov	r3, r2
 8007072:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	b29a      	uxth	r2, r3
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <ssd1306_SetCursor+0x2c>)
 800707a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800707c:	79bb      	ldrb	r3, [r7, #6]
 800707e:	b29a      	uxth	r2, r3
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <ssd1306_SetCursor+0x2c>)
 8007082:	805a      	strh	r2, [r3, #2]
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000910 	.word	0x20000910

08007094 <__errno>:
 8007094:	4b01      	ldr	r3, [pc, #4]	; (800709c <__errno+0x8>)
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	200002f8 	.word	0x200002f8

080070a0 <__libc_init_array>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4e0d      	ldr	r6, [pc, #52]	; (80070d8 <__libc_init_array+0x38>)
 80070a4:	4c0d      	ldr	r4, [pc, #52]	; (80070dc <__libc_init_array+0x3c>)
 80070a6:	1ba4      	subs	r4, r4, r6
 80070a8:	10a4      	asrs	r4, r4, #2
 80070aa:	2500      	movs	r5, #0
 80070ac:	42a5      	cmp	r5, r4
 80070ae:	d109      	bne.n	80070c4 <__libc_init_array+0x24>
 80070b0:	4e0b      	ldr	r6, [pc, #44]	; (80070e0 <__libc_init_array+0x40>)
 80070b2:	4c0c      	ldr	r4, [pc, #48]	; (80070e4 <__libc_init_array+0x44>)
 80070b4:	f002 f8be 	bl	8009234 <_init>
 80070b8:	1ba4      	subs	r4, r4, r6
 80070ba:	10a4      	asrs	r4, r4, #2
 80070bc:	2500      	movs	r5, #0
 80070be:	42a5      	cmp	r5, r4
 80070c0:	d105      	bne.n	80070ce <__libc_init_array+0x2e>
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070c8:	4798      	blx	r3
 80070ca:	3501      	adds	r5, #1
 80070cc:	e7ee      	b.n	80070ac <__libc_init_array+0xc>
 80070ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070d2:	4798      	blx	r3
 80070d4:	3501      	adds	r5, #1
 80070d6:	e7f2      	b.n	80070be <__libc_init_array+0x1e>
 80070d8:	0800c0c0 	.word	0x0800c0c0
 80070dc:	0800c0c0 	.word	0x0800c0c0
 80070e0:	0800c0c0 	.word	0x0800c0c0
 80070e4:	0800c0c4 	.word	0x0800c0c4

080070e8 <memmove>:
 80070e8:	4288      	cmp	r0, r1
 80070ea:	b510      	push	{r4, lr}
 80070ec:	eb01 0302 	add.w	r3, r1, r2
 80070f0:	d807      	bhi.n	8007102 <memmove+0x1a>
 80070f2:	1e42      	subs	r2, r0, #1
 80070f4:	4299      	cmp	r1, r3
 80070f6:	d00a      	beq.n	800710e <memmove+0x26>
 80070f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007100:	e7f8      	b.n	80070f4 <memmove+0xc>
 8007102:	4283      	cmp	r3, r0
 8007104:	d9f5      	bls.n	80070f2 <memmove+0xa>
 8007106:	1881      	adds	r1, r0, r2
 8007108:	1ad2      	subs	r2, r2, r3
 800710a:	42d3      	cmn	r3, r2
 800710c:	d100      	bne.n	8007110 <memmove+0x28>
 800710e:	bd10      	pop	{r4, pc}
 8007110:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007114:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007118:	e7f7      	b.n	800710a <memmove+0x22>

0800711a <memset>:
 800711a:	4402      	add	r2, r0
 800711c:	4603      	mov	r3, r0
 800711e:	4293      	cmp	r3, r2
 8007120:	d100      	bne.n	8007124 <memset+0xa>
 8007122:	4770      	bx	lr
 8007124:	f803 1b01 	strb.w	r1, [r3], #1
 8007128:	e7f9      	b.n	800711e <memset+0x4>

0800712a <__cvt>:
 800712a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800712e:	ec55 4b10 	vmov	r4, r5, d0
 8007132:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007138:	2d00      	cmp	r5, #0
 800713a:	460e      	mov	r6, r1
 800713c:	4691      	mov	r9, r2
 800713e:	4619      	mov	r1, r3
 8007140:	bfb8      	it	lt
 8007142:	4622      	movlt	r2, r4
 8007144:	462b      	mov	r3, r5
 8007146:	f027 0720 	bic.w	r7, r7, #32
 800714a:	bfbb      	ittet	lt
 800714c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007150:	461d      	movlt	r5, r3
 8007152:	2300      	movge	r3, #0
 8007154:	232d      	movlt	r3, #45	; 0x2d
 8007156:	bfb8      	it	lt
 8007158:	4614      	movlt	r4, r2
 800715a:	2f46      	cmp	r7, #70	; 0x46
 800715c:	700b      	strb	r3, [r1, #0]
 800715e:	d004      	beq.n	800716a <__cvt+0x40>
 8007160:	2f45      	cmp	r7, #69	; 0x45
 8007162:	d100      	bne.n	8007166 <__cvt+0x3c>
 8007164:	3601      	adds	r6, #1
 8007166:	2102      	movs	r1, #2
 8007168:	e000      	b.n	800716c <__cvt+0x42>
 800716a:	2103      	movs	r1, #3
 800716c:	ab03      	add	r3, sp, #12
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	ab02      	add	r3, sp, #8
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	4632      	mov	r2, r6
 8007176:	4653      	mov	r3, sl
 8007178:	ec45 4b10 	vmov	d0, r4, r5
 800717c:	f000 fcf4 	bl	8007b68 <_dtoa_r>
 8007180:	2f47      	cmp	r7, #71	; 0x47
 8007182:	4680      	mov	r8, r0
 8007184:	d102      	bne.n	800718c <__cvt+0x62>
 8007186:	f019 0f01 	tst.w	r9, #1
 800718a:	d026      	beq.n	80071da <__cvt+0xb0>
 800718c:	2f46      	cmp	r7, #70	; 0x46
 800718e:	eb08 0906 	add.w	r9, r8, r6
 8007192:	d111      	bne.n	80071b8 <__cvt+0x8e>
 8007194:	f898 3000 	ldrb.w	r3, [r8]
 8007198:	2b30      	cmp	r3, #48	; 0x30
 800719a:	d10a      	bne.n	80071b2 <__cvt+0x88>
 800719c:	2200      	movs	r2, #0
 800719e:	2300      	movs	r3, #0
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7f9 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80071a8:	b918      	cbnz	r0, 80071b2 <__cvt+0x88>
 80071aa:	f1c6 0601 	rsb	r6, r6, #1
 80071ae:	f8ca 6000 	str.w	r6, [sl]
 80071b2:	f8da 3000 	ldr.w	r3, [sl]
 80071b6:	4499      	add	r9, r3
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	4620      	mov	r0, r4
 80071be:	4629      	mov	r1, r5
 80071c0:	f7f9 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 80071c4:	b938      	cbnz	r0, 80071d6 <__cvt+0xac>
 80071c6:	2230      	movs	r2, #48	; 0x30
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	454b      	cmp	r3, r9
 80071cc:	d205      	bcs.n	80071da <__cvt+0xb0>
 80071ce:	1c59      	adds	r1, r3, #1
 80071d0:	9103      	str	r1, [sp, #12]
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	e7f8      	b.n	80071c8 <__cvt+0x9e>
 80071d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071de:	eba3 0308 	sub.w	r3, r3, r8
 80071e2:	4640      	mov	r0, r8
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	b004      	add	sp, #16
 80071e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080071ec <__exponent>:
 80071ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ee:	2900      	cmp	r1, #0
 80071f0:	4604      	mov	r4, r0
 80071f2:	bfba      	itte	lt
 80071f4:	4249      	neglt	r1, r1
 80071f6:	232d      	movlt	r3, #45	; 0x2d
 80071f8:	232b      	movge	r3, #43	; 0x2b
 80071fa:	2909      	cmp	r1, #9
 80071fc:	f804 2b02 	strb.w	r2, [r4], #2
 8007200:	7043      	strb	r3, [r0, #1]
 8007202:	dd20      	ble.n	8007246 <__exponent+0x5a>
 8007204:	f10d 0307 	add.w	r3, sp, #7
 8007208:	461f      	mov	r7, r3
 800720a:	260a      	movs	r6, #10
 800720c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007210:	fb06 1115 	mls	r1, r6, r5, r1
 8007214:	3130      	adds	r1, #48	; 0x30
 8007216:	2d09      	cmp	r5, #9
 8007218:	f803 1c01 	strb.w	r1, [r3, #-1]
 800721c:	f103 32ff 	add.w	r2, r3, #4294967295
 8007220:	4629      	mov	r1, r5
 8007222:	dc09      	bgt.n	8007238 <__exponent+0x4c>
 8007224:	3130      	adds	r1, #48	; 0x30
 8007226:	3b02      	subs	r3, #2
 8007228:	f802 1c01 	strb.w	r1, [r2, #-1]
 800722c:	42bb      	cmp	r3, r7
 800722e:	4622      	mov	r2, r4
 8007230:	d304      	bcc.n	800723c <__exponent+0x50>
 8007232:	1a10      	subs	r0, r2, r0
 8007234:	b003      	add	sp, #12
 8007236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007238:	4613      	mov	r3, r2
 800723a:	e7e7      	b.n	800720c <__exponent+0x20>
 800723c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007240:	f804 2b01 	strb.w	r2, [r4], #1
 8007244:	e7f2      	b.n	800722c <__exponent+0x40>
 8007246:	2330      	movs	r3, #48	; 0x30
 8007248:	4419      	add	r1, r3
 800724a:	7083      	strb	r3, [r0, #2]
 800724c:	1d02      	adds	r2, r0, #4
 800724e:	70c1      	strb	r1, [r0, #3]
 8007250:	e7ef      	b.n	8007232 <__exponent+0x46>
	...

08007254 <_printf_float>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	b08d      	sub	sp, #52	; 0x34
 800725a:	460c      	mov	r4, r1
 800725c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007260:	4616      	mov	r6, r2
 8007262:	461f      	mov	r7, r3
 8007264:	4605      	mov	r5, r0
 8007266:	f001 fa37 	bl	80086d8 <_localeconv_r>
 800726a:	6803      	ldr	r3, [r0, #0]
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	4618      	mov	r0, r3
 8007270:	f7f8 ffae 	bl	80001d0 <strlen>
 8007274:	2300      	movs	r3, #0
 8007276:	930a      	str	r3, [sp, #40]	; 0x28
 8007278:	f8d8 3000 	ldr.w	r3, [r8]
 800727c:	9005      	str	r0, [sp, #20]
 800727e:	3307      	adds	r3, #7
 8007280:	f023 0307 	bic.w	r3, r3, #7
 8007284:	f103 0208 	add.w	r2, r3, #8
 8007288:	f894 a018 	ldrb.w	sl, [r4, #24]
 800728c:	f8d4 b000 	ldr.w	fp, [r4]
 8007290:	f8c8 2000 	str.w	r2, [r8]
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800729c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072a4:	9307      	str	r3, [sp, #28]
 80072a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	4ba7      	ldr	r3, [pc, #668]	; (800754c <_printf_float+0x2f8>)
 80072b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072b4:	f7f9 fc3a 	bl	8000b2c <__aeabi_dcmpun>
 80072b8:	bb70      	cbnz	r0, 8007318 <_printf_float+0xc4>
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295
 80072be:	4ba3      	ldr	r3, [pc, #652]	; (800754c <_printf_float+0x2f8>)
 80072c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072c4:	f7f9 fc14 	bl	8000af0 <__aeabi_dcmple>
 80072c8:	bb30      	cbnz	r0, 8007318 <_printf_float+0xc4>
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f9 fc03 	bl	8000adc <__aeabi_dcmplt>
 80072d6:	b110      	cbz	r0, 80072de <_printf_float+0x8a>
 80072d8:	232d      	movs	r3, #45	; 0x2d
 80072da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072de:	4a9c      	ldr	r2, [pc, #624]	; (8007550 <_printf_float+0x2fc>)
 80072e0:	4b9c      	ldr	r3, [pc, #624]	; (8007554 <_printf_float+0x300>)
 80072e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072e6:	bf8c      	ite	hi
 80072e8:	4690      	movhi	r8, r2
 80072ea:	4698      	movls	r8, r3
 80072ec:	2303      	movs	r3, #3
 80072ee:	f02b 0204 	bic.w	r2, fp, #4
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	f04f 0900 	mov.w	r9, #0
 80072fa:	9700      	str	r7, [sp, #0]
 80072fc:	4633      	mov	r3, r6
 80072fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007300:	4621      	mov	r1, r4
 8007302:	4628      	mov	r0, r5
 8007304:	f000 f9e6 	bl	80076d4 <_printf_common>
 8007308:	3001      	adds	r0, #1
 800730a:	f040 808d 	bne.w	8007428 <_printf_float+0x1d4>
 800730e:	f04f 30ff 	mov.w	r0, #4294967295
 8007312:	b00d      	add	sp, #52	; 0x34
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	4640      	mov	r0, r8
 800731e:	4649      	mov	r1, r9
 8007320:	f7f9 fc04 	bl	8000b2c <__aeabi_dcmpun>
 8007324:	b110      	cbz	r0, 800732c <_printf_float+0xd8>
 8007326:	4a8c      	ldr	r2, [pc, #560]	; (8007558 <_printf_float+0x304>)
 8007328:	4b8c      	ldr	r3, [pc, #560]	; (800755c <_printf_float+0x308>)
 800732a:	e7da      	b.n	80072e2 <_printf_float+0x8e>
 800732c:	6861      	ldr	r1, [r4, #4]
 800732e:	1c4b      	adds	r3, r1, #1
 8007330:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007334:	a80a      	add	r0, sp, #40	; 0x28
 8007336:	d13e      	bne.n	80073b6 <_printf_float+0x162>
 8007338:	2306      	movs	r3, #6
 800733a:	6063      	str	r3, [r4, #4]
 800733c:	2300      	movs	r3, #0
 800733e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007342:	ab09      	add	r3, sp, #36	; 0x24
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	ec49 8b10 	vmov	d0, r8, r9
 800734a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800734e:	6022      	str	r2, [r4, #0]
 8007350:	f8cd a004 	str.w	sl, [sp, #4]
 8007354:	6861      	ldr	r1, [r4, #4]
 8007356:	4628      	mov	r0, r5
 8007358:	f7ff fee7 	bl	800712a <__cvt>
 800735c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007360:	2b47      	cmp	r3, #71	; 0x47
 8007362:	4680      	mov	r8, r0
 8007364:	d109      	bne.n	800737a <_printf_float+0x126>
 8007366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007368:	1cd8      	adds	r0, r3, #3
 800736a:	db02      	blt.n	8007372 <_printf_float+0x11e>
 800736c:	6862      	ldr	r2, [r4, #4]
 800736e:	4293      	cmp	r3, r2
 8007370:	dd47      	ble.n	8007402 <_printf_float+0x1ae>
 8007372:	f1aa 0a02 	sub.w	sl, sl, #2
 8007376:	fa5f fa8a 	uxtb.w	sl, sl
 800737a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800737e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007380:	d824      	bhi.n	80073cc <_printf_float+0x178>
 8007382:	3901      	subs	r1, #1
 8007384:	4652      	mov	r2, sl
 8007386:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800738a:	9109      	str	r1, [sp, #36]	; 0x24
 800738c:	f7ff ff2e 	bl	80071ec <__exponent>
 8007390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007392:	1813      	adds	r3, r2, r0
 8007394:	2a01      	cmp	r2, #1
 8007396:	4681      	mov	r9, r0
 8007398:	6123      	str	r3, [r4, #16]
 800739a:	dc02      	bgt.n	80073a2 <_printf_float+0x14e>
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	07d1      	lsls	r1, r2, #31
 80073a0:	d501      	bpl.n	80073a6 <_printf_float+0x152>
 80073a2:	3301      	adds	r3, #1
 80073a4:	6123      	str	r3, [r4, #16]
 80073a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0a5      	beq.n	80072fa <_printf_float+0xa6>
 80073ae:	232d      	movs	r3, #45	; 0x2d
 80073b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b4:	e7a1      	b.n	80072fa <_printf_float+0xa6>
 80073b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80073ba:	f000 8177 	beq.w	80076ac <_printf_float+0x458>
 80073be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80073c2:	d1bb      	bne.n	800733c <_printf_float+0xe8>
 80073c4:	2900      	cmp	r1, #0
 80073c6:	d1b9      	bne.n	800733c <_printf_float+0xe8>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e7b6      	b.n	800733a <_printf_float+0xe6>
 80073cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80073d0:	d119      	bne.n	8007406 <_printf_float+0x1b2>
 80073d2:	2900      	cmp	r1, #0
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	dd0c      	ble.n	80073f2 <_printf_float+0x19e>
 80073d8:	6121      	str	r1, [r4, #16]
 80073da:	b913      	cbnz	r3, 80073e2 <_printf_float+0x18e>
 80073dc:	6822      	ldr	r2, [r4, #0]
 80073de:	07d2      	lsls	r2, r2, #31
 80073e0:	d502      	bpl.n	80073e8 <_printf_float+0x194>
 80073e2:	3301      	adds	r3, #1
 80073e4:	440b      	add	r3, r1
 80073e6:	6123      	str	r3, [r4, #16]
 80073e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80073ec:	f04f 0900 	mov.w	r9, #0
 80073f0:	e7d9      	b.n	80073a6 <_printf_float+0x152>
 80073f2:	b913      	cbnz	r3, 80073fa <_printf_float+0x1a6>
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	07d0      	lsls	r0, r2, #31
 80073f8:	d501      	bpl.n	80073fe <_printf_float+0x1aa>
 80073fa:	3302      	adds	r3, #2
 80073fc:	e7f3      	b.n	80073e6 <_printf_float+0x192>
 80073fe:	2301      	movs	r3, #1
 8007400:	e7f1      	b.n	80073e6 <_printf_float+0x192>
 8007402:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007406:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800740a:	4293      	cmp	r3, r2
 800740c:	db05      	blt.n	800741a <_printf_float+0x1c6>
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	07d1      	lsls	r1, r2, #31
 8007414:	d5e8      	bpl.n	80073e8 <_printf_float+0x194>
 8007416:	3301      	adds	r3, #1
 8007418:	e7e5      	b.n	80073e6 <_printf_float+0x192>
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfd4      	ite	le
 800741e:	f1c3 0302 	rsble	r3, r3, #2
 8007422:	2301      	movgt	r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	e7de      	b.n	80073e6 <_printf_float+0x192>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	055a      	lsls	r2, r3, #21
 800742c:	d407      	bmi.n	800743e <_printf_float+0x1ea>
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	4642      	mov	r2, r8
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	d12b      	bne.n	8007494 <_printf_float+0x240>
 800743c:	e767      	b.n	800730e <_printf_float+0xba>
 800743e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007442:	f240 80dc 	bls.w	80075fe <_printf_float+0x3aa>
 8007446:	2200      	movs	r2, #0
 8007448:	2300      	movs	r3, #0
 800744a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800744e:	f7f9 fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007452:	2800      	cmp	r0, #0
 8007454:	d033      	beq.n	80074be <_printf_float+0x26a>
 8007456:	2301      	movs	r3, #1
 8007458:	4a41      	ldr	r2, [pc, #260]	; (8007560 <_printf_float+0x30c>)
 800745a:	4631      	mov	r1, r6
 800745c:	4628      	mov	r0, r5
 800745e:	47b8      	blx	r7
 8007460:	3001      	adds	r0, #1
 8007462:	f43f af54 	beq.w	800730e <_printf_float+0xba>
 8007466:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800746a:	429a      	cmp	r2, r3
 800746c:	db02      	blt.n	8007474 <_printf_float+0x220>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	07d8      	lsls	r0, r3, #31
 8007472:	d50f      	bpl.n	8007494 <_printf_float+0x240>
 8007474:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	f43f af45 	beq.w	800730e <_printf_float+0xba>
 8007484:	f04f 0800 	mov.w	r8, #0
 8007488:	f104 091a 	add.w	r9, r4, #26
 800748c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748e:	3b01      	subs	r3, #1
 8007490:	4543      	cmp	r3, r8
 8007492:	dc09      	bgt.n	80074a8 <_printf_float+0x254>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	079b      	lsls	r3, r3, #30
 8007498:	f100 8103 	bmi.w	80076a2 <_printf_float+0x44e>
 800749c:	68e0      	ldr	r0, [r4, #12]
 800749e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a0:	4298      	cmp	r0, r3
 80074a2:	bfb8      	it	lt
 80074a4:	4618      	movlt	r0, r3
 80074a6:	e734      	b.n	8007312 <_printf_float+0xbe>
 80074a8:	2301      	movs	r3, #1
 80074aa:	464a      	mov	r2, r9
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	f43f af2b 	beq.w	800730e <_printf_float+0xba>
 80074b8:	f108 0801 	add.w	r8, r8, #1
 80074bc:	e7e6      	b.n	800748c <_printf_float+0x238>
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dc2b      	bgt.n	800751c <_printf_float+0x2c8>
 80074c4:	2301      	movs	r3, #1
 80074c6:	4a26      	ldr	r2, [pc, #152]	; (8007560 <_printf_float+0x30c>)
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	f43f af1d 	beq.w	800730e <_printf_float+0xba>
 80074d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d6:	b923      	cbnz	r3, 80074e2 <_printf_float+0x28e>
 80074d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074da:	b913      	cbnz	r3, 80074e2 <_printf_float+0x28e>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	07d9      	lsls	r1, r3, #31
 80074e0:	d5d8      	bpl.n	8007494 <_printf_float+0x240>
 80074e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b8      	blx	r7
 80074ec:	3001      	adds	r0, #1
 80074ee:	f43f af0e 	beq.w	800730e <_printf_float+0xba>
 80074f2:	f04f 0900 	mov.w	r9, #0
 80074f6:	f104 0a1a 	add.w	sl, r4, #26
 80074fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fc:	425b      	negs	r3, r3
 80074fe:	454b      	cmp	r3, r9
 8007500:	dc01      	bgt.n	8007506 <_printf_float+0x2b2>
 8007502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007504:	e794      	b.n	8007430 <_printf_float+0x1dc>
 8007506:	2301      	movs	r3, #1
 8007508:	4652      	mov	r2, sl
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	f43f aefc 	beq.w	800730e <_printf_float+0xba>
 8007516:	f109 0901 	add.w	r9, r9, #1
 800751a:	e7ee      	b.n	80074fa <_printf_float+0x2a6>
 800751c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800751e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007520:	429a      	cmp	r2, r3
 8007522:	bfa8      	it	ge
 8007524:	461a      	movge	r2, r3
 8007526:	2a00      	cmp	r2, #0
 8007528:	4691      	mov	r9, r2
 800752a:	dd07      	ble.n	800753c <_printf_float+0x2e8>
 800752c:	4613      	mov	r3, r2
 800752e:	4631      	mov	r1, r6
 8007530:	4642      	mov	r2, r8
 8007532:	4628      	mov	r0, r5
 8007534:	47b8      	blx	r7
 8007536:	3001      	adds	r0, #1
 8007538:	f43f aee9 	beq.w	800730e <_printf_float+0xba>
 800753c:	f104 031a 	add.w	r3, r4, #26
 8007540:	f04f 0b00 	mov.w	fp, #0
 8007544:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007548:	9306      	str	r3, [sp, #24]
 800754a:	e015      	b.n	8007578 <_printf_float+0x324>
 800754c:	7fefffff 	.word	0x7fefffff
 8007550:	0800be64 	.word	0x0800be64
 8007554:	0800be60 	.word	0x0800be60
 8007558:	0800be6c 	.word	0x0800be6c
 800755c:	0800be68 	.word	0x0800be68
 8007560:	0800be70 	.word	0x0800be70
 8007564:	2301      	movs	r3, #1
 8007566:	9a06      	ldr	r2, [sp, #24]
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f aecd 	beq.w	800730e <_printf_float+0xba>
 8007574:	f10b 0b01 	add.w	fp, fp, #1
 8007578:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800757c:	ebaa 0309 	sub.w	r3, sl, r9
 8007580:	455b      	cmp	r3, fp
 8007582:	dcef      	bgt.n	8007564 <_printf_float+0x310>
 8007584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	44d0      	add	r8, sl
 800758c:	db15      	blt.n	80075ba <_printf_float+0x366>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	07da      	lsls	r2, r3, #31
 8007592:	d412      	bmi.n	80075ba <_printf_float+0x366>
 8007594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007596:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007598:	eba3 020a 	sub.w	r2, r3, sl
 800759c:	eba3 0a01 	sub.w	sl, r3, r1
 80075a0:	4592      	cmp	sl, r2
 80075a2:	bfa8      	it	ge
 80075a4:	4692      	movge	sl, r2
 80075a6:	f1ba 0f00 	cmp.w	sl, #0
 80075aa:	dc0e      	bgt.n	80075ca <_printf_float+0x376>
 80075ac:	f04f 0800 	mov.w	r8, #0
 80075b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075b4:	f104 091a 	add.w	r9, r4, #26
 80075b8:	e019      	b.n	80075ee <_printf_float+0x39a>
 80075ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	d1e5      	bne.n	8007594 <_printf_float+0x340>
 80075c8:	e6a1      	b.n	800730e <_printf_float+0xba>
 80075ca:	4653      	mov	r3, sl
 80075cc:	4642      	mov	r2, r8
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	d1e9      	bne.n	80075ac <_printf_float+0x358>
 80075d8:	e699      	b.n	800730e <_printf_float+0xba>
 80075da:	2301      	movs	r3, #1
 80075dc:	464a      	mov	r2, r9
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f ae92 	beq.w	800730e <_printf_float+0xba>
 80075ea:	f108 0801 	add.w	r8, r8, #1
 80075ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	eba3 030a 	sub.w	r3, r3, sl
 80075f8:	4543      	cmp	r3, r8
 80075fa:	dcee      	bgt.n	80075da <_printf_float+0x386>
 80075fc:	e74a      	b.n	8007494 <_printf_float+0x240>
 80075fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007600:	2a01      	cmp	r2, #1
 8007602:	dc01      	bgt.n	8007608 <_printf_float+0x3b4>
 8007604:	07db      	lsls	r3, r3, #31
 8007606:	d53a      	bpl.n	800767e <_printf_float+0x42a>
 8007608:	2301      	movs	r3, #1
 800760a:	4642      	mov	r2, r8
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	47b8      	blx	r7
 8007612:	3001      	adds	r0, #1
 8007614:	f43f ae7b 	beq.w	800730e <_printf_float+0xba>
 8007618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f108 0801 	add.w	r8, r8, #1
 8007628:	f43f ae71 	beq.w	800730e <_printf_float+0xba>
 800762c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762e:	2200      	movs	r2, #0
 8007630:	f103 3aff 	add.w	sl, r3, #4294967295
 8007634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007638:	2300      	movs	r3, #0
 800763a:	f7f9 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800763e:	b9c8      	cbnz	r0, 8007674 <_printf_float+0x420>
 8007640:	4653      	mov	r3, sl
 8007642:	4642      	mov	r2, r8
 8007644:	4631      	mov	r1, r6
 8007646:	4628      	mov	r0, r5
 8007648:	47b8      	blx	r7
 800764a:	3001      	adds	r0, #1
 800764c:	d10e      	bne.n	800766c <_printf_float+0x418>
 800764e:	e65e      	b.n	800730e <_printf_float+0xba>
 8007650:	2301      	movs	r3, #1
 8007652:	4652      	mov	r2, sl
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f ae57 	beq.w	800730e <_printf_float+0xba>
 8007660:	f108 0801 	add.w	r8, r8, #1
 8007664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007666:	3b01      	subs	r3, #1
 8007668:	4543      	cmp	r3, r8
 800766a:	dcf1      	bgt.n	8007650 <_printf_float+0x3fc>
 800766c:	464b      	mov	r3, r9
 800766e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007672:	e6de      	b.n	8007432 <_printf_float+0x1de>
 8007674:	f04f 0800 	mov.w	r8, #0
 8007678:	f104 0a1a 	add.w	sl, r4, #26
 800767c:	e7f2      	b.n	8007664 <_printf_float+0x410>
 800767e:	2301      	movs	r3, #1
 8007680:	e7df      	b.n	8007642 <_printf_float+0x3ee>
 8007682:	2301      	movs	r3, #1
 8007684:	464a      	mov	r2, r9
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f ae3e 	beq.w	800730e <_printf_float+0xba>
 8007692:	f108 0801 	add.w	r8, r8, #1
 8007696:	68e3      	ldr	r3, [r4, #12]
 8007698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	4543      	cmp	r3, r8
 800769e:	dcf0      	bgt.n	8007682 <_printf_float+0x42e>
 80076a0:	e6fc      	b.n	800749c <_printf_float+0x248>
 80076a2:	f04f 0800 	mov.w	r8, #0
 80076a6:	f104 0919 	add.w	r9, r4, #25
 80076aa:	e7f4      	b.n	8007696 <_printf_float+0x442>
 80076ac:	2900      	cmp	r1, #0
 80076ae:	f43f ae8b 	beq.w	80073c8 <_printf_float+0x174>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80076b8:	ab09      	add	r3, sp, #36	; 0x24
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	ec49 8b10 	vmov	d0, r8, r9
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	f8cd a004 	str.w	sl, [sp, #4]
 80076c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076ca:	4628      	mov	r0, r5
 80076cc:	f7ff fd2d 	bl	800712a <__cvt>
 80076d0:	4680      	mov	r8, r0
 80076d2:	e648      	b.n	8007366 <_printf_float+0x112>

080076d4 <_printf_common>:
 80076d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	4691      	mov	r9, r2
 80076da:	461f      	mov	r7, r3
 80076dc:	688a      	ldr	r2, [r1, #8]
 80076de:	690b      	ldr	r3, [r1, #16]
 80076e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e4:	4293      	cmp	r3, r2
 80076e6:	bfb8      	it	lt
 80076e8:	4613      	movlt	r3, r2
 80076ea:	f8c9 3000 	str.w	r3, [r9]
 80076ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076f2:	4606      	mov	r6, r0
 80076f4:	460c      	mov	r4, r1
 80076f6:	b112      	cbz	r2, 80076fe <_printf_common+0x2a>
 80076f8:	3301      	adds	r3, #1
 80076fa:	f8c9 3000 	str.w	r3, [r9]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	0699      	lsls	r1, r3, #26
 8007702:	bf42      	ittt	mi
 8007704:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007708:	3302      	addmi	r3, #2
 800770a:	f8c9 3000 	strmi.w	r3, [r9]
 800770e:	6825      	ldr	r5, [r4, #0]
 8007710:	f015 0506 	ands.w	r5, r5, #6
 8007714:	d107      	bne.n	8007726 <_printf_common+0x52>
 8007716:	f104 0a19 	add.w	sl, r4, #25
 800771a:	68e3      	ldr	r3, [r4, #12]
 800771c:	f8d9 2000 	ldr.w	r2, [r9]
 8007720:	1a9b      	subs	r3, r3, r2
 8007722:	42ab      	cmp	r3, r5
 8007724:	dc28      	bgt.n	8007778 <_printf_common+0xa4>
 8007726:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800772a:	6822      	ldr	r2, [r4, #0]
 800772c:	3300      	adds	r3, #0
 800772e:	bf18      	it	ne
 8007730:	2301      	movne	r3, #1
 8007732:	0692      	lsls	r2, r2, #26
 8007734:	d42d      	bmi.n	8007792 <_printf_common+0xbe>
 8007736:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800773a:	4639      	mov	r1, r7
 800773c:	4630      	mov	r0, r6
 800773e:	47c0      	blx	r8
 8007740:	3001      	adds	r0, #1
 8007742:	d020      	beq.n	8007786 <_printf_common+0xb2>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	68e5      	ldr	r5, [r4, #12]
 8007748:	f8d9 2000 	ldr.w	r2, [r9]
 800774c:	f003 0306 	and.w	r3, r3, #6
 8007750:	2b04      	cmp	r3, #4
 8007752:	bf08      	it	eq
 8007754:	1aad      	subeq	r5, r5, r2
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	6922      	ldr	r2, [r4, #16]
 800775a:	bf0c      	ite	eq
 800775c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007760:	2500      	movne	r5, #0
 8007762:	4293      	cmp	r3, r2
 8007764:	bfc4      	itt	gt
 8007766:	1a9b      	subgt	r3, r3, r2
 8007768:	18ed      	addgt	r5, r5, r3
 800776a:	f04f 0900 	mov.w	r9, #0
 800776e:	341a      	adds	r4, #26
 8007770:	454d      	cmp	r5, r9
 8007772:	d11a      	bne.n	80077aa <_printf_common+0xd6>
 8007774:	2000      	movs	r0, #0
 8007776:	e008      	b.n	800778a <_printf_common+0xb6>
 8007778:	2301      	movs	r3, #1
 800777a:	4652      	mov	r2, sl
 800777c:	4639      	mov	r1, r7
 800777e:	4630      	mov	r0, r6
 8007780:	47c0      	blx	r8
 8007782:	3001      	adds	r0, #1
 8007784:	d103      	bne.n	800778e <_printf_common+0xba>
 8007786:	f04f 30ff 	mov.w	r0, #4294967295
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	3501      	adds	r5, #1
 8007790:	e7c3      	b.n	800771a <_printf_common+0x46>
 8007792:	18e1      	adds	r1, r4, r3
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	2030      	movs	r0, #48	; 0x30
 8007798:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800779c:	4422      	add	r2, r4
 800779e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077a6:	3302      	adds	r3, #2
 80077a8:	e7c5      	b.n	8007736 <_printf_common+0x62>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4622      	mov	r2, r4
 80077ae:	4639      	mov	r1, r7
 80077b0:	4630      	mov	r0, r6
 80077b2:	47c0      	blx	r8
 80077b4:	3001      	adds	r0, #1
 80077b6:	d0e6      	beq.n	8007786 <_printf_common+0xb2>
 80077b8:	f109 0901 	add.w	r9, r9, #1
 80077bc:	e7d8      	b.n	8007770 <_printf_common+0x9c>
	...

080077c0 <_printf_i>:
 80077c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077c8:	460c      	mov	r4, r1
 80077ca:	7e09      	ldrb	r1, [r1, #24]
 80077cc:	b085      	sub	sp, #20
 80077ce:	296e      	cmp	r1, #110	; 0x6e
 80077d0:	4617      	mov	r7, r2
 80077d2:	4606      	mov	r6, r0
 80077d4:	4698      	mov	r8, r3
 80077d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d8:	f000 80b3 	beq.w	8007942 <_printf_i+0x182>
 80077dc:	d822      	bhi.n	8007824 <_printf_i+0x64>
 80077de:	2963      	cmp	r1, #99	; 0x63
 80077e0:	d036      	beq.n	8007850 <_printf_i+0x90>
 80077e2:	d80a      	bhi.n	80077fa <_printf_i+0x3a>
 80077e4:	2900      	cmp	r1, #0
 80077e6:	f000 80b9 	beq.w	800795c <_printf_i+0x19c>
 80077ea:	2958      	cmp	r1, #88	; 0x58
 80077ec:	f000 8083 	beq.w	80078f6 <_printf_i+0x136>
 80077f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80077f8:	e032      	b.n	8007860 <_printf_i+0xa0>
 80077fa:	2964      	cmp	r1, #100	; 0x64
 80077fc:	d001      	beq.n	8007802 <_printf_i+0x42>
 80077fe:	2969      	cmp	r1, #105	; 0x69
 8007800:	d1f6      	bne.n	80077f0 <_printf_i+0x30>
 8007802:	6820      	ldr	r0, [r4, #0]
 8007804:	6813      	ldr	r3, [r2, #0]
 8007806:	0605      	lsls	r5, r0, #24
 8007808:	f103 0104 	add.w	r1, r3, #4
 800780c:	d52a      	bpl.n	8007864 <_printf_i+0xa4>
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6011      	str	r1, [r2, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	da03      	bge.n	800781e <_printf_i+0x5e>
 8007816:	222d      	movs	r2, #45	; 0x2d
 8007818:	425b      	negs	r3, r3
 800781a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800781e:	486f      	ldr	r0, [pc, #444]	; (80079dc <_printf_i+0x21c>)
 8007820:	220a      	movs	r2, #10
 8007822:	e039      	b.n	8007898 <_printf_i+0xd8>
 8007824:	2973      	cmp	r1, #115	; 0x73
 8007826:	f000 809d 	beq.w	8007964 <_printf_i+0x1a4>
 800782a:	d808      	bhi.n	800783e <_printf_i+0x7e>
 800782c:	296f      	cmp	r1, #111	; 0x6f
 800782e:	d020      	beq.n	8007872 <_printf_i+0xb2>
 8007830:	2970      	cmp	r1, #112	; 0x70
 8007832:	d1dd      	bne.n	80077f0 <_printf_i+0x30>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	f043 0320 	orr.w	r3, r3, #32
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	e003      	b.n	8007846 <_printf_i+0x86>
 800783e:	2975      	cmp	r1, #117	; 0x75
 8007840:	d017      	beq.n	8007872 <_printf_i+0xb2>
 8007842:	2978      	cmp	r1, #120	; 0x78
 8007844:	d1d4      	bne.n	80077f0 <_printf_i+0x30>
 8007846:	2378      	movs	r3, #120	; 0x78
 8007848:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800784c:	4864      	ldr	r0, [pc, #400]	; (80079e0 <_printf_i+0x220>)
 800784e:	e055      	b.n	80078fc <_printf_i+0x13c>
 8007850:	6813      	ldr	r3, [r2, #0]
 8007852:	1d19      	adds	r1, r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6011      	str	r1, [r2, #0]
 8007858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800785c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007860:	2301      	movs	r3, #1
 8007862:	e08c      	b.n	800797e <_printf_i+0x1be>
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6011      	str	r1, [r2, #0]
 8007868:	f010 0f40 	tst.w	r0, #64	; 0x40
 800786c:	bf18      	it	ne
 800786e:	b21b      	sxthne	r3, r3
 8007870:	e7cf      	b.n	8007812 <_printf_i+0x52>
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	6825      	ldr	r5, [r4, #0]
 8007876:	1d18      	adds	r0, r3, #4
 8007878:	6010      	str	r0, [r2, #0]
 800787a:	0628      	lsls	r0, r5, #24
 800787c:	d501      	bpl.n	8007882 <_printf_i+0xc2>
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	e002      	b.n	8007888 <_printf_i+0xc8>
 8007882:	0668      	lsls	r0, r5, #25
 8007884:	d5fb      	bpl.n	800787e <_printf_i+0xbe>
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	4854      	ldr	r0, [pc, #336]	; (80079dc <_printf_i+0x21c>)
 800788a:	296f      	cmp	r1, #111	; 0x6f
 800788c:	bf14      	ite	ne
 800788e:	220a      	movne	r2, #10
 8007890:	2208      	moveq	r2, #8
 8007892:	2100      	movs	r1, #0
 8007894:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007898:	6865      	ldr	r5, [r4, #4]
 800789a:	60a5      	str	r5, [r4, #8]
 800789c:	2d00      	cmp	r5, #0
 800789e:	f2c0 8095 	blt.w	80079cc <_printf_i+0x20c>
 80078a2:	6821      	ldr	r1, [r4, #0]
 80078a4:	f021 0104 	bic.w	r1, r1, #4
 80078a8:	6021      	str	r1, [r4, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d13d      	bne.n	800792a <_printf_i+0x16a>
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	f040 808e 	bne.w	80079d0 <_printf_i+0x210>
 80078b4:	4665      	mov	r5, ip
 80078b6:	2a08      	cmp	r2, #8
 80078b8:	d10b      	bne.n	80078d2 <_printf_i+0x112>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	07db      	lsls	r3, r3, #31
 80078be:	d508      	bpl.n	80078d2 <_printf_i+0x112>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	6862      	ldr	r2, [r4, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	bfde      	ittt	le
 80078c8:	2330      	movle	r3, #48	; 0x30
 80078ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078d2:	ebac 0305 	sub.w	r3, ip, r5
 80078d6:	6123      	str	r3, [r4, #16]
 80078d8:	f8cd 8000 	str.w	r8, [sp]
 80078dc:	463b      	mov	r3, r7
 80078de:	aa03      	add	r2, sp, #12
 80078e0:	4621      	mov	r1, r4
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff fef6 	bl	80076d4 <_printf_common>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d14d      	bne.n	8007988 <_printf_i+0x1c8>
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	b005      	add	sp, #20
 80078f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078f6:	4839      	ldr	r0, [pc, #228]	; (80079dc <_printf_i+0x21c>)
 80078f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	6821      	ldr	r1, [r4, #0]
 8007900:	1d1d      	adds	r5, r3, #4
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6015      	str	r5, [r2, #0]
 8007906:	060a      	lsls	r2, r1, #24
 8007908:	d50b      	bpl.n	8007922 <_printf_i+0x162>
 800790a:	07ca      	lsls	r2, r1, #31
 800790c:	bf44      	itt	mi
 800790e:	f041 0120 	orrmi.w	r1, r1, #32
 8007912:	6021      	strmi	r1, [r4, #0]
 8007914:	b91b      	cbnz	r3, 800791e <_printf_i+0x15e>
 8007916:	6822      	ldr	r2, [r4, #0]
 8007918:	f022 0220 	bic.w	r2, r2, #32
 800791c:	6022      	str	r2, [r4, #0]
 800791e:	2210      	movs	r2, #16
 8007920:	e7b7      	b.n	8007892 <_printf_i+0xd2>
 8007922:	064d      	lsls	r5, r1, #25
 8007924:	bf48      	it	mi
 8007926:	b29b      	uxthmi	r3, r3
 8007928:	e7ef      	b.n	800790a <_printf_i+0x14a>
 800792a:	4665      	mov	r5, ip
 800792c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007930:	fb02 3311 	mls	r3, r2, r1, r3
 8007934:	5cc3      	ldrb	r3, [r0, r3]
 8007936:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800793a:	460b      	mov	r3, r1
 800793c:	2900      	cmp	r1, #0
 800793e:	d1f5      	bne.n	800792c <_printf_i+0x16c>
 8007940:	e7b9      	b.n	80078b6 <_printf_i+0xf6>
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	6961      	ldr	r1, [r4, #20]
 8007948:	1d18      	adds	r0, r3, #4
 800794a:	6010      	str	r0, [r2, #0]
 800794c:	0628      	lsls	r0, r5, #24
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	d501      	bpl.n	8007956 <_printf_i+0x196>
 8007952:	6019      	str	r1, [r3, #0]
 8007954:	e002      	b.n	800795c <_printf_i+0x19c>
 8007956:	066a      	lsls	r2, r5, #25
 8007958:	d5fb      	bpl.n	8007952 <_printf_i+0x192>
 800795a:	8019      	strh	r1, [r3, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	6123      	str	r3, [r4, #16]
 8007960:	4665      	mov	r5, ip
 8007962:	e7b9      	b.n	80078d8 <_printf_i+0x118>
 8007964:	6813      	ldr	r3, [r2, #0]
 8007966:	1d19      	adds	r1, r3, #4
 8007968:	6011      	str	r1, [r2, #0]
 800796a:	681d      	ldr	r5, [r3, #0]
 800796c:	6862      	ldr	r2, [r4, #4]
 800796e:	2100      	movs	r1, #0
 8007970:	4628      	mov	r0, r5
 8007972:	f7f8 fc35 	bl	80001e0 <memchr>
 8007976:	b108      	cbz	r0, 800797c <_printf_i+0x1bc>
 8007978:	1b40      	subs	r0, r0, r5
 800797a:	6060      	str	r0, [r4, #4]
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	6123      	str	r3, [r4, #16]
 8007980:	2300      	movs	r3, #0
 8007982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007986:	e7a7      	b.n	80078d8 <_printf_i+0x118>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	462a      	mov	r2, r5
 800798c:	4639      	mov	r1, r7
 800798e:	4630      	mov	r0, r6
 8007990:	47c0      	blx	r8
 8007992:	3001      	adds	r0, #1
 8007994:	d0aa      	beq.n	80078ec <_printf_i+0x12c>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	079b      	lsls	r3, r3, #30
 800799a:	d413      	bmi.n	80079c4 <_printf_i+0x204>
 800799c:	68e0      	ldr	r0, [r4, #12]
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	4298      	cmp	r0, r3
 80079a2:	bfb8      	it	lt
 80079a4:	4618      	movlt	r0, r3
 80079a6:	e7a3      	b.n	80078f0 <_printf_i+0x130>
 80079a8:	2301      	movs	r3, #1
 80079aa:	464a      	mov	r2, r9
 80079ac:	4639      	mov	r1, r7
 80079ae:	4630      	mov	r0, r6
 80079b0:	47c0      	blx	r8
 80079b2:	3001      	adds	r0, #1
 80079b4:	d09a      	beq.n	80078ec <_printf_i+0x12c>
 80079b6:	3501      	adds	r5, #1
 80079b8:	68e3      	ldr	r3, [r4, #12]
 80079ba:	9a03      	ldr	r2, [sp, #12]
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	42ab      	cmp	r3, r5
 80079c0:	dcf2      	bgt.n	80079a8 <_printf_i+0x1e8>
 80079c2:	e7eb      	b.n	800799c <_printf_i+0x1dc>
 80079c4:	2500      	movs	r5, #0
 80079c6:	f104 0919 	add.w	r9, r4, #25
 80079ca:	e7f5      	b.n	80079b8 <_printf_i+0x1f8>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1ac      	bne.n	800792a <_printf_i+0x16a>
 80079d0:	7803      	ldrb	r3, [r0, #0]
 80079d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079da:	e76c      	b.n	80078b6 <_printf_i+0xf6>
 80079dc:	0800be72 	.word	0x0800be72
 80079e0:	0800be83 	.word	0x0800be83

080079e4 <sniprintf>:
 80079e4:	b40c      	push	{r2, r3}
 80079e6:	b530      	push	{r4, r5, lr}
 80079e8:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <sniprintf+0x64>)
 80079ea:	1e0c      	subs	r4, r1, #0
 80079ec:	b09d      	sub	sp, #116	; 0x74
 80079ee:	681d      	ldr	r5, [r3, #0]
 80079f0:	da08      	bge.n	8007a04 <sniprintf+0x20>
 80079f2:	238b      	movs	r3, #139	; 0x8b
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	b01d      	add	sp, #116	; 0x74
 80079fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a00:	b002      	add	sp, #8
 8007a02:	4770      	bx	lr
 8007a04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a0c:	bf14      	ite	ne
 8007a0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a12:	4623      	moveq	r3, r4
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	9307      	str	r3, [sp, #28]
 8007a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a1c:	9002      	str	r0, [sp, #8]
 8007a1e:	9006      	str	r0, [sp, #24]
 8007a20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a26:	ab21      	add	r3, sp, #132	; 0x84
 8007a28:	a902      	add	r1, sp, #8
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	f001 fa5f 	bl	8008ef0 <_svfiprintf_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	bfbc      	itt	lt
 8007a36:	238b      	movlt	r3, #139	; 0x8b
 8007a38:	602b      	strlt	r3, [r5, #0]
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	d0dd      	beq.n	80079fa <sniprintf+0x16>
 8007a3e:	9b02      	ldr	r3, [sp, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e7d9      	b.n	80079fa <sniprintf+0x16>
 8007a46:	bf00      	nop
 8007a48:	200002f8 	.word	0x200002f8

08007a4c <quorem>:
 8007a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	6903      	ldr	r3, [r0, #16]
 8007a52:	690c      	ldr	r4, [r1, #16]
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	4680      	mov	r8, r0
 8007a58:	f2c0 8082 	blt.w	8007b60 <quorem+0x114>
 8007a5c:	3c01      	subs	r4, #1
 8007a5e:	f101 0714 	add.w	r7, r1, #20
 8007a62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007a66:	f100 0614 	add.w	r6, r0, #20
 8007a6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007a6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007a72:	eb06 030c 	add.w	r3, r6, ip
 8007a76:	3501      	adds	r5, #1
 8007a78:	eb07 090c 	add.w	r9, r7, ip
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007a82:	b395      	cbz	r5, 8007aea <quorem+0x9e>
 8007a84:	f04f 0a00 	mov.w	sl, #0
 8007a88:	4638      	mov	r0, r7
 8007a8a:	46b6      	mov	lr, r6
 8007a8c:	46d3      	mov	fp, sl
 8007a8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a92:	b293      	uxth	r3, r2
 8007a94:	fb05 a303 	mla	r3, r5, r3, sl
 8007a98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	ebab 0303 	sub.w	r3, fp, r3
 8007aa2:	0c12      	lsrs	r2, r2, #16
 8007aa4:	f8de b000 	ldr.w	fp, [lr]
 8007aa8:	fb05 a202 	mla	r2, r5, r2, sl
 8007aac:	fa13 f38b 	uxtah	r3, r3, fp
 8007ab0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ab4:	fa1f fb82 	uxth.w	fp, r2
 8007ab8:	f8de 2000 	ldr.w	r2, [lr]
 8007abc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aca:	4581      	cmp	r9, r0
 8007acc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ad0:	f84e 3b04 	str.w	r3, [lr], #4
 8007ad4:	d2db      	bcs.n	8007a8e <quorem+0x42>
 8007ad6:	f856 300c 	ldr.w	r3, [r6, ip]
 8007ada:	b933      	cbnz	r3, 8007aea <quorem+0x9e>
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	3b04      	subs	r3, #4
 8007ae0:	429e      	cmp	r6, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	d330      	bcc.n	8007b48 <quorem+0xfc>
 8007ae6:	f8c8 4010 	str.w	r4, [r8, #16]
 8007aea:	4640      	mov	r0, r8
 8007aec:	f001 f82a 	bl	8008b44 <__mcmp>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	db25      	blt.n	8007b40 <quorem+0xf4>
 8007af4:	3501      	adds	r5, #1
 8007af6:	4630      	mov	r0, r6
 8007af8:	f04f 0c00 	mov.w	ip, #0
 8007afc:	f857 2b04 	ldr.w	r2, [r7], #4
 8007b00:	f8d0 e000 	ldr.w	lr, [r0]
 8007b04:	b293      	uxth	r3, r2
 8007b06:	ebac 0303 	sub.w	r3, ip, r3
 8007b0a:	0c12      	lsrs	r2, r2, #16
 8007b0c:	fa13 f38e 	uxtah	r3, r3, lr
 8007b10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b1e:	45b9      	cmp	r9, r7
 8007b20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b24:	f840 3b04 	str.w	r3, [r0], #4
 8007b28:	d2e8      	bcs.n	8007afc <quorem+0xb0>
 8007b2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007b2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007b32:	b92a      	cbnz	r2, 8007b40 <quorem+0xf4>
 8007b34:	3b04      	subs	r3, #4
 8007b36:	429e      	cmp	r6, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	d30b      	bcc.n	8007b54 <quorem+0x108>
 8007b3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007b40:	4628      	mov	r0, r5
 8007b42:	b003      	add	sp, #12
 8007b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	3b04      	subs	r3, #4
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	d1ca      	bne.n	8007ae6 <quorem+0x9a>
 8007b50:	3c01      	subs	r4, #1
 8007b52:	e7c5      	b.n	8007ae0 <quorem+0x94>
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	3b04      	subs	r3, #4
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	d1ef      	bne.n	8007b3c <quorem+0xf0>
 8007b5c:	3c01      	subs	r4, #1
 8007b5e:	e7ea      	b.n	8007b36 <quorem+0xea>
 8007b60:	2000      	movs	r0, #0
 8007b62:	e7ee      	b.n	8007b42 <quorem+0xf6>
 8007b64:	0000      	movs	r0, r0
	...

08007b68 <_dtoa_r>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	ec57 6b10 	vmov	r6, r7, d0
 8007b70:	b097      	sub	sp, #92	; 0x5c
 8007b72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b74:	9106      	str	r1, [sp, #24]
 8007b76:	4604      	mov	r4, r0
 8007b78:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8007b7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b80:	e9cd 6700 	strd	r6, r7, [sp]
 8007b84:	b93d      	cbnz	r5, 8007b96 <_dtoa_r+0x2e>
 8007b86:	2010      	movs	r0, #16
 8007b88:	f000 fdb4 	bl	80086f4 <malloc>
 8007b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8007b8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b92:	6005      	str	r5, [r0, #0]
 8007b94:	60c5      	str	r5, [r0, #12]
 8007b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b98:	6819      	ldr	r1, [r3, #0]
 8007b9a:	b151      	cbz	r1, 8007bb2 <_dtoa_r+0x4a>
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	604a      	str	r2, [r1, #4]
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4093      	lsls	r3, r2
 8007ba4:	608b      	str	r3, [r1, #8]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 fdeb 	bl	8008782 <_Bfree>
 8007bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	1e3b      	subs	r3, r7, #0
 8007bb4:	bfbb      	ittet	lt
 8007bb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bba:	9301      	strlt	r3, [sp, #4]
 8007bbc:	2300      	movge	r3, #0
 8007bbe:	2201      	movlt	r2, #1
 8007bc0:	bfac      	ite	ge
 8007bc2:	f8c8 3000 	strge.w	r3, [r8]
 8007bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8007bca:	4baf      	ldr	r3, [pc, #700]	; (8007e88 <_dtoa_r+0x320>)
 8007bcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007bd0:	ea33 0308 	bics.w	r3, r3, r8
 8007bd4:	d114      	bne.n	8007c00 <_dtoa_r+0x98>
 8007bd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	9b00      	ldr	r3, [sp, #0]
 8007be0:	b923      	cbnz	r3, 8007bec <_dtoa_r+0x84>
 8007be2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f000 8542 	beq.w	8008670 <_dtoa_r+0xb08>
 8007bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007e9c <_dtoa_r+0x334>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8544 	beq.w	8008680 <_dtoa_r+0xb18>
 8007bf8:	f10b 0303 	add.w	r3, fp, #3
 8007bfc:	f000 bd3e 	b.w	800867c <_dtoa_r+0xb14>
 8007c00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f8 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c10:	4681      	mov	r9, r0
 8007c12:	b168      	cbz	r0, 8007c30 <_dtoa_r+0xc8>
 8007c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c16:	2301      	movs	r3, #1
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8524 	beq.w	800866a <_dtoa_r+0xb02>
 8007c22:	4b9a      	ldr	r3, [pc, #616]	; (8007e8c <_dtoa_r+0x324>)
 8007c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c26:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	f000 bd28 	b.w	8008680 <_dtoa_r+0xb18>
 8007c30:	aa14      	add	r2, sp, #80	; 0x50
 8007c32:	a915      	add	r1, sp, #84	; 0x54
 8007c34:	ec47 6b10 	vmov	d0, r6, r7
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fffa 	bl	8008c32 <__d2b>
 8007c3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007c42:	9004      	str	r0, [sp, #16]
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	d07c      	beq.n	8007d42 <_dtoa_r+0x1da>
 8007c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007c50:	46b2      	mov	sl, r6
 8007c52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4b8b      	ldr	r3, [pc, #556]	; (8007e90 <_dtoa_r+0x328>)
 8007c62:	4650      	mov	r0, sl
 8007c64:	4659      	mov	r1, fp
 8007c66:	f7f8 fb0f 	bl	8000288 <__aeabi_dsub>
 8007c6a:	a381      	add	r3, pc, #516	; (adr r3, 8007e70 <_dtoa_r+0x308>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f7f8 fcc2 	bl	80005f8 <__aeabi_dmul>
 8007c74:	a380      	add	r3, pc, #512	; (adr r3, 8007e78 <_dtoa_r+0x310>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fb07 	bl	800028c <__adddf3>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	4628      	mov	r0, r5
 8007c82:	460f      	mov	r7, r1
 8007c84:	f7f8 fc4e 	bl	8000524 <__aeabi_i2d>
 8007c88:	a37d      	add	r3, pc, #500	; (adr r3, 8007e80 <_dtoa_r+0x318>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 fcb3 	bl	80005f8 <__aeabi_dmul>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 faf7 	bl	800028c <__adddf3>
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	460f      	mov	r7, r1
 8007ca2:	f7f8 ff59 	bl	8000b58 <__aeabi_d2iz>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4682      	mov	sl, r0
 8007caa:	2300      	movs	r3, #0
 8007cac:	4630      	mov	r0, r6
 8007cae:	4639      	mov	r1, r7
 8007cb0:	f7f8 ff14 	bl	8000adc <__aeabi_dcmplt>
 8007cb4:	b148      	cbz	r0, 8007cca <_dtoa_r+0x162>
 8007cb6:	4650      	mov	r0, sl
 8007cb8:	f7f8 fc34 	bl	8000524 <__aeabi_i2d>
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	f7f8 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc4:	b908      	cbnz	r0, 8007cca <_dtoa_r+0x162>
 8007cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cca:	f1ba 0f16 	cmp.w	sl, #22
 8007cce:	d859      	bhi.n	8007d84 <_dtoa_r+0x21c>
 8007cd0:	4970      	ldr	r1, [pc, #448]	; (8007e94 <_dtoa_r+0x32c>)
 8007cd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cde:	f7f8 ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d050      	beq.n	8007d88 <_dtoa_r+0x220>
 8007ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cea:	2300      	movs	r3, #0
 8007cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cf0:	1b5d      	subs	r5, r3, r5
 8007cf2:	f1b5 0801 	subs.w	r8, r5, #1
 8007cf6:	bf49      	itett	mi
 8007cf8:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cfc:	2300      	movpl	r3, #0
 8007cfe:	9305      	strmi	r3, [sp, #20]
 8007d00:	f04f 0800 	movmi.w	r8, #0
 8007d04:	bf58      	it	pl
 8007d06:	9305      	strpl	r3, [sp, #20]
 8007d08:	f1ba 0f00 	cmp.w	sl, #0
 8007d0c:	db3e      	blt.n	8007d8c <_dtoa_r+0x224>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	44d0      	add	r8, sl
 8007d12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007d16:	9307      	str	r3, [sp, #28]
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	2b09      	cmp	r3, #9
 8007d1c:	f200 8090 	bhi.w	8007e40 <_dtoa_r+0x2d8>
 8007d20:	2b05      	cmp	r3, #5
 8007d22:	bfc4      	itt	gt
 8007d24:	3b04      	subgt	r3, #4
 8007d26:	9306      	strgt	r3, [sp, #24]
 8007d28:	9b06      	ldr	r3, [sp, #24]
 8007d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8007d2e:	bfcc      	ite	gt
 8007d30:	2500      	movgt	r5, #0
 8007d32:	2501      	movle	r5, #1
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	f200 808f 	bhi.w	8007e58 <_dtoa_r+0x2f0>
 8007d3a:	e8df f003 	tbb	[pc, r3]
 8007d3e:	7f7d      	.short	0x7f7d
 8007d40:	7131      	.short	0x7131
 8007d42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007d46:	441d      	add	r5, r3
 8007d48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007d4c:	2820      	cmp	r0, #32
 8007d4e:	dd13      	ble.n	8007d78 <_dtoa_r+0x210>
 8007d50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007d54:	9b00      	ldr	r3, [sp, #0]
 8007d56:	fa08 f800 	lsl.w	r8, r8, r0
 8007d5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007d5e:	fa23 f000 	lsr.w	r0, r3, r0
 8007d62:	ea48 0000 	orr.w	r0, r8, r0
 8007d66:	f7f8 fbcd 	bl	8000504 <__aeabi_ui2d>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4682      	mov	sl, r0
 8007d6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007d72:	3d01      	subs	r5, #1
 8007d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d76:	e772      	b.n	8007c5e <_dtoa_r+0xf6>
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	f1c0 0020 	rsb	r0, r0, #32
 8007d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8007d82:	e7f0      	b.n	8007d66 <_dtoa_r+0x1fe>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e7b1      	b.n	8007cec <_dtoa_r+0x184>
 8007d88:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d8a:	e7b0      	b.n	8007cee <_dtoa_r+0x186>
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	eba3 030a 	sub.w	r3, r3, sl
 8007d92:	9305      	str	r3, [sp, #20]
 8007d94:	f1ca 0300 	rsb	r3, sl, #0
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d9e:	e7bb      	b.n	8007d18 <_dtoa_r+0x1b0>
 8007da0:	2301      	movs	r3, #1
 8007da2:	930a      	str	r3, [sp, #40]	; 0x28
 8007da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	dd59      	ble.n	8007e5e <_dtoa_r+0x2f6>
 8007daa:	9302      	str	r3, [sp, #8]
 8007dac:	4699      	mov	r9, r3
 8007dae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007db0:	2200      	movs	r2, #0
 8007db2:	6072      	str	r2, [r6, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	f102 0014 	add.w	r0, r2, #20
 8007dba:	4298      	cmp	r0, r3
 8007dbc:	6871      	ldr	r1, [r6, #4]
 8007dbe:	d953      	bls.n	8007e68 <_dtoa_r+0x300>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 fcaa 	bl	800871a <_Balloc>
 8007dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dc8:	6030      	str	r0, [r6, #0]
 8007dca:	f1b9 0f0e 	cmp.w	r9, #14
 8007dce:	f8d3 b000 	ldr.w	fp, [r3]
 8007dd2:	f200 80e6 	bhi.w	8007fa2 <_dtoa_r+0x43a>
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	f000 80e3 	beq.w	8007fa2 <_dtoa_r+0x43a>
 8007ddc:	ed9d 7b00 	vldr	d7, [sp]
 8007de0:	f1ba 0f00 	cmp.w	sl, #0
 8007de4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007de8:	dd74      	ble.n	8007ed4 <_dtoa_r+0x36c>
 8007dea:	4a2a      	ldr	r2, [pc, #168]	; (8007e94 <_dtoa_r+0x32c>)
 8007dec:	f00a 030f 	and.w	r3, sl, #15
 8007df0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007df4:	ed93 7b00 	vldr	d7, [r3]
 8007df8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007dfc:	06f0      	lsls	r0, r6, #27
 8007dfe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007e02:	d565      	bpl.n	8007ed0 <_dtoa_r+0x368>
 8007e04:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <_dtoa_r+0x330>)
 8007e06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e0e:	f7f8 fd1d 	bl	800084c <__aeabi_ddiv>
 8007e12:	e9cd 0100 	strd	r0, r1, [sp]
 8007e16:	f006 060f 	and.w	r6, r6, #15
 8007e1a:	2503      	movs	r5, #3
 8007e1c:	4f1e      	ldr	r7, [pc, #120]	; (8007e98 <_dtoa_r+0x330>)
 8007e1e:	e04c      	b.n	8007eba <_dtoa_r+0x352>
 8007e20:	2301      	movs	r3, #1
 8007e22:	930a      	str	r3, [sp, #40]	; 0x28
 8007e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e26:	4453      	add	r3, sl
 8007e28:	f103 0901 	add.w	r9, r3, #1
 8007e2c:	9302      	str	r3, [sp, #8]
 8007e2e:	464b      	mov	r3, r9
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	bfb8      	it	lt
 8007e34:	2301      	movlt	r3, #1
 8007e36:	e7ba      	b.n	8007dae <_dtoa_r+0x246>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e7b2      	b.n	8007da2 <_dtoa_r+0x23a>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e7f0      	b.n	8007e22 <_dtoa_r+0x2ba>
 8007e40:	2501      	movs	r5, #1
 8007e42:	2300      	movs	r3, #0
 8007e44:	9306      	str	r3, [sp, #24]
 8007e46:	950a      	str	r5, [sp, #40]	; 0x28
 8007e48:	f04f 33ff 	mov.w	r3, #4294967295
 8007e4c:	9302      	str	r3, [sp, #8]
 8007e4e:	4699      	mov	r9, r3
 8007e50:	2200      	movs	r2, #0
 8007e52:	2312      	movs	r3, #18
 8007e54:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e56:	e7aa      	b.n	8007dae <_dtoa_r+0x246>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e5c:	e7f4      	b.n	8007e48 <_dtoa_r+0x2e0>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	9302      	str	r3, [sp, #8]
 8007e62:	4699      	mov	r9, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	e7f5      	b.n	8007e54 <_dtoa_r+0x2ec>
 8007e68:	3101      	adds	r1, #1
 8007e6a:	6071      	str	r1, [r6, #4]
 8007e6c:	0052      	lsls	r2, r2, #1
 8007e6e:	e7a2      	b.n	8007db6 <_dtoa_r+0x24e>
 8007e70:	636f4361 	.word	0x636f4361
 8007e74:	3fd287a7 	.word	0x3fd287a7
 8007e78:	8b60c8b3 	.word	0x8b60c8b3
 8007e7c:	3fc68a28 	.word	0x3fc68a28
 8007e80:	509f79fb 	.word	0x509f79fb
 8007e84:	3fd34413 	.word	0x3fd34413
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	0800be71 	.word	0x0800be71
 8007e90:	3ff80000 	.word	0x3ff80000
 8007e94:	0800bed0 	.word	0x0800bed0
 8007e98:	0800bea8 	.word	0x0800bea8
 8007e9c:	0800be9d 	.word	0x0800be9d
 8007ea0:	07f1      	lsls	r1, r6, #31
 8007ea2:	d508      	bpl.n	8007eb6 <_dtoa_r+0x34e>
 8007ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eac:	f7f8 fba4 	bl	80005f8 <__aeabi_dmul>
 8007eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	1076      	asrs	r6, r6, #1
 8007eb8:	3708      	adds	r7, #8
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	d1f0      	bne.n	8007ea0 <_dtoa_r+0x338>
 8007ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ec6:	f7f8 fcc1 	bl	800084c <__aeabi_ddiv>
 8007eca:	e9cd 0100 	strd	r0, r1, [sp]
 8007ece:	e01a      	b.n	8007f06 <_dtoa_r+0x39e>
 8007ed0:	2502      	movs	r5, #2
 8007ed2:	e7a3      	b.n	8007e1c <_dtoa_r+0x2b4>
 8007ed4:	f000 80a0 	beq.w	8008018 <_dtoa_r+0x4b0>
 8007ed8:	f1ca 0600 	rsb	r6, sl, #0
 8007edc:	4b9f      	ldr	r3, [pc, #636]	; (800815c <_dtoa_r+0x5f4>)
 8007ede:	4fa0      	ldr	r7, [pc, #640]	; (8008160 <_dtoa_r+0x5f8>)
 8007ee0:	f006 020f 	and.w	r2, r6, #15
 8007ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ef0:	f7f8 fb82 	bl	80005f8 <__aeabi_dmul>
 8007ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8007ef8:	1136      	asrs	r6, r6, #4
 8007efa:	2300      	movs	r3, #0
 8007efc:	2502      	movs	r5, #2
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	d17f      	bne.n	8008002 <_dtoa_r+0x49a>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e1      	bne.n	8007eca <_dtoa_r+0x362>
 8007f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8087 	beq.w	800801c <_dtoa_r+0x4b4>
 8007f0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f12:	2200      	movs	r2, #0
 8007f14:	4b93      	ldr	r3, [pc, #588]	; (8008164 <_dtoa_r+0x5fc>)
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 fddf 	bl	8000adc <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d07c      	beq.n	800801c <_dtoa_r+0x4b4>
 8007f22:	f1b9 0f00 	cmp.w	r9, #0
 8007f26:	d079      	beq.n	800801c <_dtoa_r+0x4b4>
 8007f28:	9b02      	ldr	r3, [sp, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd35      	ble.n	8007f9a <_dtoa_r+0x432>
 8007f2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f32:	9308      	str	r3, [sp, #32]
 8007f34:	4639      	mov	r1, r7
 8007f36:	2200      	movs	r2, #0
 8007f38:	4b8b      	ldr	r3, [pc, #556]	; (8008168 <_dtoa_r+0x600>)
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7f8 fb5c 	bl	80005f8 <__aeabi_dmul>
 8007f40:	e9cd 0100 	strd	r0, r1, [sp]
 8007f44:	9f02      	ldr	r7, [sp, #8]
 8007f46:	3501      	adds	r5, #1
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f7f8 faeb 	bl	8000524 <__aeabi_i2d>
 8007f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f52:	f7f8 fb51 	bl	80005f8 <__aeabi_dmul>
 8007f56:	2200      	movs	r2, #0
 8007f58:	4b84      	ldr	r3, [pc, #528]	; (800816c <_dtoa_r+0x604>)
 8007f5a:	f7f8 f997 	bl	800028c <__adddf3>
 8007f5e:	4605      	mov	r5, r0
 8007f60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f64:	2f00      	cmp	r7, #0
 8007f66:	d15d      	bne.n	8008024 <_dtoa_r+0x4bc>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4b81      	ldr	r3, [pc, #516]	; (8008170 <_dtoa_r+0x608>)
 8007f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f70:	f7f8 f98a 	bl	8000288 <__aeabi_dsub>
 8007f74:	462a      	mov	r2, r5
 8007f76:	4633      	mov	r3, r6
 8007f78:	e9cd 0100 	strd	r0, r1, [sp]
 8007f7c:	f7f8 fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f040 8288 	bne.w	8008496 <_dtoa_r+0x92e>
 8007f86:	462a      	mov	r2, r5
 8007f88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f90:	f7f8 fda4 	bl	8000adc <__aeabi_dcmplt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f040 827c 	bne.w	8008492 <_dtoa_r+0x92a>
 8007f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8007fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f2c0 8150 	blt.w	800824a <_dtoa_r+0x6e2>
 8007faa:	f1ba 0f0e 	cmp.w	sl, #14
 8007fae:	f300 814c 	bgt.w	800824a <_dtoa_r+0x6e2>
 8007fb2:	4b6a      	ldr	r3, [pc, #424]	; (800815c <_dtoa_r+0x5f4>)
 8007fb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fb8:	ed93 7b00 	vldr	d7, [r3]
 8007fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fc4:	f280 80d8 	bge.w	8008178 <_dtoa_r+0x610>
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	f300 80d4 	bgt.w	8008178 <_dtoa_r+0x610>
 8007fd0:	f040 825e 	bne.w	8008490 <_dtoa_r+0x928>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4b66      	ldr	r3, [pc, #408]	; (8008170 <_dtoa_r+0x608>)
 8007fd8:	ec51 0b17 	vmov	r0, r1, d7
 8007fdc:	f7f8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8007fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fe4:	f7f8 fd8e 	bl	8000b04 <__aeabi_dcmpge>
 8007fe8:	464f      	mov	r7, r9
 8007fea:	464e      	mov	r6, r9
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 8234 	bne.w	800845a <_dtoa_r+0x8f2>
 8007ff2:	2331      	movs	r3, #49	; 0x31
 8007ff4:	f10b 0501 	add.w	r5, fp, #1
 8007ff8:	f88b 3000 	strb.w	r3, [fp]
 8007ffc:	f10a 0a01 	add.w	sl, sl, #1
 8008000:	e22f      	b.n	8008462 <_dtoa_r+0x8fa>
 8008002:	07f2      	lsls	r2, r6, #31
 8008004:	d505      	bpl.n	8008012 <_dtoa_r+0x4aa>
 8008006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800800a:	f7f8 faf5 	bl	80005f8 <__aeabi_dmul>
 800800e:	3501      	adds	r5, #1
 8008010:	2301      	movs	r3, #1
 8008012:	1076      	asrs	r6, r6, #1
 8008014:	3708      	adds	r7, #8
 8008016:	e772      	b.n	8007efe <_dtoa_r+0x396>
 8008018:	2502      	movs	r5, #2
 800801a:	e774      	b.n	8007f06 <_dtoa_r+0x39e>
 800801c:	f8cd a020 	str.w	sl, [sp, #32]
 8008020:	464f      	mov	r7, r9
 8008022:	e791      	b.n	8007f48 <_dtoa_r+0x3e0>
 8008024:	4b4d      	ldr	r3, [pc, #308]	; (800815c <_dtoa_r+0x5f4>)
 8008026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800802a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008030:	2b00      	cmp	r3, #0
 8008032:	d047      	beq.n	80080c4 <_dtoa_r+0x55c>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	2000      	movs	r0, #0
 800803a:	494e      	ldr	r1, [pc, #312]	; (8008174 <_dtoa_r+0x60c>)
 800803c:	f7f8 fc06 	bl	800084c <__aeabi_ddiv>
 8008040:	462a      	mov	r2, r5
 8008042:	4633      	mov	r3, r6
 8008044:	f7f8 f920 	bl	8000288 <__aeabi_dsub>
 8008048:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800804c:	465d      	mov	r5, fp
 800804e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008052:	f7f8 fd81 	bl	8000b58 <__aeabi_d2iz>
 8008056:	4606      	mov	r6, r0
 8008058:	f7f8 fa64 	bl	8000524 <__aeabi_i2d>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008064:	f7f8 f910 	bl	8000288 <__aeabi_dsub>
 8008068:	3630      	adds	r6, #48	; 0x30
 800806a:	f805 6b01 	strb.w	r6, [r5], #1
 800806e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008072:	e9cd 0100 	strd	r0, r1, [sp]
 8008076:	f7f8 fd31 	bl	8000adc <__aeabi_dcmplt>
 800807a:	2800      	cmp	r0, #0
 800807c:	d163      	bne.n	8008146 <_dtoa_r+0x5de>
 800807e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008082:	2000      	movs	r0, #0
 8008084:	4937      	ldr	r1, [pc, #220]	; (8008164 <_dtoa_r+0x5fc>)
 8008086:	f7f8 f8ff 	bl	8000288 <__aeabi_dsub>
 800808a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800808e:	f7f8 fd25 	bl	8000adc <__aeabi_dcmplt>
 8008092:	2800      	cmp	r0, #0
 8008094:	f040 80b7 	bne.w	8008206 <_dtoa_r+0x69e>
 8008098:	eba5 030b 	sub.w	r3, r5, fp
 800809c:	429f      	cmp	r7, r3
 800809e:	f77f af7c 	ble.w	8007f9a <_dtoa_r+0x432>
 80080a2:	2200      	movs	r2, #0
 80080a4:	4b30      	ldr	r3, [pc, #192]	; (8008168 <_dtoa_r+0x600>)
 80080a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080aa:	f7f8 faa5 	bl	80005f8 <__aeabi_dmul>
 80080ae:	2200      	movs	r2, #0
 80080b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80080b4:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <_dtoa_r+0x600>)
 80080b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080ba:	f7f8 fa9d 	bl	80005f8 <__aeabi_dmul>
 80080be:	e9cd 0100 	strd	r0, r1, [sp]
 80080c2:	e7c4      	b.n	800804e <_dtoa_r+0x4e6>
 80080c4:	462a      	mov	r2, r5
 80080c6:	4633      	mov	r3, r6
 80080c8:	f7f8 fa96 	bl	80005f8 <__aeabi_dmul>
 80080cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80080d0:	eb0b 0507 	add.w	r5, fp, r7
 80080d4:	465e      	mov	r6, fp
 80080d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080da:	f7f8 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80080de:	4607      	mov	r7, r0
 80080e0:	f7f8 fa20 	bl	8000524 <__aeabi_i2d>
 80080e4:	3730      	adds	r7, #48	; 0x30
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080ee:	f7f8 f8cb 	bl	8000288 <__aeabi_dsub>
 80080f2:	f806 7b01 	strb.w	r7, [r6], #1
 80080f6:	42ae      	cmp	r6, r5
 80080f8:	e9cd 0100 	strd	r0, r1, [sp]
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	d126      	bne.n	8008150 <_dtoa_r+0x5e8>
 8008102:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <_dtoa_r+0x60c>)
 8008104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008108:	f7f8 f8c0 	bl	800028c <__adddf3>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008114:	f7f8 fd00 	bl	8000b18 <__aeabi_dcmpgt>
 8008118:	2800      	cmp	r0, #0
 800811a:	d174      	bne.n	8008206 <_dtoa_r+0x69e>
 800811c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008120:	2000      	movs	r0, #0
 8008122:	4914      	ldr	r1, [pc, #80]	; (8008174 <_dtoa_r+0x60c>)
 8008124:	f7f8 f8b0 	bl	8000288 <__aeabi_dsub>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008130:	f7f8 fcd4 	bl	8000adc <__aeabi_dcmplt>
 8008134:	2800      	cmp	r0, #0
 8008136:	f43f af30 	beq.w	8007f9a <_dtoa_r+0x432>
 800813a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800813e:	2b30      	cmp	r3, #48	; 0x30
 8008140:	f105 32ff 	add.w	r2, r5, #4294967295
 8008144:	d002      	beq.n	800814c <_dtoa_r+0x5e4>
 8008146:	f8dd a020 	ldr.w	sl, [sp, #32]
 800814a:	e04a      	b.n	80081e2 <_dtoa_r+0x67a>
 800814c:	4615      	mov	r5, r2
 800814e:	e7f4      	b.n	800813a <_dtoa_r+0x5d2>
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <_dtoa_r+0x600>)
 8008152:	f7f8 fa51 	bl	80005f8 <__aeabi_dmul>
 8008156:	e9cd 0100 	strd	r0, r1, [sp]
 800815a:	e7bc      	b.n	80080d6 <_dtoa_r+0x56e>
 800815c:	0800bed0 	.word	0x0800bed0
 8008160:	0800bea8 	.word	0x0800bea8
 8008164:	3ff00000 	.word	0x3ff00000
 8008168:	40240000 	.word	0x40240000
 800816c:	401c0000 	.word	0x401c0000
 8008170:	40140000 	.word	0x40140000
 8008174:	3fe00000 	.word	0x3fe00000
 8008178:	e9dd 6700 	ldrd	r6, r7, [sp]
 800817c:	465d      	mov	r5, fp
 800817e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008182:	4630      	mov	r0, r6
 8008184:	4639      	mov	r1, r7
 8008186:	f7f8 fb61 	bl	800084c <__aeabi_ddiv>
 800818a:	f7f8 fce5 	bl	8000b58 <__aeabi_d2iz>
 800818e:	4680      	mov	r8, r0
 8008190:	f7f8 f9c8 	bl	8000524 <__aeabi_i2d>
 8008194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008198:	f7f8 fa2e 	bl	80005f8 <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80081a8:	f7f8 f86e 	bl	8000288 <__aeabi_dsub>
 80081ac:	f805 6b01 	strb.w	r6, [r5], #1
 80081b0:	eba5 060b 	sub.w	r6, r5, fp
 80081b4:	45b1      	cmp	r9, r6
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	d139      	bne.n	8008230 <_dtoa_r+0x6c8>
 80081bc:	f7f8 f866 	bl	800028c <__adddf3>
 80081c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	f7f8 fca6 	bl	8000b18 <__aeabi_dcmpgt>
 80081cc:	b9c8      	cbnz	r0, 8008202 <_dtoa_r+0x69a>
 80081ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081d2:	4630      	mov	r0, r6
 80081d4:	4639      	mov	r1, r7
 80081d6:	f7f8 fc77 	bl	8000ac8 <__aeabi_dcmpeq>
 80081da:	b110      	cbz	r0, 80081e2 <_dtoa_r+0x67a>
 80081dc:	f018 0f01 	tst.w	r8, #1
 80081e0:	d10f      	bne.n	8008202 <_dtoa_r+0x69a>
 80081e2:	9904      	ldr	r1, [sp, #16]
 80081e4:	4620      	mov	r0, r4
 80081e6:	f000 facc 	bl	8008782 <_Bfree>
 80081ea:	2300      	movs	r3, #0
 80081ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ee:	702b      	strb	r3, [r5, #0]
 80081f0:	f10a 0301 	add.w	r3, sl, #1
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8241 	beq.w	8008680 <_dtoa_r+0xb18>
 80081fe:	601d      	str	r5, [r3, #0]
 8008200:	e23e      	b.n	8008680 <_dtoa_r+0xb18>
 8008202:	f8cd a020 	str.w	sl, [sp, #32]
 8008206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800820a:	2a39      	cmp	r2, #57	; 0x39
 800820c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008210:	d108      	bne.n	8008224 <_dtoa_r+0x6bc>
 8008212:	459b      	cmp	fp, r3
 8008214:	d10a      	bne.n	800822c <_dtoa_r+0x6c4>
 8008216:	9b08      	ldr	r3, [sp, #32]
 8008218:	3301      	adds	r3, #1
 800821a:	9308      	str	r3, [sp, #32]
 800821c:	2330      	movs	r3, #48	; 0x30
 800821e:	f88b 3000 	strb.w	r3, [fp]
 8008222:	465b      	mov	r3, fp
 8008224:	781a      	ldrb	r2, [r3, #0]
 8008226:	3201      	adds	r2, #1
 8008228:	701a      	strb	r2, [r3, #0]
 800822a:	e78c      	b.n	8008146 <_dtoa_r+0x5de>
 800822c:	461d      	mov	r5, r3
 800822e:	e7ea      	b.n	8008206 <_dtoa_r+0x69e>
 8008230:	2200      	movs	r2, #0
 8008232:	4b9b      	ldr	r3, [pc, #620]	; (80084a0 <_dtoa_r+0x938>)
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	4606      	mov	r6, r0
 800823e:	460f      	mov	r7, r1
 8008240:	f7f8 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008244:	2800      	cmp	r0, #0
 8008246:	d09a      	beq.n	800817e <_dtoa_r+0x616>
 8008248:	e7cb      	b.n	80081e2 <_dtoa_r+0x67a>
 800824a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800824c:	2a00      	cmp	r2, #0
 800824e:	f000 808b 	beq.w	8008368 <_dtoa_r+0x800>
 8008252:	9a06      	ldr	r2, [sp, #24]
 8008254:	2a01      	cmp	r2, #1
 8008256:	dc6e      	bgt.n	8008336 <_dtoa_r+0x7ce>
 8008258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800825a:	2a00      	cmp	r2, #0
 800825c:	d067      	beq.n	800832e <_dtoa_r+0x7c6>
 800825e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008262:	9f07      	ldr	r7, [sp, #28]
 8008264:	9d05      	ldr	r5, [sp, #20]
 8008266:	9a05      	ldr	r2, [sp, #20]
 8008268:	2101      	movs	r1, #1
 800826a:	441a      	add	r2, r3
 800826c:	4620      	mov	r0, r4
 800826e:	9205      	str	r2, [sp, #20]
 8008270:	4498      	add	r8, r3
 8008272:	f000 fb26 	bl	80088c2 <__i2b>
 8008276:	4606      	mov	r6, r0
 8008278:	2d00      	cmp	r5, #0
 800827a:	dd0c      	ble.n	8008296 <_dtoa_r+0x72e>
 800827c:	f1b8 0f00 	cmp.w	r8, #0
 8008280:	dd09      	ble.n	8008296 <_dtoa_r+0x72e>
 8008282:	4545      	cmp	r5, r8
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	462b      	mov	r3, r5
 8008288:	bfa8      	it	ge
 800828a:	4643      	movge	r3, r8
 800828c:	1ad2      	subs	r2, r2, r3
 800828e:	9205      	str	r2, [sp, #20]
 8008290:	1aed      	subs	r5, r5, r3
 8008292:	eba8 0803 	sub.w	r8, r8, r3
 8008296:	9b07      	ldr	r3, [sp, #28]
 8008298:	b1eb      	cbz	r3, 80082d6 <_dtoa_r+0x76e>
 800829a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829c:	2b00      	cmp	r3, #0
 800829e:	d067      	beq.n	8008370 <_dtoa_r+0x808>
 80082a0:	b18f      	cbz	r7, 80082c6 <_dtoa_r+0x75e>
 80082a2:	4631      	mov	r1, r6
 80082a4:	463a      	mov	r2, r7
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 fbaa 	bl	8008a00 <__pow5mult>
 80082ac:	9a04      	ldr	r2, [sp, #16]
 80082ae:	4601      	mov	r1, r0
 80082b0:	4606      	mov	r6, r0
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 fb0e 	bl	80088d4 <__multiply>
 80082b8:	9904      	ldr	r1, [sp, #16]
 80082ba:	9008      	str	r0, [sp, #32]
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fa60 	bl	8008782 <_Bfree>
 80082c2:	9b08      	ldr	r3, [sp, #32]
 80082c4:	9304      	str	r3, [sp, #16]
 80082c6:	9b07      	ldr	r3, [sp, #28]
 80082c8:	1bda      	subs	r2, r3, r7
 80082ca:	d004      	beq.n	80082d6 <_dtoa_r+0x76e>
 80082cc:	9904      	ldr	r1, [sp, #16]
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 fb96 	bl	8008a00 <__pow5mult>
 80082d4:	9004      	str	r0, [sp, #16]
 80082d6:	2101      	movs	r1, #1
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 faf2 	bl	80088c2 <__i2b>
 80082de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e0:	4607      	mov	r7, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 81d0 	beq.w	8008688 <_dtoa_r+0xb20>
 80082e8:	461a      	mov	r2, r3
 80082ea:	4601      	mov	r1, r0
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fb87 	bl	8008a00 <__pow5mult>
 80082f2:	9b06      	ldr	r3, [sp, #24]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	4607      	mov	r7, r0
 80082f8:	dc40      	bgt.n	800837c <_dtoa_r+0x814>
 80082fa:	9b00      	ldr	r3, [sp, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d139      	bne.n	8008374 <_dtoa_r+0x80c>
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008306:	2b00      	cmp	r3, #0
 8008308:	d136      	bne.n	8008378 <_dtoa_r+0x810>
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008310:	0d1b      	lsrs	r3, r3, #20
 8008312:	051b      	lsls	r3, r3, #20
 8008314:	b12b      	cbz	r3, 8008322 <_dtoa_r+0x7ba>
 8008316:	9b05      	ldr	r3, [sp, #20]
 8008318:	3301      	adds	r3, #1
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	f108 0801 	add.w	r8, r8, #1
 8008320:	2301      	movs	r3, #1
 8008322:	9307      	str	r3, [sp, #28]
 8008324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008326:	2b00      	cmp	r3, #0
 8008328:	d12a      	bne.n	8008380 <_dtoa_r+0x818>
 800832a:	2001      	movs	r0, #1
 800832c:	e030      	b.n	8008390 <_dtoa_r+0x828>
 800832e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008330:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008334:	e795      	b.n	8008262 <_dtoa_r+0x6fa>
 8008336:	9b07      	ldr	r3, [sp, #28]
 8008338:	f109 37ff 	add.w	r7, r9, #4294967295
 800833c:	42bb      	cmp	r3, r7
 800833e:	bfbf      	itttt	lt
 8008340:	9b07      	ldrlt	r3, [sp, #28]
 8008342:	9707      	strlt	r7, [sp, #28]
 8008344:	1afa      	sublt	r2, r7, r3
 8008346:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008348:	bfbb      	ittet	lt
 800834a:	189b      	addlt	r3, r3, r2
 800834c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800834e:	1bdf      	subge	r7, r3, r7
 8008350:	2700      	movlt	r7, #0
 8008352:	f1b9 0f00 	cmp.w	r9, #0
 8008356:	bfb5      	itete	lt
 8008358:	9b05      	ldrlt	r3, [sp, #20]
 800835a:	9d05      	ldrge	r5, [sp, #20]
 800835c:	eba3 0509 	sublt.w	r5, r3, r9
 8008360:	464b      	movge	r3, r9
 8008362:	bfb8      	it	lt
 8008364:	2300      	movlt	r3, #0
 8008366:	e77e      	b.n	8008266 <_dtoa_r+0x6fe>
 8008368:	9f07      	ldr	r7, [sp, #28]
 800836a:	9d05      	ldr	r5, [sp, #20]
 800836c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800836e:	e783      	b.n	8008278 <_dtoa_r+0x710>
 8008370:	9a07      	ldr	r2, [sp, #28]
 8008372:	e7ab      	b.n	80082cc <_dtoa_r+0x764>
 8008374:	2300      	movs	r3, #0
 8008376:	e7d4      	b.n	8008322 <_dtoa_r+0x7ba>
 8008378:	9b00      	ldr	r3, [sp, #0]
 800837a:	e7d2      	b.n	8008322 <_dtoa_r+0x7ba>
 800837c:	2300      	movs	r3, #0
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008386:	6918      	ldr	r0, [r3, #16]
 8008388:	f000 fa4d 	bl	8008826 <__hi0bits>
 800838c:	f1c0 0020 	rsb	r0, r0, #32
 8008390:	4440      	add	r0, r8
 8008392:	f010 001f 	ands.w	r0, r0, #31
 8008396:	d047      	beq.n	8008428 <_dtoa_r+0x8c0>
 8008398:	f1c0 0320 	rsb	r3, r0, #32
 800839c:	2b04      	cmp	r3, #4
 800839e:	dd3b      	ble.n	8008418 <_dtoa_r+0x8b0>
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	f1c0 001c 	rsb	r0, r0, #28
 80083a6:	4403      	add	r3, r0
 80083a8:	9305      	str	r3, [sp, #20]
 80083aa:	4405      	add	r5, r0
 80083ac:	4480      	add	r8, r0
 80083ae:	9b05      	ldr	r3, [sp, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dd05      	ble.n	80083c0 <_dtoa_r+0x858>
 80083b4:	461a      	mov	r2, r3
 80083b6:	9904      	ldr	r1, [sp, #16]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 fb6f 	bl	8008a9c <__lshift>
 80083be:	9004      	str	r0, [sp, #16]
 80083c0:	f1b8 0f00 	cmp.w	r8, #0
 80083c4:	dd05      	ble.n	80083d2 <_dtoa_r+0x86a>
 80083c6:	4639      	mov	r1, r7
 80083c8:	4642      	mov	r2, r8
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fb66 	bl	8008a9c <__lshift>
 80083d0:	4607      	mov	r7, r0
 80083d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d4:	b353      	cbz	r3, 800842c <_dtoa_r+0x8c4>
 80083d6:	4639      	mov	r1, r7
 80083d8:	9804      	ldr	r0, [sp, #16]
 80083da:	f000 fbb3 	bl	8008b44 <__mcmp>
 80083de:	2800      	cmp	r0, #0
 80083e0:	da24      	bge.n	800842c <_dtoa_r+0x8c4>
 80083e2:	2300      	movs	r3, #0
 80083e4:	220a      	movs	r2, #10
 80083e6:	9904      	ldr	r1, [sp, #16]
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f9e1 	bl	80087b0 <__multadd>
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	9004      	str	r0, [sp, #16]
 80083f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 814d 	beq.w	8008696 <_dtoa_r+0xb2e>
 80083fc:	2300      	movs	r3, #0
 80083fe:	4631      	mov	r1, r6
 8008400:	220a      	movs	r2, #10
 8008402:	4620      	mov	r0, r4
 8008404:	f000 f9d4 	bl	80087b0 <__multadd>
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	4606      	mov	r6, r0
 800840e:	dc4f      	bgt.n	80084b0 <_dtoa_r+0x948>
 8008410:	9b06      	ldr	r3, [sp, #24]
 8008412:	2b02      	cmp	r3, #2
 8008414:	dd4c      	ble.n	80084b0 <_dtoa_r+0x948>
 8008416:	e011      	b.n	800843c <_dtoa_r+0x8d4>
 8008418:	d0c9      	beq.n	80083ae <_dtoa_r+0x846>
 800841a:	9a05      	ldr	r2, [sp, #20]
 800841c:	331c      	adds	r3, #28
 800841e:	441a      	add	r2, r3
 8008420:	9205      	str	r2, [sp, #20]
 8008422:	441d      	add	r5, r3
 8008424:	4498      	add	r8, r3
 8008426:	e7c2      	b.n	80083ae <_dtoa_r+0x846>
 8008428:	4603      	mov	r3, r0
 800842a:	e7f6      	b.n	800841a <_dtoa_r+0x8b2>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	dc38      	bgt.n	80084a4 <_dtoa_r+0x93c>
 8008432:	9b06      	ldr	r3, [sp, #24]
 8008434:	2b02      	cmp	r3, #2
 8008436:	dd35      	ble.n	80084a4 <_dtoa_r+0x93c>
 8008438:	f8cd 9008 	str.w	r9, [sp, #8]
 800843c:	9b02      	ldr	r3, [sp, #8]
 800843e:	b963      	cbnz	r3, 800845a <_dtoa_r+0x8f2>
 8008440:	4639      	mov	r1, r7
 8008442:	2205      	movs	r2, #5
 8008444:	4620      	mov	r0, r4
 8008446:	f000 f9b3 	bl	80087b0 <__multadd>
 800844a:	4601      	mov	r1, r0
 800844c:	4607      	mov	r7, r0
 800844e:	9804      	ldr	r0, [sp, #16]
 8008450:	f000 fb78 	bl	8008b44 <__mcmp>
 8008454:	2800      	cmp	r0, #0
 8008456:	f73f adcc 	bgt.w	8007ff2 <_dtoa_r+0x48a>
 800845a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845c:	465d      	mov	r5, fp
 800845e:	ea6f 0a03 	mvn.w	sl, r3
 8008462:	f04f 0900 	mov.w	r9, #0
 8008466:	4639      	mov	r1, r7
 8008468:	4620      	mov	r0, r4
 800846a:	f000 f98a 	bl	8008782 <_Bfree>
 800846e:	2e00      	cmp	r6, #0
 8008470:	f43f aeb7 	beq.w	80081e2 <_dtoa_r+0x67a>
 8008474:	f1b9 0f00 	cmp.w	r9, #0
 8008478:	d005      	beq.n	8008486 <_dtoa_r+0x91e>
 800847a:	45b1      	cmp	r9, r6
 800847c:	d003      	beq.n	8008486 <_dtoa_r+0x91e>
 800847e:	4649      	mov	r1, r9
 8008480:	4620      	mov	r0, r4
 8008482:	f000 f97e 	bl	8008782 <_Bfree>
 8008486:	4631      	mov	r1, r6
 8008488:	4620      	mov	r0, r4
 800848a:	f000 f97a 	bl	8008782 <_Bfree>
 800848e:	e6a8      	b.n	80081e2 <_dtoa_r+0x67a>
 8008490:	2700      	movs	r7, #0
 8008492:	463e      	mov	r6, r7
 8008494:	e7e1      	b.n	800845a <_dtoa_r+0x8f2>
 8008496:	f8dd a020 	ldr.w	sl, [sp, #32]
 800849a:	463e      	mov	r6, r7
 800849c:	e5a9      	b.n	8007ff2 <_dtoa_r+0x48a>
 800849e:	bf00      	nop
 80084a0:	40240000 	.word	0x40240000
 80084a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 80fa 	beq.w	80086a4 <_dtoa_r+0xb3c>
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	dd05      	ble.n	80084c0 <_dtoa_r+0x958>
 80084b4:	4631      	mov	r1, r6
 80084b6:	462a      	mov	r2, r5
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 faef 	bl	8008a9c <__lshift>
 80084be:	4606      	mov	r6, r0
 80084c0:	9b07      	ldr	r3, [sp, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d04c      	beq.n	8008560 <_dtoa_r+0x9f8>
 80084c6:	6871      	ldr	r1, [r6, #4]
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 f926 	bl	800871a <_Balloc>
 80084ce:	6932      	ldr	r2, [r6, #16]
 80084d0:	3202      	adds	r2, #2
 80084d2:	4605      	mov	r5, r0
 80084d4:	0092      	lsls	r2, r2, #2
 80084d6:	f106 010c 	add.w	r1, r6, #12
 80084da:	300c      	adds	r0, #12
 80084dc:	f000 f912 	bl	8008704 <memcpy>
 80084e0:	2201      	movs	r2, #1
 80084e2:	4629      	mov	r1, r5
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fad9 	bl	8008a9c <__lshift>
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	f8cd b014 	str.w	fp, [sp, #20]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	46b1      	mov	r9, r6
 80084f6:	9307      	str	r3, [sp, #28]
 80084f8:	4606      	mov	r6, r0
 80084fa:	4639      	mov	r1, r7
 80084fc:	9804      	ldr	r0, [sp, #16]
 80084fe:	f7ff faa5 	bl	8007a4c <quorem>
 8008502:	4649      	mov	r1, r9
 8008504:	4605      	mov	r5, r0
 8008506:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800850a:	9804      	ldr	r0, [sp, #16]
 800850c:	f000 fb1a 	bl	8008b44 <__mcmp>
 8008510:	4632      	mov	r2, r6
 8008512:	9000      	str	r0, [sp, #0]
 8008514:	4639      	mov	r1, r7
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fb2e 	bl	8008b78 <__mdiff>
 800851c:	68c3      	ldr	r3, [r0, #12]
 800851e:	4602      	mov	r2, r0
 8008520:	bb03      	cbnz	r3, 8008564 <_dtoa_r+0x9fc>
 8008522:	4601      	mov	r1, r0
 8008524:	9008      	str	r0, [sp, #32]
 8008526:	9804      	ldr	r0, [sp, #16]
 8008528:	f000 fb0c 	bl	8008b44 <__mcmp>
 800852c:	9a08      	ldr	r2, [sp, #32]
 800852e:	4603      	mov	r3, r0
 8008530:	4611      	mov	r1, r2
 8008532:	4620      	mov	r0, r4
 8008534:	9308      	str	r3, [sp, #32]
 8008536:	f000 f924 	bl	8008782 <_Bfree>
 800853a:	9b08      	ldr	r3, [sp, #32]
 800853c:	b9a3      	cbnz	r3, 8008568 <_dtoa_r+0xa00>
 800853e:	9a06      	ldr	r2, [sp, #24]
 8008540:	b992      	cbnz	r2, 8008568 <_dtoa_r+0xa00>
 8008542:	9a07      	ldr	r2, [sp, #28]
 8008544:	b982      	cbnz	r2, 8008568 <_dtoa_r+0xa00>
 8008546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800854a:	d029      	beq.n	80085a0 <_dtoa_r+0xa38>
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd01      	ble.n	8008556 <_dtoa_r+0x9ee>
 8008552:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008556:	9b05      	ldr	r3, [sp, #20]
 8008558:	1c5d      	adds	r5, r3, #1
 800855a:	f883 8000 	strb.w	r8, [r3]
 800855e:	e782      	b.n	8008466 <_dtoa_r+0x8fe>
 8008560:	4630      	mov	r0, r6
 8008562:	e7c2      	b.n	80084ea <_dtoa_r+0x982>
 8008564:	2301      	movs	r3, #1
 8008566:	e7e3      	b.n	8008530 <_dtoa_r+0x9c8>
 8008568:	9a00      	ldr	r2, [sp, #0]
 800856a:	2a00      	cmp	r2, #0
 800856c:	db04      	blt.n	8008578 <_dtoa_r+0xa10>
 800856e:	d125      	bne.n	80085bc <_dtoa_r+0xa54>
 8008570:	9a06      	ldr	r2, [sp, #24]
 8008572:	bb1a      	cbnz	r2, 80085bc <_dtoa_r+0xa54>
 8008574:	9a07      	ldr	r2, [sp, #28]
 8008576:	bb0a      	cbnz	r2, 80085bc <_dtoa_r+0xa54>
 8008578:	2b00      	cmp	r3, #0
 800857a:	ddec      	ble.n	8008556 <_dtoa_r+0x9ee>
 800857c:	2201      	movs	r2, #1
 800857e:	9904      	ldr	r1, [sp, #16]
 8008580:	4620      	mov	r0, r4
 8008582:	f000 fa8b 	bl	8008a9c <__lshift>
 8008586:	4639      	mov	r1, r7
 8008588:	9004      	str	r0, [sp, #16]
 800858a:	f000 fadb 	bl	8008b44 <__mcmp>
 800858e:	2800      	cmp	r0, #0
 8008590:	dc03      	bgt.n	800859a <_dtoa_r+0xa32>
 8008592:	d1e0      	bne.n	8008556 <_dtoa_r+0x9ee>
 8008594:	f018 0f01 	tst.w	r8, #1
 8008598:	d0dd      	beq.n	8008556 <_dtoa_r+0x9ee>
 800859a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800859e:	d1d8      	bne.n	8008552 <_dtoa_r+0x9ea>
 80085a0:	9b05      	ldr	r3, [sp, #20]
 80085a2:	9a05      	ldr	r2, [sp, #20]
 80085a4:	1c5d      	adds	r5, r3, #1
 80085a6:	2339      	movs	r3, #57	; 0x39
 80085a8:	7013      	strb	r3, [r2, #0]
 80085aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085ae:	2b39      	cmp	r3, #57	; 0x39
 80085b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80085b4:	d04f      	beq.n	8008656 <_dtoa_r+0xaee>
 80085b6:	3301      	adds	r3, #1
 80085b8:	7013      	strb	r3, [r2, #0]
 80085ba:	e754      	b.n	8008466 <_dtoa_r+0x8fe>
 80085bc:	9a05      	ldr	r2, [sp, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f102 0501 	add.w	r5, r2, #1
 80085c4:	dd06      	ble.n	80085d4 <_dtoa_r+0xa6c>
 80085c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085ca:	d0e9      	beq.n	80085a0 <_dtoa_r+0xa38>
 80085cc:	f108 0801 	add.w	r8, r8, #1
 80085d0:	9b05      	ldr	r3, [sp, #20]
 80085d2:	e7c2      	b.n	800855a <_dtoa_r+0x9f2>
 80085d4:	9a02      	ldr	r2, [sp, #8]
 80085d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80085da:	eba5 030b 	sub.w	r3, r5, fp
 80085de:	4293      	cmp	r3, r2
 80085e0:	d021      	beq.n	8008626 <_dtoa_r+0xabe>
 80085e2:	2300      	movs	r3, #0
 80085e4:	220a      	movs	r2, #10
 80085e6:	9904      	ldr	r1, [sp, #16]
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 f8e1 	bl	80087b0 <__multadd>
 80085ee:	45b1      	cmp	r9, r6
 80085f0:	9004      	str	r0, [sp, #16]
 80085f2:	f04f 0300 	mov.w	r3, #0
 80085f6:	f04f 020a 	mov.w	r2, #10
 80085fa:	4649      	mov	r1, r9
 80085fc:	4620      	mov	r0, r4
 80085fe:	d105      	bne.n	800860c <_dtoa_r+0xaa4>
 8008600:	f000 f8d6 	bl	80087b0 <__multadd>
 8008604:	4681      	mov	r9, r0
 8008606:	4606      	mov	r6, r0
 8008608:	9505      	str	r5, [sp, #20]
 800860a:	e776      	b.n	80084fa <_dtoa_r+0x992>
 800860c:	f000 f8d0 	bl	80087b0 <__multadd>
 8008610:	4631      	mov	r1, r6
 8008612:	4681      	mov	r9, r0
 8008614:	2300      	movs	r3, #0
 8008616:	220a      	movs	r2, #10
 8008618:	4620      	mov	r0, r4
 800861a:	f000 f8c9 	bl	80087b0 <__multadd>
 800861e:	4606      	mov	r6, r0
 8008620:	e7f2      	b.n	8008608 <_dtoa_r+0xaa0>
 8008622:	f04f 0900 	mov.w	r9, #0
 8008626:	2201      	movs	r2, #1
 8008628:	9904      	ldr	r1, [sp, #16]
 800862a:	4620      	mov	r0, r4
 800862c:	f000 fa36 	bl	8008a9c <__lshift>
 8008630:	4639      	mov	r1, r7
 8008632:	9004      	str	r0, [sp, #16]
 8008634:	f000 fa86 	bl	8008b44 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	dcb6      	bgt.n	80085aa <_dtoa_r+0xa42>
 800863c:	d102      	bne.n	8008644 <_dtoa_r+0xadc>
 800863e:	f018 0f01 	tst.w	r8, #1
 8008642:	d1b2      	bne.n	80085aa <_dtoa_r+0xa42>
 8008644:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008648:	2b30      	cmp	r3, #48	; 0x30
 800864a:	f105 32ff 	add.w	r2, r5, #4294967295
 800864e:	f47f af0a 	bne.w	8008466 <_dtoa_r+0x8fe>
 8008652:	4615      	mov	r5, r2
 8008654:	e7f6      	b.n	8008644 <_dtoa_r+0xadc>
 8008656:	4593      	cmp	fp, r2
 8008658:	d105      	bne.n	8008666 <_dtoa_r+0xafe>
 800865a:	2331      	movs	r3, #49	; 0x31
 800865c:	f10a 0a01 	add.w	sl, sl, #1
 8008660:	f88b 3000 	strb.w	r3, [fp]
 8008664:	e6ff      	b.n	8008466 <_dtoa_r+0x8fe>
 8008666:	4615      	mov	r5, r2
 8008668:	e79f      	b.n	80085aa <_dtoa_r+0xa42>
 800866a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80086d0 <_dtoa_r+0xb68>
 800866e:	e007      	b.n	8008680 <_dtoa_r+0xb18>
 8008670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008672:	f8df b060 	ldr.w	fp, [pc, #96]	; 80086d4 <_dtoa_r+0xb6c>
 8008676:	b11b      	cbz	r3, 8008680 <_dtoa_r+0xb18>
 8008678:	f10b 0308 	add.w	r3, fp, #8
 800867c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	4658      	mov	r0, fp
 8008682:	b017      	add	sp, #92	; 0x5c
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008688:	9b06      	ldr	r3, [sp, #24]
 800868a:	2b01      	cmp	r3, #1
 800868c:	f77f ae35 	ble.w	80082fa <_dtoa_r+0x792>
 8008690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008692:	9307      	str	r3, [sp, #28]
 8008694:	e649      	b.n	800832a <_dtoa_r+0x7c2>
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	dc03      	bgt.n	80086a4 <_dtoa_r+0xb3c>
 800869c:	9b06      	ldr	r3, [sp, #24]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	f73f aecc 	bgt.w	800843c <_dtoa_r+0x8d4>
 80086a4:	465d      	mov	r5, fp
 80086a6:	4639      	mov	r1, r7
 80086a8:	9804      	ldr	r0, [sp, #16]
 80086aa:	f7ff f9cf 	bl	8007a4c <quorem>
 80086ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80086b2:	f805 8b01 	strb.w	r8, [r5], #1
 80086b6:	9a02      	ldr	r2, [sp, #8]
 80086b8:	eba5 030b 	sub.w	r3, r5, fp
 80086bc:	429a      	cmp	r2, r3
 80086be:	ddb0      	ble.n	8008622 <_dtoa_r+0xaba>
 80086c0:	2300      	movs	r3, #0
 80086c2:	220a      	movs	r2, #10
 80086c4:	9904      	ldr	r1, [sp, #16]
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 f872 	bl	80087b0 <__multadd>
 80086cc:	9004      	str	r0, [sp, #16]
 80086ce:	e7ea      	b.n	80086a6 <_dtoa_r+0xb3e>
 80086d0:	0800be70 	.word	0x0800be70
 80086d4:	0800be94 	.word	0x0800be94

080086d8 <_localeconv_r>:
 80086d8:	4b04      	ldr	r3, [pc, #16]	; (80086ec <_localeconv_r+0x14>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a18      	ldr	r0, [r3, #32]
 80086de:	4b04      	ldr	r3, [pc, #16]	; (80086f0 <_localeconv_r+0x18>)
 80086e0:	2800      	cmp	r0, #0
 80086e2:	bf08      	it	eq
 80086e4:	4618      	moveq	r0, r3
 80086e6:	30f0      	adds	r0, #240	; 0xf0
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	200002f8 	.word	0x200002f8
 80086f0:	2000035c 	.word	0x2000035c

080086f4 <malloc>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <malloc+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f000 bb45 	b.w	8008d88 <_malloc_r>
 80086fe:	bf00      	nop
 8008700:	200002f8 	.word	0x200002f8

08008704 <memcpy>:
 8008704:	b510      	push	{r4, lr}
 8008706:	1e43      	subs	r3, r0, #1
 8008708:	440a      	add	r2, r1
 800870a:	4291      	cmp	r1, r2
 800870c:	d100      	bne.n	8008710 <memcpy+0xc>
 800870e:	bd10      	pop	{r4, pc}
 8008710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008718:	e7f7      	b.n	800870a <memcpy+0x6>

0800871a <_Balloc>:
 800871a:	b570      	push	{r4, r5, r6, lr}
 800871c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800871e:	4604      	mov	r4, r0
 8008720:	460e      	mov	r6, r1
 8008722:	b93d      	cbnz	r5, 8008734 <_Balloc+0x1a>
 8008724:	2010      	movs	r0, #16
 8008726:	f7ff ffe5 	bl	80086f4 <malloc>
 800872a:	6260      	str	r0, [r4, #36]	; 0x24
 800872c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008730:	6005      	str	r5, [r0, #0]
 8008732:	60c5      	str	r5, [r0, #12]
 8008734:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008736:	68eb      	ldr	r3, [r5, #12]
 8008738:	b183      	cbz	r3, 800875c <_Balloc+0x42>
 800873a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008742:	b9b8      	cbnz	r0, 8008774 <_Balloc+0x5a>
 8008744:	2101      	movs	r1, #1
 8008746:	fa01 f506 	lsl.w	r5, r1, r6
 800874a:	1d6a      	adds	r2, r5, #5
 800874c:	0092      	lsls	r2, r2, #2
 800874e:	4620      	mov	r0, r4
 8008750:	f000 fabe 	bl	8008cd0 <_calloc_r>
 8008754:	b160      	cbz	r0, 8008770 <_Balloc+0x56>
 8008756:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800875a:	e00e      	b.n	800877a <_Balloc+0x60>
 800875c:	2221      	movs	r2, #33	; 0x21
 800875e:	2104      	movs	r1, #4
 8008760:	4620      	mov	r0, r4
 8008762:	f000 fab5 	bl	8008cd0 <_calloc_r>
 8008766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008768:	60e8      	str	r0, [r5, #12]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e4      	bne.n	800873a <_Balloc+0x20>
 8008770:	2000      	movs	r0, #0
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	6802      	ldr	r2, [r0, #0]
 8008776:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800877a:	2300      	movs	r3, #0
 800877c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008780:	e7f7      	b.n	8008772 <_Balloc+0x58>

08008782 <_Bfree>:
 8008782:	b570      	push	{r4, r5, r6, lr}
 8008784:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008786:	4606      	mov	r6, r0
 8008788:	460d      	mov	r5, r1
 800878a:	b93c      	cbnz	r4, 800879c <_Bfree+0x1a>
 800878c:	2010      	movs	r0, #16
 800878e:	f7ff ffb1 	bl	80086f4 <malloc>
 8008792:	6270      	str	r0, [r6, #36]	; 0x24
 8008794:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008798:	6004      	str	r4, [r0, #0]
 800879a:	60c4      	str	r4, [r0, #12]
 800879c:	b13d      	cbz	r5, 80087ae <_Bfree+0x2c>
 800879e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80087a0:	686a      	ldr	r2, [r5, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087a8:	6029      	str	r1, [r5, #0]
 80087aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80087ae:	bd70      	pop	{r4, r5, r6, pc}

080087b0 <__multadd>:
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	690d      	ldr	r5, [r1, #16]
 80087b6:	461f      	mov	r7, r3
 80087b8:	4606      	mov	r6, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	f101 0c14 	add.w	ip, r1, #20
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8dc 0000 	ldr.w	r0, [ip]
 80087c6:	b281      	uxth	r1, r0
 80087c8:	fb02 7101 	mla	r1, r2, r1, r7
 80087cc:	0c0f      	lsrs	r7, r1, #16
 80087ce:	0c00      	lsrs	r0, r0, #16
 80087d0:	fb02 7000 	mla	r0, r2, r0, r7
 80087d4:	b289      	uxth	r1, r1
 80087d6:	3301      	adds	r3, #1
 80087d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80087dc:	429d      	cmp	r5, r3
 80087de:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80087e2:	f84c 1b04 	str.w	r1, [ip], #4
 80087e6:	dcec      	bgt.n	80087c2 <__multadd+0x12>
 80087e8:	b1d7      	cbz	r7, 8008820 <__multadd+0x70>
 80087ea:	68a3      	ldr	r3, [r4, #8]
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc12      	bgt.n	8008816 <__multadd+0x66>
 80087f0:	6861      	ldr	r1, [r4, #4]
 80087f2:	4630      	mov	r0, r6
 80087f4:	3101      	adds	r1, #1
 80087f6:	f7ff ff90 	bl	800871a <_Balloc>
 80087fa:	6922      	ldr	r2, [r4, #16]
 80087fc:	3202      	adds	r2, #2
 80087fe:	f104 010c 	add.w	r1, r4, #12
 8008802:	4680      	mov	r8, r0
 8008804:	0092      	lsls	r2, r2, #2
 8008806:	300c      	adds	r0, #12
 8008808:	f7ff ff7c 	bl	8008704 <memcpy>
 800880c:	4621      	mov	r1, r4
 800880e:	4630      	mov	r0, r6
 8008810:	f7ff ffb7 	bl	8008782 <_Bfree>
 8008814:	4644      	mov	r4, r8
 8008816:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800881a:	3501      	adds	r5, #1
 800881c:	615f      	str	r7, [r3, #20]
 800881e:	6125      	str	r5, [r4, #16]
 8008820:	4620      	mov	r0, r4
 8008822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008826 <__hi0bits>:
 8008826:	0c02      	lsrs	r2, r0, #16
 8008828:	0412      	lsls	r2, r2, #16
 800882a:	4603      	mov	r3, r0
 800882c:	b9b2      	cbnz	r2, 800885c <__hi0bits+0x36>
 800882e:	0403      	lsls	r3, r0, #16
 8008830:	2010      	movs	r0, #16
 8008832:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008836:	bf04      	itt	eq
 8008838:	021b      	lsleq	r3, r3, #8
 800883a:	3008      	addeq	r0, #8
 800883c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008840:	bf04      	itt	eq
 8008842:	011b      	lsleq	r3, r3, #4
 8008844:	3004      	addeq	r0, #4
 8008846:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800884a:	bf04      	itt	eq
 800884c:	009b      	lsleq	r3, r3, #2
 800884e:	3002      	addeq	r0, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	db06      	blt.n	8008862 <__hi0bits+0x3c>
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	d503      	bpl.n	8008860 <__hi0bits+0x3a>
 8008858:	3001      	adds	r0, #1
 800885a:	4770      	bx	lr
 800885c:	2000      	movs	r0, #0
 800885e:	e7e8      	b.n	8008832 <__hi0bits+0xc>
 8008860:	2020      	movs	r0, #32
 8008862:	4770      	bx	lr

08008864 <__lo0bits>:
 8008864:	6803      	ldr	r3, [r0, #0]
 8008866:	f013 0207 	ands.w	r2, r3, #7
 800886a:	4601      	mov	r1, r0
 800886c:	d00b      	beq.n	8008886 <__lo0bits+0x22>
 800886e:	07da      	lsls	r2, r3, #31
 8008870:	d423      	bmi.n	80088ba <__lo0bits+0x56>
 8008872:	0798      	lsls	r0, r3, #30
 8008874:	bf49      	itett	mi
 8008876:	085b      	lsrmi	r3, r3, #1
 8008878:	089b      	lsrpl	r3, r3, #2
 800887a:	2001      	movmi	r0, #1
 800887c:	600b      	strmi	r3, [r1, #0]
 800887e:	bf5c      	itt	pl
 8008880:	600b      	strpl	r3, [r1, #0]
 8008882:	2002      	movpl	r0, #2
 8008884:	4770      	bx	lr
 8008886:	b298      	uxth	r0, r3
 8008888:	b9a8      	cbnz	r0, 80088b6 <__lo0bits+0x52>
 800888a:	0c1b      	lsrs	r3, r3, #16
 800888c:	2010      	movs	r0, #16
 800888e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008892:	bf04      	itt	eq
 8008894:	0a1b      	lsreq	r3, r3, #8
 8008896:	3008      	addeq	r0, #8
 8008898:	071a      	lsls	r2, r3, #28
 800889a:	bf04      	itt	eq
 800889c:	091b      	lsreq	r3, r3, #4
 800889e:	3004      	addeq	r0, #4
 80088a0:	079a      	lsls	r2, r3, #30
 80088a2:	bf04      	itt	eq
 80088a4:	089b      	lsreq	r3, r3, #2
 80088a6:	3002      	addeq	r0, #2
 80088a8:	07da      	lsls	r2, r3, #31
 80088aa:	d402      	bmi.n	80088b2 <__lo0bits+0x4e>
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	d006      	beq.n	80088be <__lo0bits+0x5a>
 80088b0:	3001      	adds	r0, #1
 80088b2:	600b      	str	r3, [r1, #0]
 80088b4:	4770      	bx	lr
 80088b6:	4610      	mov	r0, r2
 80088b8:	e7e9      	b.n	800888e <__lo0bits+0x2a>
 80088ba:	2000      	movs	r0, #0
 80088bc:	4770      	bx	lr
 80088be:	2020      	movs	r0, #32
 80088c0:	4770      	bx	lr

080088c2 <__i2b>:
 80088c2:	b510      	push	{r4, lr}
 80088c4:	460c      	mov	r4, r1
 80088c6:	2101      	movs	r1, #1
 80088c8:	f7ff ff27 	bl	800871a <_Balloc>
 80088cc:	2201      	movs	r2, #1
 80088ce:	6144      	str	r4, [r0, #20]
 80088d0:	6102      	str	r2, [r0, #16]
 80088d2:	bd10      	pop	{r4, pc}

080088d4 <__multiply>:
 80088d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	4614      	mov	r4, r2
 80088da:	690a      	ldr	r2, [r1, #16]
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	429a      	cmp	r2, r3
 80088e0:	bfb8      	it	lt
 80088e2:	460b      	movlt	r3, r1
 80088e4:	4688      	mov	r8, r1
 80088e6:	bfbc      	itt	lt
 80088e8:	46a0      	movlt	r8, r4
 80088ea:	461c      	movlt	r4, r3
 80088ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80088f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088fc:	eb07 0609 	add.w	r6, r7, r9
 8008900:	42b3      	cmp	r3, r6
 8008902:	bfb8      	it	lt
 8008904:	3101      	addlt	r1, #1
 8008906:	f7ff ff08 	bl	800871a <_Balloc>
 800890a:	f100 0514 	add.w	r5, r0, #20
 800890e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008912:	462b      	mov	r3, r5
 8008914:	2200      	movs	r2, #0
 8008916:	4573      	cmp	r3, lr
 8008918:	d316      	bcc.n	8008948 <__multiply+0x74>
 800891a:	f104 0214 	add.w	r2, r4, #20
 800891e:	f108 0114 	add.w	r1, r8, #20
 8008922:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008926:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	9b00      	ldr	r3, [sp, #0]
 800892e:	9201      	str	r2, [sp, #4]
 8008930:	4293      	cmp	r3, r2
 8008932:	d80c      	bhi.n	800894e <__multiply+0x7a>
 8008934:	2e00      	cmp	r6, #0
 8008936:	dd03      	ble.n	8008940 <__multiply+0x6c>
 8008938:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800893c:	2b00      	cmp	r3, #0
 800893e:	d05d      	beq.n	80089fc <__multiply+0x128>
 8008940:	6106      	str	r6, [r0, #16]
 8008942:	b003      	add	sp, #12
 8008944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008948:	f843 2b04 	str.w	r2, [r3], #4
 800894c:	e7e3      	b.n	8008916 <__multiply+0x42>
 800894e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008952:	f1bb 0f00 	cmp.w	fp, #0
 8008956:	d023      	beq.n	80089a0 <__multiply+0xcc>
 8008958:	4689      	mov	r9, r1
 800895a:	46ac      	mov	ip, r5
 800895c:	f04f 0800 	mov.w	r8, #0
 8008960:	f859 4b04 	ldr.w	r4, [r9], #4
 8008964:	f8dc a000 	ldr.w	sl, [ip]
 8008968:	b2a3      	uxth	r3, r4
 800896a:	fa1f fa8a 	uxth.w	sl, sl
 800896e:	fb0b a303 	mla	r3, fp, r3, sl
 8008972:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008976:	f8dc 4000 	ldr.w	r4, [ip]
 800897a:	4443      	add	r3, r8
 800897c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008980:	fb0b 840a 	mla	r4, fp, sl, r8
 8008984:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008988:	46e2      	mov	sl, ip
 800898a:	b29b      	uxth	r3, r3
 800898c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008990:	454f      	cmp	r7, r9
 8008992:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008996:	f84a 3b04 	str.w	r3, [sl], #4
 800899a:	d82b      	bhi.n	80089f4 <__multiply+0x120>
 800899c:	f8cc 8004 	str.w	r8, [ip, #4]
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80089a6:	3204      	adds	r2, #4
 80089a8:	f1ba 0f00 	cmp.w	sl, #0
 80089ac:	d020      	beq.n	80089f0 <__multiply+0x11c>
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	4689      	mov	r9, r1
 80089b2:	46a8      	mov	r8, r5
 80089b4:	f04f 0b00 	mov.w	fp, #0
 80089b8:	f8b9 c000 	ldrh.w	ip, [r9]
 80089bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80089c0:	fb0a 440c 	mla	r4, sl, ip, r4
 80089c4:	445c      	add	r4, fp
 80089c6:	46c4      	mov	ip, r8
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089ce:	f84c 3b04 	str.w	r3, [ip], #4
 80089d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80089d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80089da:	0c1b      	lsrs	r3, r3, #16
 80089dc:	fb0a b303 	mla	r3, sl, r3, fp
 80089e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80089e4:	454f      	cmp	r7, r9
 80089e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80089ea:	d805      	bhi.n	80089f8 <__multiply+0x124>
 80089ec:	f8c8 3004 	str.w	r3, [r8, #4]
 80089f0:	3504      	adds	r5, #4
 80089f2:	e79b      	b.n	800892c <__multiply+0x58>
 80089f4:	46d4      	mov	ip, sl
 80089f6:	e7b3      	b.n	8008960 <__multiply+0x8c>
 80089f8:	46e0      	mov	r8, ip
 80089fa:	e7dd      	b.n	80089b8 <__multiply+0xe4>
 80089fc:	3e01      	subs	r6, #1
 80089fe:	e799      	b.n	8008934 <__multiply+0x60>

08008a00 <__pow5mult>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	4615      	mov	r5, r2
 8008a06:	f012 0203 	ands.w	r2, r2, #3
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	d007      	beq.n	8008a20 <__pow5mult+0x20>
 8008a10:	3a01      	subs	r2, #1
 8008a12:	4c21      	ldr	r4, [pc, #132]	; (8008a98 <__pow5mult+0x98>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a1a:	f7ff fec9 	bl	80087b0 <__multadd>
 8008a1e:	4607      	mov	r7, r0
 8008a20:	10ad      	asrs	r5, r5, #2
 8008a22:	d035      	beq.n	8008a90 <__pow5mult+0x90>
 8008a24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a26:	b93c      	cbnz	r4, 8008a38 <__pow5mult+0x38>
 8008a28:	2010      	movs	r0, #16
 8008a2a:	f7ff fe63 	bl	80086f4 <malloc>
 8008a2e:	6270      	str	r0, [r6, #36]	; 0x24
 8008a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a34:	6004      	str	r4, [r0, #0]
 8008a36:	60c4      	str	r4, [r0, #12]
 8008a38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a40:	b94c      	cbnz	r4, 8008a56 <__pow5mult+0x56>
 8008a42:	f240 2171 	movw	r1, #625	; 0x271
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ff3b 	bl	80088c2 <__i2b>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a52:	4604      	mov	r4, r0
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	f04f 0800 	mov.w	r8, #0
 8008a5a:	07eb      	lsls	r3, r5, #31
 8008a5c:	d50a      	bpl.n	8008a74 <__pow5mult+0x74>
 8008a5e:	4639      	mov	r1, r7
 8008a60:	4622      	mov	r2, r4
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7ff ff36 	bl	80088d4 <__multiply>
 8008a68:	4639      	mov	r1, r7
 8008a6a:	4681      	mov	r9, r0
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff fe88 	bl	8008782 <_Bfree>
 8008a72:	464f      	mov	r7, r9
 8008a74:	106d      	asrs	r5, r5, #1
 8008a76:	d00b      	beq.n	8008a90 <__pow5mult+0x90>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	b938      	cbnz	r0, 8008a8c <__pow5mult+0x8c>
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4630      	mov	r0, r6
 8008a82:	f7ff ff27 	bl	80088d4 <__multiply>
 8008a86:	6020      	str	r0, [r4, #0]
 8008a88:	f8c0 8000 	str.w	r8, [r0]
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	e7e4      	b.n	8008a5a <__pow5mult+0x5a>
 8008a90:	4638      	mov	r0, r7
 8008a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a96:	bf00      	nop
 8008a98:	0800bf98 	.word	0x0800bf98

08008a9c <__lshift>:
 8008a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	6849      	ldr	r1, [r1, #4]
 8008aaa:	eb0a 0903 	add.w	r9, sl, r3
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	4616      	mov	r6, r2
 8008ab4:	f109 0501 	add.w	r5, r9, #1
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	db32      	blt.n	8008b22 <__lshift+0x86>
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff fe2c 	bl	800871a <_Balloc>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	f100 0114 	add.w	r1, r0, #20
 8008aca:	461a      	mov	r2, r3
 8008acc:	4553      	cmp	r3, sl
 8008ace:	db2b      	blt.n	8008b28 <__lshift+0x8c>
 8008ad0:	6920      	ldr	r0, [r4, #16]
 8008ad2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ad6:	f104 0314 	add.w	r3, r4, #20
 8008ada:	f016 021f 	ands.w	r2, r6, #31
 8008ade:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ae2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ae6:	d025      	beq.n	8008b34 <__lshift+0x98>
 8008ae8:	f1c2 0e20 	rsb	lr, r2, #32
 8008aec:	2000      	movs	r0, #0
 8008aee:	681e      	ldr	r6, [r3, #0]
 8008af0:	468a      	mov	sl, r1
 8008af2:	4096      	lsls	r6, r2
 8008af4:	4330      	orrs	r0, r6
 8008af6:	f84a 0b04 	str.w	r0, [sl], #4
 8008afa:	f853 0b04 	ldr.w	r0, [r3], #4
 8008afe:	459c      	cmp	ip, r3
 8008b00:	fa20 f00e 	lsr.w	r0, r0, lr
 8008b04:	d814      	bhi.n	8008b30 <__lshift+0x94>
 8008b06:	6048      	str	r0, [r1, #4]
 8008b08:	b108      	cbz	r0, 8008b0e <__lshift+0x72>
 8008b0a:	f109 0502 	add.w	r5, r9, #2
 8008b0e:	3d01      	subs	r5, #1
 8008b10:	4638      	mov	r0, r7
 8008b12:	f8c8 5010 	str.w	r5, [r8, #16]
 8008b16:	4621      	mov	r1, r4
 8008b18:	f7ff fe33 	bl	8008782 <_Bfree>
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b22:	3101      	adds	r1, #1
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	e7c7      	b.n	8008ab8 <__lshift+0x1c>
 8008b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	e7cd      	b.n	8008acc <__lshift+0x30>
 8008b30:	4651      	mov	r1, sl
 8008b32:	e7dc      	b.n	8008aee <__lshift+0x52>
 8008b34:	3904      	subs	r1, #4
 8008b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b3e:	459c      	cmp	ip, r3
 8008b40:	d8f9      	bhi.n	8008b36 <__lshift+0x9a>
 8008b42:	e7e4      	b.n	8008b0e <__lshift+0x72>

08008b44 <__mcmp>:
 8008b44:	6903      	ldr	r3, [r0, #16]
 8008b46:	690a      	ldr	r2, [r1, #16]
 8008b48:	1a9b      	subs	r3, r3, r2
 8008b4a:	b530      	push	{r4, r5, lr}
 8008b4c:	d10c      	bne.n	8008b68 <__mcmp+0x24>
 8008b4e:	0092      	lsls	r2, r2, #2
 8008b50:	3014      	adds	r0, #20
 8008b52:	3114      	adds	r1, #20
 8008b54:	1884      	adds	r4, r0, r2
 8008b56:	4411      	add	r1, r2
 8008b58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b60:	4295      	cmp	r5, r2
 8008b62:	d003      	beq.n	8008b6c <__mcmp+0x28>
 8008b64:	d305      	bcc.n	8008b72 <__mcmp+0x2e>
 8008b66:	2301      	movs	r3, #1
 8008b68:	4618      	mov	r0, r3
 8008b6a:	bd30      	pop	{r4, r5, pc}
 8008b6c:	42a0      	cmp	r0, r4
 8008b6e:	d3f3      	bcc.n	8008b58 <__mcmp+0x14>
 8008b70:	e7fa      	b.n	8008b68 <__mcmp+0x24>
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295
 8008b76:	e7f7      	b.n	8008b68 <__mcmp+0x24>

08008b78 <__mdiff>:
 8008b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	4607      	mov	r7, r0
 8008b80:	4611      	mov	r1, r2
 8008b82:	4628      	mov	r0, r5
 8008b84:	4614      	mov	r4, r2
 8008b86:	f7ff ffdd 	bl	8008b44 <__mcmp>
 8008b8a:	1e06      	subs	r6, r0, #0
 8008b8c:	d108      	bne.n	8008ba0 <__mdiff+0x28>
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7ff fdc2 	bl	800871a <_Balloc>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	bfa4      	itt	ge
 8008ba2:	4623      	movge	r3, r4
 8008ba4:	462c      	movge	r4, r5
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	6861      	ldr	r1, [r4, #4]
 8008baa:	bfa6      	itte	ge
 8008bac:	461d      	movge	r5, r3
 8008bae:	2600      	movge	r6, #0
 8008bb0:	2601      	movlt	r6, #1
 8008bb2:	f7ff fdb2 	bl	800871a <_Balloc>
 8008bb6:	692b      	ldr	r3, [r5, #16]
 8008bb8:	60c6      	str	r6, [r0, #12]
 8008bba:	6926      	ldr	r6, [r4, #16]
 8008bbc:	f105 0914 	add.w	r9, r5, #20
 8008bc0:	f104 0214 	add.w	r2, r4, #20
 8008bc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008bc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008bcc:	f100 0514 	add.w	r5, r0, #20
 8008bd0:	f04f 0e00 	mov.w	lr, #0
 8008bd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8008bd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8008bdc:	fa1e f18a 	uxtah	r1, lr, sl
 8008be0:	b2a3      	uxth	r3, r4
 8008be2:	1ac9      	subs	r1, r1, r3
 8008be4:	0c23      	lsrs	r3, r4, #16
 8008be6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008bea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008bee:	b289      	uxth	r1, r1
 8008bf0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008bf4:	45c8      	cmp	r8, r9
 8008bf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008bfa:	4694      	mov	ip, r2
 8008bfc:	f845 3b04 	str.w	r3, [r5], #4
 8008c00:	d8e8      	bhi.n	8008bd4 <__mdiff+0x5c>
 8008c02:	45bc      	cmp	ip, r7
 8008c04:	d304      	bcc.n	8008c10 <__mdiff+0x98>
 8008c06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008c0a:	b183      	cbz	r3, 8008c2e <__mdiff+0xb6>
 8008c0c:	6106      	str	r6, [r0, #16]
 8008c0e:	e7c5      	b.n	8008b9c <__mdiff+0x24>
 8008c10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c14:	fa1e f381 	uxtah	r3, lr, r1
 8008c18:	141a      	asrs	r2, r3, #16
 8008c1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008c28:	f845 3b04 	str.w	r3, [r5], #4
 8008c2c:	e7e9      	b.n	8008c02 <__mdiff+0x8a>
 8008c2e:	3e01      	subs	r6, #1
 8008c30:	e7e9      	b.n	8008c06 <__mdiff+0x8e>

08008c32 <__d2b>:
 8008c32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c36:	460e      	mov	r6, r1
 8008c38:	2101      	movs	r1, #1
 8008c3a:	ec59 8b10 	vmov	r8, r9, d0
 8008c3e:	4615      	mov	r5, r2
 8008c40:	f7ff fd6b 	bl	800871a <_Balloc>
 8008c44:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c48:	4607      	mov	r7, r0
 8008c4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c4e:	bb34      	cbnz	r4, 8008c9e <__d2b+0x6c>
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	f1b8 0300 	subs.w	r3, r8, #0
 8008c56:	d027      	beq.n	8008ca8 <__d2b+0x76>
 8008c58:	a802      	add	r0, sp, #8
 8008c5a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008c5e:	f7ff fe01 	bl	8008864 <__lo0bits>
 8008c62:	9900      	ldr	r1, [sp, #0]
 8008c64:	b1f0      	cbz	r0, 8008ca4 <__d2b+0x72>
 8008c66:	9a01      	ldr	r2, [sp, #4]
 8008c68:	f1c0 0320 	rsb	r3, r0, #32
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	430b      	orrs	r3, r1
 8008c72:	40c2      	lsrs	r2, r0
 8008c74:	617b      	str	r3, [r7, #20]
 8008c76:	9201      	str	r2, [sp, #4]
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	bf14      	ite	ne
 8008c80:	2102      	movne	r1, #2
 8008c82:	2101      	moveq	r1, #1
 8008c84:	6139      	str	r1, [r7, #16]
 8008c86:	b1c4      	cbz	r4, 8008cba <__d2b+0x88>
 8008c88:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c8c:	4404      	add	r4, r0
 8008c8e:	6034      	str	r4, [r6, #0]
 8008c90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c94:	6028      	str	r0, [r5, #0]
 8008c96:	4638      	mov	r0, r7
 8008c98:	b003      	add	sp, #12
 8008c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ca2:	e7d5      	b.n	8008c50 <__d2b+0x1e>
 8008ca4:	6179      	str	r1, [r7, #20]
 8008ca6:	e7e7      	b.n	8008c78 <__d2b+0x46>
 8008ca8:	a801      	add	r0, sp, #4
 8008caa:	f7ff fddb 	bl	8008864 <__lo0bits>
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	6139      	str	r1, [r7, #16]
 8008cb6:	3020      	adds	r0, #32
 8008cb8:	e7e5      	b.n	8008c86 <__d2b+0x54>
 8008cba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008cbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cc2:	6030      	str	r0, [r6, #0]
 8008cc4:	6918      	ldr	r0, [r3, #16]
 8008cc6:	f7ff fdae 	bl	8008826 <__hi0bits>
 8008cca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008cce:	e7e1      	b.n	8008c94 <__d2b+0x62>

08008cd0 <_calloc_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	fb02 f401 	mul.w	r4, r2, r1
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	f000 f856 	bl	8008d88 <_malloc_r>
 8008cdc:	4605      	mov	r5, r0
 8008cde:	b118      	cbz	r0, 8008ce8 <_calloc_r+0x18>
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	f7fe fa19 	bl	800711a <memset>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	bd38      	pop	{r3, r4, r5, pc}

08008cec <_free_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4605      	mov	r5, r0
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	d045      	beq.n	8008d80 <_free_r+0x94>
 8008cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf8:	1f0c      	subs	r4, r1, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bfb8      	it	lt
 8008cfe:	18e4      	addlt	r4, r4, r3
 8008d00:	f000 fa10 	bl	8009124 <__malloc_lock>
 8008d04:	4a1f      	ldr	r2, [pc, #124]	; (8008d84 <_free_r+0x98>)
 8008d06:	6813      	ldr	r3, [r2, #0]
 8008d08:	4610      	mov	r0, r2
 8008d0a:	b933      	cbnz	r3, 8008d1a <_free_r+0x2e>
 8008d0c:	6063      	str	r3, [r4, #4]
 8008d0e:	6014      	str	r4, [r2, #0]
 8008d10:	4628      	mov	r0, r5
 8008d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d16:	f000 ba06 	b.w	8009126 <__malloc_unlock>
 8008d1a:	42a3      	cmp	r3, r4
 8008d1c:	d90c      	bls.n	8008d38 <_free_r+0x4c>
 8008d1e:	6821      	ldr	r1, [r4, #0]
 8008d20:	1862      	adds	r2, r4, r1
 8008d22:	4293      	cmp	r3, r2
 8008d24:	bf04      	itt	eq
 8008d26:	681a      	ldreq	r2, [r3, #0]
 8008d28:	685b      	ldreq	r3, [r3, #4]
 8008d2a:	6063      	str	r3, [r4, #4]
 8008d2c:	bf04      	itt	eq
 8008d2e:	1852      	addeq	r2, r2, r1
 8008d30:	6022      	streq	r2, [r4, #0]
 8008d32:	6004      	str	r4, [r0, #0]
 8008d34:	e7ec      	b.n	8008d10 <_free_r+0x24>
 8008d36:	4613      	mov	r3, r2
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	b10a      	cbz	r2, 8008d40 <_free_r+0x54>
 8008d3c:	42a2      	cmp	r2, r4
 8008d3e:	d9fa      	bls.n	8008d36 <_free_r+0x4a>
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	1858      	adds	r0, r3, r1
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d10b      	bne.n	8008d60 <_free_r+0x74>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	4401      	add	r1, r0
 8008d4c:	1858      	adds	r0, r3, r1
 8008d4e:	4282      	cmp	r2, r0
 8008d50:	6019      	str	r1, [r3, #0]
 8008d52:	d1dd      	bne.n	8008d10 <_free_r+0x24>
 8008d54:	6810      	ldr	r0, [r2, #0]
 8008d56:	6852      	ldr	r2, [r2, #4]
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	6019      	str	r1, [r3, #0]
 8008d5e:	e7d7      	b.n	8008d10 <_free_r+0x24>
 8008d60:	d902      	bls.n	8008d68 <_free_r+0x7c>
 8008d62:	230c      	movs	r3, #12
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	e7d3      	b.n	8008d10 <_free_r+0x24>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428a      	cmp	r2, r1
 8008d6e:	bf04      	itt	eq
 8008d70:	6811      	ldreq	r1, [r2, #0]
 8008d72:	6852      	ldreq	r2, [r2, #4]
 8008d74:	6062      	str	r2, [r4, #4]
 8008d76:	bf04      	itt	eq
 8008d78:	1809      	addeq	r1, r1, r0
 8008d7a:	6021      	streq	r1, [r4, #0]
 8008d7c:	605c      	str	r4, [r3, #4]
 8008d7e:	e7c7      	b.n	8008d10 <_free_r+0x24>
 8008d80:	bd38      	pop	{r3, r4, r5, pc}
 8008d82:	bf00      	nop
 8008d84:	20000918 	.word	0x20000918

08008d88 <_malloc_r>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	1ccd      	adds	r5, r1, #3
 8008d8c:	f025 0503 	bic.w	r5, r5, #3
 8008d90:	3508      	adds	r5, #8
 8008d92:	2d0c      	cmp	r5, #12
 8008d94:	bf38      	it	cc
 8008d96:	250c      	movcc	r5, #12
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	db01      	blt.n	8008da2 <_malloc_r+0x1a>
 8008d9e:	42a9      	cmp	r1, r5
 8008da0:	d903      	bls.n	8008daa <_malloc_r+0x22>
 8008da2:	230c      	movs	r3, #12
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	2000      	movs	r0, #0
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
 8008daa:	f000 f9bb 	bl	8009124 <__malloc_lock>
 8008dae:	4a21      	ldr	r2, [pc, #132]	; (8008e34 <_malloc_r+0xac>)
 8008db0:	6814      	ldr	r4, [r2, #0]
 8008db2:	4621      	mov	r1, r4
 8008db4:	b991      	cbnz	r1, 8008ddc <_malloc_r+0x54>
 8008db6:	4c20      	ldr	r4, [pc, #128]	; (8008e38 <_malloc_r+0xb0>)
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	b91b      	cbnz	r3, 8008dc4 <_malloc_r+0x3c>
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f000 f98f 	bl	80090e0 <_sbrk_r>
 8008dc2:	6020      	str	r0, [r4, #0]
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f000 f98a 	bl	80090e0 <_sbrk_r>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d124      	bne.n	8008e1a <_malloc_r+0x92>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	6033      	str	r3, [r6, #0]
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f9a6 	bl	8009126 <__malloc_unlock>
 8008dda:	e7e4      	b.n	8008da6 <_malloc_r+0x1e>
 8008ddc:	680b      	ldr	r3, [r1, #0]
 8008dde:	1b5b      	subs	r3, r3, r5
 8008de0:	d418      	bmi.n	8008e14 <_malloc_r+0x8c>
 8008de2:	2b0b      	cmp	r3, #11
 8008de4:	d90f      	bls.n	8008e06 <_malloc_r+0x7e>
 8008de6:	600b      	str	r3, [r1, #0]
 8008de8:	50cd      	str	r5, [r1, r3]
 8008dea:	18cc      	adds	r4, r1, r3
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 f99a 	bl	8009126 <__malloc_unlock>
 8008df2:	f104 000b 	add.w	r0, r4, #11
 8008df6:	1d23      	adds	r3, r4, #4
 8008df8:	f020 0007 	bic.w	r0, r0, #7
 8008dfc:	1ac3      	subs	r3, r0, r3
 8008dfe:	d0d3      	beq.n	8008da8 <_malloc_r+0x20>
 8008e00:	425a      	negs	r2, r3
 8008e02:	50e2      	str	r2, [r4, r3]
 8008e04:	e7d0      	b.n	8008da8 <_malloc_r+0x20>
 8008e06:	428c      	cmp	r4, r1
 8008e08:	684b      	ldr	r3, [r1, #4]
 8008e0a:	bf16      	itet	ne
 8008e0c:	6063      	strne	r3, [r4, #4]
 8008e0e:	6013      	streq	r3, [r2, #0]
 8008e10:	460c      	movne	r4, r1
 8008e12:	e7eb      	b.n	8008dec <_malloc_r+0x64>
 8008e14:	460c      	mov	r4, r1
 8008e16:	6849      	ldr	r1, [r1, #4]
 8008e18:	e7cc      	b.n	8008db4 <_malloc_r+0x2c>
 8008e1a:	1cc4      	adds	r4, r0, #3
 8008e1c:	f024 0403 	bic.w	r4, r4, #3
 8008e20:	42a0      	cmp	r0, r4
 8008e22:	d005      	beq.n	8008e30 <_malloc_r+0xa8>
 8008e24:	1a21      	subs	r1, r4, r0
 8008e26:	4630      	mov	r0, r6
 8008e28:	f000 f95a 	bl	80090e0 <_sbrk_r>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d0cf      	beq.n	8008dd0 <_malloc_r+0x48>
 8008e30:	6025      	str	r5, [r4, #0]
 8008e32:	e7db      	b.n	8008dec <_malloc_r+0x64>
 8008e34:	20000918 	.word	0x20000918
 8008e38:	2000091c 	.word	0x2000091c

08008e3c <__ssputs_r>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	688e      	ldr	r6, [r1, #8]
 8008e42:	429e      	cmp	r6, r3
 8008e44:	4682      	mov	sl, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	4690      	mov	r8, r2
 8008e4a:	4699      	mov	r9, r3
 8008e4c:	d837      	bhi.n	8008ebe <__ssputs_r+0x82>
 8008e4e:	898a      	ldrh	r2, [r1, #12]
 8008e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e54:	d031      	beq.n	8008eba <__ssputs_r+0x7e>
 8008e56:	6825      	ldr	r5, [r4, #0]
 8008e58:	6909      	ldr	r1, [r1, #16]
 8008e5a:	1a6f      	subs	r7, r5, r1
 8008e5c:	6965      	ldr	r5, [r4, #20]
 8008e5e:	2302      	movs	r3, #2
 8008e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e64:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e68:	f109 0301 	add.w	r3, r9, #1
 8008e6c:	443b      	add	r3, r7
 8008e6e:	429d      	cmp	r5, r3
 8008e70:	bf38      	it	cc
 8008e72:	461d      	movcc	r5, r3
 8008e74:	0553      	lsls	r3, r2, #21
 8008e76:	d530      	bpl.n	8008eda <__ssputs_r+0x9e>
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7ff ff85 	bl	8008d88 <_malloc_r>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	b950      	cbnz	r0, 8008e98 <__ssputs_r+0x5c>
 8008e82:	230c      	movs	r3, #12
 8008e84:	f8ca 3000 	str.w	r3, [sl]
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e98:	463a      	mov	r2, r7
 8008e9a:	6921      	ldr	r1, [r4, #16]
 8008e9c:	f7ff fc32 	bl	8008704 <memcpy>
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	6126      	str	r6, [r4, #16]
 8008eae:	6165      	str	r5, [r4, #20]
 8008eb0:	443e      	add	r6, r7
 8008eb2:	1bed      	subs	r5, r5, r7
 8008eb4:	6026      	str	r6, [r4, #0]
 8008eb6:	60a5      	str	r5, [r4, #8]
 8008eb8:	464e      	mov	r6, r9
 8008eba:	454e      	cmp	r6, r9
 8008ebc:	d900      	bls.n	8008ec0 <__ssputs_r+0x84>
 8008ebe:	464e      	mov	r6, r9
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4641      	mov	r1, r8
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	f7fe f90f 	bl	80070e8 <memmove>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	441e      	add	r6, r3
 8008ed4:	6026      	str	r6, [r4, #0]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e7dc      	b.n	8008e94 <__ssputs_r+0x58>
 8008eda:	462a      	mov	r2, r5
 8008edc:	f000 f924 	bl	8009128 <_realloc_r>
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1e2      	bne.n	8008eac <__ssputs_r+0x70>
 8008ee6:	6921      	ldr	r1, [r4, #16]
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f7ff feff 	bl	8008cec <_free_r>
 8008eee:	e7c8      	b.n	8008e82 <__ssputs_r+0x46>

08008ef0 <_svfiprintf_r>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	461d      	mov	r5, r3
 8008ef6:	898b      	ldrh	r3, [r1, #12]
 8008ef8:	061f      	lsls	r7, r3, #24
 8008efa:	b09d      	sub	sp, #116	; 0x74
 8008efc:	4680      	mov	r8, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4616      	mov	r6, r2
 8008f02:	d50f      	bpl.n	8008f24 <_svfiprintf_r+0x34>
 8008f04:	690b      	ldr	r3, [r1, #16]
 8008f06:	b96b      	cbnz	r3, 8008f24 <_svfiprintf_r+0x34>
 8008f08:	2140      	movs	r1, #64	; 0x40
 8008f0a:	f7ff ff3d 	bl	8008d88 <_malloc_r>
 8008f0e:	6020      	str	r0, [r4, #0]
 8008f10:	6120      	str	r0, [r4, #16]
 8008f12:	b928      	cbnz	r0, 8008f20 <_svfiprintf_r+0x30>
 8008f14:	230c      	movs	r3, #12
 8008f16:	f8c8 3000 	str.w	r3, [r8]
 8008f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1e:	e0c8      	b.n	80090b2 <_svfiprintf_r+0x1c2>
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	6163      	str	r3, [r4, #20]
 8008f24:	2300      	movs	r3, #0
 8008f26:	9309      	str	r3, [sp, #36]	; 0x24
 8008f28:	2320      	movs	r3, #32
 8008f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f2e:	2330      	movs	r3, #48	; 0x30
 8008f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f34:	9503      	str	r5, [sp, #12]
 8008f36:	f04f 0b01 	mov.w	fp, #1
 8008f3a:	4637      	mov	r7, r6
 8008f3c:	463d      	mov	r5, r7
 8008f3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f42:	b10b      	cbz	r3, 8008f48 <_svfiprintf_r+0x58>
 8008f44:	2b25      	cmp	r3, #37	; 0x25
 8008f46:	d13e      	bne.n	8008fc6 <_svfiprintf_r+0xd6>
 8008f48:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f4c:	d00b      	beq.n	8008f66 <_svfiprintf_r+0x76>
 8008f4e:	4653      	mov	r3, sl
 8008f50:	4632      	mov	r2, r6
 8008f52:	4621      	mov	r1, r4
 8008f54:	4640      	mov	r0, r8
 8008f56:	f7ff ff71 	bl	8008e3c <__ssputs_r>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f000 80a4 	beq.w	80090a8 <_svfiprintf_r+0x1b8>
 8008f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f62:	4453      	add	r3, sl
 8008f64:	9309      	str	r3, [sp, #36]	; 0x24
 8008f66:	783b      	ldrb	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 809d 	beq.w	80090a8 <_svfiprintf_r+0x1b8>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f80:	931a      	str	r3, [sp, #104]	; 0x68
 8008f82:	462f      	mov	r7, r5
 8008f84:	2205      	movs	r2, #5
 8008f86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008f8a:	4850      	ldr	r0, [pc, #320]	; (80090cc <_svfiprintf_r+0x1dc>)
 8008f8c:	f7f7 f928 	bl	80001e0 <memchr>
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	b9d0      	cbnz	r0, 8008fca <_svfiprintf_r+0xda>
 8008f94:	06d9      	lsls	r1, r3, #27
 8008f96:	bf44      	itt	mi
 8008f98:	2220      	movmi	r2, #32
 8008f9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f9e:	071a      	lsls	r2, r3, #28
 8008fa0:	bf44      	itt	mi
 8008fa2:	222b      	movmi	r2, #43	; 0x2b
 8008fa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fa8:	782a      	ldrb	r2, [r5, #0]
 8008faa:	2a2a      	cmp	r2, #42	; 0x2a
 8008fac:	d015      	beq.n	8008fda <_svfiprintf_r+0xea>
 8008fae:	9a07      	ldr	r2, [sp, #28]
 8008fb0:	462f      	mov	r7, r5
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	250a      	movs	r5, #10
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fbc:	3b30      	subs	r3, #48	; 0x30
 8008fbe:	2b09      	cmp	r3, #9
 8008fc0:	d94d      	bls.n	800905e <_svfiprintf_r+0x16e>
 8008fc2:	b1b8      	cbz	r0, 8008ff4 <_svfiprintf_r+0x104>
 8008fc4:	e00f      	b.n	8008fe6 <_svfiprintf_r+0xf6>
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	e7b8      	b.n	8008f3c <_svfiprintf_r+0x4c>
 8008fca:	4a40      	ldr	r2, [pc, #256]	; (80090cc <_svfiprintf_r+0x1dc>)
 8008fcc:	1a80      	subs	r0, r0, r2
 8008fce:	fa0b f000 	lsl.w	r0, fp, r0
 8008fd2:	4318      	orrs	r0, r3
 8008fd4:	9004      	str	r0, [sp, #16]
 8008fd6:	463d      	mov	r5, r7
 8008fd8:	e7d3      	b.n	8008f82 <_svfiprintf_r+0x92>
 8008fda:	9a03      	ldr	r2, [sp, #12]
 8008fdc:	1d11      	adds	r1, r2, #4
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	9103      	str	r1, [sp, #12]
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	db01      	blt.n	8008fea <_svfiprintf_r+0xfa>
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	e004      	b.n	8008ff4 <_svfiprintf_r+0x104>
 8008fea:	4252      	negs	r2, r2
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	9207      	str	r2, [sp, #28]
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	783b      	ldrb	r3, [r7, #0]
 8008ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff8:	d10c      	bne.n	8009014 <_svfiprintf_r+0x124>
 8008ffa:	787b      	ldrb	r3, [r7, #1]
 8008ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ffe:	d133      	bne.n	8009068 <_svfiprintf_r+0x178>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	1d1a      	adds	r2, r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	9203      	str	r2, [sp, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfb8      	it	lt
 800900c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009010:	3702      	adds	r7, #2
 8009012:	9305      	str	r3, [sp, #20]
 8009014:	4d2e      	ldr	r5, [pc, #184]	; (80090d0 <_svfiprintf_r+0x1e0>)
 8009016:	7839      	ldrb	r1, [r7, #0]
 8009018:	2203      	movs	r2, #3
 800901a:	4628      	mov	r0, r5
 800901c:	f7f7 f8e0 	bl	80001e0 <memchr>
 8009020:	b138      	cbz	r0, 8009032 <_svfiprintf_r+0x142>
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	1b40      	subs	r0, r0, r5
 8009026:	fa03 f000 	lsl.w	r0, r3, r0
 800902a:	9b04      	ldr	r3, [sp, #16]
 800902c:	4303      	orrs	r3, r0
 800902e:	3701      	adds	r7, #1
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	7839      	ldrb	r1, [r7, #0]
 8009034:	4827      	ldr	r0, [pc, #156]	; (80090d4 <_svfiprintf_r+0x1e4>)
 8009036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800903a:	2206      	movs	r2, #6
 800903c:	1c7e      	adds	r6, r7, #1
 800903e:	f7f7 f8cf 	bl	80001e0 <memchr>
 8009042:	2800      	cmp	r0, #0
 8009044:	d038      	beq.n	80090b8 <_svfiprintf_r+0x1c8>
 8009046:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <_svfiprintf_r+0x1e8>)
 8009048:	bb13      	cbnz	r3, 8009090 <_svfiprintf_r+0x1a0>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	3307      	adds	r3, #7
 800904e:	f023 0307 	bic.w	r3, r3, #7
 8009052:	3308      	adds	r3, #8
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009058:	444b      	add	r3, r9
 800905a:	9309      	str	r3, [sp, #36]	; 0x24
 800905c:	e76d      	b.n	8008f3a <_svfiprintf_r+0x4a>
 800905e:	fb05 3202 	mla	r2, r5, r2, r3
 8009062:	2001      	movs	r0, #1
 8009064:	460f      	mov	r7, r1
 8009066:	e7a6      	b.n	8008fb6 <_svfiprintf_r+0xc6>
 8009068:	2300      	movs	r3, #0
 800906a:	3701      	adds	r7, #1
 800906c:	9305      	str	r3, [sp, #20]
 800906e:	4619      	mov	r1, r3
 8009070:	250a      	movs	r5, #10
 8009072:	4638      	mov	r0, r7
 8009074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009078:	3a30      	subs	r2, #48	; 0x30
 800907a:	2a09      	cmp	r2, #9
 800907c:	d903      	bls.n	8009086 <_svfiprintf_r+0x196>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0c8      	beq.n	8009014 <_svfiprintf_r+0x124>
 8009082:	9105      	str	r1, [sp, #20]
 8009084:	e7c6      	b.n	8009014 <_svfiprintf_r+0x124>
 8009086:	fb05 2101 	mla	r1, r5, r1, r2
 800908a:	2301      	movs	r3, #1
 800908c:	4607      	mov	r7, r0
 800908e:	e7f0      	b.n	8009072 <_svfiprintf_r+0x182>
 8009090:	ab03      	add	r3, sp, #12
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	4622      	mov	r2, r4
 8009096:	4b11      	ldr	r3, [pc, #68]	; (80090dc <_svfiprintf_r+0x1ec>)
 8009098:	a904      	add	r1, sp, #16
 800909a:	4640      	mov	r0, r8
 800909c:	f7fe f8da 	bl	8007254 <_printf_float>
 80090a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090a4:	4681      	mov	r9, r0
 80090a6:	d1d6      	bne.n	8009056 <_svfiprintf_r+0x166>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	065b      	lsls	r3, r3, #25
 80090ac:	f53f af35 	bmi.w	8008f1a <_svfiprintf_r+0x2a>
 80090b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090b2:	b01d      	add	sp, #116	; 0x74
 80090b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b8:	ab03      	add	r3, sp, #12
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4622      	mov	r2, r4
 80090be:	4b07      	ldr	r3, [pc, #28]	; (80090dc <_svfiprintf_r+0x1ec>)
 80090c0:	a904      	add	r1, sp, #16
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7fe fb7c 	bl	80077c0 <_printf_i>
 80090c8:	e7ea      	b.n	80090a0 <_svfiprintf_r+0x1b0>
 80090ca:	bf00      	nop
 80090cc:	0800bfa4 	.word	0x0800bfa4
 80090d0:	0800bfaa 	.word	0x0800bfaa
 80090d4:	0800bfae 	.word	0x0800bfae
 80090d8:	08007255 	.word	0x08007255
 80090dc:	08008e3d 	.word	0x08008e3d

080090e0 <_sbrk_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4c06      	ldr	r4, [pc, #24]	; (80090fc <_sbrk_r+0x1c>)
 80090e4:	2300      	movs	r3, #0
 80090e6:	4605      	mov	r5, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	f7f9 fdb4 	bl	8002c58 <_sbrk>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_sbrk_r+0x1a>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_sbrk_r+0x1a>
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	20000a24 	.word	0x20000a24

08009100 <__ascii_mbtowc>:
 8009100:	b082      	sub	sp, #8
 8009102:	b901      	cbnz	r1, 8009106 <__ascii_mbtowc+0x6>
 8009104:	a901      	add	r1, sp, #4
 8009106:	b142      	cbz	r2, 800911a <__ascii_mbtowc+0x1a>
 8009108:	b14b      	cbz	r3, 800911e <__ascii_mbtowc+0x1e>
 800910a:	7813      	ldrb	r3, [r2, #0]
 800910c:	600b      	str	r3, [r1, #0]
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	1c10      	adds	r0, r2, #0
 8009112:	bf18      	it	ne
 8009114:	2001      	movne	r0, #1
 8009116:	b002      	add	sp, #8
 8009118:	4770      	bx	lr
 800911a:	4610      	mov	r0, r2
 800911c:	e7fb      	b.n	8009116 <__ascii_mbtowc+0x16>
 800911e:	f06f 0001 	mvn.w	r0, #1
 8009122:	e7f8      	b.n	8009116 <__ascii_mbtowc+0x16>

08009124 <__malloc_lock>:
 8009124:	4770      	bx	lr

08009126 <__malloc_unlock>:
 8009126:	4770      	bx	lr

08009128 <_realloc_r>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	4607      	mov	r7, r0
 800912c:	4614      	mov	r4, r2
 800912e:	460e      	mov	r6, r1
 8009130:	b921      	cbnz	r1, 800913c <_realloc_r+0x14>
 8009132:	4611      	mov	r1, r2
 8009134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009138:	f7ff be26 	b.w	8008d88 <_malloc_r>
 800913c:	b922      	cbnz	r2, 8009148 <_realloc_r+0x20>
 800913e:	f7ff fdd5 	bl	8008cec <_free_r>
 8009142:	4625      	mov	r5, r4
 8009144:	4628      	mov	r0, r5
 8009146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009148:	f000 f821 	bl	800918e <_malloc_usable_size_r>
 800914c:	42a0      	cmp	r0, r4
 800914e:	d20f      	bcs.n	8009170 <_realloc_r+0x48>
 8009150:	4621      	mov	r1, r4
 8009152:	4638      	mov	r0, r7
 8009154:	f7ff fe18 	bl	8008d88 <_malloc_r>
 8009158:	4605      	mov	r5, r0
 800915a:	2800      	cmp	r0, #0
 800915c:	d0f2      	beq.n	8009144 <_realloc_r+0x1c>
 800915e:	4631      	mov	r1, r6
 8009160:	4622      	mov	r2, r4
 8009162:	f7ff facf 	bl	8008704 <memcpy>
 8009166:	4631      	mov	r1, r6
 8009168:	4638      	mov	r0, r7
 800916a:	f7ff fdbf 	bl	8008cec <_free_r>
 800916e:	e7e9      	b.n	8009144 <_realloc_r+0x1c>
 8009170:	4635      	mov	r5, r6
 8009172:	e7e7      	b.n	8009144 <_realloc_r+0x1c>

08009174 <__ascii_wctomb>:
 8009174:	b149      	cbz	r1, 800918a <__ascii_wctomb+0x16>
 8009176:	2aff      	cmp	r2, #255	; 0xff
 8009178:	bf85      	ittet	hi
 800917a:	238a      	movhi	r3, #138	; 0x8a
 800917c:	6003      	strhi	r3, [r0, #0]
 800917e:	700a      	strbls	r2, [r1, #0]
 8009180:	f04f 30ff 	movhi.w	r0, #4294967295
 8009184:	bf98      	it	ls
 8009186:	2001      	movls	r0, #1
 8009188:	4770      	bx	lr
 800918a:	4608      	mov	r0, r1
 800918c:	4770      	bx	lr

0800918e <_malloc_usable_size_r>:
 800918e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009192:	1f18      	subs	r0, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	bfbc      	itt	lt
 8009198:	580b      	ldrlt	r3, [r1, r0]
 800919a:	18c0      	addlt	r0, r0, r3
 800919c:	4770      	bx	lr
	...

080091a0 <round>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	ec57 6b10 	vmov	r6, r7, d0
 80091a6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80091aa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80091ae:	2c13      	cmp	r4, #19
 80091b0:	463b      	mov	r3, r7
 80091b2:	463d      	mov	r5, r7
 80091b4:	dc17      	bgt.n	80091e6 <round+0x46>
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	da09      	bge.n	80091ce <round+0x2e>
 80091ba:	3401      	adds	r4, #1
 80091bc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80091c0:	d103      	bne.n	80091ca <round+0x2a>
 80091c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80091c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091ca:	2100      	movs	r1, #0
 80091cc:	e02c      	b.n	8009228 <round+0x88>
 80091ce:	4a18      	ldr	r2, [pc, #96]	; (8009230 <round+0x90>)
 80091d0:	4122      	asrs	r2, r4
 80091d2:	4217      	tst	r7, r2
 80091d4:	d100      	bne.n	80091d8 <round+0x38>
 80091d6:	b19e      	cbz	r6, 8009200 <round+0x60>
 80091d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091dc:	4123      	asrs	r3, r4
 80091de:	442b      	add	r3, r5
 80091e0:	ea23 0302 	bic.w	r3, r3, r2
 80091e4:	e7f1      	b.n	80091ca <round+0x2a>
 80091e6:	2c33      	cmp	r4, #51	; 0x33
 80091e8:	dd0d      	ble.n	8009206 <round+0x66>
 80091ea:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80091ee:	d107      	bne.n	8009200 <round+0x60>
 80091f0:	4630      	mov	r0, r6
 80091f2:	4639      	mov	r1, r7
 80091f4:	ee10 2a10 	vmov	r2, s0
 80091f8:	f7f7 f848 	bl	800028c <__adddf3>
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	ec47 6b10 	vmov	d0, r6, r7
 8009204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009206:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	40d0      	lsrs	r0, r2
 8009210:	4206      	tst	r6, r0
 8009212:	d0f5      	beq.n	8009200 <round+0x60>
 8009214:	2201      	movs	r2, #1
 8009216:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800921a:	fa02 f404 	lsl.w	r4, r2, r4
 800921e:	1931      	adds	r1, r6, r4
 8009220:	bf28      	it	cs
 8009222:	189b      	addcs	r3, r3, r2
 8009224:	ea21 0100 	bic.w	r1, r1, r0
 8009228:	461f      	mov	r7, r3
 800922a:	460e      	mov	r6, r1
 800922c:	e7e8      	b.n	8009200 <round+0x60>
 800922e:	bf00      	nop
 8009230:	000fffff 	.word	0x000fffff

08009234 <_init>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr

08009240 <_fini>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	bf00      	nop
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr
