
PWM_separate_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e70  08009258  08009258  00019258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c8  0800c0c8  000204c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0c8  0800c0c8  000204c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0c8  0800c0c8  000204c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c8  20000000  0800c0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200004c8  0800c598  000204c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800c598  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017940  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fac  00000000  00000000  00037e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  0003ade8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001000  00000000  00000000  0003bf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a46  00000000  00000000  0003cf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001135e  00000000  00000000  000659ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f160c  00000000  00000000  00076d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d8  00000000  00000000  001683b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c8 	.word	0x200004c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800923c 	.word	0x0800923c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004cc 	.word	0x200004cc
 80001cc:	0800923c 	.word	0x0800923c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_f2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	f7ff fc5d 	bl	8000548 <__aeabi_f2d>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <__aeabi_f2ulz+0x40>)
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	f7ff ff85 	bl	8000ba8 <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc30 	bl	8000504 <__aeabi_ui2d>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <__aeabi_f2ulz+0x44>)
 8000ca8:	f7ff fca6 	bl	80005f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fae8 	bl	8000288 <__aeabi_dsub>
 8000cb8:	f7ff ff76 	bl	8000ba8 <__aeabi_d2uiz>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	4310      	orrs	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	3df00000 	.word	0x3df00000
 8000ccc:	41f00000 	.word	0x41f00000

08000cd0 <OLED_WriteCaseNumber>:
//	}
//}

// writes number to buffer only
static void OLED_WriteCaseNumber(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
	char StringBuffer[10] = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	811a      	strh	r2, [r3, #8]

	snprintf(StringBuffer, 10, "%2d", CurrentCase + 1);
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <OLED_WriteCaseNumber+0x3c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	1d38      	adds	r0, r7, #4
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <OLED_WriteCaseNumber+0x40>)
 8000cea:	210a      	movs	r1, #10
 8000cec:	f006 fe80 	bl	80079f0 <sniprintf>
	ssd1306_SetCursor(110, 52);
 8000cf0:	2134      	movs	r1, #52	; 0x34
 8000cf2:	206e      	movs	r0, #110	; 0x6e
 8000cf4:	f006 f9bc 	bl	8007070 <ssd1306_SetCursor>
	ssd1306_WriteString(StringBuffer, Font_7x10, White);
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <OLED_WriteCaseNumber+0x44>)
 8000cfa:	1d38      	adds	r0, r7, #4
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	ca06      	ldmia	r2, {r1, r2}
 8000d00:	f006 f990 	bl	8007024 <ssd1306_WriteString>

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000092c 	.word	0x2000092c
 8000d10:	08009258 	.word	0x08009258
 8000d14:	200002e0 	.word	0x200002e0

08000d18 <OLED_Update_Display_Case>:

void OLED_Update_Display_Case(OLEDStates_type State)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	switch(State)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b14      	cmp	r3, #20
 8000d26:	f200 8497 	bhi.w	8001658 <OLED_Update_Display_Case+0x940>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <OLED_Update_Display_Case+0x18>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d85 	.word	0x08000d85
 8000d34:	08000de7 	.word	0x08000de7
 8000d38:	08000e49 	.word	0x08000e49
 8000d3c:	08000ea9 	.word	0x08000ea9
 8000d40:	08000f09 	.word	0x08000f09
 8000d44:	08000f69 	.word	0x08000f69
 8000d48:	08000fc9 	.word	0x08000fc9
 8000d4c:	08001029 	.word	0x08001029
 8000d50:	080010f1 	.word	0x080010f1
 8000d54:	08001151 	.word	0x08001151
 8000d58:	080011b1 	.word	0x080011b1
 8000d5c:	08001211 	.word	0x08001211
 8000d60:	08001271 	.word	0x08001271
 8000d64:	080012d1 	.word	0x080012d1
 8000d68:	08001331 	.word	0x08001331
 8000d6c:	08001391 	.word	0x08001391
 8000d70:	08001465 	.word	0x08001465
 8000d74:	080014c5 	.word	0x080014c5
 8000d78:	08001525 	.word	0x08001525
 8000d7c:	08001585 	.word	0x08001585
 8000d80:	080015f9 	.word	0x080015f9
	{
	case Leonardo_TC1:
		ssd1306_Fill(Black);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f006 f825 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f006 f96f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("TC 1", Font_16x26, White);
 8000d92:	4abd      	ldr	r2, [pc, #756]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000d94:	2301      	movs	r3, #1
 8000d96:	ca06      	ldmia	r2, {r1, r2}
 8000d98:	48bc      	ldr	r0, [pc, #752]	; (800108c <OLED_Update_Display_Case+0x374>)
 8000d9a:	f006 f943 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000d9e:	211d      	movs	r1, #29
 8000da0:	2000      	movs	r0, #0
 8000da2:	f006 f965 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 10 kHz", Font_7x10, White);
 8000da6:	4aba      	ldr	r2, [pc, #744]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000da8:	2301      	movs	r3, #1
 8000daa:	ca06      	ldmia	r2, {r1, r2}
 8000dac:	48b9      	ldr	r0, [pc, #740]	; (8001094 <OLED_Update_Display_Case+0x37c>)
 8000dae:	f006 f939 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000db2:	2129      	movs	r1, #41	; 0x29
 8000db4:	2000      	movs	r0, #0
 8000db6:	f006 f95b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 10 us", Font_7x10, White);
 8000dba:	4ab5      	ldr	r2, [pc, #724]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	ca06      	ldmia	r2, {r1, r2}
 8000dc0:	48b5      	ldr	r0, [pc, #724]	; (8001098 <OLED_Update_Display_Case+0x380>)
 8000dc2:	f006 f92f 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000dc6:	2135      	movs	r1, #53	; 0x35
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f006 f951 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("Duty= 10 %", Font_7x10, White);
 8000dce:	4ab0      	ldr	r2, [pc, #704]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	ca06      	ldmia	r2, {r1, r2}
 8000dd4:	48b1      	ldr	r0, [pc, #708]	; (800109c <OLED_Update_Display_Case+0x384>)
 8000dd6:	f006 f925 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000dda:	f7ff ff79 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000dde:	f006 f81b 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8000de2:	f000 bc3a 	b.w	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_TC2:
		ssd1306_Fill(Black);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f005 fff4 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2000      	movs	r0, #0
 8000df0:	f006 f93e 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("TC 2", Font_16x26, White);
 8000df4:	4aa4      	ldr	r2, [pc, #656]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000df6:	2301      	movs	r3, #1
 8000df8:	ca06      	ldmia	r2, {r1, r2}
 8000dfa:	48a9      	ldr	r0, [pc, #676]	; (80010a0 <OLED_Update_Display_Case+0x388>)
 8000dfc:	f006 f912 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000e00:	211d      	movs	r1, #29
 8000e02:	2000      	movs	r0, #0
 8000e04:	f006 f934 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 12 kHz", Font_7x10, White);
 8000e08:	4aa1      	ldr	r2, [pc, #644]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	ca06      	ldmia	r2, {r1, r2}
 8000e0e:	48a5      	ldr	r0, [pc, #660]	; (80010a4 <OLED_Update_Display_Case+0x38c>)
 8000e10:	f006 f908 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000e14:	2129      	movs	r1, #41	; 0x29
 8000e16:	2000      	movs	r0, #0
 8000e18:	f006 f92a 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 10 us", Font_7x10, White);
 8000e1c:	4a9c      	ldr	r2, [pc, #624]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e1e:	2301      	movs	r3, #1
 8000e20:	ca06      	ldmia	r2, {r1, r2}
 8000e22:	489d      	ldr	r0, [pc, #628]	; (8001098 <OLED_Update_Display_Case+0x380>)
 8000e24:	f006 f8fe 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000e28:	2135      	movs	r1, #53	; 0x35
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f006 f920 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("Duty= 12 %", Font_7x10, White);
 8000e30:	4a97      	ldr	r2, [pc, #604]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e32:	2301      	movs	r3, #1
 8000e34:	ca06      	ldmia	r2, {r1, r2}
 8000e36:	489c      	ldr	r0, [pc, #624]	; (80010a8 <OLED_Update_Display_Case+0x390>)
 8000e38:	f006 f8f4 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000e3c:	f7ff ff48 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000e40:	f005 ffea 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8000e44:	f000 bc09 	b.w	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case1:
		ssd1306_Fill(Black);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f005 ffc3 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f006 f90d 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 1", Font_16x26, White);
 8000e56:	4a8c      	ldr	r2, [pc, #560]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000e58:	2301      	movs	r3, #1
 8000e5a:	ca06      	ldmia	r2, {r1, r2}
 8000e5c:	4893      	ldr	r0, [pc, #588]	; (80010ac <OLED_Update_Display_Case+0x394>)
 8000e5e:	f006 f8e1 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000e62:	211d      	movs	r1, #29
 8000e64:	2000      	movs	r0, #0
 8000e66:	f006 f903 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 0.850 kHz", Font_7x10, White);
 8000e6a:	4a89      	ldr	r2, [pc, #548]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	ca06      	ldmia	r2, {r1, r2}
 8000e70:	488f      	ldr	r0, [pc, #572]	; (80010b0 <OLED_Update_Display_Case+0x398>)
 8000e72:	f006 f8d7 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000e76:	2129      	movs	r1, #41	; 0x29
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f006 f8f9 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.925 kHz", Font_7x10, White);
 8000e7e:	4a84      	ldr	r2, [pc, #528]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e80:	2301      	movs	r3, #1
 8000e82:	ca06      	ldmia	r2, {r1, r2}
 8000e84:	488b      	ldr	r0, [pc, #556]	; (80010b4 <OLED_Update_Display_Case+0x39c>)
 8000e86:	f006 f8cd 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000e8a:	2135      	movs	r1, #53	; 0x35
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f006 f8ef 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000e92:	4a7f      	ldr	r2, [pc, #508]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000e94:	2301      	movs	r3, #1
 8000e96:	ca06      	ldmia	r2, {r1, r2}
 8000e98:	4887      	ldr	r0, [pc, #540]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000e9a:	f006 f8c3 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000e9e:	f7ff ff17 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000ea2:	f005 ffb9 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8000ea6:	e3d8      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case2:
		ssd1306_Fill(Black);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f005 ff93 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f006 f8dd 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 2", Font_16x26, White);
 8000eb6:	4a74      	ldr	r2, [pc, #464]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000eb8:	2301      	movs	r3, #1
 8000eba:	ca06      	ldmia	r2, {r1, r2}
 8000ebc:	487f      	ldr	r0, [pc, #508]	; (80010bc <OLED_Update_Display_Case+0x3a4>)
 8000ebe:	f006 f8b1 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000ec2:	211d      	movs	r1, #29
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f006 f8d3 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 1.350 kHz", Font_7x10, White);
 8000eca:	4a71      	ldr	r2, [pc, #452]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000ecc:	2301      	movs	r3, #1
 8000ece:	ca06      	ldmia	r2, {r1, r2}
 8000ed0:	487b      	ldr	r0, [pc, #492]	; (80010c0 <OLED_Update_Display_Case+0x3a8>)
 8000ed2:	f006 f8a7 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000ed6:	2129      	movs	r1, #41	; 0x29
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f006 f8c9 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.800 kHz", Font_7x10, White);
 8000ede:	4a6c      	ldr	r2, [pc, #432]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	ca06      	ldmia	r2, {r1, r2}
 8000ee4:	4877      	ldr	r0, [pc, #476]	; (80010c4 <OLED_Update_Display_Case+0x3ac>)
 8000ee6:	f006 f89d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000eea:	2135      	movs	r1, #53	; 0x35
 8000eec:	2000      	movs	r0, #0
 8000eee:	f006 f8bf 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000ef2:	4a67      	ldr	r2, [pc, #412]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	ca06      	ldmia	r2, {r1, r2}
 8000ef8:	486f      	ldr	r0, [pc, #444]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000efa:	f006 f893 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000efe:	f7ff fee7 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000f02:	f005 ff89 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8000f06:	e3a8      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case3:
		ssd1306_Fill(Black);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f005 ff63 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	f006 f8ad 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 3", Font_16x26, White);
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000f18:	2301      	movs	r3, #1
 8000f1a:	ca06      	ldmia	r2, {r1, r2}
 8000f1c:	486a      	ldr	r0, [pc, #424]	; (80010c8 <OLED_Update_Display_Case+0x3b0>)
 8000f1e:	f006 f881 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000f22:	211d      	movs	r1, #29
 8000f24:	2000      	movs	r0, #0
 8000f26:	f006 f8a3 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 2.215 kHz", Font_7x10, White);
 8000f2a:	4a59      	ldr	r2, [pc, #356]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	ca06      	ldmia	r2, {r1, r2}
 8000f30:	4866      	ldr	r0, [pc, #408]	; (80010cc <OLED_Update_Display_Case+0x3b4>)
 8000f32:	f006 f877 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000f36:	2129      	movs	r1, #41	; 0x29
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f006 f899 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.350 kHz", Font_7x10, White);
 8000f3e:	4a54      	ldr	r2, [pc, #336]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f40:	2301      	movs	r3, #1
 8000f42:	ca06      	ldmia	r2, {r1, r2}
 8000f44:	4862      	ldr	r0, [pc, #392]	; (80010d0 <OLED_Update_Display_Case+0x3b8>)
 8000f46:	f006 f86d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000f4a:	2135      	movs	r1, #53	; 0x35
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f006 f88f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000f52:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f54:	2301      	movs	r3, #1
 8000f56:	ca06      	ldmia	r2, {r1, r2}
 8000f58:	4857      	ldr	r0, [pc, #348]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000f5a:	f006 f863 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000f5e:	f7ff feb7 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000f62:	f005 ff59 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8000f66:	e378      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case4:
		ssd1306_Fill(Black);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f005 ff33 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2000      	movs	r0, #0
 8000f72:	f006 f87d 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 4", Font_16x26, White);
 8000f76:	4a44      	ldr	r2, [pc, #272]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000f78:	2301      	movs	r3, #1
 8000f7a:	ca06      	ldmia	r2, {r1, r2}
 8000f7c:	4855      	ldr	r0, [pc, #340]	; (80010d4 <OLED_Update_Display_Case+0x3bc>)
 8000f7e:	f006 f851 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000f82:	211d      	movs	r1, #29
 8000f84:	2000      	movs	r0, #0
 8000f86:	f006 f873 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 0.725 kHz", Font_7x10, White);
 8000f8a:	4a41      	ldr	r2, [pc, #260]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	ca06      	ldmia	r2, {r1, r2}
 8000f90:	4851      	ldr	r0, [pc, #324]	; (80010d8 <OLED_Update_Display_Case+0x3c0>)
 8000f92:	f006 f847 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000f96:	2129      	movs	r1, #41	; 0x29
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f006 f869 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.800 kHz", Font_7x10, White);
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	ca06      	ldmia	r2, {r1, r2}
 8000fa4:	4847      	ldr	r0, [pc, #284]	; (80010c4 <OLED_Update_Display_Case+0x3ac>)
 8000fa6:	f006 f83d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8000faa:	2135      	movs	r1, #53	; 0x35
 8000fac:	2000      	movs	r0, #0
 8000fae:	f006 f85f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8000fb2:	4a37      	ldr	r2, [pc, #220]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	ca06      	ldmia	r2, {r1, r2}
 8000fb8:	483f      	ldr	r0, [pc, #252]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 8000fba:	f006 f833 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8000fbe:	f7ff fe87 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8000fc2:	f005 ff29 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8000fc6:	e348      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case5:
		ssd1306_Fill(Black);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f005 ff03 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f006 f84d 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 5", Font_16x26, White);
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8000fd8:	2301      	movs	r3, #1
 8000fda:	ca06      	ldmia	r2, {r1, r2}
 8000fdc:	483f      	ldr	r0, [pc, #252]	; (80010dc <OLED_Update_Display_Case+0x3c4>)
 8000fde:	f006 f821 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8000fe2:	211d      	movs	r1, #29
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f006 f843 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 2.250 kHz", Font_7x10, White);
 8000fea:	4a29      	ldr	r2, [pc, #164]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8000fec:	2301      	movs	r3, #1
 8000fee:	ca06      	ldmia	r2, {r1, r2}
 8000ff0:	483b      	ldr	r0, [pc, #236]	; (80010e0 <OLED_Update_Display_Case+0x3c8>)
 8000ff2:	f006 f817 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8000ff6:	2129      	movs	r1, #41	; 0x29
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f006 f839 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 1.350 kHz", Font_7x10, White);
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001000:	2301      	movs	r3, #1
 8001002:	ca06      	ldmia	r2, {r1, r2}
 8001004:	4832      	ldr	r0, [pc, #200]	; (80010d0 <OLED_Update_Display_Case+0x3b8>)
 8001006:	f006 f80d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 800100a:	2135      	movs	r1, #53	; 0x35
 800100c:	2000      	movs	r0, #0
 800100e:	f006 f82f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8001012:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001014:	2301      	movs	r3, #1
 8001016:	ca06      	ldmia	r2, {r1, r2}
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 800101a:	f006 f803 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800101e:	f7ff fe57 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8001022:	f005 fef9 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8001026:	e318      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Case6:
		ssd1306_Fill(Black);
 8001028:	2000      	movs	r0, #0
 800102a:	f005 fed3 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800102e:	2100      	movs	r1, #0
 8001030:	2000      	movs	r0, #0
 8001032:	f006 f81d 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 6", Font_16x26, White);
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <OLED_Update_Display_Case+0x370>)
 8001038:	2301      	movs	r3, #1
 800103a:	ca06      	ldmia	r2, {r1, r2}
 800103c:	4829      	ldr	r0, [pc, #164]	; (80010e4 <OLED_Update_Display_Case+0x3cc>)
 800103e:	f005 fff1 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8001042:	211d      	movs	r1, #29
 8001044:	2000      	movs	r0, #0
 8001046:	f006 f813 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 1.420 kHz", Font_7x10, White);
 800104a:	4a11      	ldr	r2, [pc, #68]	; (8001090 <OLED_Update_Display_Case+0x378>)
 800104c:	2301      	movs	r3, #1
 800104e:	ca06      	ldmia	r2, {r1, r2}
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <OLED_Update_Display_Case+0x3d0>)
 8001052:	f005 ffe7 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001056:	2129      	movs	r1, #41	; 0x29
 8001058:	2000      	movs	r0, #0
 800105a:	f006 f809 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 3.930 kHz", Font_7x10, White);
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001060:	2301      	movs	r3, #1
 8001062:	ca06      	ldmia	r2, {r1, r2}
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <OLED_Update_Display_Case+0x3d4>)
 8001066:	f005 ffdd 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 800106a:	2135      	movs	r1, #53	; 0x35
 800106c:	2000      	movs	r0, #0
 800106e:	f005 ffff 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <OLED_Update_Display_Case+0x378>)
 8001074:	2301      	movs	r3, #1
 8001076:	ca06      	ldmia	r2, {r1, r2}
 8001078:	480f      	ldr	r0, [pc, #60]	; (80010b8 <OLED_Update_Display_Case+0x3a0>)
 800107a:	f005 ffd3 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800107e:	f7ff fe27 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8001082:	f005 fec9 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8001086:	e2e8      	b.n	800165a <OLED_Update_Display_Case+0x942>
 8001088:	200002f0 	.word	0x200002f0
 800108c:	0800925c 	.word	0x0800925c
 8001090:	200002e0 	.word	0x200002e0
 8001094:	08009264 	.word	0x08009264
 8001098:	08009270 	.word	0x08009270
 800109c:	0800927c 	.word	0x0800927c
 80010a0:	08009288 	.word	0x08009288
 80010a4:	08009290 	.word	0x08009290
 80010a8:	0800929c 	.word	0x0800929c
 80010ac:	080092a8 	.word	0x080092a8
 80010b0:	080092b0 	.word	0x080092b0
 80010b4:	080092c0 	.word	0x080092c0
 80010b8:	080092d0 	.word	0x080092d0
 80010bc:	080092dc 	.word	0x080092dc
 80010c0:	080092e4 	.word	0x080092e4
 80010c4:	080092f4 	.word	0x080092f4
 80010c8:	08009304 	.word	0x08009304
 80010cc:	0800930c 	.word	0x0800930c
 80010d0:	0800931c 	.word	0x0800931c
 80010d4:	0800932c 	.word	0x0800932c
 80010d8:	08009334 	.word	0x08009334
 80010dc:	08009344 	.word	0x08009344
 80010e0:	0800934c 	.word	0x0800934c
 80010e4:	0800935c 	.word	0x0800935c
 80010e8:	08009364 	.word	0x08009364
 80010ec:	08009374 	.word	0x08009374

	case Leonardo_Case7:
		ssd1306_Fill(Black);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f005 fe6f 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f005 ffb9 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("P.H. 7", Font_16x26, White);
 80010fe:	4abc      	ldr	r2, [pc, #752]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001100:	2301      	movs	r3, #1
 8001102:	ca06      	ldmia	r2, {r1, r2}
 8001104:	48bb      	ldr	r0, [pc, #748]	; (80013f4 <OLED_Update_Display_Case+0x6dc>)
 8001106:	f005 ff8d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800110a:	211d      	movs	r1, #29
 800110c:	2000      	movs	r0, #0
 800110e:	f005 ffaf 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 0.850 kHz", Font_7x10, White);
 8001112:	4ab9      	ldr	r2, [pc, #740]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001114:	2301      	movs	r3, #1
 8001116:	ca06      	ldmia	r2, {r1, r2}
 8001118:	48b8      	ldr	r0, [pc, #736]	; (80013fc <OLED_Update_Display_Case+0x6e4>)
 800111a:	f005 ff83 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800111e:	2129      	movs	r1, #41	; 0x29
 8001120:	2000      	movs	r0, #0
 8001122:	f005 ffa5 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 6.000 kHz", Font_7x10, White);
 8001126:	4ab4      	ldr	r2, [pc, #720]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001128:	2301      	movs	r3, #1
 800112a:	ca06      	ldmia	r2, {r1, r2}
 800112c:	48b4      	ldr	r0, [pc, #720]	; (8001400 <OLED_Update_Display_Case+0x6e8>)
 800112e:	f005 ff79 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001132:	2135      	movs	r1, #53	; 0x35
 8001134:	2000      	movs	r0, #0
 8001136:	f005 ff9b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 20 us", Font_7x10, White);
 800113a:	4aaf      	ldr	r2, [pc, #700]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800113c:	2301      	movs	r3, #1
 800113e:	ca06      	ldmia	r2, {r1, r2}
 8001140:	48b0      	ldr	r0, [pc, #704]	; (8001404 <OLED_Update_Display_Case+0x6ec>)
 8001142:	f005 ff6f 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001146:	f7ff fdc3 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800114a:	f005 fe65 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 800114e:	e284      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF1:
		ssd1306_Fill(Black);
 8001150:	2000      	movs	r0, #0
 8001152:	f005 fe3f 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f005 ff89 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 1", Font_16x26, White);
 800115e:	4aa4      	ldr	r2, [pc, #656]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001160:	2301      	movs	r3, #1
 8001162:	ca06      	ldmia	r2, {r1, r2}
 8001164:	48a8      	ldr	r0, [pc, #672]	; (8001408 <OLED_Update_Display_Case+0x6f0>)
 8001166:	f005 ff5d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800116a:	211d      	movs	r1, #29
 800116c:	2000      	movs	r0, #0
 800116e:	f005 ff7f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 2 kHz", Font_7x10, White);
 8001172:	4aa1      	ldr	r2, [pc, #644]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001174:	2301      	movs	r3, #1
 8001176:	ca06      	ldmia	r2, {r1, r2}
 8001178:	48a4      	ldr	r0, [pc, #656]	; (800140c <OLED_Update_Display_Case+0x6f4>)
 800117a:	f005 ff53 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800117e:	2129      	movs	r1, #41	; 0x29
 8001180:	2000      	movs	r0, #0
 8001182:	f005 ff75 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 50 us", Font_7x10, White);
 8001186:	4a9c      	ldr	r2, [pc, #624]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001188:	2301      	movs	r3, #1
 800118a:	ca06      	ldmia	r2, {r1, r2}
 800118c:	48a0      	ldr	r0, [pc, #640]	; (8001410 <OLED_Update_Display_Case+0x6f8>)
 800118e:	f005 ff49 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001192:	2135      	movs	r1, #53	; 0x35
 8001194:	2000      	movs	r0, #0
 8001196:	f005 ff6b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 10 %", Font_7x10, White);
 800119a:	4a97      	ldr	r2, [pc, #604]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800119c:	2301      	movs	r3, #1
 800119e:	ca06      	ldmia	r2, {r1, r2}
 80011a0:	489c      	ldr	r0, [pc, #624]	; (8001414 <OLED_Update_Display_Case+0x6fc>)
 80011a2:	f005 ff3f 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80011a6:	f7ff fd93 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80011aa:	f005 fe35 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 80011ae:	e254      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF2:
		ssd1306_Fill(Black);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f005 fe0f 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f005 ff59 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 2", Font_16x26, White);
 80011be:	4a8c      	ldr	r2, [pc, #560]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 80011c0:	2301      	movs	r3, #1
 80011c2:	ca06      	ldmia	r2, {r1, r2}
 80011c4:	4894      	ldr	r0, [pc, #592]	; (8001418 <OLED_Update_Display_Case+0x700>)
 80011c6:	f005 ff2d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80011ca:	211d      	movs	r1, #29
 80011cc:	2000      	movs	r0, #0
 80011ce:	f005 ff4f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 10 kHz", Font_7x10, White);
 80011d2:	4a89      	ldr	r2, [pc, #548]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80011d4:	2301      	movs	r3, #1
 80011d6:	ca06      	ldmia	r2, {r1, r2}
 80011d8:	4890      	ldr	r0, [pc, #576]	; (800141c <OLED_Update_Display_Case+0x704>)
 80011da:	f005 ff23 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80011de:	2129      	movs	r1, #41	; 0x29
 80011e0:	2000      	movs	r0, #0
 80011e2:	f005 ff45 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 12 us", Font_7x10, White);
 80011e6:	4a84      	ldr	r2, [pc, #528]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80011e8:	2301      	movs	r3, #1
 80011ea:	ca06      	ldmia	r2, {r1, r2}
 80011ec:	488c      	ldr	r0, [pc, #560]	; (8001420 <OLED_Update_Display_Case+0x708>)
 80011ee:	f005 ff19 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80011f2:	2135      	movs	r1, #53	; 0x35
 80011f4:	2000      	movs	r0, #0
 80011f6:	f005 ff3b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80011fa:	4a7f      	ldr	r2, [pc, #508]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80011fc:	2301      	movs	r3, #1
 80011fe:	ca06      	ldmia	r2, {r1, r2}
 8001200:	4888      	ldr	r0, [pc, #544]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001202:	f005 ff0f 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001206:	f7ff fd63 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800120a:	f005 fe05 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 800120e:	e224      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF3:
		ssd1306_Fill(Black);
 8001210:	2000      	movs	r0, #0
 8001212:	f005 fddf 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001216:	2100      	movs	r1, #0
 8001218:	2000      	movs	r0, #0
 800121a:	f005 ff29 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 3", Font_16x26, White);
 800121e:	4a74      	ldr	r2, [pc, #464]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001220:	2301      	movs	r3, #1
 8001222:	ca06      	ldmia	r2, {r1, r2}
 8001224:	4880      	ldr	r0, [pc, #512]	; (8001428 <OLED_Update_Display_Case+0x710>)
 8001226:	f005 fefd 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800122a:	211d      	movs	r1, #29
 800122c:	2000      	movs	r0, #0
 800122e:	f005 ff1f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 20 kHz", Font_7x10, White);
 8001232:	4a71      	ldr	r2, [pc, #452]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001234:	2301      	movs	r3, #1
 8001236:	ca06      	ldmia	r2, {r1, r2}
 8001238:	487c      	ldr	r0, [pc, #496]	; (800142c <OLED_Update_Display_Case+0x714>)
 800123a:	f005 fef3 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800123e:	2129      	movs	r1, #41	; 0x29
 8001240:	2000      	movs	r0, #0
 8001242:	f005 ff15 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 6 us", Font_7x10, White);
 8001246:	4a6c      	ldr	r2, [pc, #432]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001248:	2301      	movs	r3, #1
 800124a:	ca06      	ldmia	r2, {r1, r2}
 800124c:	4878      	ldr	r0, [pc, #480]	; (8001430 <OLED_Update_Display_Case+0x718>)
 800124e:	f005 fee9 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001252:	2135      	movs	r1, #53	; 0x35
 8001254:	2000      	movs	r0, #0
 8001256:	f005 ff0b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 800125a:	4a67      	ldr	r2, [pc, #412]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800125c:	2301      	movs	r3, #1
 800125e:	ca06      	ldmia	r2, {r1, r2}
 8001260:	4870      	ldr	r0, [pc, #448]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001262:	f005 fedf 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001266:	f7ff fd33 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800126a:	f005 fdd5 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 800126e:	e1f4      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF4:
		ssd1306_Fill(Black);
 8001270:	2000      	movs	r0, #0
 8001272:	f005 fdaf 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001276:	2100      	movs	r1, #0
 8001278:	2000      	movs	r0, #0
 800127a:	f005 fef9 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 4", Font_16x26, White);
 800127e:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001280:	2301      	movs	r3, #1
 8001282:	ca06      	ldmia	r2, {r1, r2}
 8001284:	486b      	ldr	r0, [pc, #428]	; (8001434 <OLED_Update_Display_Case+0x71c>)
 8001286:	f005 fecd 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800128a:	211d      	movs	r1, #29
 800128c:	2000      	movs	r0, #0
 800128e:	f005 feef 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 30 kHz", Font_7x10, White);
 8001292:	4a59      	ldr	r2, [pc, #356]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001294:	2301      	movs	r3, #1
 8001296:	ca06      	ldmia	r2, {r1, r2}
 8001298:	4867      	ldr	r0, [pc, #412]	; (8001438 <OLED_Update_Display_Case+0x720>)
 800129a:	f005 fec3 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800129e:	2129      	movs	r1, #41	; 0x29
 80012a0:	2000      	movs	r0, #0
 80012a2:	f005 fee5 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 4 us", Font_7x10, White);
 80012a6:	4a54      	ldr	r2, [pc, #336]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80012a8:	2301      	movs	r3, #1
 80012aa:	ca06      	ldmia	r2, {r1, r2}
 80012ac:	4863      	ldr	r0, [pc, #396]	; (800143c <OLED_Update_Display_Case+0x724>)
 80012ae:	f005 feb9 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80012b2:	2135      	movs	r1, #53	; 0x35
 80012b4:	2000      	movs	r0, #0
 80012b6:	f005 fedb 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80012ba:	4a4f      	ldr	r2, [pc, #316]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80012bc:	2301      	movs	r3, #1
 80012be:	ca06      	ldmia	r2, {r1, r2}
 80012c0:	4858      	ldr	r0, [pc, #352]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 80012c2:	f005 feaf 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80012c6:	f7ff fd03 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80012ca:	f005 fda5 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 80012ce:	e1c4      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF5:
		ssd1306_Fill(Black);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f005 fd7f 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80012d6:	2100      	movs	r1, #0
 80012d8:	2000      	movs	r0, #0
 80012da:	f005 fec9 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 5", Font_16x26, White);
 80012de:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 80012e0:	2301      	movs	r3, #1
 80012e2:	ca06      	ldmia	r2, {r1, r2}
 80012e4:	4856      	ldr	r0, [pc, #344]	; (8001440 <OLED_Update_Display_Case+0x728>)
 80012e6:	f005 fe9d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80012ea:	211d      	movs	r1, #29
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 febf 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 40 kHz", Font_7x10, White);
 80012f2:	4a41      	ldr	r2, [pc, #260]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80012f4:	2301      	movs	r3, #1
 80012f6:	ca06      	ldmia	r2, {r1, r2}
 80012f8:	4852      	ldr	r0, [pc, #328]	; (8001444 <OLED_Update_Display_Case+0x72c>)
 80012fa:	f005 fe93 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80012fe:	2129      	movs	r1, #41	; 0x29
 8001300:	2000      	movs	r0, #0
 8001302:	f005 feb5 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 3 us", Font_7x10, White);
 8001306:	4a3c      	ldr	r2, [pc, #240]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001308:	2301      	movs	r3, #1
 800130a:	ca06      	ldmia	r2, {r1, r2}
 800130c:	484e      	ldr	r0, [pc, #312]	; (8001448 <OLED_Update_Display_Case+0x730>)
 800130e:	f005 fe89 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001312:	2135      	movs	r1, #53	; 0x35
 8001314:	2000      	movs	r0, #0
 8001316:	f005 feab 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 800131a:	4a37      	ldr	r2, [pc, #220]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800131c:	2301      	movs	r3, #1
 800131e:	ca06      	ldmia	r2, {r1, r2}
 8001320:	4840      	ldr	r0, [pc, #256]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001322:	f005 fe7f 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001326:	f7ff fcd3 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800132a:	f005 fd75 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 800132e:	e194      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF6:
		ssd1306_Fill(Black);
 8001330:	2000      	movs	r0, #0
 8001332:	f005 fd4f 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f005 fe99 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 6", Font_16x26, White);
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 8001340:	2301      	movs	r3, #1
 8001342:	ca06      	ldmia	r2, {r1, r2}
 8001344:	4841      	ldr	r0, [pc, #260]	; (800144c <OLED_Update_Display_Case+0x734>)
 8001346:	f005 fe6d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800134a:	211d      	movs	r1, #29
 800134c:	2000      	movs	r0, #0
 800134e:	f005 fe8f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 50 kHz", Font_7x10, White);
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001354:	2301      	movs	r3, #1
 8001356:	ca06      	ldmia	r2, {r1, r2}
 8001358:	483d      	ldr	r0, [pc, #244]	; (8001450 <OLED_Update_Display_Case+0x738>)
 800135a:	f005 fe63 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 800135e:	2129      	movs	r1, #41	; 0x29
 8001360:	2000      	movs	r0, #0
 8001362:	f005 fe85 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 2.4 us", Font_7x10, White);
 8001366:	4a24      	ldr	r2, [pc, #144]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 8001368:	2301      	movs	r3, #1
 800136a:	ca06      	ldmia	r2, {r1, r2}
 800136c:	4839      	ldr	r0, [pc, #228]	; (8001454 <OLED_Update_Display_Case+0x73c>)
 800136e:	f005 fe59 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001372:	2135      	movs	r1, #53	; 0x35
 8001374:	2000      	movs	r0, #0
 8001376:	f005 fe7b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 800137a:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 800137c:	2301      	movs	r3, #1
 800137e:	ca06      	ldmia	r2, {r1, r2}
 8001380:	4828      	ldr	r0, [pc, #160]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 8001382:	f005 fe4f 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 8001386:	f7ff fca3 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800138a:	f005 fd45 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 800138e:	e164      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF7:
		ssd1306_Fill(Black);
 8001390:	2000      	movs	r0, #0
 8001392:	f005 fd1f 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001396:	2100      	movs	r1, #0
 8001398:	2000      	movs	r0, #0
 800139a:	f005 fe69 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 7", Font_16x26, White);
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <OLED_Update_Display_Case+0x6d8>)
 80013a0:	2301      	movs	r3, #1
 80013a2:	ca06      	ldmia	r2, {r1, r2}
 80013a4:	482c      	ldr	r0, [pc, #176]	; (8001458 <OLED_Update_Display_Case+0x740>)
 80013a6:	f005 fe3d 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80013aa:	211d      	movs	r1, #29
 80013ac:	2000      	movs	r0, #0
 80013ae:	f005 fe5f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 60 kHz", Font_7x10, White);
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80013b4:	2301      	movs	r3, #1
 80013b6:	ca06      	ldmia	r2, {r1, r2}
 80013b8:	4828      	ldr	r0, [pc, #160]	; (800145c <OLED_Update_Display_Case+0x744>)
 80013ba:	f005 fe33 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80013be:	2129      	movs	r1, #41	; 0x29
 80013c0:	2000      	movs	r0, #0
 80013c2:	f005 fe55 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 2 us", Font_7x10, White);
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80013c8:	2301      	movs	r3, #1
 80013ca:	ca06      	ldmia	r2, {r1, r2}
 80013cc:	4824      	ldr	r0, [pc, #144]	; (8001460 <OLED_Update_Display_Case+0x748>)
 80013ce:	f005 fe29 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80013d2:	2135      	movs	r1, #53	; 0x35
 80013d4:	2000      	movs	r0, #0
 80013d6:	f005 fe4b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <OLED_Update_Display_Case+0x6e0>)
 80013dc:	2301      	movs	r3, #1
 80013de:	ca06      	ldmia	r2, {r1, r2}
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <OLED_Update_Display_Case+0x70c>)
 80013e2:	f005 fe1f 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80013e6:	f7ff fc73 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80013ea:	f005 fd15 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 80013ee:	e134      	b.n	800165a <OLED_Update_Display_Case+0x942>
 80013f0:	200002f0 	.word	0x200002f0
 80013f4:	08009384 	.word	0x08009384
 80013f8:	200002e0 	.word	0x200002e0
 80013fc:	080092b0 	.word	0x080092b0
 8001400:	0800938c 	.word	0x0800938c
 8001404:	080092d0 	.word	0x080092d0
 8001408:	0800939c 	.word	0x0800939c
 800140c:	080093a4 	.word	0x080093a4
 8001410:	080093b0 	.word	0x080093b0
 8001414:	080093bc 	.word	0x080093bc
 8001418:	080093c8 	.word	0x080093c8
 800141c:	08009264 	.word	0x08009264
 8001420:	080093d0 	.word	0x080093d0
 8001424:	080093dc 	.word	0x080093dc
 8001428:	080093e8 	.word	0x080093e8
 800142c:	080093f0 	.word	0x080093f0
 8001430:	080093fc 	.word	0x080093fc
 8001434:	08009408 	.word	0x08009408
 8001438:	08009410 	.word	0x08009410
 800143c:	0800941c 	.word	0x0800941c
 8001440:	08009428 	.word	0x08009428
 8001444:	08009430 	.word	0x08009430
 8001448:	0800943c 	.word	0x0800943c
 800144c:	08009448 	.word	0x08009448
 8001450:	08009450 	.word	0x08009450
 8001454:	0800945c 	.word	0x0800945c
 8001458:	08009468 	.word	0x08009468
 800145c:	08009470 	.word	0x08009470
 8001460:	0800947c 	.word	0x0800947c

	case Leonardo_PRF8:
		ssd1306_Fill(Black);
 8001464:	2000      	movs	r0, #0
 8001466:	f005 fcb5 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f005 fdff 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 8", Font_16x26, White);
 8001472:	4a7d      	ldr	r2, [pc, #500]	; (8001668 <OLED_Update_Display_Case+0x950>)
 8001474:	2301      	movs	r3, #1
 8001476:	ca06      	ldmia	r2, {r1, r2}
 8001478:	487c      	ldr	r0, [pc, #496]	; (800166c <OLED_Update_Display_Case+0x954>)
 800147a:	f005 fdd3 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 800147e:	211d      	movs	r1, #29
 8001480:	2000      	movs	r0, #0
 8001482:	f005 fdf5 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 70 kHz", Font_7x10, White);
 8001486:	4a7a      	ldr	r2, [pc, #488]	; (8001670 <OLED_Update_Display_Case+0x958>)
 8001488:	2301      	movs	r3, #1
 800148a:	ca06      	ldmia	r2, {r1, r2}
 800148c:	4879      	ldr	r0, [pc, #484]	; (8001674 <OLED_Update_Display_Case+0x95c>)
 800148e:	f005 fdc9 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001492:	2129      	movs	r1, #41	; 0x29
 8001494:	2000      	movs	r0, #0
 8001496:	f005 fdeb 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 1.7 us", Font_7x10, White);
 800149a:	4a75      	ldr	r2, [pc, #468]	; (8001670 <OLED_Update_Display_Case+0x958>)
 800149c:	2301      	movs	r3, #1
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	4875      	ldr	r0, [pc, #468]	; (8001678 <OLED_Update_Display_Case+0x960>)
 80014a2:	f005 fdbf 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80014a6:	2135      	movs	r1, #53	; 0x35
 80014a8:	2000      	movs	r0, #0
 80014aa:	f005 fde1 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 12 %", Font_7x10, White);
 80014ae:	4a70      	ldr	r2, [pc, #448]	; (8001670 <OLED_Update_Display_Case+0x958>)
 80014b0:	2301      	movs	r3, #1
 80014b2:	ca06      	ldmia	r2, {r1, r2}
 80014b4:	4871      	ldr	r0, [pc, #452]	; (800167c <OLED_Update_Display_Case+0x964>)
 80014b6:	f005 fdb5 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80014ba:	f7ff fc09 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80014be:	f005 fcab 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 80014c2:	e0ca      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_PRF9:
		ssd1306_Fill(Black);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f005 fc85 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f005 fdcf 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF 9", Font_16x26, White);
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <OLED_Update_Display_Case+0x950>)
 80014d4:	2301      	movs	r3, #1
 80014d6:	ca06      	ldmia	r2, {r1, r2}
 80014d8:	4869      	ldr	r0, [pc, #420]	; (8001680 <OLED_Update_Display_Case+0x968>)
 80014da:	f005 fda3 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80014de:	211d      	movs	r1, #29
 80014e0:	2000      	movs	r0, #0
 80014e2:	f005 fdc5 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 70 kHz", Font_7x10, White);
 80014e6:	4a62      	ldr	r2, [pc, #392]	; (8001670 <OLED_Update_Display_Case+0x958>)
 80014e8:	2301      	movs	r3, #1
 80014ea:	ca06      	ldmia	r2, {r1, r2}
 80014ec:	4861      	ldr	r0, [pc, #388]	; (8001674 <OLED_Update_Display_Case+0x95c>)
 80014ee:	f005 fd99 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80014f2:	2129      	movs	r1, #41	; 0x29
 80014f4:	2000      	movs	r0, #0
 80014f6:	f005 fdbb 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 0.2 us", Font_7x10, White);
 80014fa:	4a5d      	ldr	r2, [pc, #372]	; (8001670 <OLED_Update_Display_Case+0x958>)
 80014fc:	2301      	movs	r3, #1
 80014fe:	ca06      	ldmia	r2, {r1, r2}
 8001500:	4860      	ldr	r0, [pc, #384]	; (8001684 <OLED_Update_Display_Case+0x96c>)
 8001502:	f005 fd8f 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 8001506:	2135      	movs	r1, #53	; 0x35
 8001508:	2000      	movs	r0, #0
 800150a:	f005 fdb1 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("DUTY= 1.4 %", Font_7x10, White);
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <OLED_Update_Display_Case+0x958>)
 8001510:	2301      	movs	r3, #1
 8001512:	ca06      	ldmia	r2, {r1, r2}
 8001514:	485c      	ldr	r0, [pc, #368]	; (8001688 <OLED_Update_Display_Case+0x970>)
 8001516:	f005 fd85 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800151a:	f7ff fbd9 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800151e:	f005 fc7b 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8001522:	e09a      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Duty_12P:
		ssd1306_Fill(Black);
 8001524:	2000      	movs	r0, #0
 8001526:	f005 fc55 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f005 fd9f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("D-y 12", Font_16x26, White);
 8001532:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <OLED_Update_Display_Case+0x950>)
 8001534:	2301      	movs	r3, #1
 8001536:	ca06      	ldmia	r2, {r1, r2}
 8001538:	4854      	ldr	r0, [pc, #336]	; (800168c <OLED_Update_Display_Case+0x974>)
 800153a:	f005 fd73 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(100, 3);
 800153e:	2103      	movs	r1, #3
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f005 fd95 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("%", Font_11x18, White);
 8001546:	4a52      	ldr	r2, [pc, #328]	; (8001690 <OLED_Update_Display_Case+0x978>)
 8001548:	2301      	movs	r3, #1
 800154a:	ca06      	ldmia	r2, {r1, r2}
 800154c:	4851      	ldr	r0, [pc, #324]	; (8001694 <OLED_Update_Display_Case+0x97c>)
 800154e:	f005 fd69 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8001552:	211d      	movs	r1, #29
 8001554:	2000      	movs	r0, #0
 8001556:	f005 fd8b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 2.4 kHz", Font_7x10, White);
 800155a:	4a45      	ldr	r2, [pc, #276]	; (8001670 <OLED_Update_Display_Case+0x958>)
 800155c:	2301      	movs	r3, #1
 800155e:	ca06      	ldmia	r2, {r1, r2}
 8001560:	484d      	ldr	r0, [pc, #308]	; (8001698 <OLED_Update_Display_Case+0x980>)
 8001562:	f005 fd5f 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001566:	2129      	movs	r1, #41	; 0x29
 8001568:	2000      	movs	r0, #0
 800156a:	f005 fd81 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 50 us", Font_7x10, White);
 800156e:	4a40      	ldr	r2, [pc, #256]	; (8001670 <OLED_Update_Display_Case+0x958>)
 8001570:	2301      	movs	r3, #1
 8001572:	ca06      	ldmia	r2, {r1, r2}
 8001574:	4849      	ldr	r0, [pc, #292]	; (800169c <OLED_Update_Display_Case+0x984>)
 8001576:	f005 fd55 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800157a:	f7ff fba9 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 800157e:	f005 fc4b 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8001582:	e06a      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Duty_15P:
		ssd1306_Fill(Black);
 8001584:	2000      	movs	r0, #0
 8001586:	f005 fc25 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	f005 fd6f 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("D-y 15", Font_16x26, White);
 8001592:	4a35      	ldr	r2, [pc, #212]	; (8001668 <OLED_Update_Display_Case+0x950>)
 8001594:	2301      	movs	r3, #1
 8001596:	ca06      	ldmia	r2, {r1, r2}
 8001598:	4841      	ldr	r0, [pc, #260]	; (80016a0 <OLED_Update_Display_Case+0x988>)
 800159a:	f005 fd43 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(100, 3);
 800159e:	2103      	movs	r1, #3
 80015a0:	2064      	movs	r0, #100	; 0x64
 80015a2:	f005 fd65 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("%", Font_11x18, White);
 80015a6:	4a3a      	ldr	r2, [pc, #232]	; (8001690 <OLED_Update_Display_Case+0x978>)
 80015a8:	2301      	movs	r3, #1
 80015aa:	ca06      	ldmia	r2, {r1, r2}
 80015ac:	4839      	ldr	r0, [pc, #228]	; (8001694 <OLED_Update_Display_Case+0x97c>)
 80015ae:	f005 fd39 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 80015b2:	211d      	movs	r1, #29
 80015b4:	2000      	movs	r0, #0
 80015b6:	f005 fd5b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF1= 15 kHz", Font_7x10, White);
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <OLED_Update_Display_Case+0x958>)
 80015bc:	2301      	movs	r3, #1
 80015be:	ca06      	ldmia	r2, {r1, r2}
 80015c0:	4838      	ldr	r0, [pc, #224]	; (80016a4 <OLED_Update_Display_Case+0x98c>)
 80015c2:	f005 fd2f 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 80015c6:	2129      	movs	r1, #41	; 0x29
 80015c8:	2000      	movs	r0, #0
 80015ca:	f005 fd51 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF2= 11.57 kHz", Font_7x10, White);
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <OLED_Update_Display_Case+0x958>)
 80015d0:	2301      	movs	r3, #1
 80015d2:	ca06      	ldmia	r2, {r1, r2}
 80015d4:	4834      	ldr	r0, [pc, #208]	; (80016a8 <OLED_Update_Display_Case+0x990>)
 80015d6:	f005 fd25 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 80015da:	2135      	movs	r1, #53	; 0x35
 80015dc:	2000      	movs	r0, #0
 80015de:	f005 fd47 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW= 10 us", Font_7x10, White);
 80015e2:	4a23      	ldr	r2, [pc, #140]	; (8001670 <OLED_Update_Display_Case+0x958>)
 80015e4:	2301      	movs	r3, #1
 80015e6:	ca06      	ldmia	r2, {r1, r2}
 80015e8:	4830      	ldr	r0, [pc, #192]	; (80016ac <OLED_Update_Display_Case+0x994>)
 80015ea:	f005 fd1b 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 80015ee:	f7ff fb6f 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 80015f2:	f005 fc11 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 80015f6:	e030      	b.n	800165a <OLED_Update_Display_Case+0x942>

	case Leonardo_Pattern_Q:
		ssd1306_Fill(Black);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f005 fbeb 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80015fe:	2100      	movs	r1, #0
 8001600:	2000      	movs	r0, #0
 8001602:	f005 fd35 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRN Q", Font_16x26, White);
 8001606:	4a18      	ldr	r2, [pc, #96]	; (8001668 <OLED_Update_Display_Case+0x950>)
 8001608:	2301      	movs	r3, #1
 800160a:	ca06      	ldmia	r2, {r1, r2}
 800160c:	4828      	ldr	r0, [pc, #160]	; (80016b0 <OLED_Update_Display_Case+0x998>)
 800160e:	f005 fd09 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 29);
 8001612:	211d      	movs	r1, #29
 8001614:	2000      	movs	r0, #0
 8001616:	f005 fd2b 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PRF= 10 kHz", Font_7x10, White);
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <OLED_Update_Display_Case+0x958>)
 800161c:	2301      	movs	r3, #1
 800161e:	ca06      	ldmia	r2, {r1, r2}
 8001620:	4824      	ldr	r0, [pc, #144]	; (80016b4 <OLED_Update_Display_Case+0x99c>)
 8001622:	f005 fcff 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 41);
 8001626:	2129      	movs	r1, #41	; 0x29
 8001628:	2000      	movs	r0, #0
 800162a:	f005 fd21 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW1= 20 us", Font_7x10, White);
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <OLED_Update_Display_Case+0x958>)
 8001630:	2301      	movs	r3, #1
 8001632:	ca06      	ldmia	r2, {r1, r2}
 8001634:	4820      	ldr	r0, [pc, #128]	; (80016b8 <OLED_Update_Display_Case+0x9a0>)
 8001636:	f005 fcf5 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 53);
 800163a:	2135      	movs	r1, #53	; 0x35
 800163c:	2000      	movs	r0, #0
 800163e:	f005 fd17 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("PW2= 10 us", Font_7x10, White);
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <OLED_Update_Display_Case+0x958>)
 8001644:	2301      	movs	r3, #1
 8001646:	ca06      	ldmia	r2, {r1, r2}
 8001648:	481c      	ldr	r0, [pc, #112]	; (80016bc <OLED_Update_Display_Case+0x9a4>)
 800164a:	f005 fceb 	bl	8007024 <ssd1306_WriteString>
		OLED_WriteCaseNumber();
 800164e:	f7ff fb3f 	bl	8000cd0 <OLED_WriteCaseNumber>
		ssd1306_UpdateScreen();
 8001652:	f005 fbe1 	bl	8006e18 <ssd1306_UpdateScreen>
		break;
 8001656:	e000      	b.n	800165a <OLED_Update_Display_Case+0x942>

	default:
		break;
 8001658:	bf00      	nop
	}
	OLEDupToDate = true;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <OLED_Update_Display_Case+0x9a8>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200002f0 	.word	0x200002f0
 800166c:	08009488 	.word	0x08009488
 8001670:	200002e0 	.word	0x200002e0
 8001674:	08009490 	.word	0x08009490
 8001678:	0800949c 	.word	0x0800949c
 800167c:	080093dc 	.word	0x080093dc
 8001680:	080094a8 	.word	0x080094a8
 8001684:	080094b0 	.word	0x080094b0
 8001688:	080094bc 	.word	0x080094bc
 800168c:	080094c8 	.word	0x080094c8
 8001690:	200002e8 	.word	0x200002e8
 8001694:	080094d0 	.word	0x080094d0
 8001698:	080094d4 	.word	0x080094d4
 800169c:	080093b0 	.word	0x080093b0
 80016a0:	080094e4 	.word	0x080094e4
 80016a4:	080094ec 	.word	0x080094ec
 80016a8:	080094fc 	.word	0x080094fc
 80016ac:	08009270 	.word	0x08009270
 80016b0:	0800950c 	.word	0x0800950c
 80016b4:	08009264 	.word	0x08009264
 80016b8:	08009514 	.word	0x08009514
 80016bc:	08009520 	.word	0x08009520
 80016c0:	200004e4 	.word	0x200004e4

080016c4 <InitDataInFlashSettings>:
#define FREQUENCY_CF_LOWER_LIMIT  0.99	// 1%
#define PW_OFFSET_UPPER_LIMIT  50			// 50 * 12.5ns = 625 ns
#define PW_OFFSET_LOWER_LIMIT  -10			// 125 ns

void InitDataInFlashSettings(void)	// initialisation needed only for erase function before write to EEPROM
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <InitDataInFlashSettings+0x28>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks       = FLASH_BANK_2;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <InitDataInFlashSettings+0x28>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Page        = 511;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <InitDataInFlashSettings+0x28>)
 80016d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80016da:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages     = 1;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <InitDataInFlashSettings+0x28>)
 80016de:	2201      	movs	r2, #1
 80016e0:	60da      	str	r2, [r3, #12]
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	200004ec 	.word	0x200004ec

080016f0 <SaveCalibrationFactorInFlash>:

void SaveCalibrationFactorInFlash()
{
 80016f0:	b598      	push	{r3, r4, r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80016f4:	f001 feee 	bl	80034d4 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 80016f8:	4916      	ldr	r1, [pc, #88]	; (8001754 <SaveCalibrationFactorInFlash+0x64>)
 80016fa:	4817      	ldr	r0, [pc, #92]	; (8001758 <SaveCalibrationFactorInFlash+0x68>)
 80016fc:	f001 ffca 	bl	8003694 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, FrequencyCalibrationFactorFlashAddress, FrequencyCalibrationFactor * 1000000);
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <SaveCalibrationFactorInFlash+0x6c>)
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <SaveCalibrationFactorInFlash+0x70>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001764 <SaveCalibrationFactorInFlash+0x74>
 800170e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001712:	ee17 0a90 	vmov	r0, s15
 8001716:	f7ff fab7 	bl	8000c88 <__aeabi_f2ulz>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4621      	mov	r1, r4
 8001720:	2000      	movs	r0, #0
 8001722:	f001 fe6b 	bl	80033fc <HAL_FLASH_Program>
	HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, PulseWitdhOffsetFlashAddress, PulseWidthOffset * 1000);
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <SaveCalibrationFactorInFlash+0x78>)
 8001728:	681c      	ldr	r4, [r3, #0]
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <SaveCalibrationFactorInFlash+0x7c>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001770 <SaveCalibrationFactorInFlash+0x80>
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	ee17 0a90 	vmov	r0, s15
 800173c:	f7ff faa4 	bl	8000c88 <__aeabi_f2ulz>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4621      	mov	r1, r4
 8001746:	2000      	movs	r0, #0
 8001748:	f001 fe58 	bl	80033fc <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800174c:	f001 fee4 	bl	8003518 <HAL_FLASH_Lock>
}
 8001750:	bf00      	nop
 8001752:	bd98      	pop	{r3, r4, r7, pc}
 8001754:	200004e8 	.word	0x200004e8
 8001758:	200004ec 	.word	0x200004ec
 800175c:	20000004 	.word	0x20000004
 8001760:	20000928 	.word	0x20000928
 8001764:	49742400 	.word	0x49742400
 8001768:	20000008 	.word	0x20000008
 800176c:	20000938 	.word	0x20000938
 8001770:	447a0000 	.word	0x447a0000

08001774 <ReadFrequencyCalibrationFactorFromFlash>:

float ReadFrequencyCalibrationFactorFromFlash(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
	uint32_t raw_value_calibration_factor = *(ptrCalibrationFactorInFlashAddress);
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <ReadFrequencyCalibrationFactorFromFlash+0x40>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	607b      	str	r3, [r7, #4]
	if(raw_value_calibration_factor == 0xFFFFFFFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d101      	bne.n	800178e <ReadFrequencyCalibrationFactorFromFlash+0x1a>
		raw_value_calibration_factor = 1000000; // if not programmed/saved yet then set to 1000000
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <ReadFrequencyCalibrationFactorFromFlash+0x44>)
 800178c:	607b      	str	r3, [r7, #4]
	return ((float)raw_value_calibration_factor / 1000000);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001798:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80017bc <ReadFrequencyCalibrationFactorFromFlash+0x48>
 800179c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017a0:	eef0 7a66 	vmov.f32	s15, s13
}
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	000f4240 	.word	0x000f4240
 80017bc:	49742400 	.word	0x49742400

080017c0 <ReadPulseWidthOffsetFromFlash>:

float ReadPulseWidthOffsetFromFlash(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
	uint32_t raw_value_PW_offset_factor = *(ptrPulseWidthOffsetInFlashAddress);
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <ReadPulseWidthOffsetFromFlash+0x40>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	607b      	str	r3, [r7, #4]
	if(raw_value_PW_offset_factor == 0xFFFFFFFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d101      	bne.n	80017da <ReadPulseWidthOffsetFromFlash+0x1a>
		raw_value_PW_offset_factor = 0; // if not programmed/saved yet then set to 0
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
	return ((float)raw_value_PW_offset_factor / 1000);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001804 <ReadPulseWidthOffsetFromFlash+0x44>
 80017e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000010 	.word	0x20000010
 8001804:	447a0000 	.word	0x447a0000

08001808 <UpdateFrequencyCalibrationDisplay>:

static void UpdateFrequencyCalibrationDisplay(void)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800180e:	2000      	movs	r0, #0
 8001810:	f005 fae0 	bl	8006dd4 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f005 fc2a 	bl	8007070 <ssd1306_SetCursor>
	ssd1306_WriteString("FREQ. CALIBRATION:", Font_7x10, White);
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <UpdateFrequencyCalibrationDisplay+0x84>)
 800181e:	2301      	movs	r3, #1
 8001820:	ca06      	ldmia	r2, {r1, r2}
 8001822:	481b      	ldr	r0, [pc, #108]	; (8001890 <UpdateFrequencyCalibrationDisplay+0x88>)
 8001824:	f005 fbfe 	bl	8007024 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 14);
 8001828:	210e      	movs	r1, #14
 800182a:	2000      	movs	r0, #0
 800182c:	f005 fc20 	bl	8007070 <ssd1306_SetCursor>
	ssd1306_WriteString("ADJUST FREQ. TO", Font_7x10, White);
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <UpdateFrequencyCalibrationDisplay+0x84>)
 8001832:	2301      	movs	r3, #1
 8001834:	ca06      	ldmia	r2, {r1, r2}
 8001836:	4817      	ldr	r0, [pc, #92]	; (8001894 <UpdateFrequencyCalibrationDisplay+0x8c>)
 8001838:	f005 fbf4 	bl	8007024 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 800183c:	211c      	movs	r1, #28
 800183e:	2000      	movs	r0, #0
 8001840:	f005 fc16 	bl	8007070 <ssd1306_SetCursor>
	ssd1306_WriteString("10kHz WITH TOGGLE", Font_7x10, White);
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <UpdateFrequencyCalibrationDisplay+0x84>)
 8001846:	2301      	movs	r3, #1
 8001848:	ca06      	ldmia	r2, {r1, r2}
 800184a:	4813      	ldr	r0, [pc, #76]	; (8001898 <UpdateFrequencyCalibrationDisplay+0x90>)
 800184c:	f005 fbea 	bl	8007024 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 44);
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	2000      	movs	r0, #0
 8001854:	f005 fc0c 	bl	8007070 <ssd1306_SetCursor>
	snprintf(string_buffer, 20, "CF= %.4f", FrequencyCalibrationFactor);
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <UpdateFrequencyCalibrationDisplay+0x94>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe73 	bl	8000548 <__aeabi_f2d>
 8001862:	4603      	mov	r3, r0
 8001864:	460c      	mov	r4, r1
 8001866:	e9cd 3400 	strd	r3, r4, [sp]
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <UpdateFrequencyCalibrationDisplay+0x98>)
 800186c:	2114      	movs	r1, #20
 800186e:	480d      	ldr	r0, [pc, #52]	; (80018a4 <UpdateFrequencyCalibrationDisplay+0x9c>)
 8001870:	f006 f8be 	bl	80079f0 <sniprintf>
	ssd1306_WriteString(string_buffer, Font_11x18, White);
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <UpdateFrequencyCalibrationDisplay+0xa0>)
 8001876:	2301      	movs	r3, #1
 8001878:	ca06      	ldmia	r2, {r1, r2}
 800187a:	480a      	ldr	r0, [pc, #40]	; (80018a4 <UpdateFrequencyCalibrationDisplay+0x9c>)
 800187c:	f005 fbd2 	bl	8007024 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001880:	f005 faca 	bl	8006e18 <ssd1306_UpdateScreen>
}
 8001884:	bf00      	nop
 8001886:	3704      	adds	r7, #4
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	200002e0 	.word	0x200002e0
 8001890:	0800952c 	.word	0x0800952c
 8001894:	08009540 	.word	0x08009540
 8001898:	08009550 	.word	0x08009550
 800189c:	20000928 	.word	0x20000928
 80018a0:	08009564 	.word	0x08009564
 80018a4:	200004fc 	.word	0x200004fc
 80018a8:	200002e8 	.word	0x200002e8

080018ac <UpdatePulseAdjustmentDisplay>:

static void UpdatePulseAdjustmentDisplay(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f005 fa8e 	bl	8006dd4 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80018b8:	2100      	movs	r1, #0
 80018ba:	2000      	movs	r0, #0
 80018bc:	f005 fbd8 	bl	8007070 <ssd1306_SetCursor>
	ssd1306_WriteString("PULSE ADJUSTMENT:", Font_7x10, White);
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <UpdatePulseAdjustmentDisplay+0x90>)
 80018c2:	2301      	movs	r3, #1
 80018c4:	ca06      	ldmia	r2, {r1, r2}
 80018c6:	481e      	ldr	r0, [pc, #120]	; (8001940 <UpdatePulseAdjustmentDisplay+0x94>)
 80018c8:	f005 fbac 	bl	8007024 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 14);
 80018cc:	210e      	movs	r1, #14
 80018ce:	2000      	movs	r0, #0
 80018d0:	f005 fbce 	bl	8007070 <ssd1306_SetCursor>
	ssd1306_WriteString("ADJUST OFFSET WITH", Font_7x10, White);
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <UpdatePulseAdjustmentDisplay+0x90>)
 80018d6:	2301      	movs	r3, #1
 80018d8:	ca06      	ldmia	r2, {r1, r2}
 80018da:	481a      	ldr	r0, [pc, #104]	; (8001944 <UpdatePulseAdjustmentDisplay+0x98>)
 80018dc:	f005 fba2 	bl	8007024 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 80018e0:	211c      	movs	r1, #28
 80018e2:	2000      	movs	r0, #0
 80018e4:	f005 fbc4 	bl	8007070 <ssd1306_SetCursor>
	ssd1306_WriteString("TOGGLE FOR PW 0.2u", Font_7x10, White);
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <UpdatePulseAdjustmentDisplay+0x90>)
 80018ea:	2301      	movs	r3, #1
 80018ec:	ca06      	ldmia	r2, {r1, r2}
 80018ee:	4816      	ldr	r0, [pc, #88]	; (8001948 <UpdatePulseAdjustmentDisplay+0x9c>)
 80018f0:	f005 fb98 	bl	8007024 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 44);
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	2000      	movs	r0, #0
 80018f8:	f005 fbba 	bl	8007070 <ssd1306_SetCursor>
	snprintf(string_buffer, 20, "%+7.1f ns", PulseWidthOffset * 12.5);
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <UpdatePulseAdjustmentDisplay+0xa0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe21 	bl	8000548 <__aeabi_f2d>
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <UpdatePulseAdjustmentDisplay+0xa4>)
 800190c:	f7fe fe74 	bl	80005f8 <__aeabi_dmul>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	e9cd 3400 	strd	r3, r4, [sp]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <UpdatePulseAdjustmentDisplay+0xa8>)
 800191a:	2114      	movs	r1, #20
 800191c:	480e      	ldr	r0, [pc, #56]	; (8001958 <UpdatePulseAdjustmentDisplay+0xac>)
 800191e:	f006 f867 	bl	80079f0 <sniprintf>
	ssd1306_WriteString(string_buffer, Font_11x18, White);
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <UpdatePulseAdjustmentDisplay+0xb0>)
 8001924:	2301      	movs	r3, #1
 8001926:	ca06      	ldmia	r2, {r1, r2}
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <UpdatePulseAdjustmentDisplay+0xac>)
 800192a:	f005 fb7b 	bl	8007024 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800192e:	f005 fa73 	bl	8006e18 <ssd1306_UpdateScreen>
}
 8001932:	bf00      	nop
 8001934:	3704      	adds	r7, #4
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	200002e0 	.word	0x200002e0
 8001940:	08009570 	.word	0x08009570
 8001944:	08009584 	.word	0x08009584
 8001948:	08009598 	.word	0x08009598
 800194c:	20000938 	.word	0x20000938
 8001950:	40290000 	.word	0x40290000
 8001954:	080095ac 	.word	0x080095ac
 8001958:	200004fc 	.word	0x200004fc
 800195c:	200002e8 	.word	0x200002e8

08001960 <Freq_Calibration_Mode>:

void Freq_Calibration_Mode(void)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
	bool FrequencyCalibrationUpdated = false;
 8001966:	2300      	movs	r3, #0
 8001968:	77fb      	strb	r3, [r7, #31]
	bool Previous_Pin6_State = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	72fb      	strb	r3, [r7, #11]
	bool Previous_Pin8_State = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	72bb      	strb	r3, [r7, #10]
	uint32_t CalibrationFrequency_ARR = 7999;
 8001972:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001976:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < 1000000; i++); // about 140 ms delay for de-bouncing
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e002      	b.n	8001984 <Freq_Calibration_Mode+0x24>
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3301      	adds	r3, #1
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	4aa4      	ldr	r2, [pc, #656]	; (8001c18 <Freq_Calibration_Mode+0x2b8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	ddf8      	ble.n	800197e <Freq_Calibration_Mode+0x1e>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	// disable switch function implemented in ISR to use this switch here for calibration
 800198c:	2017      	movs	r0, #23
 800198e:	f001 fd1a 	bl	80033c6 <HAL_NVIC_DisableIRQ>
	UpdateFrequencyCalibrationDisplay();
 8001992:	f7ff ff39 	bl	8001808 <UpdateFrequencyCalibrationDisplay>
	HAL_TIM_Base_Stop_IT(&htim3);	// stop frequency switching
 8001996:	48a1      	ldr	r0, [pc, #644]	; (8001c1c <Freq_Calibration_Mode+0x2bc>)
 8001998:	f004 f95c 	bl	8005c54 <HAL_TIM_Base_Stop_IT>
	TIM3->CNT = 0;
 800199c:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <Freq_Calibration_Mode+0x2c0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = round(CalibrationFrequency_ARR * FrequencyCalibrationFactor);	//Set timer2 period to 100us --> 10 kHz (calibration frequency)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b4:	4b9b      	ldr	r3, [pc, #620]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	ee17 0a90 	vmov	r0, s15
 80019c2:	f7fe fdc1 	bl	8000548 <__aeabi_f2d>
 80019c6:	4603      	mov	r3, r0
 80019c8:	460c      	mov	r4, r1
 80019ca:	ec44 3b10 	vmov	d0, r3, r4
 80019ce:	f007 fbeb 	bl	80091a8 <round>
 80019d2:	ec53 2b10 	vmov	r2, r3, d0
 80019d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f8e3 	bl	8000ba8 <__aeabi_d2uiz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->CCR1 = round(80 * FrequencyCalibrationFactor + PulseWidthOffset);  	//  1us nominal pulse width for frequency calibration
 80019e6:	4b8f      	ldr	r3, [pc, #572]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001c28 <Freq_Calibration_Mode+0x2c8>
 80019f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f4:	4b8d      	ldr	r3, [pc, #564]	; (8001c2c <Freq_Calibration_Mode+0x2cc>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fe:	ee17 0a90 	vmov	r0, s15
 8001a02:	f7fe fda1 	bl	8000548 <__aeabi_f2d>
 8001a06:	4603      	mov	r3, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	ec44 3b10 	vmov	d0, r3, r4
 8001a0e:	f007 fbcb 	bl	80091a8 <round>
 8001a12:	ec53 2b10 	vmov	r2, r3, d0
 8001a16:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8c3 	bl	8000ba8 <__aeabi_d2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	6363      	str	r3, [r4, #52]	; 0x34

	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8001a26:	e0de      	b.n	8001be6 <Freq_Calibration_Mode+0x286>
	{
		//just for scope trigger output
		GPIOC->BSRR |= (1u << 4); // set pin 4
 8001a28:	4b81      	ldr	r3, [pc, #516]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a80      	ldr	r2, [pc, #512]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	6193      	str	r3, [r2, #24]
		for(int i = 0; i < 25; i++); // about 3 us
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e002      	b.n	8001a40 <Freq_Calibration_Mode+0xe0>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b18      	cmp	r3, #24
 8001a44:	ddf9      	ble.n	8001a3a <Freq_Calibration_Mode+0xda>
		GPIOC->BSRR |= (1u << 20); // reset pin 4
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a50:	6193      	str	r3, [r2, #24]

		Previous_Pin6_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8001a52:	2140      	movs	r1, #64	; 0x40
 8001a54:	4876      	ldr	r0, [pc, #472]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001a56:	f002 f909 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	72fb      	strb	r3, [r7, #11]
		Previous_Pin8_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6a:	4871      	ldr	r0, [pc, #452]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001a6c:	f002 f8fe 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf14      	ite	ne
 8001a76:	2301      	movne	r3, #1
 8001a78:	2300      	moveq	r3, #0
 8001a7a:	72bb      	strb	r3, [r7, #10]
		for(int i = 0; i < 100000; i++); // wait between consecutive pin reads (above) to avoid bouncing around threshold (about 14 ms)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	e002      	b.n	8001a88 <Freq_Calibration_Mode+0x128>
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	3301      	adds	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <Freq_Calibration_Mode+0x2d4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	ddf8      	ble.n	8001a82 <Freq_Calibration_Mode+0x122>

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0 && Previous_Pin6_State == 1)
 8001a90:	2140      	movs	r1, #64	; 0x40
 8001a92:	4867      	ldr	r0, [pc, #412]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001a94:	f002 f8ea 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d14d      	bne.n	8001b3a <Freq_Calibration_Mode+0x1da>
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d04a      	beq.n	8001b3a <Freq_Calibration_Mode+0x1da>
		{
			FrequencyCalibrationFactor += 0.0001;
 8001aa4:	4b5f      	ldr	r3, [pc, #380]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd4d 	bl	8000548 <__aeabi_f2d>
 8001aae:	a354      	add	r3, pc, #336	; (adr r3, 8001c00 <Freq_Calibration_Mode+0x2a0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fbea 	bl	800028c <__adddf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4618      	mov	r0, r3
 8001abe:	4621      	mov	r1, r4
 8001ac0:	f7ff f892 	bl	8000be8 <__aeabi_d2f>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001ac8:	601a      	str	r2, [r3, #0]
			if(FrequencyCalibrationFactor > FREQUENCY_CF_UPPER_LIMIT) FrequencyCalibrationFactor = FREQUENCY_CF_UPPER_LIMIT;
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd3a 	bl	8000548 <__aeabi_f2d>
 8001ad4:	a34c      	add	r3, pc, #304	; (adr r3, 8001c08 <Freq_Calibration_Mode+0x2a8>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7ff f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <Freq_Calibration_Mode+0x18a>
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001ae6:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <Freq_Calibration_Mode+0x2d8>)
 8001ae8:	601a      	str	r2, [r3, #0]
			Previous_Pin6_State = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	72fb      	strb	r3, [r7, #11]
			TIM2->CNT = 0;
 8001aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = round(CalibrationFrequency_ARR * FrequencyCalibrationFactor);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0a:	ee17 0a90 	vmov	r0, s15
 8001b0e:	f7fe fd1b 	bl	8000548 <__aeabi_f2d>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	ec44 3b10 	vmov	d0, r3, r4
 8001b1a:	f007 fb45 	bl	80091a8 <round>
 8001b1e:	ec53 2b10 	vmov	r2, r3, d0
 8001b22:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7ff f83d 	bl	8000ba8 <__aeabi_d2uiz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	62e3      	str	r3, [r4, #44]	; 0x2c
			UpdateFrequencyCalibrationDisplay();
 8001b32:	f7ff fe69 	bl	8001808 <UpdateFrequencyCalibrationDisplay>
			FrequencyCalibrationUpdated = true;
 8001b36:	2301      	movs	r3, #1
 8001b38:	77fb      	strb	r3, [r7, #31]
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && Previous_Pin8_State == 1)
 8001b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3e:	483c      	ldr	r0, [pc, #240]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001b40:	f002 f894 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d14d      	bne.n	8001be6 <Freq_Calibration_Mode+0x286>
 8001b4a:	7abb      	ldrb	r3, [r7, #10]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d04a      	beq.n	8001be6 <Freq_Calibration_Mode+0x286>
		{
			FrequencyCalibrationFactor -= 0.0001;
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fcf7 	bl	8000548 <__aeabi_f2d>
 8001b5a:	a329      	add	r3, pc, #164	; (adr r3, 8001c00 <Freq_Calibration_Mode+0x2a0>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb92 	bl	8000288 <__aeabi_dsub>
 8001b64:	4603      	mov	r3, r0
 8001b66:	460c      	mov	r4, r1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	f7ff f83c 	bl	8000be8 <__aeabi_d2f>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001b74:	601a      	str	r2, [r3, #0]
			if(FrequencyCalibrationFactor < FREQUENCY_CF_LOWER_LIMIT) FrequencyCalibrationFactor = FREQUENCY_CF_LOWER_LIMIT;
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fce4 	bl	8000548 <__aeabi_f2d>
 8001b80:	a323      	add	r3, pc, #140	; (adr r3, 8001c10 <Freq_Calibration_Mode+0x2b0>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe ffa9 	bl	8000adc <__aeabi_dcmplt>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <Freq_Calibration_Mode+0x236>
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001b92:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <Freq_Calibration_Mode+0x2dc>)
 8001b94:	601a      	str	r2, [r3, #0]
			Previous_Pin8_State = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	72bb      	strb	r3, [r7, #10]
			TIM2->CNT = 0;
 8001b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = round(CalibrationFrequency_ARR * FrequencyCalibrationFactor);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <Freq_Calibration_Mode+0x2c4>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	ee17 0a90 	vmov	r0, s15
 8001bba:	f7fe fcc5 	bl	8000548 <__aeabi_f2d>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460c      	mov	r4, r1
 8001bc2:	ec44 3b10 	vmov	d0, r3, r4
 8001bc6:	f007 faef 	bl	80091a8 <round>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ffe7 	bl	8000ba8 <__aeabi_d2uiz>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
			UpdateFrequencyCalibrationDisplay();
 8001bde:	f7ff fe13 	bl	8001808 <UpdateFrequencyCalibrationDisplay>
			FrequencyCalibrationUpdated = true;
 8001be2:	2301      	movs	r3, #1
 8001be4:	77fb      	strb	r3, [r7, #31]
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8001be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bea:	4811      	ldr	r0, [pc, #68]	; (8001c30 <Freq_Calibration_Mode+0x2d0>)
 8001bec:	f002 f83e 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f43f af18 	beq.w	8001a28 <Freq_Calibration_Mode+0xc8>
		}
	}

	for(int i = 0; i < 1000000; i++); // about 140 ms
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e023      	b.n	8001c46 <Freq_Calibration_Mode+0x2e6>
 8001bfe:	bf00      	nop
 8001c00:	eb1c432d 	.word	0xeb1c432d
 8001c04:	3f1a36e2 	.word	0x3f1a36e2
 8001c08:	c28f5c29 	.word	0xc28f5c29
 8001c0c:	3ff028f5 	.word	0x3ff028f5
 8001c10:	7ae147ae 	.word	0x7ae147ae
 8001c14:	3fefae14 	.word	0x3fefae14
 8001c18:	000f423f 	.word	0x000f423f
 8001c1c:	2000098c 	.word	0x2000098c
 8001c20:	40000400 	.word	0x40000400
 8001c24:	20000928 	.word	0x20000928
 8001c28:	42a00000 	.word	0x42a00000
 8001c2c:	20000938 	.word	0x20000938
 8001c30:	48000800 	.word	0x48000800
 8001c34:	0001869f 	.word	0x0001869f
 8001c38:	3f8147ae 	.word	0x3f8147ae
 8001c3c:	3f7d70a4 	.word	0x3f7d70a4
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <Freq_Calibration_Mode+0x370>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	ddf8      	ble.n	8001c40 <Freq_Calibration_Mode+0x2e0>
	OLEDupToDate = false;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <Freq_Calibration_Mode+0x374>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
	FrequencyCalibrationModeFlag = false;
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <Freq_Calibration_Mode+0x378>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]


	if(FrequencyCalibrationUpdated)
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <Freq_Calibration_Mode+0x342>
	{
		ApplyFrequencyCalFactor();
 8001c60:	f000 f9f0 	bl	8002044 <ApplyFrequencyCalFactor>
		SaveCalibrationFactorInFlash();
 8001c64:	f7ff fd44 	bl	80016f0 <SaveCalibrationFactorInFlash>

		// Calibration saved message on Display
		ssd1306_Fill(Black);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f005 f8b3 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 10);
 8001c6e:	210a      	movs	r1, #10
 8001c70:	2000      	movs	r0, #0
 8001c72:	f005 f9fd 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("CALIBRATION:", Font_11x18, White);
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <Freq_Calibration_Mode+0x37c>)
 8001c78:	2301      	movs	r3, #1
 8001c7a:	ca06      	ldmia	r2, {r1, r2}
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <Freq_Calibration_Mode+0x380>)
 8001c7e:	f005 f9d1 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8001c82:	211e      	movs	r1, #30
 8001c84:	2000      	movs	r0, #0
 8001c86:	f005 f9f3 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("   SAVED", Font_11x18, White);
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <Freq_Calibration_Mode+0x37c>)
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	ca06      	ldmia	r2, {r1, r2}
 8001c90:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <Freq_Calibration_Mode+0x384>)
 8001c92:	f005 f9c7 	bl	8007024 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001c96:	f005 f8bf 	bl	8006e18 <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8001c9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c9e:	f001 fa49 	bl	8003134 <HAL_Delay>
	}

	OLED_Update_Display_Case(OLEDDisplayState);
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <Freq_Calibration_Mode+0x388>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f836 	bl	8000d18 <OLED_Update_Display_Case>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);	// buttons used here are used somewhere else as EXTI so any flags has to be cleared
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <Freq_Calibration_Mode+0x38c>)
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <Freq_Calibration_Mode+0x38c>)
 8001cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb8:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cba:	2017      	movs	r0, #23
 8001cbc:	f001 fb75 	bl	80033aa <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim3); // start frequency switching
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <Freq_Calibration_Mode+0x390>)
 8001cc2:	f003 ff57 	bl	8005b74 <HAL_TIM_Base_Start_IT>
}
 8001cc6:	bf00      	nop
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	000f423f 	.word	0x000f423f
 8001cd4:	200004e4 	.word	0x200004e4
 8001cd8:	20000925 	.word	0x20000925
 8001cdc:	200002e8 	.word	0x200002e8
 8001ce0:	080095b8 	.word	0x080095b8
 8001ce4:	080095c8 	.word	0x080095c8
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	40010400 	.word	0x40010400
 8001cf0:	2000098c 	.word	0x2000098c

08001cf4 <Pulse_Adjustment_Mode>:


void Pulse_Adjustment_Mode(void)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
	bool PW_OffsetUpdated = false;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	77fb      	strb	r3, [r7, #31]
	bool Previous_Pin6_State = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	72fb      	strb	r3, [r7, #11]
	bool Previous_Pin8_State = 1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	72bb      	strb	r3, [r7, #10]
	uint32_t CalibrationPulseWidth_CCR1 = 16; // nominal pulse width = 0.2u
 8001d06:	2310      	movs	r3, #16
 8001d08:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < 1000000; i++); // about 140 ms
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e002      	b.n	8001d16 <Pulse_Adjustment_Mode+0x22>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4ab8      	ldr	r2, [pc, #736]	; (8001ffc <Pulse_Adjustment_Mode+0x308>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	ddf8      	ble.n	8001d10 <Pulse_Adjustment_Mode+0x1c>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	// disable switch function implemented in ISR to use this switch here for calibration
 8001d1e:	2017      	movs	r0, #23
 8001d20:	f001 fb51 	bl	80033c6 <HAL_NVIC_DisableIRQ>
	UpdatePulseAdjustmentDisplay();
 8001d24:	f7ff fdc2 	bl	80018ac <UpdatePulseAdjustmentDisplay>

	HAL_TIM_Base_Stop_IT(&htim3);	// stop frequency switching
 8001d28:	48b5      	ldr	r0, [pc, #724]	; (8002000 <Pulse_Adjustment_Mode+0x30c>)
 8001d2a:	f003 ff93 	bl	8005c54 <HAL_TIM_Base_Stop_IT>
	TIM3->CNT = 0;
 8001d2e:	4bb5      	ldr	r3, [pc, #724]	; (8002004 <Pulse_Adjustment_Mode+0x310>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8001d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = round(7999 * FrequencyCalibrationFactor);	// frequency = 10 kHz (arbitrary number for pulse calibration)
 8001d3c:	4bb2      	ldr	r3, [pc, #712]	; (8002008 <Pulse_Adjustment_Mode+0x314>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800200c <Pulse_Adjustment_Mode+0x318>
 8001d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fbfb 	bl	8000548 <__aeabi_f2d>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	ec44 3b10 	vmov	d0, r3, r4
 8001d5a:	f007 fa25 	bl	80091a8 <round>
 8001d5e:	ec53 2b10 	vmov	r2, r3, d0
 8001d62:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe ff1d 	bl	8000ba8 <__aeabi_d2uiz>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->CCR1 = round(CalibrationPulseWidth_CCR1 * FrequencyCalibrationFactor + PulseWidthOffset);  // set pulse width
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d7c:	4ba2      	ldr	r3, [pc, #648]	; (8002008 <Pulse_Adjustment_Mode+0x314>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d86:	4ba2      	ldr	r3, [pc, #648]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	ee17 0a90 	vmov	r0, s15
 8001d94:	f7fe fbd8 	bl	8000548 <__aeabi_f2d>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	ec44 3b10 	vmov	d0, r3, r4
 8001da0:	f007 fa02 	bl	80091a8 <round>
 8001da4:	ec53 2b10 	vmov	r2, r3, d0
 8001da8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fefa 	bl	8000ba8 <__aeabi_d2uiz>
 8001db4:	4603      	mov	r3, r0
 8001db6:	6363      	str	r3, [r4, #52]	; 0x34

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 8001db8:	e0cb      	b.n	8001f52 <Pulse_Adjustment_Mode+0x25e>
	{
		//just for scope trigger output
		GPIOC->BSRR |= (1u << 4); // set pin 4
 8001dba:	4b96      	ldr	r3, [pc, #600]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a95      	ldr	r2, [pc, #596]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6193      	str	r3, [r2, #24]
		for(int i = 0; i < 25; i++); // about 3 us
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e002      	b.n	8001dd2 <Pulse_Adjustment_Mode+0xde>
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b18      	cmp	r3, #24
 8001dd6:	ddf9      	ble.n	8001dcc <Pulse_Adjustment_Mode+0xd8>
		GPIOC->BSRR |= (1u << 20); // reset pin 4
 8001dd8:	4b8e      	ldr	r3, [pc, #568]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a8d      	ldr	r2, [pc, #564]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001de2:	6193      	str	r3, [r2, #24]

		Previous_Pin6_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8001de4:	2140      	movs	r1, #64	; 0x40
 8001de6:	488b      	ldr	r0, [pc, #556]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001de8:	f001 ff40 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf14      	ite	ne
 8001df2:	2301      	movne	r3, #1
 8001df4:	2300      	moveq	r3, #0
 8001df6:	72fb      	strb	r3, [r7, #11]
		Previous_Pin8_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfc:	4885      	ldr	r0, [pc, #532]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001dfe:	f001 ff35 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	72bb      	strb	r3, [r7, #10]

		for(int i = 0; i < 100000; i++); // de-bouncing (about 14 ms)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e002      	b.n	8001e1a <Pulse_Adjustment_Mode+0x126>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3301      	adds	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4a7e      	ldr	r2, [pc, #504]	; (8002018 <Pulse_Adjustment_Mode+0x324>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	ddf8      	ble.n	8001e14 <Pulse_Adjustment_Mode+0x120>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0 && Previous_Pin6_State == 1)
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	487b      	ldr	r0, [pc, #492]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001e26:	f001 ff21 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d146      	bne.n	8001ebe <Pulse_Adjustment_Mode+0x1ca>
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d043      	beq.n	8001ebe <Pulse_Adjustment_Mode+0x1ca>
		{
			PulseWidthOffset += 1;
 8001e36:	4b76      	ldr	r3, [pc, #472]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e44:	4b72      	ldr	r3, [pc, #456]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001e46:	edc3 7a00 	vstr	s15, [r3]
			if(PulseWidthOffset > PW_OFFSET_UPPER_LIMIT) PulseWidthOffset = PW_OFFSET_UPPER_LIMIT;
 8001e4a:	4b71      	ldr	r3, [pc, #452]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800201c <Pulse_Adjustment_Mode+0x328>
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	dd02      	ble.n	8001e64 <Pulse_Adjustment_Mode+0x170>
 8001e5e:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001e60:	4a6f      	ldr	r2, [pc, #444]	; (8002020 <Pulse_Adjustment_Mode+0x32c>)
 8001e62:	601a      	str	r2, [r3, #0]
			Previous_Pin6_State = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	72fb      	strb	r3, [r7, #11]
			TIM2->CNT = 0;
 8001e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->CCR1 = round(CalibrationPulseWidth_CCR1 * FrequencyCalibrationFactor + PulseWidthOffset);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <Pulse_Adjustment_Mode+0x314>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	ee17 0a90 	vmov	r0, s15
 8001e92:	f7fe fb59 	bl	8000548 <__aeabi_f2d>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	ec44 3b10 	vmov	d0, r3, r4
 8001e9e:	f007 f983 	bl	80091a8 <round>
 8001ea2:	ec53 2b10 	vmov	r2, r3, d0
 8001ea6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fe7b 	bl	8000ba8 <__aeabi_d2uiz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6363      	str	r3, [r4, #52]	; 0x34
			UpdatePulseAdjustmentDisplay();
 8001eb6:	f7ff fcf9 	bl	80018ac <UpdatePulseAdjustmentDisplay>
			PW_OffsetUpdated = true;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	77fb      	strb	r3, [r7, #31]
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && Previous_Pin8_State == 1)
 8001ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec2:	4854      	ldr	r0, [pc, #336]	; (8002014 <Pulse_Adjustment_Mode+0x320>)
 8001ec4:	f001 fed2 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d141      	bne.n	8001f52 <Pulse_Adjustment_Mode+0x25e>
 8001ece:	7abb      	ldrb	r3, [r7, #10]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03e      	beq.n	8001f52 <Pulse_Adjustment_Mode+0x25e>
		{
			PulseWidthOffset -= 1;
 8001ed4:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
			if(PulseWidthOffset < PW_OFFSET_LOWER_LIMIT) PulseWidthOffset = PW_OFFSET_LOWER_LIMIT; // limit offset
 8001ee8:	4b49      	ldr	r3, [pc, #292]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	d502      	bpl.n	8001f02 <Pulse_Adjustment_Mode+0x20e>
 8001efc:	4b44      	ldr	r3, [pc, #272]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001efe:	4a49      	ldr	r2, [pc, #292]	; (8002024 <Pulse_Adjustment_Mode+0x330>)
 8001f00:	601a      	str	r2, [r3, #0]
			Previous_Pin8_State = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	72bb      	strb	r3, [r7, #10]
			TIM2->CNT = 0;
 8001f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->CCR1 = round(CalibrationPulseWidth_CCR1 - PulseWidthOffset);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f18:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <Pulse_Adjustment_Mode+0x31c>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f22:	ee17 0a90 	vmov	r0, s15
 8001f26:	f7fe fb0f 	bl	8000548 <__aeabi_f2d>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	ec44 3b10 	vmov	d0, r3, r4
 8001f32:	f007 f939 	bl	80091a8 <round>
 8001f36:	ec53 2b10 	vmov	r2, r3, d0
 8001f3a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fe31 	bl	8000ba8 <__aeabi_d2uiz>
 8001f46:	4603      	mov	r3, r0
 8001f48:	6363      	str	r3, [r4, #52]	; 0x34
			UpdatePulseAdjustmentDisplay();
 8001f4a:	f7ff fcaf 	bl	80018ac <UpdatePulseAdjustmentDisplay>
			PW_OffsetUpdated = true;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	77fb      	strb	r3, [r7, #31]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 8001f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5a:	f001 fe87 	bl	8003c6c <HAL_GPIO_ReadPin>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f43f af2a 	beq.w	8001dba <Pulse_Adjustment_Mode+0xc6>
		}
	}

	for(int i = 0; i < 1000000; i++); // about 140 ms
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e002      	b.n	8001f72 <Pulse_Adjustment_Mode+0x27e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <Pulse_Adjustment_Mode+0x308>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	ddf8      	ble.n	8001f6c <Pulse_Adjustment_Mode+0x278>
	OLEDupToDate = false;
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <Pulse_Adjustment_Mode+0x334>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
	PulseOffsetAdjustmentModeFlag = false;
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <Pulse_Adjustment_Mode+0x338>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]


	if(PW_OffsetUpdated)
 8001f86:	7ffb      	ldrb	r3, [r7, #31]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <Pulse_Adjustment_Mode+0x2da>
	{
		Apply_PW_Offsets();
 8001f8c:	f000 f908 	bl	80021a0 <Apply_PW_Offsets>
		SaveCalibrationFactorInFlash();
 8001f90:	f7ff fbae 	bl	80016f0 <SaveCalibrationFactorInFlash>

		// Calibration saved message on Display
		ssd1306_Fill(Black);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f004 ff1d 	bl	8006dd4 <ssd1306_Fill>
		ssd1306_SetCursor(0, 10);
 8001f9a:	210a      	movs	r1, #10
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f005 f867 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString(" PW OFFSET", Font_11x18, White);
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <Pulse_Adjustment_Mode+0x33c>)
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	ca06      	ldmia	r2, {r1, r2}
 8001fa8:	4822      	ldr	r0, [pc, #136]	; (8002034 <Pulse_Adjustment_Mode+0x340>)
 8001faa:	f005 f83b 	bl	8007024 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8001fae:	211e      	movs	r1, #30
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f005 f85d 	bl	8007070 <ssd1306_SetCursor>
		ssd1306_WriteString("   SAVED", Font_11x18, White);
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <Pulse_Adjustment_Mode+0x33c>)
 8001fb8:	2301      	movs	r3, #1
 8001fba:	ca06      	ldmia	r2, {r1, r2}
 8001fbc:	481e      	ldr	r0, [pc, #120]	; (8002038 <Pulse_Adjustment_Mode+0x344>)
 8001fbe:	f005 f831 	bl	8007024 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001fc2:	f004 ff29 	bl	8006e18 <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8001fc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fca:	f001 f8b3 	bl	8003134 <HAL_Delay>
	}

	OLED_Update_Display_Case(OLEDDisplayState);
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <Pulse_Adjustment_Mode+0x348>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fea0 	bl	8000d18 <OLED_Update_Display_Case>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);	// buttons used here are used somewhere else as EXTI so it has to be cleared
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <Pulse_Adjustment_Mode+0x34c>)
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8001fde:	4b18      	ldr	r3, [pc, #96]	; (8002040 <Pulse_Adjustment_Mode+0x34c>)
 8001fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe4:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fe6:	2017      	movs	r0, #23
 8001fe8:	f001 f9df 	bl	80033aa <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim3); // start frequency switching
 8001fec:	4804      	ldr	r0, [pc, #16]	; (8002000 <Pulse_Adjustment_Mode+0x30c>)
 8001fee:	f003 fdc1 	bl	8005b74 <HAL_TIM_Base_Start_IT>
}
 8001ff2:	bf00      	nop
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	000f423f 	.word	0x000f423f
 8002000:	2000098c 	.word	0x2000098c
 8002004:	40000400 	.word	0x40000400
 8002008:	20000928 	.word	0x20000928
 800200c:	45f9f800 	.word	0x45f9f800
 8002010:	20000938 	.word	0x20000938
 8002014:	48000800 	.word	0x48000800
 8002018:	0001869f 	.word	0x0001869f
 800201c:	42480000 	.word	0x42480000
 8002020:	42480000 	.word	0x42480000
 8002024:	c1200000 	.word	0xc1200000
 8002028:	200004e4 	.word	0x200004e4
 800202c:	20000924 	.word	0x20000924
 8002030:	200002e8 	.word	0x200002e8
 8002034:	080095d4 	.word	0x080095d4
 8002038:	080095c8 	.word	0x080095c8
 800203c:	20000000 	.word	0x20000000
 8002040:	40010400 	.word	0x40010400

08002044 <ApplyFrequencyCalFactor>:
												 [Leonardo_Duty_15P].Pulse1 = 800, [Leonardo_Duty_15P].Pulse2 = 800,		// 10 us
												 [Leonardo_Pattern_Q].Pulse1 = 1600, [Leonardo_Pattern_Q].Pulse2 = 800,		// 20 us / 10 us (Pattern Q)
											};

void ApplyFrequencyCalFactor(void)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
	// adjust values with frequency calibration factor
	for(int i = 0;i < (  (sizeof(UncalibratedCasesLeonardo)) / sizeof(UncalibratedCasesLeonardo[0])  ); i++)
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	e098      	b.n	8002182 <ApplyFrequencyCalFactor+0x13e>
	{
		CalibratedCasesLeonardo[i].Freq1 = round(UncalibratedCasesLeonardo[i].Freq1 * FrequencyCalibrationFactor);
 8002050:	4a50      	ldr	r2, [pc, #320]	; (8002194 <ApplyFrequencyCalFactor+0x150>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	4413      	add	r3, r2
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002062:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <ApplyFrequencyCalFactor+0x154>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	ee17 0a90 	vmov	r0, s15
 8002070:	f7fe fa6a 	bl	8000548 <__aeabi_f2d>
 8002074:	4603      	mov	r3, r0
 8002076:	460c      	mov	r4, r1
 8002078:	ec44 3b10 	vmov	d0, r3, r4
 800207c:	f007 f894 	bl	80091a8 <round>
 8002080:	ec54 3b10 	vmov	r3, r4, d0
 8002084:	4618      	mov	r0, r3
 8002086:	4621      	mov	r1, r4
 8002088:	f7fe fd8e 	bl	8000ba8 <__aeabi_d2uiz>
 800208c:	4601      	mov	r1, r0
 800208e:	4a43      	ldr	r2, [pc, #268]	; (800219c <ApplyFrequencyCalFactor+0x158>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	6019      	str	r1, [r3, #0]
		CalibratedCasesLeonardo[i].Freq2 = round(UncalibratedCasesLeonardo[i].Freq2 * FrequencyCalibrationFactor);
 8002098:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <ApplyFrequencyCalFactor+0x150>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <ApplyFrequencyCalFactor+0x154>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	ee17 0a90 	vmov	r0, s15
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4603      	mov	r3, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	ec44 3b10 	vmov	d0, r3, r4
 80020c6:	f007 f86f 	bl	80091a8 <round>
 80020ca:	ec54 3b10 	vmov	r3, r4, d0
 80020ce:	4618      	mov	r0, r3
 80020d0:	4621      	mov	r1, r4
 80020d2:	f7fe fd69 	bl	8000ba8 <__aeabi_d2uiz>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4a30      	ldr	r2, [pc, #192]	; (800219c <ApplyFrequencyCalFactor+0x158>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	6019      	str	r1, [r3, #0]
		CalibratedCasesLeonardo[i].Pulse1 = round(UncalibratedCasesLeonardo[i].Pulse1 * FrequencyCalibrationFactor);
 80020e4:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <ApplyFrequencyCalFactor+0x150>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	3308      	adds	r3, #8
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <ApplyFrequencyCalFactor+0x154>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002102:	ee17 0a90 	vmov	r0, s15
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	ec44 3b10 	vmov	d0, r3, r4
 8002112:	f007 f849 	bl	80091a8 <round>
 8002116:	ec54 3b10 	vmov	r3, r4, d0
 800211a:	4618      	mov	r0, r3
 800211c:	4621      	mov	r1, r4
 800211e:	f7fe fd43 	bl	8000ba8 <__aeabi_d2uiz>
 8002122:	4601      	mov	r1, r0
 8002124:	4a1d      	ldr	r2, [pc, #116]	; (800219c <ApplyFrequencyCalFactor+0x158>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4413      	add	r3, r2
 800212c:	3308      	adds	r3, #8
 800212e:	6019      	str	r1, [r3, #0]
		CalibratedCasesLeonardo[i].Pulse2 = round(UncalibratedCasesLeonardo[i].Pulse2 * FrequencyCalibrationFactor);
 8002130:	4a18      	ldr	r2, [pc, #96]	; (8002194 <ApplyFrequencyCalFactor+0x150>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4413      	add	r3, r2
 8002138:	330c      	adds	r3, #12
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <ApplyFrequencyCalFactor+0x154>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	ee17 0a90 	vmov	r0, s15
 8002152:	f7fe f9f9 	bl	8000548 <__aeabi_f2d>
 8002156:	4603      	mov	r3, r0
 8002158:	460c      	mov	r4, r1
 800215a:	ec44 3b10 	vmov	d0, r3, r4
 800215e:	f007 f823 	bl	80091a8 <round>
 8002162:	ec54 3b10 	vmov	r3, r4, d0
 8002166:	4618      	mov	r0, r3
 8002168:	4621      	mov	r1, r4
 800216a:	f7fe fd1d 	bl	8000ba8 <__aeabi_d2uiz>
 800216e:	4601      	mov	r1, r0
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <ApplyFrequencyCalFactor+0x158>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	4413      	add	r3, r2
 8002178:	330c      	adds	r3, #12
 800217a:	6019      	str	r1, [r3, #0]
	for(int i = 0;i < (  (sizeof(UncalibratedCasesLeonardo)) / sizeof(UncalibratedCasesLeonardo[0])  ); i++)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3301      	adds	r3, #1
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b14      	cmp	r3, #20
 8002186:	f67f af63 	bls.w	8002050 <ApplyFrequencyCalFactor+0xc>
	}
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	20000014 	.word	0x20000014
 8002198:	20000928 	.word	0x20000928
 800219c:	20000164 	.word	0x20000164

080021a0 <Apply_PW_Offsets>:

void Apply_PW_Offsets(void)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
	// adjust pulse width with offset and frequency calibration factor
	for(int i = 0;i < (  (sizeof(UncalibratedCasesLeonardo)) / sizeof(UncalibratedCasesLeonardo[0])  ); i++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	e058      	b.n	800225e <Apply_PW_Offsets+0xbe>
	{
		CalibratedCasesLeonardo[i].Pulse1 = round(UncalibratedCasesLeonardo[i].Pulse1 * FrequencyCalibrationFactor + PulseWidthOffset);
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <Apply_PW_Offsets+0xcc>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	3308      	adds	r3, #8
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <Apply_PW_Offsets+0xd0>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <Apply_PW_Offsets+0xd4>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	ee17 0a90 	vmov	r0, s15
 80021d8:	f7fe f9b6 	bl	8000548 <__aeabi_f2d>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	ec44 3b10 	vmov	d0, r3, r4
 80021e4:	f006 ffe0 	bl	80091a8 <round>
 80021e8:	ec54 3b10 	vmov	r3, r4, d0
 80021ec:	4618      	mov	r0, r3
 80021ee:	4621      	mov	r1, r4
 80021f0:	f7fe fcda 	bl	8000ba8 <__aeabi_d2uiz>
 80021f4:	4601      	mov	r1, r0
 80021f6:	4a20      	ldr	r2, [pc, #128]	; (8002278 <Apply_PW_Offsets+0xd8>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4413      	add	r3, r2
 80021fe:	3308      	adds	r3, #8
 8002200:	6019      	str	r1, [r3, #0]
		CalibratedCasesLeonardo[i].Pulse2 = round(UncalibratedCasesLeonardo[i].Pulse2 * FrequencyCalibrationFactor + PulseWidthOffset);
 8002202:	4a1a      	ldr	r2, [pc, #104]	; (800226c <Apply_PW_Offsets+0xcc>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	4413      	add	r3, r2
 800220a:	330c      	adds	r3, #12
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <Apply_PW_Offsets+0xd0>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <Apply_PW_Offsets+0xd4>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	ee17 0a90 	vmov	r0, s15
 800222e:	f7fe f98b 	bl	8000548 <__aeabi_f2d>
 8002232:	4603      	mov	r3, r0
 8002234:	460c      	mov	r4, r1
 8002236:	ec44 3b10 	vmov	d0, r3, r4
 800223a:	f006 ffb5 	bl	80091a8 <round>
 800223e:	ec54 3b10 	vmov	r3, r4, d0
 8002242:	4618      	mov	r0, r3
 8002244:	4621      	mov	r1, r4
 8002246:	f7fe fcaf 	bl	8000ba8 <__aeabi_d2uiz>
 800224a:	4601      	mov	r1, r0
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <Apply_PW_Offsets+0xd8>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4413      	add	r3, r2
 8002254:	330c      	adds	r3, #12
 8002256:	6019      	str	r1, [r3, #0]
	for(int i = 0;i < (  (sizeof(UncalibratedCasesLeonardo)) / sizeof(UncalibratedCasesLeonardo[0])  ); i++)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b14      	cmp	r3, #20
 8002262:	d9a3      	bls.n	80021ac <Apply_PW_Offsets+0xc>
	}
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}
 800226c:	20000014 	.word	0x20000014
 8002270:	20000928 	.word	0x20000928
 8002274:	20000938 	.word	0x20000938
 8002278:	20000164 	.word	0x20000164

0800227c <InitPatternGenerator>:

void InitPatternGenerator(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	ApplyFrequencyCalFactor();
 8002280:	f7ff fee0 	bl	8002044 <ApplyFrequencyCalFactor>
	Apply_PW_Offsets();
 8002284:	f7ff ff8c 	bl	80021a0 <Apply_PW_Offsets>
	//Initialise to Case1 and Freq1
	OLEDDisplayState = Leonardo_TC1;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <InitPatternGenerator+0x24>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
	CurrentCase = Leonardo_TC1;
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <InitPatternGenerator+0x28>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
	CurrentFrequency = 1;
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <InitPatternGenerator+0x2c>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000
 80022a4:	2000092c 	.word	0x2000092c
 80022a8:	20000934 	.word	0x20000934

080022ac <TIM3_IRQHandler>:

// interrupt handler without HAL to fix pin toggle jitter
void TIM3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
//	char PC_GUI_message[200] = {0};		// debug only
//	extern UART_HandleTypeDef huart2; 	// debug only

	// cases with varying frequency (interval = 15 pulses)
	if(CurrentCase >= Leonardo_Case1 && CurrentCase <= Leonardo_Case7)
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	dd3b      	ble.n	8002332 <TIM3_IRQHandler+0x86>
 80022ba:	4b75      	ldr	r3, [pc, #468]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b08      	cmp	r3, #8
 80022c0:	dc37      	bgt.n	8002332 <TIM3_IRQHandler+0x86>
	{
		ScopeTriggerFromISR();
 80022c2:	f000 f8ef 	bl	80024a4 <ScopeTriggerFromISR>

		if(TIM2->ARR == CalibratedCasesLeonardo[CurrentCase].Freq1)
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4970      	ldr	r1, [pc, #448]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	440b      	add	r3, r1
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d114      	bne.n	8002306 <TIM3_IRQHandler+0x5a>
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq2;
 80022dc:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e4:	496b      	ldr	r1, [pc, #428]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	440b      	add	r3, r1
 80022ea:	3304      	adds	r3, #4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse2;
 80022f0:	4b67      	ldr	r3, [pc, #412]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f8:	4966      	ldr	r1, [pc, #408]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	440b      	add	r3, r1
 80022fe:	330c      	adds	r3, #12
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6353      	str	r3, [r2, #52]	; 0x34
 8002304:	e012      	b.n	800232c <TIM3_IRQHandler+0x80>
		}
		else
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 8002306:	4b62      	ldr	r3, [pc, #392]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800230e:	4961      	ldr	r1, [pc, #388]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	440b      	add	r3, r1
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;
 8002318:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002320:	495c      	ldr	r1, [pc, #368]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	440b      	add	r3, r1
 8002326:	3308      	adds	r3, #8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6353      	str	r3, [r2, #52]	; 0x34
		}
		TIM3->ARR = 14;
 800232c:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <TIM3_IRQHandler+0x1ec>)
 800232e:	220e      	movs	r2, #14
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	// cases with constant frequency and constant pulse
	if((CurrentCase >= Leonardo_PRF1 && CurrentCase <= Leonardo_PRF9) || CurrentCase == Leonardo_Duty_12P || CurrentCase == Leonardo_TC1 || CurrentCase == Leonardo_TC2)
 8002332:	4b57      	ldr	r3, [pc, #348]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b08      	cmp	r3, #8
 8002338:	dd03      	ble.n	8002342 <TIM3_IRQHandler+0x96>
 800233a:	4b55      	ldr	r3, [pc, #340]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b11      	cmp	r3, #17
 8002340:	dd0b      	ble.n	800235a <TIM3_IRQHandler+0xae>
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d007      	beq.n	800235a <TIM3_IRQHandler+0xae>
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <TIM3_IRQHandler+0xae>
 8002352:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d117      	bne.n	800238a <TIM3_IRQHandler+0xde>
	{
		ScopeTriggerFromISR();
 800235a:	f000 f8a3 	bl	80024a4 <ScopeTriggerFromISR>

		TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002366:	494b      	ldr	r1, [pc, #300]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	440b      	add	r3, r1
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;  // capture/compare register used for pulse length
 8002370:	4b47      	ldr	r3, [pc, #284]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002378:	4946      	ldr	r1, [pc, #280]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	440b      	add	r3, r1
 800237e:	3308      	adds	r3, #8
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->ARR = 14;	// arbitrary number
 8002384:	4b44      	ldr	r3, [pc, #272]	; (8002498 <TIM3_IRQHandler+0x1ec>)
 8002386:	220e      	movs	r2, #14
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
//		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;  // capture/compare register used for pulse length
//		TIM3->ARR = 14;	// arbitrary number
//	}

	// case with varying frequency (custom interval)
	if(CurrentCase == Leonardo_Duty_15P)
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b13      	cmp	r3, #19
 8002390:	d130      	bne.n	80023f4 <TIM3_IRQHandler+0x148>
	{
		ScopeTriggerFromISR();
 8002392:	f000 f887 	bl	80024a4 <ScopeTriggerFromISR>
		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800239e:	493d      	ldr	r1, [pc, #244]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	440b      	add	r3, r1
 80023a4:	3308      	adds	r3, #8
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6353      	str	r3, [r2, #52]	; 0x34

		if(TIM2->ARR == CalibratedCasesLeonardo[CurrentCase].Freq1)
 80023aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	4b37      	ldr	r3, [pc, #220]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4937      	ldr	r1, [pc, #220]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	440b      	add	r3, r1
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d10d      	bne.n	80023dc <TIM3_IRQHandler+0x130>
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq2;
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c8:	4932      	ldr	r1, [pc, #200]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	440b      	add	r3, r1
 80023ce:	3304      	adds	r3, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->ARR = 2;
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <TIM3_IRQHandler+0x1ec>)
 80023d6:	2202      	movs	r2, #2
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80023da:	e00b      	b.n	80023f4 <TIM3_IRQHandler+0x148>
		}
		else
		{
			TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 80023dc:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e4:	492b      	ldr	r1, [pc, #172]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	440b      	add	r3, r1
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->ARR = 23;
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <TIM3_IRQHandler+0x1ec>)
 80023f0:	2217      	movs	r2, #23
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	// "hand made" pattern and scope trigger
	if(CurrentCase == Leonardo_Pattern_Q)
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b14      	cmp	r3, #20
 80023fa:	d13f      	bne.n	800247c <TIM3_IRQHandler+0x1d0>
	{
		//scope trigger
		GPIOC->BSRR |= (1u << 4); // set pin 4
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <TIM3_IRQHandler+0x1f0>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <TIM3_IRQHandler+0x1f0>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	6193      	str	r3, [r2, #24]
		for(int i = 0; i < 25; i++); // about 3 us
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	e002      	b.n	8002414 <TIM3_IRQHandler+0x168>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3301      	adds	r3, #1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b18      	cmp	r3, #24
 8002418:	ddf9      	ble.n	800240e <TIM3_IRQHandler+0x162>
		GPIOC->BSRR |= (1u << 20); // reset pin 4
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <TIM3_IRQHandler+0x1f0>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <TIM3_IRQHandler+0x1f0>)
 8002420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002424:	6193      	str	r3, [r2, #24]

		TIM2->ARR = CalibratedCasesLeonardo[CurrentCase].Freq1;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800242e:	4919      	ldr	r1, [pc, #100]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	440b      	add	r3, r1
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->ARR = 23; // set to trigger this ISR
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <TIM3_IRQHandler+0x1ec>)
 800243a:	2217      	movs	r2, #23
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse1;
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002446:	4913      	ldr	r1, [pc, #76]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	440b      	add	r3, r1
 800244c:	3308      	adds	r3, #8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6353      	str	r3, [r2, #52]	; 0x34
		for(int i = 0; i < 1250; i++); // about 150 us (allow one pulse - dirty trick)
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	e002      	b.n	800245e <TIM3_IRQHandler+0x1b2>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002464:	4293      	cmp	r3, r2
 8002466:	ddf7      	ble.n	8002458 <TIM3_IRQHandler+0x1ac>
		TIM2->CCR1 = CalibratedCasesLeonardo[CurrentCase].Pulse2;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <TIM3_IRQHandler+0x1e4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002470:	4908      	ldr	r1, [pc, #32]	; (8002494 <TIM3_IRQHandler+0x1e8>)
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	440b      	add	r3, r1
 8002476:	330c      	adds	r3, #12
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6353      	str	r3, [r2, #52]	; 0x34
	}

//	  snprintf(PC_GUI_message, 200, " TIM2->CCR1 = %lu\n TIM3->ARR = %lu\n", TIM2->CCR1, TIM3->ARR);	// debug only
//	  HAL_UART_Transmit(&huart2, (unsigned char*)PC_GUI_message, strlen(PC_GUI_message), 100);			// debug only

	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE); // not using HAL callback so it has to be done manually
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <TIM3_IRQHandler+0x1f4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0201 	mvn.w	r2, #1
 8002484:	611a      	str	r2, [r3, #16]
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000092c 	.word	0x2000092c
 8002494:	20000164 	.word	0x20000164
 8002498:	40000400 	.word	0x40000400
 800249c:	48000800 	.word	0x48000800
 80024a0:	2000098c 	.word	0x2000098c

080024a4 <ScopeTriggerFromISR>:
}
*/


void ScopeTriggerFromISR(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
	// scope trigger for dual frequency cases
	if(CalibratedCasesLeonardo[CurrentCase].Freq1 != CalibratedCasesLeonardo[CurrentCase].Freq2)
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <ScopeTriggerFromISR+0xa8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <ScopeTriggerFromISR+0xac>)
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <ScopeTriggerFromISR+0xa8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4925      	ldr	r1, [pc, #148]	; (8002550 <ScopeTriggerFromISR+0xac>)
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	440b      	add	r3, r1
 80024be:	3304      	adds	r3, #4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d017      	beq.n	80024f6 <ScopeTriggerFromISR+0x52>
	{
		if(TIM2->ARR == CalibratedCasesLeonardo[CurrentCase].Freq1)
 80024c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <ScopeTriggerFromISR+0xa8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	491f      	ldr	r1, [pc, #124]	; (8002550 <ScopeTriggerFromISR+0xac>)
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	440b      	add	r3, r1
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d106      	bne.n	80024ea <ScopeTriggerFromISR+0x46>
		{
			GPIOC->BSRR |= (1u << 4); // set pin 4
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 80024e2:	f043 0310 	orr.w	r3, r3, #16
 80024e6:	6193      	str	r3, [r2, #24]
 80024e8:	e005      	b.n	80024f6 <ScopeTriggerFromISR+0x52>
		}
		else
		{
			GPIOC->BSRR |= (1u << 20); // reset pin 4
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	4a19      	ldr	r2, [pc, #100]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 80024f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f4:	6193      	str	r3, [r2, #24]
		}
	}


	// scope trigger for single frequency cases (unnecessary but added for convenience to avoid need for switching trigger source in the scope)
	if(CalibratedCasesLeonardo[CurrentCase].Freq1 == CalibratedCasesLeonardo[CurrentCase].Freq2)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <ScopeTriggerFromISR+0xa8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a15      	ldr	r2, [pc, #84]	; (8002550 <ScopeTriggerFromISR+0xac>)
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <ScopeTriggerFromISR+0xa8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4912      	ldr	r1, [pc, #72]	; (8002550 <ScopeTriggerFromISR+0xac>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	440b      	add	r3, r1
 800250c:	3304      	adds	r3, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d116      	bne.n	8002542 <ScopeTriggerFromISR+0x9e>
	{
		if(CurrentFrequency == 1)
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <ScopeTriggerFromISR+0xb4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d109      	bne.n	8002530 <ScopeTriggerFromISR+0x8c>
		{
			GPIOC->BSRR |= (1u << 4); // set pin 4
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 8002522:	f043 0310 	orr.w	r3, r3, #16
 8002526:	6193      	str	r3, [r2, #24]
			CurrentFrequency = 2;
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <ScopeTriggerFromISR+0xb4>)
 800252a:	2202      	movs	r2, #2
 800252c:	601a      	str	r2, [r3, #0]
		{
			GPIOC->BSRR |= (1u << 20); // reset pin 4
			CurrentFrequency = 1;
		}
	}
}
 800252e:	e008      	b.n	8002542 <ScopeTriggerFromISR+0x9e>
			GPIOC->BSRR |= (1u << 20); // reset pin 4
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <ScopeTriggerFromISR+0xb0>)
 8002536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800253a:	6193      	str	r3, [r2, #24]
			CurrentFrequency = 1;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <ScopeTriggerFromISR+0xb4>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	2000092c 	.word	0x2000092c
 8002550:	20000164 	.word	0x20000164
 8002554:	48000800 	.word	0x48000800
 8002558:	20000934 	.word	0x20000934

0800255c <NextFrequency>:

void NextFrequency(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	CurrentCase++;
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <NextFrequency+0x3c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <NextFrequency+0x3c>)
 8002568:	6013      	str	r3, [r2, #0]
	if(CurrentCase > NUMBER_OF_CASES - 1)
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <NextFrequency+0x3c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b14      	cmp	r3, #20
 8002570:	dd02      	ble.n	8002578 <NextFrequency+0x1c>
		CurrentCase = 0;	// go to the beginning
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <NextFrequency+0x3c>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

	OLEDDisplayState = CurrentCase;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <NextFrequency+0x3c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <NextFrequency+0x40>)
 8002580:	701a      	strb	r2, [r3, #0]
	OLEDupToDate = false;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <NextFrequency+0x44>)
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
	OLED_Update_Display_Case(OLEDDisplayState);
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <NextFrequency+0x40>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fbc3 	bl	8000d18 <OLED_Update_Display_Case>
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000092c 	.word	0x2000092c
 800259c:	20000000 	.word	0x20000000
 80025a0:	200004e4 	.word	0x200004e4

080025a4 <PreviousFrequency>:

void PreviousFrequency(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	CurrentCase--;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <PreviousFrequency+0x3c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <PreviousFrequency+0x3c>)
 80025b0:	6013      	str	r3, [r2, #0]
	if(CurrentCase < 0)
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <PreviousFrequency+0x3c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da02      	bge.n	80025c0 <PreviousFrequency+0x1c>
		CurrentCase = NUMBER_OF_CASES - 1; 		// go to the last one
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <PreviousFrequency+0x3c>)
 80025bc:	2214      	movs	r2, #20
 80025be:	601a      	str	r2, [r3, #0]

	OLEDDisplayState = CurrentCase;
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <PreviousFrequency+0x3c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <PreviousFrequency+0x40>)
 80025c8:	701a      	strb	r2, [r3, #0]
	OLEDupToDate = false;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <PreviousFrequency+0x44>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
	OLED_Update_Display_Case(OLEDDisplayState);
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <PreviousFrequency+0x40>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fb9f 	bl	8000d18 <OLED_Update_Display_Case>
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000092c 	.word	0x2000092c
 80025e4:	20000000 	.word	0x20000000
 80025e8:	200004e4 	.word	0x200004e4

080025ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	4a62      	ldr	r2, [pc, #392]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260e:	4b60      	ldr	r3, [pc, #384]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800261a:	4b5d      	ldr	r3, [pc, #372]	; (8002790 <MX_GPIO_Init+0x1a4>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002626:	4b5a      	ldr	r3, [pc, #360]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b57      	ldr	r3, [pc, #348]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4a56      	ldr	r2, [pc, #344]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263e:	4b54      	ldr	r3, [pc, #336]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <MX_GPIO_Init+0x1a4>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	4a50      	ldr	r2, [pc, #320]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002656:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002662:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002666:	4a4a      	ldr	r2, [pc, #296]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266e:	4b48      	ldr	r3, [pc, #288]	; (8002790 <MX_GPIO_Init+0x1a4>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800267a:	2200      	movs	r2, #0
 800267c:	f641 61bc 	movw	r1, #7868	; 0x1ebc
 8002680:	4844      	ldr	r0, [pc, #272]	; (8002794 <MX_GPIO_Init+0x1a8>)
 8002682:	f001 fb0b 	bl	8003c9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002686:	2200      	movs	r2, #0
 8002688:	f249 71fe 	movw	r1, #38910	; 0x97fe
 800268c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002690:	f001 fb04 	bl	8003c9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002694:	2200      	movs	r2, #0
 8002696:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 800269a:	483f      	ldr	r0, [pc, #252]	; (8002798 <MX_GPIO_Init+0x1ac>)
 800269c:	f001 fafe 	bl	8003c9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026a6:	4b3d      	ldr	r3, [pc, #244]	; (800279c <MX_GPIO_Init+0x1b0>)
 80026a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4837      	ldr	r0, [pc, #220]	; (8002794 <MX_GPIO_Init+0x1a8>)
 80026b6:	f001 f931 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80026ba:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80026be:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c0:	2301      	movs	r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4830      	ldr	r0, [pc, #192]	; (8002794 <MX_GPIO_Init+0x1a8>)
 80026d4:	f001 f922 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80026d8:	f249 73fe 	movw	r3, #38910	; 0x97fe
 80026dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f4:	f001 f912 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80026f8:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80026fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4821      	ldr	r0, [pc, #132]	; (8002798 <MX_GPIO_Init+0x1ac>)
 8002712:	f001 f903 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002716:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800271a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <MX_GPIO_Init+0x1b0>)
 800271e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	481a      	ldr	r0, [pc, #104]	; (8002794 <MX_GPIO_Init+0x1a8>)
 800272c:	f001 f8f6 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4813      	ldr	r0, [pc, #76]	; (8002794 <MX_GPIO_Init+0x1a8>)
 8002748:	f001 f8e8 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800274c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <MX_GPIO_Init+0x1b0>)
 8002754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002756:	2301      	movs	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f001 f8da 	bl	800391c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	2017      	movs	r0, #23
 800276e:	f000 fe00 	bl	8003372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002772:	2017      	movs	r0, #23
 8002774:	f000 fe19 	bl	80033aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2028      	movs	r0, #40	; 0x28
 800277e:	f000 fdf8 	bl	8003372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002782:	2028      	movs	r0, #40	; 0x28
 8002784:	f000 fe11 	bl	80033aa <HAL_NVIC_EnableIRQ>

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	48000800 	.word	0x48000800
 8002798:	48000400 	.word	0x48000400
 800279c:	10210000 	.word	0x10210000

080027a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6)	// next case button pressed (PC6)
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d115      	bne.n	80027dc <HAL_GPIO_EXTI_Callback+0x3c>
	{
		NextFrequency();
 80027b0:	f7ff fed4 	bl	800255c <NextFrequency>
		for(int i = 0; i < 100000; i++); 		// about 14 ms debounce
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_EXTI_Callback+0x20>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_GPIO_EXTI_Callback+0x9c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	ddf8      	ble.n	80027ba <HAL_GPIO_EXTI_Callback+0x1a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_GPIO_EXTI_Callback+0xa0>)
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	615a      	str	r2, [r3, #20]
		TIM2->CNT = 0;							// avoid timer overflow when ARR register is changed
 80027ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = 0;							// avoid timer overflow when ARR register is changed
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_GPIO_EXTI_Callback+0xa4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if(GPIO_Pin == GPIO_PIN_8)	// previous case down button pressed (PC8)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e2:	d116      	bne.n	8002812 <HAL_GPIO_EXTI_Callback+0x72>
	{
		PreviousFrequency();
 80027e4:	f7ff fede 	bl	80025a4 <PreviousFrequency>
		for(int i = 0; i < 100000; i++); // about 14 ms debounce
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e002      	b.n	80027f4 <HAL_GPIO_EXTI_Callback+0x54>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_GPIO_EXTI_Callback+0x9c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	ddf8      	ble.n	80027ee <HAL_GPIO_EXTI_Callback+0x4e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_GPIO_EXTI_Callback+0xa0>)
 80027fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002802:	615a      	str	r2, [r3, #20]
		TIM2->CNT = 0;							// avoid timer overflow when ARR register is changed
 8002804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002808:	2200      	movs	r2, #0
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = 0;							// avoid timer overflow when ARR register is changed
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_GPIO_EXTI_Callback+0xa4>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if(GPIO_Pin == GPIO_PIN_13)	// Frequency calibration button
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	d102      	bne.n	8002820 <HAL_GPIO_EXTI_Callback+0x80>
	{
		FrequencyCalibrationModeFlag = true;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_GPIO_EXTI_Callback+0xa8>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_11)	// Pulse adjustment button
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002826:	d102      	bne.n	800282e <HAL_GPIO_EXTI_Callback+0x8e>
	{
		PulseOffsetAdjustmentModeFlag = true;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_GPIO_EXTI_Callback+0xac>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
	}


	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // clear interrupt manually again (it is done already in library function before this callback function but interrupt can occur again when this function is running).
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	6153      	str	r3, [r2, #20]
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	0001869f 	.word	0x0001869f
 8002840:	40010400 	.word	0x40010400
 8002844:	40000400 	.word	0x40000400
 8002848:	20000925 	.word	0x20000925
 800284c:	20000924 	.word	0x20000924

08002850 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <MX_I2C3_Init+0x74>)
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <MX_I2C3_Init+0x78>)
 8002858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800285a:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <MX_I2C3_Init+0x74>)
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <MX_I2C3_Init+0x7c>)
 800285e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <MX_I2C3_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_I2C3_Init+0x74>)
 8002868:	2201      	movs	r2, #1
 800286a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <MX_I2C3_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_I2C3_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_I2C3_Init+0x74>)
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_I2C3_Init+0x74>)
 8002880:	2200      	movs	r2, #0
 8002882:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_I2C3_Init+0x74>)
 8002886:	2200      	movs	r2, #0
 8002888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800288a:	480e      	ldr	r0, [pc, #56]	; (80028c4 <MX_I2C3_Init+0x74>)
 800288c:	f001 fa50 	bl	8003d30 <HAL_I2C_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002896:	f000 f964 	bl	8002b62 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800289a:	2100      	movs	r1, #0
 800289c:	4809      	ldr	r0, [pc, #36]	; (80028c4 <MX_I2C3_Init+0x74>)
 800289e:	f001 fdb3 	bl	8004408 <HAL_I2CEx_ConfigAnalogFilter>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80028a8:	f000 f95b 	bl	8002b62 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028ac:	2100      	movs	r1, #0
 80028ae:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_I2C3_Init+0x74>)
 80028b0:	f001 fdf5 	bl	800449e <HAL_I2CEx_ConfigDigitalFilter>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80028ba:	f000 f952 	bl	8002b62 <Error_Handler>
  }

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000940 	.word	0x20000940
 80028c8:	40005c00 	.word	0x40005c00
 80028cc:	10909cec 	.word	0x10909cec

080028d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_I2C_MspInit+0x7c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d127      	bne.n	8002942 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_I2C_MspInit+0x80>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_I2C_MspInit+0x80>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_I2C_MspInit+0x80>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800290a:	2303      	movs	r3, #3
 800290c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290e:	2312      	movs	r3, #18
 8002910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002912:	2301      	movs	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002916:	2303      	movs	r3, #3
 8002918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800291a:	2304      	movs	r3, #4
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <HAL_I2C_MspInit+0x84>)
 8002926:	f000 fff9 	bl	800391c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_I2C_MspInit+0x80>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_I2C_MspInit+0x80>)
 8002930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002934:	6593      	str	r3, [r2, #88]	; 0x58
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_I2C_MspInit+0x80>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002942:	bf00      	nop
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40005c00 	.word	0x40005c00
 8002950:	40021000 	.word	0x40021000
 8002954:	48000800 	.word	0x48000800

08002958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295c:	f000 fb75 	bl	800304a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002960:	f000 f88c 	bl	8002a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002964:	f7ff fe42 	bl	80025ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8002968:	f000 f9e8 	bl	8002d3c <MX_TIM2_Init>
  MX_TIM3_Init();
 800296c:	f000 fa5e 	bl	8002e2c <MX_TIM3_Init>
  MX_I2C3_Init();
 8002970:	f7ff ff6e 	bl	8002850 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  //snprintf(PC_GUI_message, 200, "System Clock = %lu\n",  SystemCoreClock);					// debug only
  //HAL_UART_Transmit(&huart2, (unsigned char*)PC_GUI_message, strlen(PC_GUI_message), 100);	// debug only

  HAL_Delay(300);
 8002974:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002978:	f000 fbdc 	bl	8003134 <HAL_Delay>

  // start screen
  ssd1306_Init();
 800297c:	f004 f9bc 	bl	8006cf8 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002980:	2000      	movs	r0, #0
 8002982:	f004 fa27 	bl	8006dd4 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 8002986:	2100      	movs	r1, #0
 8002988:	2000      	movs	r0, #0
 800298a:	f004 fb71 	bl	8007070 <ssd1306_SetCursor>
  ssd1306_WriteString("       TMD", Font_7x10, White);
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <main+0xf0>)
 8002990:	2301      	movs	r3, #1
 8002992:	ca06      	ldmia	r2, {r1, r2}
 8002994:	482d      	ldr	r0, [pc, #180]	; (8002a4c <main+0xf4>)
 8002996:	f004 fb45 	bl	8007024 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 10);
 800299a:	210a      	movs	r1, #10
 800299c:	2000      	movs	r0, #0
 800299e:	f004 fb67 	bl	8007070 <ssd1306_SetCursor>
  ssd1306_WriteString("   Technologies", Font_7x10, White);
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <main+0xf0>)
 80029a4:	2301      	movs	r3, #1
 80029a6:	ca06      	ldmia	r2, {r1, r2}
 80029a8:	4829      	ldr	r0, [pc, #164]	; (8002a50 <main+0xf8>)
 80029aa:	f004 fb3b 	bl	8007024 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 24);
 80029ae:	2118      	movs	r1, #24
 80029b0:	2000      	movs	r0, #0
 80029b2:	f004 fb5d 	bl	8007070 <ssd1306_SetCursor>
  ssd1306_WriteString("  PATTERN", Font_11x18, White);
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <main+0xfc>)
 80029b8:	2301      	movs	r3, #1
 80029ba:	ca06      	ldmia	r2, {r1, r2}
 80029bc:	4826      	ldr	r0, [pc, #152]	; (8002a58 <main+0x100>)
 80029be:	f004 fb31 	bl	8007024 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 44);
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	2000      	movs	r0, #0
 80029c6:	f004 fb53 	bl	8007070 <ssd1306_SetCursor>
  ssd1306_WriteString(" GENERATOR", Font_11x18, White);
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <main+0xfc>)
 80029cc:	2301      	movs	r3, #1
 80029ce:	ca06      	ldmia	r2, {r1, r2}
 80029d0:	4822      	ldr	r0, [pc, #136]	; (8002a5c <main+0x104>)
 80029d2:	f004 fb27 	bl	8007024 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80029d6:	f004 fa1f 	bl	8006e18 <ssd1306_UpdateScreen>
  HAL_Delay(2500);
 80029da:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80029de:	f000 fba9 	bl	8003134 <HAL_Delay>


  InitDataInFlashSettings();
 80029e2:	f7fe fe6f 	bl	80016c4 <InitDataInFlashSettings>
  FrequencyCalibrationFactor = ReadFrequencyCalibrationFactorFromFlash();
 80029e6:	f7fe fec5 	bl	8001774 <ReadFrequencyCalibrationFactorFromFlash>
 80029ea:	eef0 7a40 	vmov.f32	s15, s0
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <main+0x108>)
 80029f0:	edc3 7a00 	vstr	s15, [r3]
  PulseWidthOffset = ReadPulseWidthOffsetFromFlash();
 80029f4:	f7fe fee4 	bl	80017c0 <ReadPulseWidthOffsetFromFlash>
 80029f8:	eef0 7a40 	vmov.f32	s15, s0
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <main+0x10c>)
 80029fe:	edc3 7a00 	vstr	s15, [r3]
  InitPatternGenerator();
 8002a02:	f7ff fc3b 	bl	800227c <InitPatternGenerator>
  OLED_Update_Display_Case(OLEDDisplayState); //current case
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <main+0x110>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe f984 	bl	8000d18 <OLED_Update_Display_Case>




  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a10:	2100      	movs	r1, #0
 8002a12:	4816      	ldr	r0, [pc, #88]	; (8002a6c <main+0x114>)
 8002a14:	f003 f9ae 	bl	8005d74 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002a18:	4815      	ldr	r0, [pc, #84]	; (8002a70 <main+0x118>)
 8002a1a:	f003 f8ab 	bl	8005b74 <HAL_TIM_Base_Start_IT>
//	SystemCoreClockUpdate(); // Updates SystemCoreClock according to register settings. This function must be called if clock settings has been changed. Be aware that a value stored to SystemCoreClock during low level initialisation (i.e. SystemInit()) might get overwritten by C library startup code and/or .bss section initialization. Thus its highly recommended to call SystemCoreClockUpdate at the beginning of the user main() routine.
//	SysTick_Config(SystemCoreClock/1000); // SystemCoreClock - global variable that contains the system frequency. Configure SysTick to generate an interrupt timing (it will produce the same interval for any clock speed). SysTick can be used for timing if it is not used for operating system.  /1000 gives SysTick every 1ms, /100 gives SysTick every 10 ms

  while (1)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a1e:	2120      	movs	r1, #32
 8002a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a24:	f001 f952 	bl	8003ccc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002a28:	2064      	movs	r0, #100	; 0x64
 8002a2a:	f000 fb83 	bl	8003134 <HAL_Delay>

    if(FrequencyCalibrationModeFlag)
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <main+0x11c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <main+0xe2>
    {
    	Freq_Calibration_Mode();
 8002a36:	f7fe ff93 	bl	8001960 <Freq_Calibration_Mode>
    }

    if(PulseOffsetAdjustmentModeFlag)
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <main+0x120>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ed      	beq.n	8002a1e <main+0xc6>
    {
    	Pulse_Adjustment_Mode();
 8002a42:	f7ff f957 	bl	8001cf4 <Pulse_Adjustment_Mode>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a46:	e7ea      	b.n	8002a1e <main+0xc6>
 8002a48:	200002e0 	.word	0x200002e0
 8002a4c:	080095e0 	.word	0x080095e0
 8002a50:	080095ec 	.word	0x080095ec
 8002a54:	200002e8 	.word	0x200002e8
 8002a58:	080095fc 	.word	0x080095fc
 8002a5c:	08009608 	.word	0x08009608
 8002a60:	20000928 	.word	0x20000928
 8002a64:	20000938 	.word	0x20000938
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	200009d8 	.word	0x200009d8
 8002a70:	2000098c 	.word	0x2000098c
 8002a74:	20000925 	.word	0x20000925
 8002a78:	20000924 	.word	0x20000924

08002a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0b8      	sub	sp, #224	; 0xe0
 8002a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a86:	2244      	movs	r2, #68	; 0x44
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fb4b 	bl	8007126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a90:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	2288      	movs	r2, #136	; 0x88
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 fb3d 	bl	8007126 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aba:	2302      	movs	r3, #2
 8002abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002acc:	2314      	movs	r3, #20
 8002ace:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 fd89 	bl	8004600 <HAL_RCC_OscConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002af4:	f000 f835 	bl	8002b62 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af8:	230f      	movs	r3, #15
 8002afa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 f955 	bl	8004dcc <HAL_RCC_ClockConfig>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002b28:	f000 f81b 	bl	8002b62 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b30:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002b32:	2300      	movs	r3, #0
 8002b34:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b36:	463b      	mov	r3, r7
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fb13 	bl	8005164 <HAL_RCCEx_PeriphCLKConfig>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002b44:	f000 f80d 	bl	8002b62 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b4c:	f001 fd02 	bl	8004554 <HAL_PWREx_ControlVoltageScaling>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002b56:	f000 f804 	bl	8002b62 <Error_Handler>
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	37e0      	adds	r7, #224	; 0xe0
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_MspInit+0x64>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <HAL_MspInit+0x64>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6613      	str	r3, [r2, #96]	; 0x60
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_MspInit+0x64>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_MspInit+0x64>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_MspInit+0x64>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_MspInit+0x64>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2101      	movs	r1, #1
 8002baa:	f06f 0004 	mvn.w	r0, #4
 8002bae:	f000 fbe0 	bl	8003372 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	f06f 0003 	mvn.w	r0, #3
 8002bba:	f000 fbda 	bl	8003372 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	f06f 0001 	mvn.w	r0, #1
 8002bc6:	f000 fbd4 	bl	8003372 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <HardFault_Handler+0x4>

08002bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <MemManage_Handler+0x4>

08002bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <BusFault_Handler+0x4>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <UsageFault_Handler+0x4>

08002bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2c:	f000 fa62 	bl	80030f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c38:	2040      	movs	r0, #64	; 0x40
 8002c3a:	f001 f861 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c42:	f001 f85d 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002c4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c52:	f001 f855 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c56:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c5a:	f001 f851 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f004 fa04 	bl	80070a0 <__errno>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20018000 	.word	0x20018000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	20000510 	.word	0x20000510
 8002ccc:	20000a30 	.word	0x20000a30

08002cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <SystemInit+0x64>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <SystemInit+0x64>)
 8002cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <SystemInit+0x68>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <SystemInit+0x68>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <SystemInit+0x68>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <SystemInit+0x68>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <SystemInit+0x68>)
 8002cfc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <SystemInit+0x68>)
 8002d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <SystemInit+0x68>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <SystemInit+0x68>)
 8002d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <SystemInit+0x68>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <SystemInit+0x64>)
 8002d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d26:	609a      	str	r2, [r3, #8]
#endif
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000ed00 	.word	0xe000ed00
 8002d38:	40021000 	.word	0x40021000

08002d3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	615a      	str	r2, [r3, #20]
 8002d6c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002d70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 94117;
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002d84:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <MX_TIM2_Init+0xec>)
 8002d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d94:	4823      	ldr	r0, [pc, #140]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002d96:	f002 fe95 	bl	8005ac4 <HAL_TIM_Base_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002da0:	f7ff fedf 	bl	8002b62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dae:	4619      	mov	r1, r3
 8002db0:	481c      	ldr	r0, [pc, #112]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002db2:	f003 f9f5 	bl	80061a0 <HAL_TIM_ConfigClockSource>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002dbc:	f7ff fed1 	bl	8002b62 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dc0:	4818      	ldr	r0, [pc, #96]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002dc2:	f002 ff76 	bl	8005cb2 <HAL_TIM_PWM_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002dcc:	f7ff fec9 	bl	8002b62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dd8:	f107 031c 	add.w	r3, r7, #28
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4811      	ldr	r0, [pc, #68]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002de0:	f003 fec8 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002dea:	f7ff feba 	bl	8002b62 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dee:	2360      	movs	r3, #96	; 0x60
 8002df0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1600;
 8002df2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002df6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e00:	463b      	mov	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4807      	ldr	r0, [pc, #28]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002e08:	f003 f8ba 	bl	8005f80 <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e12:	f7ff fea6 	bl	8002b62 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002e16:	4803      	ldr	r0, [pc, #12]	; (8002e24 <MX_TIM2_Init+0xe8>)
 8002e18:	f000 f8ba 	bl	8002f90 <HAL_TIM_MspPostInit>

}
 8002e1c:	bf00      	nop
 8002e1e:	3738      	adds	r7, #56	; 0x38
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	200009d8 	.word	0x200009d8
 8002e28:	00016fa5 	.word	0x00016fa5

08002e2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e4c:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <MX_TIM3_Init+0xa4>)
 8002e4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e5e:	220e      	movs	r2, #14
 8002e60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e6e:	4817      	ldr	r0, [pc, #92]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e70:	f002 fe28 	bl	8005ac4 <HAL_TIM_Base_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e7a:	f7ff fe72 	bl	8002b62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e82:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	4619      	mov	r1, r3
 8002e96:	480d      	ldr	r0, [pc, #52]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002e98:	f003 f982 	bl	80061a0 <HAL_TIM_ConfigClockSource>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002ea2:	f7ff fe5e 	bl	8002b62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <MX_TIM3_Init+0xa0>)
 8002eb4:	f003 fe5e 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002ebe:	f7ff fe50 	bl	8002b62 <Error_Handler>
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000098c 	.word	0x2000098c
 8002ed0:	40000400 	.word	0x40000400

08002ed4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6593      	str	r3, [r2, #88]	; 0x58
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f0e:	e034      	b.n	8002f7a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_TIM_Base_MspInit+0xb4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12f      	bne.n	8002f7a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	6593      	str	r3, [r2, #88]	; 0x58
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_TIM_Base_MspInit+0xb0>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	4809      	ldr	r0, [pc, #36]	; (8002f8c <HAL_TIM_Base_MspInit+0xb8>)
 8002f66:	f000 fcd9 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	201d      	movs	r0, #29
 8002f70:	f000 f9ff 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f74:	201d      	movs	r0, #29
 8002f76:	f000 fa18 	bl	80033aa <HAL_NVIC_EnableIRQ>
}
 8002f7a:	bf00      	nop
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	48000c00 	.word	0x48000c00

08002f90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d11c      	bne.n	8002fec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_TIM_MspPostInit+0x64>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <HAL_TIM_MspPostInit+0x64>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_TIM_MspPostInit+0x64>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fde:	f107 030c 	add.w	r3, r7, #12
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe8:	f000 fc98 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fec:	bf00      	nop
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003030 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ffc:	f7ff fe68 	bl	8002cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003000:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003002:	e003      	b.n	800300c <LoopCopyDataInit>

08003004 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003006:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003008:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800300a:	3104      	adds	r1, #4

0800300c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800300c:	480a      	ldr	r0, [pc, #40]	; (8003038 <LoopForever+0xa>)
	ldr	r3, =_edata
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003010:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003012:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003014:	d3f6      	bcc.n	8003004 <CopyDataInit>
	ldr	r2, =_sbss
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003018:	e002      	b.n	8003020 <LoopFillZerobss>

0800301a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800301a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800301c:	f842 3b04 	str.w	r3, [r2], #4

08003020 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <LoopForever+0x16>)
	cmp	r2, r3
 8003022:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003024:	d3f9      	bcc.n	800301a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003026:	f004 f841 	bl	80070ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800302a:	f7ff fc95 	bl	8002958 <main>

0800302e <LoopForever>:

LoopForever:
    b LoopForever
 800302e:	e7fe      	b.n	800302e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003030:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003034:	0800c0d0 	.word	0x0800c0d0
	ldr	r0, =_sdata
 8003038:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800303c:	200004c8 	.word	0x200004c8
	ldr	r2, =_sbss
 8003040:	200004c8 	.word	0x200004c8
	ldr	r3, = _ebss
 8003044:	20000a2c 	.word	0x20000a2c

08003048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC1_2_IRQHandler>

0800304a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003054:	2003      	movs	r0, #3
 8003056:	f000 f981 	bl	800335c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800305a:	2001      	movs	r0, #1
 800305c:	f000 f80e 	bl	800307c <HAL_InitTick>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	71fb      	strb	r3, [r7, #7]
 800306a:	e001      	b.n	8003070 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800306c:	f7ff fd80 	bl	8002b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003070:	79fb      	ldrb	r3, [r7, #7]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <HAL_InitTick+0x6c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_InitTick+0x70>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_InitTick+0x6c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309e:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f99b 	bl	80033e2 <HAL_SYSTICK_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b0f      	cmp	r3, #15
 80030b6:	d809      	bhi.n	80030cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b8:	2200      	movs	r2, #0
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f000 f957 	bl	8003372 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_InitTick+0x74>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e007      	b.n	80030dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e004      	b.n	80030dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	e001      	b.n	80030dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200002bc 	.word	0x200002bc
 80030ec:	200002b4 	.word	0x200002b4
 80030f0:	200002b8 	.word	0x200002b8

080030f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x20>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x24>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4413      	add	r3, r2
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_IncTick+0x24>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	200002bc 	.word	0x200002bc
 8003118:	20000a24 	.word	0x20000a24

0800311c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return uwTick;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_GetTick+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000a24 	.word	0x20000a24

08003134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7ff ffee 	bl	800311c <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d005      	beq.n	800315a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_Delay+0x40>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800315a:	bf00      	nop
 800315c:	f7ff ffde 	bl	800311c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	d8f7      	bhi.n	800315c <HAL_Delay+0x28>
  {
  }
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200002bc 	.word	0x200002bc

08003178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4907      	ldr	r1, [pc, #28]	; (8003214 <__NVIC_EnableIRQ+0x38>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db10      	blt.n	800324c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4909      	ldr	r1, [pc, #36]	; (8003258 <__NVIC_DisableIRQ+0x40>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	3320      	adds	r3, #32
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003248:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e100 	.word	0xe000e100

0800325c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	db0a      	blt.n	8003286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	490c      	ldr	r1, [pc, #48]	; (80032a8 <__NVIC_SetPriority+0x4c>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	440b      	add	r3, r1
 8003280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003284:	e00a      	b.n	800329c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4908      	ldr	r1, [pc, #32]	; (80032ac <__NVIC_SetPriority+0x50>)
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3b04      	subs	r3, #4
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	440b      	add	r3, r1
 800329a:	761a      	strb	r2, [r3, #24]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f1c3 0307 	rsb	r3, r3, #7
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	bf28      	it	cs
 80032ce:	2304      	movcs	r3, #4
 80032d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d902      	bls.n	80032e0 <NVIC_EncodePriority+0x30>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3b03      	subs	r3, #3
 80032de:	e000      	b.n	80032e2 <NVIC_EncodePriority+0x32>
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	401a      	ands	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	43d9      	mvns	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	4313      	orrs	r3, r2
         );
}
 800330a:	4618      	mov	r0, r3
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003328:	d301      	bcc.n	800332e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <SysTick_Config+0x40>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003336:	210f      	movs	r1, #15
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7ff ff8e 	bl	800325c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <SysTick_Config+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <SysTick_Config+0x40>)
 8003348:	2207      	movs	r2, #7
 800334a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010

0800335c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff07 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003384:	f7ff ff1c 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 8003388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7ff ff8e 	bl	80032b0 <NVIC_EncodePriority>
 8003394:	4602      	mov	r2, r0
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff5d 	bl	800325c <__NVIC_SetPriority>
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff0f 	bl	80031dc <__NVIC_EnableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff1f 	bl	8003218 <__NVIC_DisableIRQ>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff94 	bl	8003318 <SysTick_Config>
 80033f0:	4603      	mov	r3, r0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800340e:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_FLASH_Program+0xd0>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_FLASH_Program+0x1e>
 8003416:	2302      	movs	r3, #2
 8003418:	e053      	b.n	80034c2 <HAL_FLASH_Program+0xc6>
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_FLASH_Program+0xd0>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003420:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003424:	f000 f888 	bl	8003538 <FLASH_WaitForLastOperation>
 8003428:	4603      	mov	r3, r0
 800342a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d143      	bne.n	80034ba <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_FLASH_Program+0xd0>)
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_FLASH_Program+0xd4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_FLASH_Program+0xd4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <HAL_FLASH_Program+0xd4>)
 800344a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_FLASH_Program+0xd0>)
 8003452:	2202      	movs	r2, #2
 8003454:	771a      	strb	r2, [r3, #28]
 8003456:	e002      	b.n	800345e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <HAL_FLASH_Program+0xd0>)
 800345a:	2200      	movs	r2, #0
 800345c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003468:	68b8      	ldr	r0, [r7, #8]
 800346a:	f000 f8bb 	bl	80035e4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800346e:	2301      	movs	r3, #1
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	e010      	b.n	8003496 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d002      	beq.n	8003480 <HAL_FLASH_Program+0x84>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d10a      	bne.n	8003496 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	68b8      	ldr	r0, [r7, #8]
 8003486:	f000 f8d1 	bl	800362c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d102      	bne.n	8003496 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003490:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003494:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003496:	f24c 3050 	movw	r0, #50000	; 0xc350
 800349a:	f000 f84d 	bl	8003538 <FLASH_WaitForLastOperation>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d006      	beq.n	80034b6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_FLASH_Program+0xd4>)
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <HAL_FLASH_Program+0xd4>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80034b6:	f000 f9ed 	bl	8003894 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <HAL_FLASH_Program+0xd0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]

  return status;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200002c0 	.word	0x200002c0
 80034d0:	40022000 	.word	0x40022000

080034d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_FLASH_Unlock+0x38>)
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da0b      	bge.n	80034fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_FLASH_Unlock+0x38>)
 80034e8:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_FLASH_Unlock+0x3c>)
 80034ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_FLASH_Unlock+0x38>)
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <HAL_FLASH_Unlock+0x40>)
 80034f0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_FLASH_Unlock+0x38>)
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da01      	bge.n	80034fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034fe:	79fb      	ldrb	r3, [r7, #7]
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40022000 	.word	0x40022000
 8003510:	45670123 	.word	0x45670123
 8003514:	cdef89ab 	.word	0xcdef89ab

08003518 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_FLASH_Lock+0x1c>)
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_FLASH_Lock+0x1c>)
 8003522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003526:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40022000 	.word	0x40022000

08003538 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003540:	f7ff fdec 	bl	800311c <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003546:	e00d      	b.n	8003564 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d009      	beq.n	8003564 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003550:	f7ff fde4 	bl	800311c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d801      	bhi.n	8003564 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e037      	b.n	80035d4 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <FLASH_WaitForLastOperation+0xa4>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1eb      	bne.n	8003548 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <FLASH_WaitForLastOperation+0xa4>)
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003578:	4013      	ands	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01e      	beq.n	80035c0 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <FLASH_WaitForLastOperation+0xa8>)
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4313      	orrs	r3, r2
 800358a:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <FLASH_WaitForLastOperation+0xa8>)
 800358c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <FLASH_WaitForLastOperation+0x70>
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <FLASH_WaitForLastOperation+0xa4>)
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80035a2:	490e      	ldr	r1, [pc, #56]	; (80035dc <FLASH_WaitForLastOperation+0xa4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	618b      	str	r3, [r1, #24]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d004      	beq.n	80035bc <FLASH_WaitForLastOperation+0x84>
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <FLASH_WaitForLastOperation+0xa4>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035ba:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e009      	b.n	80035d4 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <FLASH_WaitForLastOperation+0xa4>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <FLASH_WaitForLastOperation+0xa4>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40022000 	.word	0x40022000
 80035e0:	200002c0 	.word	0x200002c0

080035e4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80035e4:	b490      	push	{r4, r7}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80035f0:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <FLASH_Program_DoubleWord+0x44>)
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	4a0c      	ldr	r2, [pc, #48]	; (8003628 <FLASH_Program_DoubleWord+0x44>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003606:	e9d7 1200 	ldrd	r1, r2, [r7]
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	f04f 0400 	mov.w	r4, #0
 8003612:	0013      	movs	r3, r2
 8003614:	2400      	movs	r4, #0
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	3204      	adds	r2, #4
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bc90      	pop	{r4, r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40022000 	.word	0x40022000

0800362c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003636:	2340      	movs	r3, #64	; 0x40
 8003638:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <FLASH_Program_Fast+0x64>)
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <FLASH_Program_Fast+0x64>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364e:	f3ef 8310 	mrs	r3, PRIMASK
 8003652:	60fb      	str	r3, [r7, #12]
  return(result);
 8003654:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003658:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3304      	adds	r3, #4
 8003666:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3304      	adds	r3, #4
 800366c:	617b      	str	r3, [r7, #20]
    row_index--;
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	3b01      	subs	r3, #1
 8003672:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003674:	7ffb      	ldrb	r3, [r7, #31]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ef      	bne.n	800365a <FLASH_Program_Fast+0x2e>
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003684:	bf00      	nop
 8003686:	3724      	adds	r7, #36	; 0x24
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40022000 	.word	0x40022000

08003694 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800369e:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_FLASHEx_Erase+0x16>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e08d      	b.n	80037c6 <HAL_FLASHEx_Erase+0x132>
 80036aa:	4b49      	ldr	r3, [pc, #292]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036b4:	f7ff ff40 	bl	8003538 <FLASH_WaitForLastOperation>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d17d      	bne.n	80037be <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036c2:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80036c8:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d019      	beq.n	8003708 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80036d4:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a3e      	ldr	r2, [pc, #248]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 80036da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036de:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036e0:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80036ec:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 80036f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80036f8:	4b35      	ldr	r3, [pc, #212]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 80036fa:	2203      	movs	r2, #3
 80036fc:	771a      	strb	r2, [r3, #28]
 80036fe:	e016      	b.n	800372e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003700:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 8003702:	2201      	movs	r2, #1
 8003704:	771a      	strb	r2, [r3, #28]
 8003706:	e012      	b.n	800372e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003714:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2e      	ldr	r2, [pc, #184]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 800371a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800371e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003720:	4b2b      	ldr	r3, [pc, #172]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 8003722:	2202      	movs	r2, #2
 8003724:	771a      	strb	r2, [r3, #28]
 8003726:	e002      	b.n	800372e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 800372a:	2200      	movs	r2, #0
 800372c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d113      	bne.n	800375e <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f84c 	bl	80037d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003740:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003744:	f7ff fef8 	bl	8003538 <FLASH_WaitForLastOperation>
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 8003752:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003756:	f023 0304 	bic.w	r3, r3, #4
 800375a:	6153      	str	r3, [r2, #20]
 800375c:	e02d      	b.n	80037ba <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	e01d      	b.n	80037aa <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f000 f857 	bl	8003828 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800377a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800377e:	f7ff fedb 	bl	8003538 <FLASH_WaitForLastOperation>
 8003782:	4603      	mov	r3, r0
 8003784:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_FLASHEx_Erase+0x140>)
 800378c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003790:	f023 0302 	bic.w	r3, r3, #2
 8003794:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	601a      	str	r2, [r3, #0]
          break;
 80037a2:	e00a      	b.n	80037ba <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3d9      	bcc.n	800376e <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80037ba:	f000 f86b 	bl	8003894 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HAL_FLASHEx_Erase+0x13c>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]

  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200002c0 	.word	0x200002c0
 80037d4:	40022000 	.word	0x40022000

080037d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <FLASH_MassErase+0x4c>)
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <FLASH_MassErase+0x4c>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <FLASH_MassErase+0x4c>)
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <FLASH_MassErase+0x4c>)
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <FLASH_MassErase+0x4c>)
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <FLASH_MassErase+0x4c>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6153      	str	r3, [r2, #20]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40022000 	.word	0x40022000

08003828 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <FLASH_PageErase+0x68>)
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4a13      	ldr	r2, [pc, #76]	; (8003890 <FLASH_PageErase+0x68>)
 8003842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003846:	6153      	str	r3, [r2, #20]
 8003848:	e005      	b.n	8003856 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <FLASH_PageErase+0x68>)
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <FLASH_PageErase+0x68>)
 8003850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003854:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <FLASH_PageErase+0x68>)
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <FLASH_PageErase+0x68>)
 8003868:	4313      	orrs	r3, r2
 800386a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <FLASH_PageErase+0x68>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <FLASH_PageErase+0x68>)
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <FLASH_PageErase+0x68>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	4a04      	ldr	r2, [pc, #16]	; (8003890 <FLASH_PageErase+0x68>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	6153      	str	r3, [r2, #20]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40022000 	.word	0x40022000

08003894 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800389a:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <FLASH_FlushCaches+0x80>)
 800389c:	7f1b      	ldrb	r3, [r3, #28]
 800389e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d002      	beq.n	80038ac <FLASH_FlushCaches+0x18>
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d111      	bne.n	80038d0 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a16      	ldr	r2, [pc, #88]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a13      	ldr	r2, [pc, #76]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d002      	beq.n	80038dc <FLASH_FlushCaches+0x48>
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d111      	bne.n	8003900 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a07      	ldr	r2, [pc, #28]	; (8003918 <FLASH_FlushCaches+0x84>)
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <FLASH_FlushCaches+0x80>)
 8003902:	2200      	movs	r2, #0
 8003904:	771a      	strb	r2, [r3, #28]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	200002c0 	.word	0x200002c0
 8003918:	40022000 	.word	0x40022000

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800392a:	e17f      	b.n	8003c2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8171 	beq.w	8003c26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d00b      	beq.n	8003964 <HAL_GPIO_Init+0x48>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d007      	beq.n	8003964 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003958:	2b11      	cmp	r3, #17
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b12      	cmp	r3, #18
 8003962:	d130      	bne.n	80039c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800399a:	2201      	movs	r2, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0201 	and.w	r2, r3, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d118      	bne.n	8003a04 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039d8:	2201      	movs	r2, #1
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x128>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b12      	cmp	r3, #18
 8003a42:	d123      	bne.n	8003a8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	08da      	lsrs	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3208      	adds	r2, #8
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3208      	adds	r2, #8
 8003a86:	6939      	ldr	r1, [r7, #16]
 8003a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80ac 	beq.w	8003c26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_GPIO_Init+0x32c>)
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_GPIO_Init+0x32c>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8003ada:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_GPIO_Init+0x32c>)
 8003adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ae6:	4a59      	ldr	r2, [pc, #356]	; (8003c4c <HAL_GPIO_Init+0x330>)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3302      	adds	r3, #2
 8003aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	220f      	movs	r2, #15
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b10:	d025      	beq.n	8003b5e <HAL_GPIO_Init+0x242>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <HAL_GPIO_Init+0x334>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01f      	beq.n	8003b5a <HAL_GPIO_Init+0x23e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4d      	ldr	r2, [pc, #308]	; (8003c54 <HAL_GPIO_Init+0x338>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d019      	beq.n	8003b56 <HAL_GPIO_Init+0x23a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4c      	ldr	r2, [pc, #304]	; (8003c58 <HAL_GPIO_Init+0x33c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_GPIO_Init+0x236>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4b      	ldr	r2, [pc, #300]	; (8003c5c <HAL_GPIO_Init+0x340>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00d      	beq.n	8003b4e <HAL_GPIO_Init+0x232>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	; (8003c60 <HAL_GPIO_Init+0x344>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <HAL_GPIO_Init+0x22e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a49      	ldr	r2, [pc, #292]	; (8003c64 <HAL_GPIO_Init+0x348>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_GPIO_Init+0x22a>
 8003b42:	2306      	movs	r3, #6
 8003b44:	e00c      	b.n	8003b60 <HAL_GPIO_Init+0x244>
 8003b46:	2307      	movs	r3, #7
 8003b48:	e00a      	b.n	8003b60 <HAL_GPIO_Init+0x244>
 8003b4a:	2305      	movs	r3, #5
 8003b4c:	e008      	b.n	8003b60 <HAL_GPIO_Init+0x244>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x244>
 8003b52:	2303      	movs	r3, #3
 8003b54:	e004      	b.n	8003b60 <HAL_GPIO_Init+0x244>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_Init+0x244>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_GPIO_Init+0x244>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	f002 0203 	and.w	r2, r2, #3
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b70:	4936      	ldr	r1, [pc, #216]	; (8003c4c <HAL_GPIO_Init+0x330>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b7e:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ba2:	4a31      	ldr	r2, [pc, #196]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd2:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <HAL_GPIO_Init+0x34c>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fa22 f303 	lsr.w	r3, r2, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f47f ae78 	bne.w	800392c <HAL_GPIO_Init+0x10>
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	48000400 	.word	0x48000400
 8003c54:	48000800 	.word	0x48000800
 8003c58:	48000c00 	.word	0x48000c00
 8003c5c:	48001000 	.word	0x48001000
 8003c60:	48001400 	.word	0x48001400
 8003c64:	48001800 	.word	0x48001800
 8003c68:	40010400 	.word	0x40010400

08003c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	887b      	ldrh	r3, [r7, #2]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	e001      	b.n	8003c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cac:	787b      	ldrb	r3, [r7, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb2:	887a      	ldrh	r2, [r7, #2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	43d9      	mvns	r1, r3
 8003cea:	887b      	ldrh	r3, [r7, #2]
 8003cec:	400b      	ands	r3, r1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	619a      	str	r2, [r3, #24]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d006      	beq.n	8003d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d16:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fd3e 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40010400 	.word	0x40010400

08003d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e081      	b.n	8003e46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fdba 	bl	80028d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e006      	b.n	8003db8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d104      	bne.n	8003dca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	ea42 0103 	orr.w	r1, r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	021a      	lsls	r2, r3, #8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	4608      	mov	r0, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	817b      	strh	r3, [r7, #10]
 8003e62:	460b      	mov	r3, r1
 8003e64:	813b      	strh	r3, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	f040 80f9 	bne.w	800406a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x34>
 8003e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0ed      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_I2C_Mem_Write+0x4e>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0e6      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ea6:	f7ff f939 	bl	800311c <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2319      	movs	r3, #25
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f955 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0d1      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2221      	movs	r2, #33	; 0x21
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2240      	movs	r2, #64	; 0x40
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef0:	88f8      	ldrh	r0, [r7, #6]
 8003ef2:	893a      	ldrh	r2, [r7, #8]
 8003ef4:	8979      	ldrh	r1, [r7, #10]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	4603      	mov	r3, r0
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f8b9 	bl	8004078 <I2C_RequestMemoryWrite>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0a9      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2bff      	cmp	r3, #255	; 0xff
 8003f20:	d90e      	bls.n	8003f40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	8979      	ldrh	r1, [r7, #10]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa37 	bl	80043ac <I2C_TransferConfig>
 8003f3e:	e00f      	b.n	8003f60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	8979      	ldrh	r1, [r7, #10]
 8003f52:	2300      	movs	r3, #0
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa26 	bl	80043ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f93f 	bl	80041e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e07b      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d034      	beq.n	8004018 <HAL_I2C_Mem_Write+0x1c8>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d130      	bne.n	8004018 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2180      	movs	r1, #128	; 0x80
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f8d1 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e04d      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2bff      	cmp	r3, #255	; 0xff
 8003fd8:	d90e      	bls.n	8003ff8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	22ff      	movs	r2, #255	; 0xff
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	8979      	ldrh	r1, [r7, #10]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f9db 	bl	80043ac <I2C_TransferConfig>
 8003ff6:	e00f      	b.n	8004018 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	b2da      	uxtb	r2, r3
 8004008:	8979      	ldrh	r1, [r7, #10]
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f9ca 	bl	80043ac <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d19e      	bne.n	8003f60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f91e 	bl	8004268 <I2C_WaitOnSTOPFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e01a      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2220      	movs	r2, #32
 800403c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <HAL_I2C_Mem_Write+0x224>)
 800404a:	400b      	ands	r3, r1
 800404c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	fe00e800 	.word	0xfe00e800

08004078 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	8979      	ldrh	r1, [r7, #10]
 8004098:	4b20      	ldr	r3, [pc, #128]	; (800411c <I2C_RequestMemoryWrite+0xa4>)
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f983 	bl	80043ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f89c 	bl	80041e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e02c      	b.n	8004114 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
 80040ca:	e015      	b.n	80040f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040cc:	893b      	ldrh	r3, [r7, #8]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	69b9      	ldr	r1, [r7, #24]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f882 	bl	80041e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e012      	b.n	8004114 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040ee:	893b      	ldrh	r3, [r7, #8]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f830 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	80002000 	.word	0x80002000

08004120 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d103      	bne.n	800413e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d007      	beq.n	800415c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	619a      	str	r2, [r3, #24]
  }
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004178:	e022      	b.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d01e      	beq.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fe ffcb 	bl	800311c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d113      	bne.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e00f      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d0cd      	beq.n	800417a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041f4:	e02c      	b.n	8004250 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f870 	bl	80042e0 <I2C_IsAcknowledgeFailed>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e02a      	b.n	8004260 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d01e      	beq.n	8004250 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe ff83 	bl	800311c <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d113      	bne.n	8004250 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e007      	b.n	8004260 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d1cb      	bne.n	80041f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004274:	e028      	b.n	80042c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f830 	bl	80042e0 <I2C_IsAcknowledgeFailed>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e026      	b.n	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fe ff47 	bl	800311c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d113      	bne.n	80042c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e007      	b.n	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d1cf      	bne.n	8004276 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d151      	bne.n	800439e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042fa:	e022      	b.n	8004342 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d01e      	beq.n	8004342 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004304:	f7fe ff0a 	bl	800311c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <I2C_IsAcknowledgeFailed+0x3a>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e02e      	b.n	80043a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b20      	cmp	r3, #32
 800434e:	d1d5      	bne.n	80042fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2220      	movs	r2, #32
 800435e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fedd 	bl	8004120 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004372:	400b      	ands	r3, r1
 8004374:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f043 0204 	orr.w	r2, r3, #4
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	fe00e800 	.word	0xfe00e800

080043ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	817b      	strh	r3, [r7, #10]
 80043ba:	4613      	mov	r3, r2
 80043bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	0d5b      	lsrs	r3, r3, #21
 80043c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <I2C_TransferConfig+0x58>)
 80043ce:	430b      	orrs	r3, r1
 80043d0:	43db      	mvns	r3, r3
 80043d2:	ea02 0103 	and.w	r1, r2, r3
 80043d6:	897b      	ldrh	r3, [r7, #10]
 80043d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043dc:	7a7b      	ldrb	r3, [r7, #9]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	03ff63ff 	.word	0x03ff63ff

08004408 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b20      	cmp	r3, #32
 800441c:	d138      	bne.n	8004490 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004428:	2302      	movs	r3, #2
 800442a:	e032      	b.n	8004492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800445a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d139      	bne.n	8004528 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044be:	2302      	movs	r3, #2
 80044c0:	e033      	b.n	800452a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2224      	movs	r2, #36	; 0x24
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	e000      	b.n	800452a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <HAL_PWREx_GetVoltageRange+0x18>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40007000 	.word	0x40007000

08004554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004562:	d130      	bne.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800456c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004570:	d038      	beq.n	80045e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800457a:	4a1e      	ldr	r2, [pc, #120]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800457c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004580:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004582:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2232      	movs	r2, #50	; 0x32
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	0c9b      	lsrs	r3, r3, #18
 8004594:	3301      	adds	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004598:	e002      	b.n	80045a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3b01      	subs	r3, #1
 800459e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045a0:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ac:	d102      	bne.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f2      	bne.n	800459a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d110      	bne.n	80045e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e00f      	b.n	80045e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d007      	beq.n	80045e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045dc:	4a05      	ldr	r2, [pc, #20]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40007000 	.word	0x40007000
 80045f8:	200002b4 	.word	0x200002b4
 80045fc:	431bde83 	.word	0x431bde83

08004600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e3d4      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004612:	4ba1      	ldr	r3, [pc, #644]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800461c:	4b9e      	ldr	r3, [pc, #632]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80e4 	beq.w	80047fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_RCC_OscConfig+0x4a>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	f040 808b 	bne.w	8004758 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b01      	cmp	r3, #1
 8004646:	f040 8087 	bne.w	8004758 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800464a:	4b93      	ldr	r3, [pc, #588]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_RCC_OscConfig+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e3ac      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1a      	ldr	r2, [r3, #32]
 8004666:	4b8c      	ldr	r3, [pc, #560]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d004      	beq.n	800467c <HAL_RCC_OscConfig+0x7c>
 8004672:	4b89      	ldr	r3, [pc, #548]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467a:	e005      	b.n	8004688 <HAL_RCC_OscConfig+0x88>
 800467c:	4b86      	ldr	r3, [pc, #536]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004688:	4293      	cmp	r3, r2
 800468a:	d223      	bcs.n	80046d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fd07 	bl	80050a4 <RCC_SetFlashLatencyFromMSIRange>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e38d      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a0:	4b7d      	ldr	r3, [pc, #500]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a7c      	ldr	r2, [pc, #496]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046a6:	f043 0308 	orr.w	r3, r3, #8
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	4b7a      	ldr	r3, [pc, #488]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4977      	ldr	r1, [pc, #476]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046be:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	4972      	ldr	r1, [pc, #456]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
 80046d2:	e025      	b.n	8004720 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d4:	4b70      	ldr	r3, [pc, #448]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6f      	ldr	r2, [pc, #444]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046da:	f043 0308 	orr.w	r3, r3, #8
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	4b6d      	ldr	r3, [pc, #436]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	496a      	ldr	r1, [pc, #424]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f2:	4b69      	ldr	r3, [pc, #420]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	4965      	ldr	r1, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fcc7 	bl	80050a4 <RCC_SetFlashLatencyFromMSIRange>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e34d      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004720:	f000 fc36 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8004724:	4601      	mov	r1, r0
 8004726:	4b5c      	ldr	r3, [pc, #368]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	4a5a      	ldr	r2, [pc, #360]	; (800489c <HAL_RCC_OscConfig+0x29c>)
 8004732:	5cd3      	ldrb	r3, [r2, r3]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	fa21 f303 	lsr.w	r3, r1, r3
 800473c:	4a58      	ldr	r2, [pc, #352]	; (80048a0 <HAL_RCC_OscConfig+0x2a0>)
 800473e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004740:	4b58      	ldr	r3, [pc, #352]	; (80048a4 <HAL_RCC_OscConfig+0x2a4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fc99 	bl	800307c <HAL_InitTick>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d052      	beq.n	80047fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	e331      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d032      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004760:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a4c      	ldr	r2, [pc, #304]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800476c:	f7fe fcd6 	bl	800311c <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004774:	f7fe fcd2 	bl	800311c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e31a      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004786:	4b44      	ldr	r3, [pc, #272]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004792:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a40      	ldr	r2, [pc, #256]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	493b      	ldr	r1, [pc, #236]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b0:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	4936      	ldr	r1, [pc, #216]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
 80047c4:	e01a      	b.n	80047fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047c6:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a33      	ldr	r2, [pc, #204]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047d2:	f7fe fca3 	bl	800311c <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047da:	f7fe fc9f 	bl	800311c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e2e7      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ec:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x1da>
 80047f8:	e000      	b.n	80047fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d074      	beq.n	80048f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d005      	beq.n	800481a <HAL_RCC_OscConfig+0x21a>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d10e      	bne.n	8004832 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d10b      	bne.n	8004832 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481a:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d064      	beq.n	80048f0 <HAL_RCC_OscConfig+0x2f0>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d160      	bne.n	80048f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e2c4      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x24a>
 800483c:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e01d      	b.n	8004886 <HAL_RCC_OscConfig+0x286>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004852:	d10c      	bne.n	800486e <HAL_RCC_OscConfig+0x26e>
 8004854:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800485a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	e00b      	b.n	8004886 <HAL_RCC_OscConfig+0x286>
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a09      	ldr	r2, [pc, #36]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a06      	ldr	r2, [pc, #24]	; (8004898 <HAL_RCC_OscConfig+0x298>)
 8004880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004884:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01c      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fe fc45 	bl	800311c <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004894:	e011      	b.n	80048ba <HAL_RCC_OscConfig+0x2ba>
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	08009614 	.word	0x08009614
 80048a0:	200002b4 	.word	0x200002b4
 80048a4:	200002b8 	.word	0x200002b8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fe fc38 	bl	800311c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e280      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ba:	4baf      	ldr	r3, [pc, #700]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2a8>
 80048c6:	e014      	b.n	80048f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fe fc28 	bl	800311c <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fe fc24 	bl	800311c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	; 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e26c      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e2:	4ba5      	ldr	r3, [pc, #660]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2d0>
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d060      	beq.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d005      	beq.n	8004910 <HAL_RCC_OscConfig+0x310>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d119      	bne.n	800493e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d116      	bne.n	800493e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004910:	4b99      	ldr	r3, [pc, #612]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_OscConfig+0x328>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e249      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004928:	4b93      	ldr	r3, [pc, #588]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	4990      	ldr	r1, [pc, #576]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800493c:	e040      	b.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d023      	beq.n	800498e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004946:	4b8c      	ldr	r3, [pc, #560]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a8b      	ldr	r2, [pc, #556]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004952:	f7fe fbe3 	bl	800311c <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495a:	f7fe fbdf 	bl	800311c <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e227      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800496c:	4b82      	ldr	r3, [pc, #520]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004978:	4b7f      	ldr	r3, [pc, #508]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	497c      	ldr	r1, [pc, #496]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a79      	ldr	r2, [pc, #484]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fe fbbf 	bl	800311c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fe fbbb 	bl	800311c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e203      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b4:	4b70      	ldr	r3, [pc, #448]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d03c      	beq.n	8004a46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01c      	beq.n	8004a0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d4:	4b68      	ldr	r3, [pc, #416]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	4a67      	ldr	r2, [pc, #412]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fe fb9a 	bl	800311c <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ec:	f7fe fb96 	bl	800311c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e1de      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049fe:	4b5e      	ldr	r3, [pc, #376]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ef      	beq.n	80049ec <HAL_RCC_OscConfig+0x3ec>
 8004a0c:	e01b      	b.n	8004a46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0e:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a14:	4a58      	ldr	r2, [pc, #352]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fe fb7d 	bl	800311c <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a26:	f7fe fb79 	bl	800311c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e1c1      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a38:	4b4f      	ldr	r3, [pc, #316]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ef      	bne.n	8004a26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80a6 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a54:	2300      	movs	r3, #0
 8004a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a58:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10d      	bne.n	8004a80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a64:	4b44      	ldr	r3, [pc, #272]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	4a43      	ldr	r2, [pc, #268]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a70:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a80:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d118      	bne.n	8004abe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a8c:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a3a      	ldr	r2, [pc, #232]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a98:	f7fe fb40 	bl	800311c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa0:	f7fe fb3c 	bl	800311c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e184      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab2:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <HAL_RCC_OscConfig+0x57c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d108      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4d8>
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad6:	e024      	b.n	8004b22 <HAL_RCC_OscConfig+0x522>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d110      	bne.n	8004b02 <HAL_RCC_OscConfig+0x502>
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af0:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	4a20      	ldr	r2, [pc, #128]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b00:	e00f      	b.n	8004b22 <HAL_RCC_OscConfig+0x522>
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b1a:	f023 0304 	bic.w	r3, r3, #4
 8004b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2a:	f7fe faf7 	bl	800311c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fe faf3 	bl	800311c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e139      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_OscConfig+0x578>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ed      	beq.n	8004b32 <HAL_RCC_OscConfig+0x532>
 8004b56:	e01a      	b.n	8004b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fe fae0 	bl	800311c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5e:	e00f      	b.n	8004b80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fe fadc 	bl	800311c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d906      	bls.n	8004b80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e122      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b80:	4b90      	ldr	r3, [pc, #576]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e8      	bne.n	8004b60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8e:	7ffb      	ldrb	r3, [r7, #31]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b94:	4b8b      	ldr	r3, [pc, #556]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	4a8a      	ldr	r2, [pc, #552]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8108 	beq.w	8004dba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	f040 80d0 	bne.w	8004d54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bb4:	4b83      	ldr	r3, [pc, #524]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0203 	and.w	r2, r3, #3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d130      	bne.n	8004c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d127      	bne.n	8004c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d11f      	bne.n	8004c2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bf4:	2a07      	cmp	r2, #7
 8004bf6:	bf14      	ite	ne
 8004bf8:	2201      	movne	r2, #1
 8004bfa:	2200      	moveq	r2, #0
 8004bfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d113      	bne.n	8004c2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d109      	bne.n	8004c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	3b01      	subs	r3, #1
 8004c24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d06e      	beq.n	8004d08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b0c      	cmp	r3, #12
 8004c2e:	d069      	beq.n	8004d04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c30:	4b64      	ldr	r3, [pc, #400]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c3c:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0b7      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5c      	ldr	r2, [pc, #368]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c58:	f7fe fa60 	bl	800311c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fe fa5c 	bl	800311c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0a4      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c72:	4b54      	ldr	r3, [pc, #336]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7e:	4b51      	ldr	r3, [pc, #324]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	4b51      	ldr	r3, [pc, #324]	; (8004dc8 <HAL_RCC_OscConfig+0x7c8>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c8e:	3a01      	subs	r2, #1
 8004c90:	0112      	lsls	r2, r2, #4
 8004c92:	4311      	orrs	r1, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c98:	0212      	lsls	r2, r2, #8
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ca0:	0852      	lsrs	r2, r2, #1
 8004ca2:	3a01      	subs	r2, #1
 8004ca4:	0552      	lsls	r2, r2, #21
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cac:	0852      	lsrs	r2, r2, #1
 8004cae:	3a01      	subs	r2, #1
 8004cb0:	0652      	lsls	r2, r2, #25
 8004cb2:	4311      	orrs	r1, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb8:	0912      	lsrs	r2, r2, #4
 8004cba:	0452      	lsls	r2, r2, #17
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	4941      	ldr	r1, [pc, #260]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cc4:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3e      	ldr	r2, [pc, #248]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cd0:	4b3c      	ldr	r3, [pc, #240]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4a3b      	ldr	r2, [pc, #236]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cdc:	f7fe fa1e 	bl	800311c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fe fa1a 	bl	800311c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e062      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d02:	e05a      	b.n	8004dba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e059      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d152      	bne.n	8004dba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d2c:	f7fe f9f6 	bl	800311c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fe f9f2 	bl	800311c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e03a      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d46:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x734>
 8004d52:	e032      	b.n	8004dba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d02d      	beq.n	8004db6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d66:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d105      	bne.n	8004d7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d78:	f023 0303 	bic.w	r3, r3, #3
 8004d7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004d84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fe f9c5 	bl	800311c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d96:	f7fe f9c1 	bl	800311c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e009      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCC_OscConfig+0x7c4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <HAL_RCC_OscConfig+0x796>
 8004db4:	e001      	b.n	8004dba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	f99d808c 	.word	0xf99d808c

08004dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0c8      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004de0:	4b66      	ldr	r3, [pc, #408]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d910      	bls.n	8004e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 0207 	bic.w	r2, r3, #7
 8004df6:	4961      	ldr	r1, [pc, #388]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0b0      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d04c      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e24:	4b56      	ldr	r3, [pc, #344]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d121      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e09e      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d115      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e092      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e54:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e086      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e64:	4b46      	ldr	r3, [pc, #280]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e07e      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e74:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 0203 	bic.w	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	493f      	ldr	r1, [pc, #252]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fe f949 	bl	800311c <HAL_GetTick>
 8004e8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8e:	f7fe f945 	bl	800311c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e066      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea4:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 020c 	and.w	r2, r3, #12
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d1eb      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec2:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	492c      	ldr	r1, [pc, #176]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d210      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 0207 	bic.w	r2, r3, #7
 8004eea:	4924      	ldr	r1, [pc, #144]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_RCC_ClockConfig+0x1b0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e036      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f10:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4918      	ldr	r1, [pc, #96]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4910      	ldr	r1, [pc, #64]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f42:	f000 f825 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8004f46:	4601      	mov	r1, r0
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <HAL_RCC_ClockConfig+0x1b4>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	5cd3      	ldrb	r3, [r2, r3]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe f888 	bl	800307c <HAL_InitTick>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f70:	7afb      	ldrb	r3, [r7, #11]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40022000 	.word	0x40022000
 8004f80:	40021000 	.word	0x40021000
 8004f84:	08009614 	.word	0x08009614
 8004f88:	200002b4 	.word	0x200002b4
 8004f8c:	200002b8 	.word	0x200002b8

08004f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9e:	4b3d      	ldr	r3, [pc, #244]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d121      	bne.n	8005002 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d11e      	bne.n	8005002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc4:	4b33      	ldr	r3, [pc, #204]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e005      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fe0:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fec:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10d      	bne.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d102      	bne.n	800500e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCC_GetSysClockFreq+0x10c>)
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e004      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d101      	bne.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d133      	bne.n	8005086 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d002      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0xa4>
 800502e:	2b03      	cmp	r3, #3
 8005030:	d003      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0xaa>
 8005032:	e005      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005036:	617b      	str	r3, [r7, #20]
      break;
 8005038:	e005      	b.n	8005046 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800503c:	617b      	str	r3, [r7, #20]
      break;
 800503e:	e002      	b.n	8005046 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	617b      	str	r3, [r7, #20]
      break;
 8005044:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	3301      	adds	r3, #1
 8005052:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	fb02 f203 	mul.w	r2, r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <HAL_RCC_GetSysClockFreq+0x104>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	0e5b      	lsrs	r3, r3, #25
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	3301      	adds	r3, #1
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005086:	69bb      	ldr	r3, [r7, #24]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3724      	adds	r7, #36	; 0x24
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40021000 	.word	0x40021000
 8005098:	08009624 	.word	0x08009624
 800509c:	00f42400 	.word	0x00f42400
 80050a0:	007a1200 	.word	0x007a1200

080050a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050bc:	f7ff fa3c 	bl	8004538 <HAL_PWREx_GetVoltageRange>
 80050c0:	6178      	str	r0, [r7, #20]
 80050c2:	e014      	b.n	80050ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	4a24      	ldr	r2, [pc, #144]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	; 0x58
 80050d0:	4b22      	ldr	r3, [pc, #136]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050dc:	f7ff fa2c 	bl	8004538 <HAL_PWREx_GetVoltageRange>
 80050e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050e2:	4b1e      	ldr	r3, [pc, #120]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	4a1d      	ldr	r2, [pc, #116]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d10b      	bne.n	800510e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d919      	bls.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2ba0      	cmp	r3, #160	; 0xa0
 8005100:	d902      	bls.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005102:	2302      	movs	r3, #2
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e013      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005108:	2301      	movs	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	e010      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d902      	bls.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005114:	2303      	movs	r3, #3
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e00a      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d102      	bne.n	8005126 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005120:	2302      	movs	r3, #2
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e004      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b70      	cmp	r3, #112	; 0x70
 800512a:	d101      	bne.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800512c:	2301      	movs	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 0207 	bic.w	r2, r3, #7
 8005138:	4909      	ldr	r1, [pc, #36]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	40022000 	.word	0x40022000

08005164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800516c:	2300      	movs	r3, #0
 800516e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005170:	2300      	movs	r3, #0
 8005172:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517c:	2b00      	cmp	r3, #0
 800517e:	d03f      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005188:	d01c      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800518a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800518e:	d802      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00e      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005194:	e01f      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005196:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800519a:	d003      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800519c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051a0:	d01c      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80051a2:	e018      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051a4:	4b85      	ldr	r3, [pc, #532]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a84      	ldr	r2, [pc, #528]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b0:	e015      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	2100      	movs	r1, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fab9 	bl	8005730 <RCCEx_PLLSAI1_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c2:	e00c      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3320      	adds	r3, #32
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fba0 	bl	8005910 <RCCEx_PLLSAI2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	74fb      	strb	r3, [r7, #19]
      break;
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80051dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051de:	7cfb      	ldrb	r3, [r7, #19]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051e4:	4b75      	ldr	r3, [pc, #468]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f2:	4972      	ldr	r1, [pc, #456]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051fa:	e001      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d03f      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005214:	d01c      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800521a:	d802      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005220:	e01f      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005226:	d003      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005228:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800522c:	d01c      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800522e:	e018      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005230:	4b62      	ldr	r3, [pc, #392]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a61      	ldr	r2, [pc, #388]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800523c:	e015      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fa73 	bl	8005730 <RCCEx_PLLSAI1_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800524e:	e00c      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3320      	adds	r3, #32
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fb5a 	bl	8005910 <RCCEx_PLLSAI2_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005260:	e003      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	74fb      	strb	r3, [r7, #19]
      break;
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526a:	7cfb      	ldrb	r3, [r7, #19]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005270:	4b52      	ldr	r3, [pc, #328]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527e:	494f      	ldr	r1, [pc, #316]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005286:	e001      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005288:	7cfb      	ldrb	r3, [r7, #19]
 800528a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a0 	beq.w	80053da <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529a:	2300      	movs	r3, #0
 800529c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800529e:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	4b41      	ldr	r3, [pc, #260]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	4a40      	ldr	r2, [pc, #256]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052be:	6593      	str	r3, [r2, #88]	; 0x58
 80052c0:	4b3e      	ldr	r3, [pc, #248]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052cc:	2301      	movs	r3, #1
 80052ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052d0:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a3a      	ldr	r2, [pc, #232]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052dc:	f7fd ff1e 	bl	800311c <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052e2:	e009      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e4:	f7fd ff1a 	bl	800311c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d902      	bls.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	74fb      	strb	r3, [r7, #19]
        break;
 80052f6:	e005      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052f8:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ef      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d15c      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01f      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	429a      	cmp	r2, r3
 8005326:	d019      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005328:	4b24      	ldr	r3, [pc, #144]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005334:	4b21      	ldr	r3, [pc, #132]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	4a20      	ldr	r2, [pc, #128]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800533c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534a:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800534c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d016      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005366:	f7fd fed9 	bl	800311c <HAL_GetTick>
 800536a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536c:	e00b      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536e:	f7fd fed5 	bl	800311c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	; 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d902      	bls.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	74fb      	strb	r3, [r7, #19]
            break;
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ec      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053aa:	4904      	ldr	r1, [pc, #16]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053b2:	e009      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	74bb      	strb	r3, [r7, #18]
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000
 80053c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	7cfb      	ldrb	r3, [r7, #19]
 80053c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053c8:	7c7b      	ldrb	r3, [r7, #17]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d105      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ce:	4b9e      	ldr	r3, [pc, #632]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	4a9d      	ldr	r2, [pc, #628]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053e6:	4b98      	ldr	r3, [pc, #608]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f023 0203 	bic.w	r2, r3, #3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	4994      	ldr	r1, [pc, #592]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005408:	4b8f      	ldr	r3, [pc, #572]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f023 020c 	bic.w	r2, r3, #12
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	498c      	ldr	r1, [pc, #560]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800542a:	4b87      	ldr	r3, [pc, #540]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	4983      	ldr	r1, [pc, #524]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800544c:	4b7e      	ldr	r3, [pc, #504]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	497b      	ldr	r1, [pc, #492]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800546e:	4b76      	ldr	r3, [pc, #472]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547c:	4972      	ldr	r1, [pc, #456]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005490:	4b6d      	ldr	r3, [pc, #436]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549e:	496a      	ldr	r1, [pc, #424]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054b2:	4b65      	ldr	r3, [pc, #404]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c0:	4961      	ldr	r1, [pc, #388]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054d4:	4b5c      	ldr	r3, [pc, #368]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	4959      	ldr	r1, [pc, #356]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f6:	4b54      	ldr	r3, [pc, #336]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	4950      	ldr	r1, [pc, #320]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005518:	4b4b      	ldr	r3, [pc, #300]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	4948      	ldr	r1, [pc, #288]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800553a:	4b43      	ldr	r3, [pc, #268]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	493f      	ldr	r1, [pc, #252]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d028      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800555c:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556a:	4937      	ldr	r1, [pc, #220]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800557a:	d106      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800557c:	4b32      	ldr	r3, [pc, #200]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a31      	ldr	r2, [pc, #196]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005586:	60d3      	str	r3, [r2, #12]
 8005588:	e011      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005592:	d10c      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3304      	adds	r3, #4
 8005598:	2101      	movs	r1, #1
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f8c8 	bl	8005730 <RCCEx_PLLSAI1_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d028      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055ba:	4b23      	ldr	r3, [pc, #140]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	491f      	ldr	r1, [pc, #124]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d8:	d106      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	4a1a      	ldr	r2, [pc, #104]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055e4:	60d3      	str	r3, [r2, #12]
 80055e6:	e011      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055f0:	d10c      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	2101      	movs	r1, #1
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f899 	bl	8005730 <RCCEx_PLLSAI1_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005608:	7cfb      	ldrb	r3, [r7, #19]
 800560a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d02b      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	4908      	ldr	r1, [pc, #32]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005636:	d109      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a02      	ldr	r2, [pc, #8]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800563e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005642:	60d3      	str	r3, [r2, #12]
 8005644:	e014      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005654:	d10c      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	2101      	movs	r1, #1
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f867 	bl	8005730 <RCCEx_PLLSAI1_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800566c:	7cfb      	ldrb	r3, [r7, #19]
 800566e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02f      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800567c:	4b2b      	ldr	r3, [pc, #172]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568a:	4928      	ldr	r1, [pc, #160]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569a:	d10d      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	2102      	movs	r1, #2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f844 	bl	8005730 <RCCEx_PLLSAI1_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d014      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	74bb      	strb	r3, [r7, #18]
 80056b6:	e011      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c0:	d10c      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3320      	adds	r3, #32
 80056c6:	2102      	movs	r1, #2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 f921 	bl	8005910 <RCCEx_PLLSAI2_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056d2:	7cfb      	ldrb	r3, [r7, #19]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056e8:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f6:	490d      	ldr	r1, [pc, #52]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800570a:	4b08      	ldr	r3, [pc, #32]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005710:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571a:	4904      	ldr	r1, [pc, #16]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005722:	7cbb      	ldrb	r3, [r7, #18]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000

08005730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800573e:	4b73      	ldr	r3, [pc, #460]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d018      	beq.n	800577c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800574a:	4b70      	ldr	r3, [pc, #448]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0203 	and.w	r2, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d10d      	bne.n	8005776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
       ||
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005762:	4b6a      	ldr	r3, [pc, #424]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
       ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d044      	beq.n	8005800 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e041      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d00c      	beq.n	800579e <RCCEx_PLLSAI1_Config+0x6e>
 8005784:	2b03      	cmp	r3, #3
 8005786:	d013      	beq.n	80057b0 <RCCEx_PLLSAI1_Config+0x80>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d120      	bne.n	80057ce <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800578c:	4b5f      	ldr	r3, [pc, #380]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11d      	bne.n	80057d4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579c:	e01a      	b.n	80057d4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800579e:	4b5b      	ldr	r3, [pc, #364]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d116      	bne.n	80057d8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ae:	e013      	b.n	80057d8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057b0:	4b56      	ldr	r3, [pc, #344]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10f      	bne.n	80057dc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057bc:	4b53      	ldr	r3, [pc, #332]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057cc:	e006      	b.n	80057dc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	73fb      	strb	r3, [r7, #15]
      break;
 80057d2:	e004      	b.n	80057de <RCCEx_PLLSAI1_Config+0xae>
      break;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <RCCEx_PLLSAI1_Config+0xae>
      break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <RCCEx_PLLSAI1_Config+0xae>
      break;
 80057dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10d      	bne.n	8005800 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057e4:	4b49      	ldr	r3, [pc, #292]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	430b      	orrs	r3, r1
 80057fa:	4944      	ldr	r1, [pc, #272]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d17d      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005806:	4b41      	ldr	r3, [pc, #260]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a40      	ldr	r2, [pc, #256]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 800580c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005812:	f7fd fc83 	bl	800311c <HAL_GetTick>
 8005816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005818:	e009      	b.n	800582e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800581a:	f7fd fc7f 	bl	800311c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d902      	bls.n	800582e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	73fb      	strb	r3, [r7, #15]
        break;
 800582c:	e005      	b.n	800583a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800582e:	4b37      	ldr	r3, [pc, #220]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ef      	bne.n	800581a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d160      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d111      	bne.n	800586a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005846:	4b31      	ldr	r3, [pc, #196]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6892      	ldr	r2, [r2, #8]
 8005856:	0211      	lsls	r1, r2, #8
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68d2      	ldr	r2, [r2, #12]
 800585c:	0912      	lsrs	r2, r2, #4
 800585e:	0452      	lsls	r2, r2, #17
 8005860:	430a      	orrs	r2, r1
 8005862:	492a      	ldr	r1, [pc, #168]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005864:	4313      	orrs	r3, r2
 8005866:	610b      	str	r3, [r1, #16]
 8005868:	e027      	b.n	80058ba <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d112      	bne.n	8005896 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005870:	4b26      	ldr	r3, [pc, #152]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005878:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6892      	ldr	r2, [r2, #8]
 8005880:	0211      	lsls	r1, r2, #8
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6912      	ldr	r2, [r2, #16]
 8005886:	0852      	lsrs	r2, r2, #1
 8005888:	3a01      	subs	r2, #1
 800588a:	0552      	lsls	r2, r2, #21
 800588c:	430a      	orrs	r2, r1
 800588e:	491f      	ldr	r1, [pc, #124]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	610b      	str	r3, [r1, #16]
 8005894:	e011      	b.n	80058ba <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005896:	4b1d      	ldr	r3, [pc, #116]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800589e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6892      	ldr	r2, [r2, #8]
 80058a6:	0211      	lsls	r1, r2, #8
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6952      	ldr	r2, [r2, #20]
 80058ac:	0852      	lsrs	r2, r2, #1
 80058ae:	3a01      	subs	r2, #1
 80058b0:	0652      	lsls	r2, r2, #25
 80058b2:	430a      	orrs	r2, r1
 80058b4:	4915      	ldr	r1, [pc, #84]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058ba:	4b14      	ldr	r3, [pc, #80]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a13      	ldr	r2, [pc, #76]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c6:	f7fd fc29 	bl	800311c <HAL_GetTick>
 80058ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058cc:	e009      	b.n	80058e2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ce:	f7fd fc25 	bl	800311c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d902      	bls.n	80058e2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	73fb      	strb	r3, [r7, #15]
          break;
 80058e0:	e005      	b.n	80058ee <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058e2:	4b0a      	ldr	r3, [pc, #40]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ef      	beq.n	80058ce <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000

08005910 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800591e:	4b68      	ldr	r3, [pc, #416]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800592a:	4b65      	ldr	r3, [pc, #404]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0203 	and.w	r2, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d10d      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
       ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005942:	4b5f      	ldr	r3, [pc, #380]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
       ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d044      	beq.n	80059e0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	e041      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d00c      	beq.n	800597e <RCCEx_PLLSAI2_Config+0x6e>
 8005964:	2b03      	cmp	r3, #3
 8005966:	d013      	beq.n	8005990 <RCCEx_PLLSAI2_Config+0x80>
 8005968:	2b01      	cmp	r3, #1
 800596a:	d120      	bne.n	80059ae <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800596c:	4b54      	ldr	r3, [pc, #336]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11d      	bne.n	80059b4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597c:	e01a      	b.n	80059b4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800597e:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005986:	2b00      	cmp	r3, #0
 8005988:	d116      	bne.n	80059b8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800598e:	e013      	b.n	80059b8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005990:	4b4b      	ldr	r3, [pc, #300]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10f      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800599c:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ac:	e006      	b.n	80059bc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
      break;
 80059b2:	e004      	b.n	80059be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80059b4:	bf00      	nop
 80059b6:	e002      	b.n	80059be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80059b8:	bf00      	nop
 80059ba:	e000      	b.n	80059be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80059bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10d      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059c4:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	430b      	orrs	r3, r1
 80059da:	4939      	ldr	r1, [pc, #228]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d167      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059e6:	4b36      	ldr	r3, [pc, #216]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a35      	ldr	r2, [pc, #212]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f2:	f7fd fb93 	bl	800311c <HAL_GetTick>
 80059f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059f8:	e009      	b.n	8005a0e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059fa:	f7fd fb8f 	bl	800311c <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d902      	bls.n	8005a0e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0c:	e005      	b.n	8005a1a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a0e:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1ef      	bne.n	80059fa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d14a      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d111      	bne.n	8005a4a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6892      	ldr	r2, [r2, #8]
 8005a36:	0211      	lsls	r1, r2, #8
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68d2      	ldr	r2, [r2, #12]
 8005a3c:	0912      	lsrs	r2, r2, #4
 8005a3e:	0452      	lsls	r2, r2, #17
 8005a40:	430a      	orrs	r2, r1
 8005a42:	491f      	ldr	r1, [pc, #124]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	614b      	str	r3, [r1, #20]
 8005a48:	e011      	b.n	8005a6e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6892      	ldr	r2, [r2, #8]
 8005a5a:	0211      	lsls	r1, r2, #8
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6912      	ldr	r2, [r2, #16]
 8005a60:	0852      	lsrs	r2, r2, #1
 8005a62:	3a01      	subs	r2, #1
 8005a64:	0652      	lsls	r2, r2, #25
 8005a66:	430a      	orrs	r2, r1
 8005a68:	4915      	ldr	r1, [pc, #84]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a6e:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fd fb4f 	bl	800311c <HAL_GetTick>
 8005a7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a80:	e009      	b.n	8005a96 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a82:	f7fd fb4b 	bl	800311c <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d902      	bls.n	8005a96 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	73fb      	strb	r3, [r7, #15]
          break;
 8005a94:	e005      	b.n	8005aa2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a96:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0ef      	beq.n	8005a82 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	4903      	ldr	r1, [pc, #12]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000

08005ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e049      	b.n	8005b6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fd f9f2 	bl	8002ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f000 fc06 	bl	8006314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d001      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e04f      	b.n	8005c2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a23      	ldr	r2, [pc, #140]	; (8005c38 <HAL_TIM_Base_Start_IT+0xc4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01d      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0x76>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb6:	d018      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0x76>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <HAL_TIM_Base_Start_IT+0xc8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0x76>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0x76>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d009      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0x76>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0x76>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d115      	bne.n	8005c16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d015      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0xb4>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c02:	d011      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c14:	e008      	b.n	8005c28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e000      	b.n	8005c2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	00010007 	.word	0x00010007

08005c54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c76:	4013      	ands	r3, r2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10f      	bne.n	8005c9c <HAL_TIM_Base_Stop_IT+0x48>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	f240 4344 	movw	r3, #1092	; 0x444
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <HAL_TIM_Base_Stop_IT+0x48>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e049      	b.n	8005d58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f841 	bl	8005d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f000 fb0f 	bl	8006314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <HAL_TIM_PWM_Start+0x24>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	bf14      	ite	ne
 8005d90:	2301      	movne	r3, #1
 8005d92:	2300      	moveq	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	e03c      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d109      	bne.n	8005db2 <HAL_TIM_PWM_Start+0x3e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	bf14      	ite	ne
 8005daa:	2301      	movne	r3, #1
 8005dac:	2300      	moveq	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e02f      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d109      	bne.n	8005dcc <HAL_TIM_PWM_Start+0x58>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	e022      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d109      	bne.n	8005de6 <HAL_TIM_PWM_Start+0x72>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	bf14      	ite	ne
 8005dde:	2301      	movne	r3, #1
 8005de0:	2300      	moveq	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	e015      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d109      	bne.n	8005e00 <HAL_TIM_PWM_Start+0x8c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e008      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e09c      	b.n	8005f54 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <HAL_TIM_PWM_Start+0xb6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e28:	e023      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_PWM_Start+0xc6>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e38:	e01b      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_PWM_Start+0xd6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e48:	e013      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_PWM_Start+0xe6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e58:	e00b      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_PWM_Start+0xf6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e68:	e003      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fe54 	bl	8006b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a35      	ldr	r2, [pc, #212]	; (8005f5c <HAL_TIM_PWM_Start+0x1e8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x13e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a34      	ldr	r2, [pc, #208]	; (8005f60 <HAL_TIM_PWM_Start+0x1ec>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x13e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a32      	ldr	r2, [pc, #200]	; (8005f64 <HAL_TIM_PWM_Start+0x1f0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x13e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a31      	ldr	r2, [pc, #196]	; (8005f68 <HAL_TIM_PWM_Start+0x1f4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x13e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a2f      	ldr	r2, [pc, #188]	; (8005f6c <HAL_TIM_PWM_Start+0x1f8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0x142>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <HAL_TIM_PWM_Start+0x144>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <HAL_TIM_PWM_Start+0x1e8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d01d      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x19e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ede:	d018      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x19e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <HAL_TIM_PWM_Start+0x1fc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x19e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <HAL_TIM_PWM_Start+0x200>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x19e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_TIM_PWM_Start+0x204>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x19e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a17      	ldr	r2, [pc, #92]	; (8005f60 <HAL_TIM_PWM_Start+0x1ec>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x19e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <HAL_TIM_PWM_Start+0x1f0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d115      	bne.n	8005f3e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <HAL_TIM_PWM_Start+0x208>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b06      	cmp	r3, #6
 8005f22:	d015      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x1dc>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2a:	d011      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	e008      	b.n	8005f50 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e000      	b.n	8005f52 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	00010007 	.word	0x00010007

08005f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e0fd      	b.n	8006196 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b14      	cmp	r3, #20
 8005fa6:	f200 80f0 	bhi.w	800618a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005faa:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	0800618b 	.word	0x0800618b
 8005fb8:	0800618b 	.word	0x0800618b
 8005fbc:	0800618b 	.word	0x0800618b
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	0800618b 	.word	0x0800618b
 8005fc8:	0800618b 	.word	0x0800618b
 8005fcc:	0800618b 	.word	0x0800618b
 8005fd0:	08006087 	.word	0x08006087
 8005fd4:	0800618b 	.word	0x0800618b
 8005fd8:	0800618b 	.word	0x0800618b
 8005fdc:	0800618b 	.word	0x0800618b
 8005fe0:	080060c7 	.word	0x080060c7
 8005fe4:	0800618b 	.word	0x0800618b
 8005fe8:	0800618b 	.word	0x0800618b
 8005fec:	0800618b 	.word	0x0800618b
 8005ff0:	08006109 	.word	0x08006109
 8005ff4:	0800618b 	.word	0x0800618b
 8005ff8:	0800618b 	.word	0x0800618b
 8005ffc:	0800618b 	.word	0x0800618b
 8006000:	08006149 	.word	0x08006149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa1c 	bl	8006448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0208 	orr.w	r2, r2, #8
 800601e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0204 	bic.w	r2, r2, #4
 800602e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6999      	ldr	r1, [r3, #24]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	619a      	str	r2, [r3, #24]
      break;
 8006042:	e0a3      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fa8c 	bl	8006568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6999      	ldr	r1, [r3, #24]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	021a      	lsls	r2, r3, #8
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	619a      	str	r2, [r3, #24]
      break;
 8006084:	e082      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 faf5 	bl	800667c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0208 	orr.w	r2, r2, #8
 80060a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0204 	bic.w	r2, r2, #4
 80060b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69d9      	ldr	r1, [r3, #28]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	61da      	str	r2, [r3, #28]
      break;
 80060c4:	e062      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fb5d 	bl	800678c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69d9      	ldr	r1, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	021a      	lsls	r2, r3, #8
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	61da      	str	r2, [r3, #28]
      break;
 8006106:	e041      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fba6 	bl	8006860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0208 	orr.w	r2, r2, #8
 8006122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0204 	bic.w	r2, r2, #4
 8006132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006146:	e021      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fbea 	bl	8006928 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006188:	e000      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800618a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop

080061a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIM_ConfigClockSource+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e0a8      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	d067      	beq.n	80062c4 <HAL_TIM_ConfigClockSource+0x124>
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d80b      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x70>
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d073      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0x144>
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d802      	bhi.n	8006206 <HAL_TIM_ConfigClockSource+0x66>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d06f      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006204:	e078      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006206:	2b20      	cmp	r3, #32
 8006208:	d06c      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0x144>
 800620a:	2b30      	cmp	r3, #48	; 0x30
 800620c:	d06a      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800620e:	e073      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006210:	2b70      	cmp	r3, #112	; 0x70
 8006212:	d00d      	beq.n	8006230 <HAL_TIM_ConfigClockSource+0x90>
 8006214:	2b70      	cmp	r3, #112	; 0x70
 8006216:	d804      	bhi.n	8006222 <HAL_TIM_ConfigClockSource+0x82>
 8006218:	2b50      	cmp	r3, #80	; 0x50
 800621a:	d033      	beq.n	8006284 <HAL_TIM_ConfigClockSource+0xe4>
 800621c:	2b60      	cmp	r3, #96	; 0x60
 800621e:	d041      	beq.n	80062a4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006220:	e06a      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006226:	d066      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x156>
 8006228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622c:	d017      	beq.n	800625e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800622e:	e063      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	6899      	ldr	r1, [r3, #8]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f000 fc52 	bl	8006ae8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006252:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	609a      	str	r2, [r3, #8]
      break;
 800625c:	e04c      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6899      	ldr	r1, [r3, #8]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f000 fc3b 	bl	8006ae8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006280:	609a      	str	r2, [r3, #8]
      break;
 8006282:	e039      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6859      	ldr	r1, [r3, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	461a      	mov	r2, r3
 8006292:	f000 fbaf 	bl	80069f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2150      	movs	r1, #80	; 0x50
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fc08 	bl	8006ab2 <TIM_ITRx_SetConfig>
      break;
 80062a2:	e029      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	461a      	mov	r2, r3
 80062b2:	f000 fbce 	bl	8006a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2160      	movs	r1, #96	; 0x60
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fbf8 	bl	8006ab2 <TIM_ITRx_SetConfig>
      break;
 80062c2:	e019      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	461a      	mov	r2, r3
 80062d2:	f000 fb8f 	bl	80069f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2140      	movs	r1, #64	; 0x40
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fbe8 	bl	8006ab2 <TIM_ITRx_SetConfig>
      break;
 80062e2:	e009      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f000 fbdf 	bl	8006ab2 <TIM_ITRx_SetConfig>
        break;
 80062f4:	e000      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80062f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a40      	ldr	r2, [pc, #256]	; (8006428 <TIM_Base_SetConfig+0x114>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a3d      	ldr	r2, [pc, #244]	; (800642c <TIM_Base_SetConfig+0x118>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a3c      	ldr	r2, [pc, #240]	; (8006430 <TIM_Base_SetConfig+0x11c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a3b      	ldr	r2, [pc, #236]	; (8006434 <TIM_Base_SetConfig+0x120>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a3a      	ldr	r2, [pc, #232]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d108      	bne.n	8006366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <TIM_Base_SetConfig+0x114>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01f      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006374:	d01b      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2c      	ldr	r2, [pc, #176]	; (800642c <TIM_Base_SetConfig+0x118>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d017      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2b      	ldr	r2, [pc, #172]	; (8006430 <TIM_Base_SetConfig+0x11c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <TIM_Base_SetConfig+0x120>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00f      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00b      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a28      	ldr	r2, [pc, #160]	; (800643c <TIM_Base_SetConfig+0x128>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d007      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a27      	ldr	r2, [pc, #156]	; (8006440 <TIM_Base_SetConfig+0x12c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_Base_SetConfig+0x9a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a26      	ldr	r2, [pc, #152]	; (8006444 <TIM_Base_SetConfig+0x130>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d108      	bne.n	80063c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a10      	ldr	r2, [pc, #64]	; (8006428 <TIM_Base_SetConfig+0x114>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00f      	beq.n	800640c <TIM_Base_SetConfig+0xf8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a12      	ldr	r2, [pc, #72]	; (8006438 <TIM_Base_SetConfig+0x124>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00b      	beq.n	800640c <TIM_Base_SetConfig+0xf8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a11      	ldr	r2, [pc, #68]	; (800643c <TIM_Base_SetConfig+0x128>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <TIM_Base_SetConfig+0xf8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a10      	ldr	r2, [pc, #64]	; (8006440 <TIM_Base_SetConfig+0x12c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0xf8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a0f      	ldr	r2, [pc, #60]	; (8006444 <TIM_Base_SetConfig+0x130>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d103      	bne.n	8006414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	615a      	str	r2, [r3, #20]
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40013400 	.word	0x40013400
 800643c:	40014000 	.word	0x40014000
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800

08006448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 0302 	bic.w	r3, r3, #2
 8006494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a2c      	ldr	r2, [pc, #176]	; (8006554 <TIM_OC1_SetConfig+0x10c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00f      	beq.n	80064c8 <TIM_OC1_SetConfig+0x80>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a2b      	ldr	r2, [pc, #172]	; (8006558 <TIM_OC1_SetConfig+0x110>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <TIM_OC1_SetConfig+0x80>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a2a      	ldr	r2, [pc, #168]	; (800655c <TIM_OC1_SetConfig+0x114>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_OC1_SetConfig+0x80>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a29      	ldr	r2, [pc, #164]	; (8006560 <TIM_OC1_SetConfig+0x118>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC1_SetConfig+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a28      	ldr	r2, [pc, #160]	; (8006564 <TIM_OC1_SetConfig+0x11c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10c      	bne.n	80064e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0308 	bic.w	r3, r3, #8
 80064ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0304 	bic.w	r3, r3, #4
 80064e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <TIM_OC1_SetConfig+0x10c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00f      	beq.n	800650a <TIM_OC1_SetConfig+0xc2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1a      	ldr	r2, [pc, #104]	; (8006558 <TIM_OC1_SetConfig+0x110>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <TIM_OC1_SetConfig+0xc2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a19      	ldr	r2, [pc, #100]	; (800655c <TIM_OC1_SetConfig+0x114>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <TIM_OC1_SetConfig+0xc2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a18      	ldr	r2, [pc, #96]	; (8006560 <TIM_OC1_SetConfig+0x118>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_OC1_SetConfig+0xc2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <TIM_OC1_SetConfig+0x11c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d111      	bne.n	800652e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800

08006568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f023 0210 	bic.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0320 	bic.w	r3, r3, #32
 80065b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a28      	ldr	r2, [pc, #160]	; (8006668 <TIM_OC2_SetConfig+0x100>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_OC2_SetConfig+0x6c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a27      	ldr	r2, [pc, #156]	; (800666c <TIM_OC2_SetConfig+0x104>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10d      	bne.n	80065f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <TIM_OC2_SetConfig+0x100>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00f      	beq.n	8006618 <TIM_OC2_SetConfig+0xb0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1c      	ldr	r2, [pc, #112]	; (800666c <TIM_OC2_SetConfig+0x104>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00b      	beq.n	8006618 <TIM_OC2_SetConfig+0xb0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1b      	ldr	r2, [pc, #108]	; (8006670 <TIM_OC2_SetConfig+0x108>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d007      	beq.n	8006618 <TIM_OC2_SetConfig+0xb0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <TIM_OC2_SetConfig+0x10c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC2_SetConfig+0xb0>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a19      	ldr	r2, [pc, #100]	; (8006678 <TIM_OC2_SetConfig+0x110>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d113      	bne.n	8006640 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800661e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800

0800667c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a27      	ldr	r2, [pc, #156]	; (8006778 <TIM_OC3_SetConfig+0xfc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_OC3_SetConfig+0x6a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a26      	ldr	r2, [pc, #152]	; (800677c <TIM_OC3_SetConfig+0x100>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d10d      	bne.n	8006702 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1c      	ldr	r2, [pc, #112]	; (8006778 <TIM_OC3_SetConfig+0xfc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00f      	beq.n	800672a <TIM_OC3_SetConfig+0xae>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1b      	ldr	r2, [pc, #108]	; (800677c <TIM_OC3_SetConfig+0x100>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_OC3_SetConfig+0xae>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1a      	ldr	r2, [pc, #104]	; (8006780 <TIM_OC3_SetConfig+0x104>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_OC3_SetConfig+0xae>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a19      	ldr	r2, [pc, #100]	; (8006784 <TIM_OC3_SetConfig+0x108>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_OC3_SetConfig+0xae>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <TIM_OC3_SetConfig+0x10c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d113      	bne.n	8006752 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40013400 	.word	0x40013400
 8006780:	40014000 	.word	0x40014000
 8006784:	40014400 	.word	0x40014400
 8006788:	40014800 	.word	0x40014800

0800678c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	031b      	lsls	r3, r3, #12
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a18      	ldr	r2, [pc, #96]	; (800684c <TIM_OC4_SetConfig+0xc0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_OC4_SetConfig+0x84>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a17      	ldr	r2, [pc, #92]	; (8006850 <TIM_OC4_SetConfig+0xc4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00b      	beq.n	8006810 <TIM_OC4_SetConfig+0x84>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a16      	ldr	r2, [pc, #88]	; (8006854 <TIM_OC4_SetConfig+0xc8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_OC4_SetConfig+0x84>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a15      	ldr	r2, [pc, #84]	; (8006858 <TIM_OC4_SetConfig+0xcc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_OC4_SetConfig+0x84>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a14      	ldr	r2, [pc, #80]	; (800685c <TIM_OC4_SetConfig+0xd0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d109      	bne.n	8006824 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	019b      	lsls	r3, r3, #6
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40013400 	.word	0x40013400
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400
 800685c:	40014800 	.word	0x40014800

08006860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a17      	ldr	r2, [pc, #92]	; (8006914 <TIM_OC5_SetConfig+0xb4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00f      	beq.n	80068da <TIM_OC5_SetConfig+0x7a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a16      	ldr	r2, [pc, #88]	; (8006918 <TIM_OC5_SetConfig+0xb8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00b      	beq.n	80068da <TIM_OC5_SetConfig+0x7a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a15      	ldr	r2, [pc, #84]	; (800691c <TIM_OC5_SetConfig+0xbc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <TIM_OC5_SetConfig+0x7a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <TIM_OC5_SetConfig+0xc0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC5_SetConfig+0x7a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a13      	ldr	r2, [pc, #76]	; (8006924 <TIM_OC5_SetConfig+0xc4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d109      	bne.n	80068ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800696e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	051b      	lsls	r3, r3, #20
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <TIM_OC6_SetConfig+0xb8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00f      	beq.n	80069a4 <TIM_OC6_SetConfig+0x7c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <TIM_OC6_SetConfig+0xbc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00b      	beq.n	80069a4 <TIM_OC6_SetConfig+0x7c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <TIM_OC6_SetConfig+0xc0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <TIM_OC6_SetConfig+0x7c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a15      	ldr	r2, [pc, #84]	; (80069ec <TIM_OC6_SetConfig+0xc4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_OC6_SetConfig+0x7c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <TIM_OC6_SetConfig+0xc8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d109      	bne.n	80069b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	029b      	lsls	r3, r3, #10
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800

080069f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 030a 	bic.w	r3, r3, #10
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b087      	sub	sp, #28
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f023 0210 	bic.w	r2, r3, #16
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f043 0307 	orr.w	r3, r3, #7
 8006ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	609a      	str	r2, [r3, #8]
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	609a      	str	r2, [r3, #8]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1a      	ldr	r2, [r3, #32]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	401a      	ands	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1a      	ldr	r2, [r3, #32]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	431a      	orrs	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e068      	b.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2e      	ldr	r2, [pc, #184]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d108      	bne.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01d      	beq.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfe:	d018      	beq.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1b      	ldr	r2, [pc, #108]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1a      	ldr	r2, [pc, #104]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00e      	beq.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a18      	ldr	r2, [pc, #96]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d009      	beq.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a13      	ldr	r2, [pc, #76]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d004      	beq.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d10c      	bne.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40012c00 	.word	0x40012c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40014000 	.word	0x40014000

08006c84 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af04      	add	r7, sp, #16
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca2:	9302      	str	r3, [sp, #8]
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	1dfb      	adds	r3, r7, #7
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2301      	movs	r3, #1
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2178      	movs	r1, #120	; 0x78
 8006cb2:	4803      	ldr	r0, [pc, #12]	; (8006cc0 <ssd1306_WriteCommand+0x2c>)
 8006cb4:	f7fd f8cc 	bl	8003e50 <HAL_I2C_Mem_Write>
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000940 	.word	0x20000940

08006cc4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af04      	add	r7, sp, #16
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	9202      	str	r2, [sp, #8]
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	2301      	movs	r3, #1
 8006ce0:	2240      	movs	r2, #64	; 0x40
 8006ce2:	2178      	movs	r1, #120	; 0x78
 8006ce4:	4803      	ldr	r0, [pc, #12]	; (8006cf4 <ssd1306_WriteData+0x30>)
 8006ce6:	f7fd f8b3 	bl	8003e50 <HAL_I2C_Mem_Write>
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000940 	.word	0x20000940

08006cf8 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8006cfc:	f7ff ffc2 	bl	8006c84 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006d00:	2064      	movs	r0, #100	; 0x64
 8006d02:	f7fc fa17 	bl	8003134 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8006d06:	20ae      	movs	r0, #174	; 0xae
 8006d08:	f7ff ffc4 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8006d0c:	2020      	movs	r0, #32
 8006d0e:	f7ff ffc1 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8006d12:	2010      	movs	r0, #16
 8006d14:	f7ff ffbe 	bl	8006c94 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006d18:	20b0      	movs	r0, #176	; 0xb0
 8006d1a:	f7ff ffbb 	bl	8006c94 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006d1e:	20c8      	movs	r0, #200	; 0xc8
 8006d20:	f7ff ffb8 	bl	8006c94 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006d24:	2000      	movs	r0, #0
 8006d26:	f7ff ffb5 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006d2a:	2010      	movs	r0, #16
 8006d2c:	f7ff ffb2 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006d30:	2040      	movs	r0, #64	; 0x40
 8006d32:	f7ff ffaf 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8006d36:	2081      	movs	r0, #129	; 0x81
 8006d38:	f7ff ffac 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8006d3c:	20ff      	movs	r0, #255	; 0xff
 8006d3e:	f7ff ffa9 	bl	8006c94 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006d42:	20a1      	movs	r0, #161	; 0xa1
 8006d44:	f7ff ffa6 	bl	8006c94 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006d48:	20a6      	movs	r0, #166	; 0xa6
 8006d4a:	f7ff ffa3 	bl	8006c94 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006d4e:	20a8      	movs	r0, #168	; 0xa8
 8006d50:	f7ff ffa0 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8006d54:	203f      	movs	r0, #63	; 0x3f
 8006d56:	f7ff ff9d 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006d5a:	20a4      	movs	r0, #164	; 0xa4
 8006d5c:	f7ff ff9a 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006d60:	20d3      	movs	r0, #211	; 0xd3
 8006d62:	f7ff ff97 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006d66:	2000      	movs	r0, #0
 8006d68:	f7ff ff94 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006d6c:	20d5      	movs	r0, #213	; 0xd5
 8006d6e:	f7ff ff91 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006d72:	20f0      	movs	r0, #240	; 0xf0
 8006d74:	f7ff ff8e 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006d78:	20d9      	movs	r0, #217	; 0xd9
 8006d7a:	f7ff ff8b 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006d7e:	2022      	movs	r0, #34	; 0x22
 8006d80:	f7ff ff88 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006d84:	20da      	movs	r0, #218	; 0xda
 8006d86:	f7ff ff85 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8006d8a:	2012      	movs	r0, #18
 8006d8c:	f7ff ff82 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006d90:	20db      	movs	r0, #219	; 0xdb
 8006d92:	f7ff ff7f 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006d96:	2020      	movs	r0, #32
 8006d98:	f7ff ff7c 	bl	8006c94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006d9c:	208d      	movs	r0, #141	; 0x8d
 8006d9e:	f7ff ff79 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006da2:	2014      	movs	r0, #20
 8006da4:	f7ff ff76 	bl	8006c94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8006da8:	20af      	movs	r0, #175	; 0xaf
 8006daa:	f7ff ff73 	bl	8006c94 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8006dae:	2000      	movs	r0, #0
 8006db0:	f000 f810 	bl	8006dd4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006db4:	f000 f830 	bl	8006e18 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006db8:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <ssd1306_Init+0xd8>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006dbe:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <ssd1306_Init+0xd8>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006dc4:	4b02      	ldr	r3, [pc, #8]	; (8006dd0 <ssd1306_Init+0xd8>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	715a      	strb	r2, [r3, #5]
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000914 	.word	0x20000914

08006dd4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e00d      	b.n	8006e00 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <ssd1306_Fill+0x1a>
 8006dea:	2100      	movs	r1, #0
 8006dec:	e000      	b.n	8006df0 <ssd1306_Fill+0x1c>
 8006dee:	21ff      	movs	r1, #255	; 0xff
 8006df0:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <ssd1306_Fill+0x40>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	460a      	mov	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e06:	d3ed      	bcc.n	8006de4 <ssd1306_Fill+0x10>
    }
}
 8006e08:	bf00      	nop
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20000514 	.word	0x20000514

08006e18 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8006e1e:	2300      	movs	r3, #0
 8006e20:	71fb      	strb	r3, [r7, #7]
 8006e22:	e016      	b.n	8006e52 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	3b50      	subs	r3, #80	; 0x50
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff ff32 	bl	8006c94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8006e30:	2000      	movs	r0, #0
 8006e32:	f7ff ff2f 	bl	8006c94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8006e36:	2010      	movs	r0, #16
 8006e38:	f7ff ff2c 	bl	8006c94 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	01db      	lsls	r3, r3, #7
 8006e40:	4a07      	ldr	r2, [pc, #28]	; (8006e60 <ssd1306_UpdateScreen+0x48>)
 8006e42:	4413      	add	r3, r2
 8006e44:	2180      	movs	r1, #128	; 0x80
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff ff3c 	bl	8006cc4 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	71fb      	strb	r3, [r7, #7]
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b07      	cmp	r3, #7
 8006e56:	d9e5      	bls.n	8006e24 <ssd1306_UpdateScreen+0xc>
    }
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000514 	.word	0x20000514

08006e64 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	71bb      	strb	r3, [r7, #6]
 8006e72:	4613      	mov	r3, r2
 8006e74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	db48      	blt.n	8006f10 <ssd1306_DrawPixel+0xac>
 8006e7e:	79bb      	ldrb	r3, [r7, #6]
 8006e80:	2b3f      	cmp	r3, #63	; 0x3f
 8006e82:	d845      	bhi.n	8006f10 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <ssd1306_DrawPixel+0xb8>)
 8006e86:	791b      	ldrb	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8006e8c:	797b      	ldrb	r3, [r7, #5]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8006e9a:	797b      	ldrb	r3, [r7, #5]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d11a      	bne.n	8006ed6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006ea0:	79fa      	ldrb	r2, [r7, #7]
 8006ea2:	79bb      	ldrb	r3, [r7, #6]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	b2d8      	uxtb	r0, r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	01db      	lsls	r3, r3, #7
 8006eac:	4413      	add	r3, r2
 8006eae:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <ssd1306_DrawPixel+0xbc>)
 8006eb0:	5cd3      	ldrb	r3, [r2, r3]
 8006eb2:	b25a      	sxtb	r2, r3
 8006eb4:	79bb      	ldrb	r3, [r7, #6]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2101      	movs	r1, #1
 8006ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec0:	b25b      	sxtb	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b259      	sxtb	r1, r3
 8006ec6:	79fa      	ldrb	r2, [r7, #7]
 8006ec8:	4603      	mov	r3, r0
 8006eca:	01db      	lsls	r3, r3, #7
 8006ecc:	4413      	add	r3, r2
 8006ece:	b2c9      	uxtb	r1, r1
 8006ed0:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <ssd1306_DrawPixel+0xbc>)
 8006ed2:	54d1      	strb	r1, [r2, r3]
 8006ed4:	e01d      	b.n	8006f12 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006ed6:	79fa      	ldrb	r2, [r7, #7]
 8006ed8:	79bb      	ldrb	r3, [r7, #6]
 8006eda:	08db      	lsrs	r3, r3, #3
 8006edc:	b2d8      	uxtb	r0, r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	01db      	lsls	r3, r3, #7
 8006ee2:	4413      	add	r3, r2
 8006ee4:	4a0e      	ldr	r2, [pc, #56]	; (8006f20 <ssd1306_DrawPixel+0xbc>)
 8006ee6:	5cd3      	ldrb	r3, [r2, r3]
 8006ee8:	b25a      	sxtb	r2, r3
 8006eea:	79bb      	ldrb	r3, [r7, #6]
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	b25b      	sxtb	r3, r3
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	b25b      	sxtb	r3, r3
 8006efc:	4013      	ands	r3, r2
 8006efe:	b259      	sxtb	r1, r3
 8006f00:	79fa      	ldrb	r2, [r7, #7]
 8006f02:	4603      	mov	r3, r0
 8006f04:	01db      	lsls	r3, r3, #7
 8006f06:	4413      	add	r3, r2
 8006f08:	b2c9      	uxtb	r1, r1
 8006f0a:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <ssd1306_DrawPixel+0xbc>)
 8006f0c:	54d1      	strb	r1, [r2, r3]
 8006f0e:	e000      	b.n	8006f12 <ssd1306_DrawPixel+0xae>
        return;
 8006f10:	bf00      	nop
    }
}
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	20000914 	.word	0x20000914
 8006f20:	20000514 	.word	0x20000514

08006f24 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006f24:	b590      	push	{r4, r7, lr}
 8006f26:	b089      	sub	sp, #36	; 0x24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	1d38      	adds	r0, r7, #4
 8006f2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006f32:	461a      	mov	r2, r3
 8006f34:	4623      	mov	r3, r4
 8006f36:	73fb      	strb	r3, [r7, #15]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006f3c:	4b38      	ldr	r3, [pc, #224]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	793b      	ldrb	r3, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	2b7f      	cmp	r3, #127	; 0x7f
 8006f48:	dc06      	bgt.n	8006f58 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8006f4a:	4b35      	ldr	r3, [pc, #212]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8006f4c:	885b      	ldrh	r3, [r3, #2]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	797b      	ldrb	r3, [r7, #5]
 8006f52:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006f54:	2b3f      	cmp	r3, #63	; 0x3f
 8006f56:	dd01      	ble.n	8006f5c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e05d      	b.n	8007018 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	e04c      	b.n	8006ffc <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	3b20      	subs	r3, #32
 8006f68:	7979      	ldrb	r1, [r7, #5]
 8006f6a:	fb01 f303 	mul.w	r3, r1, r3
 8006f6e:	4619      	mov	r1, r3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	440b      	add	r3, r1
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	e034      	b.n	8006fec <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d012      	beq.n	8006fb8 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006f92:	4b23      	ldr	r3, [pc, #140]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	b2d8      	uxtb	r0, r3
 8006fa0:	4b1f      	ldr	r3, [pc, #124]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8006fa2:	885b      	ldrh	r3, [r3, #2]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	4413      	add	r3, r2
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	7bba      	ldrb	r2, [r7, #14]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f7ff ff57 	bl	8006e64 <ssd1306_DrawPixel>
 8006fb6:	e016      	b.n	8006fe6 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006fb8:	4b19      	ldr	r3, [pc, #100]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	b2d8      	uxtb	r0, r3
 8006fc6:	4b16      	ldr	r3, [pc, #88]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	b2d9      	uxtb	r1, r3
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f7ff ff3f 	bl	8006e64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	793b      	ldrb	r3, [r7, #4]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d3c5      	bcc.n	8006f82 <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	797b      	ldrb	r3, [r7, #5]
 8006ffe:	461a      	mov	r2, r3
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4293      	cmp	r3, r2
 8007004:	d3ad      	bcc.n	8006f62 <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8007008:	881a      	ldrh	r2, [r3, #0]
 800700a:	793b      	ldrb	r3, [r7, #4]
 800700c:	b29b      	uxth	r3, r3
 800700e:	4413      	add	r3, r2
 8007010:	b29a      	uxth	r2, r3
 8007012:	4b03      	ldr	r3, [pc, #12]	; (8007020 <ssd1306_WriteChar+0xfc>)
 8007014:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3724      	adds	r7, #36	; 0x24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd90      	pop	{r4, r7, pc}
 8007020:	20000914 	.word	0x20000914

08007024 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	1d38      	adds	r0, r7, #4
 800702e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007032:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8007034:	e012      	b.n	800705c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7818      	ldrb	r0, [r3, #0]
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	1d3a      	adds	r2, r7, #4
 800703e:	ca06      	ldmia	r2, {r1, r2}
 8007040:	f7ff ff70 	bl	8006f24 <ssd1306_WriteChar>
 8007044:	4603      	mov	r3, r0
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d002      	beq.n	8007056 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	e008      	b.n	8007068 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e8      	bne.n	8007036 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	781b      	ldrb	r3, [r3, #0]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	460a      	mov	r2, r1
 800707a:	71fb      	strb	r3, [r7, #7]
 800707c:	4613      	mov	r3, r2
 800707e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	b29a      	uxth	r2, r3
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <ssd1306_SetCursor+0x2c>)
 8007086:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007088:	79bb      	ldrb	r3, [r7, #6]
 800708a:	b29a      	uxth	r2, r3
 800708c:	4b03      	ldr	r3, [pc, #12]	; (800709c <ssd1306_SetCursor+0x2c>)
 800708e:	805a      	strh	r2, [r3, #2]
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20000914 	.word	0x20000914

080070a0 <__errno>:
 80070a0:	4b01      	ldr	r3, [pc, #4]	; (80070a8 <__errno+0x8>)
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	200002f8 	.word	0x200002f8

080070ac <__libc_init_array>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4e0d      	ldr	r6, [pc, #52]	; (80070e4 <__libc_init_array+0x38>)
 80070b0:	4c0d      	ldr	r4, [pc, #52]	; (80070e8 <__libc_init_array+0x3c>)
 80070b2:	1ba4      	subs	r4, r4, r6
 80070b4:	10a4      	asrs	r4, r4, #2
 80070b6:	2500      	movs	r5, #0
 80070b8:	42a5      	cmp	r5, r4
 80070ba:	d109      	bne.n	80070d0 <__libc_init_array+0x24>
 80070bc:	4e0b      	ldr	r6, [pc, #44]	; (80070ec <__libc_init_array+0x40>)
 80070be:	4c0c      	ldr	r4, [pc, #48]	; (80070f0 <__libc_init_array+0x44>)
 80070c0:	f002 f8bc 	bl	800923c <_init>
 80070c4:	1ba4      	subs	r4, r4, r6
 80070c6:	10a4      	asrs	r4, r4, #2
 80070c8:	2500      	movs	r5, #0
 80070ca:	42a5      	cmp	r5, r4
 80070cc:	d105      	bne.n	80070da <__libc_init_array+0x2e>
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070d4:	4798      	blx	r3
 80070d6:	3501      	adds	r5, #1
 80070d8:	e7ee      	b.n	80070b8 <__libc_init_array+0xc>
 80070da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070de:	4798      	blx	r3
 80070e0:	3501      	adds	r5, #1
 80070e2:	e7f2      	b.n	80070ca <__libc_init_array+0x1e>
 80070e4:	0800c0c8 	.word	0x0800c0c8
 80070e8:	0800c0c8 	.word	0x0800c0c8
 80070ec:	0800c0c8 	.word	0x0800c0c8
 80070f0:	0800c0cc 	.word	0x0800c0cc

080070f4 <memmove>:
 80070f4:	4288      	cmp	r0, r1
 80070f6:	b510      	push	{r4, lr}
 80070f8:	eb01 0302 	add.w	r3, r1, r2
 80070fc:	d807      	bhi.n	800710e <memmove+0x1a>
 80070fe:	1e42      	subs	r2, r0, #1
 8007100:	4299      	cmp	r1, r3
 8007102:	d00a      	beq.n	800711a <memmove+0x26>
 8007104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007108:	f802 4f01 	strb.w	r4, [r2, #1]!
 800710c:	e7f8      	b.n	8007100 <memmove+0xc>
 800710e:	4283      	cmp	r3, r0
 8007110:	d9f5      	bls.n	80070fe <memmove+0xa>
 8007112:	1881      	adds	r1, r0, r2
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	42d3      	cmn	r3, r2
 8007118:	d100      	bne.n	800711c <memmove+0x28>
 800711a:	bd10      	pop	{r4, pc}
 800711c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007120:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007124:	e7f7      	b.n	8007116 <memmove+0x22>

08007126 <memset>:
 8007126:	4402      	add	r2, r0
 8007128:	4603      	mov	r3, r0
 800712a:	4293      	cmp	r3, r2
 800712c:	d100      	bne.n	8007130 <memset+0xa>
 800712e:	4770      	bx	lr
 8007130:	f803 1b01 	strb.w	r1, [r3], #1
 8007134:	e7f9      	b.n	800712a <memset+0x4>

08007136 <__cvt>:
 8007136:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800713a:	ec55 4b10 	vmov	r4, r5, d0
 800713e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007140:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007144:	2d00      	cmp	r5, #0
 8007146:	460e      	mov	r6, r1
 8007148:	4691      	mov	r9, r2
 800714a:	4619      	mov	r1, r3
 800714c:	bfb8      	it	lt
 800714e:	4622      	movlt	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	f027 0720 	bic.w	r7, r7, #32
 8007156:	bfbb      	ittet	lt
 8007158:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800715c:	461d      	movlt	r5, r3
 800715e:	2300      	movge	r3, #0
 8007160:	232d      	movlt	r3, #45	; 0x2d
 8007162:	bfb8      	it	lt
 8007164:	4614      	movlt	r4, r2
 8007166:	2f46      	cmp	r7, #70	; 0x46
 8007168:	700b      	strb	r3, [r1, #0]
 800716a:	d004      	beq.n	8007176 <__cvt+0x40>
 800716c:	2f45      	cmp	r7, #69	; 0x45
 800716e:	d100      	bne.n	8007172 <__cvt+0x3c>
 8007170:	3601      	adds	r6, #1
 8007172:	2102      	movs	r1, #2
 8007174:	e000      	b.n	8007178 <__cvt+0x42>
 8007176:	2103      	movs	r1, #3
 8007178:	ab03      	add	r3, sp, #12
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	ab02      	add	r3, sp, #8
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4632      	mov	r2, r6
 8007182:	4653      	mov	r3, sl
 8007184:	ec45 4b10 	vmov	d0, r4, r5
 8007188:	f000 fcf2 	bl	8007b70 <_dtoa_r>
 800718c:	2f47      	cmp	r7, #71	; 0x47
 800718e:	4680      	mov	r8, r0
 8007190:	d102      	bne.n	8007198 <__cvt+0x62>
 8007192:	f019 0f01 	tst.w	r9, #1
 8007196:	d026      	beq.n	80071e6 <__cvt+0xb0>
 8007198:	2f46      	cmp	r7, #70	; 0x46
 800719a:	eb08 0906 	add.w	r9, r8, r6
 800719e:	d111      	bne.n	80071c4 <__cvt+0x8e>
 80071a0:	f898 3000 	ldrb.w	r3, [r8]
 80071a4:	2b30      	cmp	r3, #48	; 0x30
 80071a6:	d10a      	bne.n	80071be <__cvt+0x88>
 80071a8:	2200      	movs	r2, #0
 80071aa:	2300      	movs	r3, #0
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80071b4:	b918      	cbnz	r0, 80071be <__cvt+0x88>
 80071b6:	f1c6 0601 	rsb	r6, r6, #1
 80071ba:	f8ca 6000 	str.w	r6, [sl]
 80071be:	f8da 3000 	ldr.w	r3, [sl]
 80071c2:	4499      	add	r9, r3
 80071c4:	2200      	movs	r2, #0
 80071c6:	2300      	movs	r3, #0
 80071c8:	4620      	mov	r0, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	f7f9 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80071d0:	b938      	cbnz	r0, 80071e2 <__cvt+0xac>
 80071d2:	2230      	movs	r2, #48	; 0x30
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	454b      	cmp	r3, r9
 80071d8:	d205      	bcs.n	80071e6 <__cvt+0xb0>
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	9103      	str	r1, [sp, #12]
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e7f8      	b.n	80071d4 <__cvt+0x9e>
 80071e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ea:	eba3 0308 	sub.w	r3, r3, r8
 80071ee:	4640      	mov	r0, r8
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	b004      	add	sp, #16
 80071f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080071f8 <__exponent>:
 80071f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071fa:	2900      	cmp	r1, #0
 80071fc:	4604      	mov	r4, r0
 80071fe:	bfba      	itte	lt
 8007200:	4249      	neglt	r1, r1
 8007202:	232d      	movlt	r3, #45	; 0x2d
 8007204:	232b      	movge	r3, #43	; 0x2b
 8007206:	2909      	cmp	r1, #9
 8007208:	f804 2b02 	strb.w	r2, [r4], #2
 800720c:	7043      	strb	r3, [r0, #1]
 800720e:	dd20      	ble.n	8007252 <__exponent+0x5a>
 8007210:	f10d 0307 	add.w	r3, sp, #7
 8007214:	461f      	mov	r7, r3
 8007216:	260a      	movs	r6, #10
 8007218:	fb91 f5f6 	sdiv	r5, r1, r6
 800721c:	fb06 1115 	mls	r1, r6, r5, r1
 8007220:	3130      	adds	r1, #48	; 0x30
 8007222:	2d09      	cmp	r5, #9
 8007224:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007228:	f103 32ff 	add.w	r2, r3, #4294967295
 800722c:	4629      	mov	r1, r5
 800722e:	dc09      	bgt.n	8007244 <__exponent+0x4c>
 8007230:	3130      	adds	r1, #48	; 0x30
 8007232:	3b02      	subs	r3, #2
 8007234:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007238:	42bb      	cmp	r3, r7
 800723a:	4622      	mov	r2, r4
 800723c:	d304      	bcc.n	8007248 <__exponent+0x50>
 800723e:	1a10      	subs	r0, r2, r0
 8007240:	b003      	add	sp, #12
 8007242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007244:	4613      	mov	r3, r2
 8007246:	e7e7      	b.n	8007218 <__exponent+0x20>
 8007248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800724c:	f804 2b01 	strb.w	r2, [r4], #1
 8007250:	e7f2      	b.n	8007238 <__exponent+0x40>
 8007252:	2330      	movs	r3, #48	; 0x30
 8007254:	4419      	add	r1, r3
 8007256:	7083      	strb	r3, [r0, #2]
 8007258:	1d02      	adds	r2, r0, #4
 800725a:	70c1      	strb	r1, [r0, #3]
 800725c:	e7ef      	b.n	800723e <__exponent+0x46>
	...

08007260 <_printf_float>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	b08d      	sub	sp, #52	; 0x34
 8007266:	460c      	mov	r4, r1
 8007268:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800726c:	4616      	mov	r6, r2
 800726e:	461f      	mov	r7, r3
 8007270:	4605      	mov	r5, r0
 8007272:	f001 fa35 	bl	80086e0 <_localeconv_r>
 8007276:	6803      	ldr	r3, [r0, #0]
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	4618      	mov	r0, r3
 800727c:	f7f8 ffa8 	bl	80001d0 <strlen>
 8007280:	2300      	movs	r3, #0
 8007282:	930a      	str	r3, [sp, #40]	; 0x28
 8007284:	f8d8 3000 	ldr.w	r3, [r8]
 8007288:	9005      	str	r0, [sp, #20]
 800728a:	3307      	adds	r3, #7
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	f103 0208 	add.w	r2, r3, #8
 8007294:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007298:	f8d4 b000 	ldr.w	fp, [r4]
 800729c:	f8c8 2000 	str.w	r2, [r8]
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072b0:	9307      	str	r3, [sp, #28]
 80072b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80072b6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ba:	4ba7      	ldr	r3, [pc, #668]	; (8007558 <_printf_float+0x2f8>)
 80072bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072c0:	f7f9 fc34 	bl	8000b2c <__aeabi_dcmpun>
 80072c4:	bb70      	cbnz	r0, 8007324 <_printf_float+0xc4>
 80072c6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ca:	4ba3      	ldr	r3, [pc, #652]	; (8007558 <_printf_float+0x2f8>)
 80072cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072d0:	f7f9 fc0e 	bl	8000af0 <__aeabi_dcmple>
 80072d4:	bb30      	cbnz	r0, 8007324 <_printf_float+0xc4>
 80072d6:	2200      	movs	r2, #0
 80072d8:	2300      	movs	r3, #0
 80072da:	4640      	mov	r0, r8
 80072dc:	4649      	mov	r1, r9
 80072de:	f7f9 fbfd 	bl	8000adc <__aeabi_dcmplt>
 80072e2:	b110      	cbz	r0, 80072ea <_printf_float+0x8a>
 80072e4:	232d      	movs	r3, #45	; 0x2d
 80072e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ea:	4a9c      	ldr	r2, [pc, #624]	; (800755c <_printf_float+0x2fc>)
 80072ec:	4b9c      	ldr	r3, [pc, #624]	; (8007560 <_printf_float+0x300>)
 80072ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072f2:	bf8c      	ite	hi
 80072f4:	4690      	movhi	r8, r2
 80072f6:	4698      	movls	r8, r3
 80072f8:	2303      	movs	r3, #3
 80072fa:	f02b 0204 	bic.w	r2, fp, #4
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	6022      	str	r2, [r4, #0]
 8007302:	f04f 0900 	mov.w	r9, #0
 8007306:	9700      	str	r7, [sp, #0]
 8007308:	4633      	mov	r3, r6
 800730a:	aa0b      	add	r2, sp, #44	; 0x2c
 800730c:	4621      	mov	r1, r4
 800730e:	4628      	mov	r0, r5
 8007310:	f000 f9e6 	bl	80076e0 <_printf_common>
 8007314:	3001      	adds	r0, #1
 8007316:	f040 808d 	bne.w	8007434 <_printf_float+0x1d4>
 800731a:	f04f 30ff 	mov.w	r0, #4294967295
 800731e:	b00d      	add	sp, #52	; 0x34
 8007320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007324:	4642      	mov	r2, r8
 8007326:	464b      	mov	r3, r9
 8007328:	4640      	mov	r0, r8
 800732a:	4649      	mov	r1, r9
 800732c:	f7f9 fbfe 	bl	8000b2c <__aeabi_dcmpun>
 8007330:	b110      	cbz	r0, 8007338 <_printf_float+0xd8>
 8007332:	4a8c      	ldr	r2, [pc, #560]	; (8007564 <_printf_float+0x304>)
 8007334:	4b8c      	ldr	r3, [pc, #560]	; (8007568 <_printf_float+0x308>)
 8007336:	e7da      	b.n	80072ee <_printf_float+0x8e>
 8007338:	6861      	ldr	r1, [r4, #4]
 800733a:	1c4b      	adds	r3, r1, #1
 800733c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007340:	a80a      	add	r0, sp, #40	; 0x28
 8007342:	d13e      	bne.n	80073c2 <_printf_float+0x162>
 8007344:	2306      	movs	r3, #6
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	2300      	movs	r3, #0
 800734a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800734e:	ab09      	add	r3, sp, #36	; 0x24
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	ec49 8b10 	vmov	d0, r8, r9
 8007356:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800735a:	6022      	str	r2, [r4, #0]
 800735c:	f8cd a004 	str.w	sl, [sp, #4]
 8007360:	6861      	ldr	r1, [r4, #4]
 8007362:	4628      	mov	r0, r5
 8007364:	f7ff fee7 	bl	8007136 <__cvt>
 8007368:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800736c:	2b47      	cmp	r3, #71	; 0x47
 800736e:	4680      	mov	r8, r0
 8007370:	d109      	bne.n	8007386 <_printf_float+0x126>
 8007372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007374:	1cd8      	adds	r0, r3, #3
 8007376:	db02      	blt.n	800737e <_printf_float+0x11e>
 8007378:	6862      	ldr	r2, [r4, #4]
 800737a:	4293      	cmp	r3, r2
 800737c:	dd47      	ble.n	800740e <_printf_float+0x1ae>
 800737e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007382:	fa5f fa8a 	uxtb.w	sl, sl
 8007386:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800738a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800738c:	d824      	bhi.n	80073d8 <_printf_float+0x178>
 800738e:	3901      	subs	r1, #1
 8007390:	4652      	mov	r2, sl
 8007392:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007396:	9109      	str	r1, [sp, #36]	; 0x24
 8007398:	f7ff ff2e 	bl	80071f8 <__exponent>
 800739c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800739e:	1813      	adds	r3, r2, r0
 80073a0:	2a01      	cmp	r2, #1
 80073a2:	4681      	mov	r9, r0
 80073a4:	6123      	str	r3, [r4, #16]
 80073a6:	dc02      	bgt.n	80073ae <_printf_float+0x14e>
 80073a8:	6822      	ldr	r2, [r4, #0]
 80073aa:	07d1      	lsls	r1, r2, #31
 80073ac:	d501      	bpl.n	80073b2 <_printf_float+0x152>
 80073ae:	3301      	adds	r3, #1
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0a5      	beq.n	8007306 <_printf_float+0xa6>
 80073ba:	232d      	movs	r3, #45	; 0x2d
 80073bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c0:	e7a1      	b.n	8007306 <_printf_float+0xa6>
 80073c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80073c6:	f000 8177 	beq.w	80076b8 <_printf_float+0x458>
 80073ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80073ce:	d1bb      	bne.n	8007348 <_printf_float+0xe8>
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d1b9      	bne.n	8007348 <_printf_float+0xe8>
 80073d4:	2301      	movs	r3, #1
 80073d6:	e7b6      	b.n	8007346 <_printf_float+0xe6>
 80073d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80073dc:	d119      	bne.n	8007412 <_printf_float+0x1b2>
 80073de:	2900      	cmp	r1, #0
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	dd0c      	ble.n	80073fe <_printf_float+0x19e>
 80073e4:	6121      	str	r1, [r4, #16]
 80073e6:	b913      	cbnz	r3, 80073ee <_printf_float+0x18e>
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	07d2      	lsls	r2, r2, #31
 80073ec:	d502      	bpl.n	80073f4 <_printf_float+0x194>
 80073ee:	3301      	adds	r3, #1
 80073f0:	440b      	add	r3, r1
 80073f2:	6123      	str	r3, [r4, #16]
 80073f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80073f8:	f04f 0900 	mov.w	r9, #0
 80073fc:	e7d9      	b.n	80073b2 <_printf_float+0x152>
 80073fe:	b913      	cbnz	r3, 8007406 <_printf_float+0x1a6>
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	07d0      	lsls	r0, r2, #31
 8007404:	d501      	bpl.n	800740a <_printf_float+0x1aa>
 8007406:	3302      	adds	r3, #2
 8007408:	e7f3      	b.n	80073f2 <_printf_float+0x192>
 800740a:	2301      	movs	r3, #1
 800740c:	e7f1      	b.n	80073f2 <_printf_float+0x192>
 800740e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007412:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007416:	4293      	cmp	r3, r2
 8007418:	db05      	blt.n	8007426 <_printf_float+0x1c6>
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	6123      	str	r3, [r4, #16]
 800741e:	07d1      	lsls	r1, r2, #31
 8007420:	d5e8      	bpl.n	80073f4 <_printf_float+0x194>
 8007422:	3301      	adds	r3, #1
 8007424:	e7e5      	b.n	80073f2 <_printf_float+0x192>
 8007426:	2b00      	cmp	r3, #0
 8007428:	bfd4      	ite	le
 800742a:	f1c3 0302 	rsble	r3, r3, #2
 800742e:	2301      	movgt	r3, #1
 8007430:	4413      	add	r3, r2
 8007432:	e7de      	b.n	80073f2 <_printf_float+0x192>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	055a      	lsls	r2, r3, #21
 8007438:	d407      	bmi.n	800744a <_printf_float+0x1ea>
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	4642      	mov	r2, r8
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d12b      	bne.n	80074a0 <_printf_float+0x240>
 8007448:	e767      	b.n	800731a <_printf_float+0xba>
 800744a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800744e:	f240 80dc 	bls.w	800760a <_printf_float+0x3aa>
 8007452:	2200      	movs	r2, #0
 8007454:	2300      	movs	r3, #0
 8007456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800745a:	f7f9 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800745e:	2800      	cmp	r0, #0
 8007460:	d033      	beq.n	80074ca <_printf_float+0x26a>
 8007462:	2301      	movs	r3, #1
 8007464:	4a41      	ldr	r2, [pc, #260]	; (800756c <_printf_float+0x30c>)
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	47b8      	blx	r7
 800746c:	3001      	adds	r0, #1
 800746e:	f43f af54 	beq.w	800731a <_printf_float+0xba>
 8007472:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007476:	429a      	cmp	r2, r3
 8007478:	db02      	blt.n	8007480 <_printf_float+0x220>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	07d8      	lsls	r0, r3, #31
 800747e:	d50f      	bpl.n	80074a0 <_printf_float+0x240>
 8007480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007484:	4631      	mov	r1, r6
 8007486:	4628      	mov	r0, r5
 8007488:	47b8      	blx	r7
 800748a:	3001      	adds	r0, #1
 800748c:	f43f af45 	beq.w	800731a <_printf_float+0xba>
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	f104 091a 	add.w	r9, r4, #26
 8007498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749a:	3b01      	subs	r3, #1
 800749c:	4543      	cmp	r3, r8
 800749e:	dc09      	bgt.n	80074b4 <_printf_float+0x254>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	079b      	lsls	r3, r3, #30
 80074a4:	f100 8103 	bmi.w	80076ae <_printf_float+0x44e>
 80074a8:	68e0      	ldr	r0, [r4, #12]
 80074aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ac:	4298      	cmp	r0, r3
 80074ae:	bfb8      	it	lt
 80074b0:	4618      	movlt	r0, r3
 80074b2:	e734      	b.n	800731e <_printf_float+0xbe>
 80074b4:	2301      	movs	r3, #1
 80074b6:	464a      	mov	r2, r9
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	f43f af2b 	beq.w	800731a <_printf_float+0xba>
 80074c4:	f108 0801 	add.w	r8, r8, #1
 80074c8:	e7e6      	b.n	8007498 <_printf_float+0x238>
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc2b      	bgt.n	8007528 <_printf_float+0x2c8>
 80074d0:	2301      	movs	r3, #1
 80074d2:	4a26      	ldr	r2, [pc, #152]	; (800756c <_printf_float+0x30c>)
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	f43f af1d 	beq.w	800731a <_printf_float+0xba>
 80074e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e2:	b923      	cbnz	r3, 80074ee <_printf_float+0x28e>
 80074e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e6:	b913      	cbnz	r3, 80074ee <_printf_float+0x28e>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	07d9      	lsls	r1, r3, #31
 80074ec:	d5d8      	bpl.n	80074a0 <_printf_float+0x240>
 80074ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	f43f af0e 	beq.w	800731a <_printf_float+0xba>
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	f104 0a1a 	add.w	sl, r4, #26
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	425b      	negs	r3, r3
 800750a:	454b      	cmp	r3, r9
 800750c:	dc01      	bgt.n	8007512 <_printf_float+0x2b2>
 800750e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007510:	e794      	b.n	800743c <_printf_float+0x1dc>
 8007512:	2301      	movs	r3, #1
 8007514:	4652      	mov	r2, sl
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f aefc 	beq.w	800731a <_printf_float+0xba>
 8007522:	f109 0901 	add.w	r9, r9, #1
 8007526:	e7ee      	b.n	8007506 <_printf_float+0x2a6>
 8007528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800752a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800752c:	429a      	cmp	r2, r3
 800752e:	bfa8      	it	ge
 8007530:	461a      	movge	r2, r3
 8007532:	2a00      	cmp	r2, #0
 8007534:	4691      	mov	r9, r2
 8007536:	dd07      	ble.n	8007548 <_printf_float+0x2e8>
 8007538:	4613      	mov	r3, r2
 800753a:	4631      	mov	r1, r6
 800753c:	4642      	mov	r2, r8
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	f43f aee9 	beq.w	800731a <_printf_float+0xba>
 8007548:	f104 031a 	add.w	r3, r4, #26
 800754c:	f04f 0b00 	mov.w	fp, #0
 8007550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007554:	9306      	str	r3, [sp, #24]
 8007556:	e015      	b.n	8007584 <_printf_float+0x324>
 8007558:	7fefffff 	.word	0x7fefffff
 800755c:	0800be6c 	.word	0x0800be6c
 8007560:	0800be68 	.word	0x0800be68
 8007564:	0800be74 	.word	0x0800be74
 8007568:	0800be70 	.word	0x0800be70
 800756c:	0800be78 	.word	0x0800be78
 8007570:	2301      	movs	r3, #1
 8007572:	9a06      	ldr	r2, [sp, #24]
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f aecd 	beq.w	800731a <_printf_float+0xba>
 8007580:	f10b 0b01 	add.w	fp, fp, #1
 8007584:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007588:	ebaa 0309 	sub.w	r3, sl, r9
 800758c:	455b      	cmp	r3, fp
 800758e:	dcef      	bgt.n	8007570 <_printf_float+0x310>
 8007590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007594:	429a      	cmp	r2, r3
 8007596:	44d0      	add	r8, sl
 8007598:	db15      	blt.n	80075c6 <_printf_float+0x366>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	07da      	lsls	r2, r3, #31
 800759e:	d412      	bmi.n	80075c6 <_printf_float+0x366>
 80075a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075a4:	eba3 020a 	sub.w	r2, r3, sl
 80075a8:	eba3 0a01 	sub.w	sl, r3, r1
 80075ac:	4592      	cmp	sl, r2
 80075ae:	bfa8      	it	ge
 80075b0:	4692      	movge	sl, r2
 80075b2:	f1ba 0f00 	cmp.w	sl, #0
 80075b6:	dc0e      	bgt.n	80075d6 <_printf_float+0x376>
 80075b8:	f04f 0800 	mov.w	r8, #0
 80075bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c0:	f104 091a 	add.w	r9, r4, #26
 80075c4:	e019      	b.n	80075fa <_printf_float+0x39a>
 80075c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	d1e5      	bne.n	80075a0 <_printf_float+0x340>
 80075d4:	e6a1      	b.n	800731a <_printf_float+0xba>
 80075d6:	4653      	mov	r3, sl
 80075d8:	4642      	mov	r2, r8
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	d1e9      	bne.n	80075b8 <_printf_float+0x358>
 80075e4:	e699      	b.n	800731a <_printf_float+0xba>
 80075e6:	2301      	movs	r3, #1
 80075e8:	464a      	mov	r2, r9
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	f43f ae92 	beq.w	800731a <_printf_float+0xba>
 80075f6:	f108 0801 	add.w	r8, r8, #1
 80075fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	eba3 030a 	sub.w	r3, r3, sl
 8007604:	4543      	cmp	r3, r8
 8007606:	dcee      	bgt.n	80075e6 <_printf_float+0x386>
 8007608:	e74a      	b.n	80074a0 <_printf_float+0x240>
 800760a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800760c:	2a01      	cmp	r2, #1
 800760e:	dc01      	bgt.n	8007614 <_printf_float+0x3b4>
 8007610:	07db      	lsls	r3, r3, #31
 8007612:	d53a      	bpl.n	800768a <_printf_float+0x42a>
 8007614:	2301      	movs	r3, #1
 8007616:	4642      	mov	r2, r8
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f ae7b 	beq.w	800731a <_printf_float+0xba>
 8007624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	47b8      	blx	r7
 800762e:	3001      	adds	r0, #1
 8007630:	f108 0801 	add.w	r8, r8, #1
 8007634:	f43f ae71 	beq.w	800731a <_printf_float+0xba>
 8007638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763a:	2200      	movs	r2, #0
 800763c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007644:	2300      	movs	r3, #0
 8007646:	f7f9 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800764a:	b9c8      	cbnz	r0, 8007680 <_printf_float+0x420>
 800764c:	4653      	mov	r3, sl
 800764e:	4642      	mov	r2, r8
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	d10e      	bne.n	8007678 <_printf_float+0x418>
 800765a:	e65e      	b.n	800731a <_printf_float+0xba>
 800765c:	2301      	movs	r3, #1
 800765e:	4652      	mov	r2, sl
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f ae57 	beq.w	800731a <_printf_float+0xba>
 800766c:	f108 0801 	add.w	r8, r8, #1
 8007670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007672:	3b01      	subs	r3, #1
 8007674:	4543      	cmp	r3, r8
 8007676:	dcf1      	bgt.n	800765c <_printf_float+0x3fc>
 8007678:	464b      	mov	r3, r9
 800767a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800767e:	e6de      	b.n	800743e <_printf_float+0x1de>
 8007680:	f04f 0800 	mov.w	r8, #0
 8007684:	f104 0a1a 	add.w	sl, r4, #26
 8007688:	e7f2      	b.n	8007670 <_printf_float+0x410>
 800768a:	2301      	movs	r3, #1
 800768c:	e7df      	b.n	800764e <_printf_float+0x3ee>
 800768e:	2301      	movs	r3, #1
 8007690:	464a      	mov	r2, r9
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f ae3e 	beq.w	800731a <_printf_float+0xba>
 800769e:	f108 0801 	add.w	r8, r8, #1
 80076a2:	68e3      	ldr	r3, [r4, #12]
 80076a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	4543      	cmp	r3, r8
 80076aa:	dcf0      	bgt.n	800768e <_printf_float+0x42e>
 80076ac:	e6fc      	b.n	80074a8 <_printf_float+0x248>
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	f104 0919 	add.w	r9, r4, #25
 80076b6:	e7f4      	b.n	80076a2 <_printf_float+0x442>
 80076b8:	2900      	cmp	r1, #0
 80076ba:	f43f ae8b 	beq.w	80073d4 <_printf_float+0x174>
 80076be:	2300      	movs	r3, #0
 80076c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80076c4:	ab09      	add	r3, sp, #36	; 0x24
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	ec49 8b10 	vmov	d0, r8, r9
 80076cc:	6022      	str	r2, [r4, #0]
 80076ce:	f8cd a004 	str.w	sl, [sp, #4]
 80076d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076d6:	4628      	mov	r0, r5
 80076d8:	f7ff fd2d 	bl	8007136 <__cvt>
 80076dc:	4680      	mov	r8, r0
 80076de:	e648      	b.n	8007372 <_printf_float+0x112>

080076e0 <_printf_common>:
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	4691      	mov	r9, r2
 80076e6:	461f      	mov	r7, r3
 80076e8:	688a      	ldr	r2, [r1, #8]
 80076ea:	690b      	ldr	r3, [r1, #16]
 80076ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bfb8      	it	lt
 80076f4:	4613      	movlt	r3, r2
 80076f6:	f8c9 3000 	str.w	r3, [r9]
 80076fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076fe:	4606      	mov	r6, r0
 8007700:	460c      	mov	r4, r1
 8007702:	b112      	cbz	r2, 800770a <_printf_common+0x2a>
 8007704:	3301      	adds	r3, #1
 8007706:	f8c9 3000 	str.w	r3, [r9]
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	0699      	lsls	r1, r3, #26
 800770e:	bf42      	ittt	mi
 8007710:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007714:	3302      	addmi	r3, #2
 8007716:	f8c9 3000 	strmi.w	r3, [r9]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	f015 0506 	ands.w	r5, r5, #6
 8007720:	d107      	bne.n	8007732 <_printf_common+0x52>
 8007722:	f104 0a19 	add.w	sl, r4, #25
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	f8d9 2000 	ldr.w	r2, [r9]
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	42ab      	cmp	r3, r5
 8007730:	dc28      	bgt.n	8007784 <_printf_common+0xa4>
 8007732:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	3300      	adds	r3, #0
 800773a:	bf18      	it	ne
 800773c:	2301      	movne	r3, #1
 800773e:	0692      	lsls	r2, r2, #26
 8007740:	d42d      	bmi.n	800779e <_printf_common+0xbe>
 8007742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007746:	4639      	mov	r1, r7
 8007748:	4630      	mov	r0, r6
 800774a:	47c0      	blx	r8
 800774c:	3001      	adds	r0, #1
 800774e:	d020      	beq.n	8007792 <_printf_common+0xb2>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	68e5      	ldr	r5, [r4, #12]
 8007754:	f8d9 2000 	ldr.w	r2, [r9]
 8007758:	f003 0306 	and.w	r3, r3, #6
 800775c:	2b04      	cmp	r3, #4
 800775e:	bf08      	it	eq
 8007760:	1aad      	subeq	r5, r5, r2
 8007762:	68a3      	ldr	r3, [r4, #8]
 8007764:	6922      	ldr	r2, [r4, #16]
 8007766:	bf0c      	ite	eq
 8007768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800776c:	2500      	movne	r5, #0
 800776e:	4293      	cmp	r3, r2
 8007770:	bfc4      	itt	gt
 8007772:	1a9b      	subgt	r3, r3, r2
 8007774:	18ed      	addgt	r5, r5, r3
 8007776:	f04f 0900 	mov.w	r9, #0
 800777a:	341a      	adds	r4, #26
 800777c:	454d      	cmp	r5, r9
 800777e:	d11a      	bne.n	80077b6 <_printf_common+0xd6>
 8007780:	2000      	movs	r0, #0
 8007782:	e008      	b.n	8007796 <_printf_common+0xb6>
 8007784:	2301      	movs	r3, #1
 8007786:	4652      	mov	r2, sl
 8007788:	4639      	mov	r1, r7
 800778a:	4630      	mov	r0, r6
 800778c:	47c0      	blx	r8
 800778e:	3001      	adds	r0, #1
 8007790:	d103      	bne.n	800779a <_printf_common+0xba>
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779a:	3501      	adds	r5, #1
 800779c:	e7c3      	b.n	8007726 <_printf_common+0x46>
 800779e:	18e1      	adds	r1, r4, r3
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	2030      	movs	r0, #48	; 0x30
 80077a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077a8:	4422      	add	r2, r4
 80077aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077b2:	3302      	adds	r3, #2
 80077b4:	e7c5      	b.n	8007742 <_printf_common+0x62>
 80077b6:	2301      	movs	r3, #1
 80077b8:	4622      	mov	r2, r4
 80077ba:	4639      	mov	r1, r7
 80077bc:	4630      	mov	r0, r6
 80077be:	47c0      	blx	r8
 80077c0:	3001      	adds	r0, #1
 80077c2:	d0e6      	beq.n	8007792 <_printf_common+0xb2>
 80077c4:	f109 0901 	add.w	r9, r9, #1
 80077c8:	e7d8      	b.n	800777c <_printf_common+0x9c>
	...

080077cc <_printf_i>:
 80077cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077d4:	460c      	mov	r4, r1
 80077d6:	7e09      	ldrb	r1, [r1, #24]
 80077d8:	b085      	sub	sp, #20
 80077da:	296e      	cmp	r1, #110	; 0x6e
 80077dc:	4617      	mov	r7, r2
 80077de:	4606      	mov	r6, r0
 80077e0:	4698      	mov	r8, r3
 80077e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077e4:	f000 80b3 	beq.w	800794e <_printf_i+0x182>
 80077e8:	d822      	bhi.n	8007830 <_printf_i+0x64>
 80077ea:	2963      	cmp	r1, #99	; 0x63
 80077ec:	d036      	beq.n	800785c <_printf_i+0x90>
 80077ee:	d80a      	bhi.n	8007806 <_printf_i+0x3a>
 80077f0:	2900      	cmp	r1, #0
 80077f2:	f000 80b9 	beq.w	8007968 <_printf_i+0x19c>
 80077f6:	2958      	cmp	r1, #88	; 0x58
 80077f8:	f000 8083 	beq.w	8007902 <_printf_i+0x136>
 80077fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007800:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007804:	e032      	b.n	800786c <_printf_i+0xa0>
 8007806:	2964      	cmp	r1, #100	; 0x64
 8007808:	d001      	beq.n	800780e <_printf_i+0x42>
 800780a:	2969      	cmp	r1, #105	; 0x69
 800780c:	d1f6      	bne.n	80077fc <_printf_i+0x30>
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	6813      	ldr	r3, [r2, #0]
 8007812:	0605      	lsls	r5, r0, #24
 8007814:	f103 0104 	add.w	r1, r3, #4
 8007818:	d52a      	bpl.n	8007870 <_printf_i+0xa4>
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6011      	str	r1, [r2, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	da03      	bge.n	800782a <_printf_i+0x5e>
 8007822:	222d      	movs	r2, #45	; 0x2d
 8007824:	425b      	negs	r3, r3
 8007826:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800782a:	486f      	ldr	r0, [pc, #444]	; (80079e8 <_printf_i+0x21c>)
 800782c:	220a      	movs	r2, #10
 800782e:	e039      	b.n	80078a4 <_printf_i+0xd8>
 8007830:	2973      	cmp	r1, #115	; 0x73
 8007832:	f000 809d 	beq.w	8007970 <_printf_i+0x1a4>
 8007836:	d808      	bhi.n	800784a <_printf_i+0x7e>
 8007838:	296f      	cmp	r1, #111	; 0x6f
 800783a:	d020      	beq.n	800787e <_printf_i+0xb2>
 800783c:	2970      	cmp	r1, #112	; 0x70
 800783e:	d1dd      	bne.n	80077fc <_printf_i+0x30>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	f043 0320 	orr.w	r3, r3, #32
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	e003      	b.n	8007852 <_printf_i+0x86>
 800784a:	2975      	cmp	r1, #117	; 0x75
 800784c:	d017      	beq.n	800787e <_printf_i+0xb2>
 800784e:	2978      	cmp	r1, #120	; 0x78
 8007850:	d1d4      	bne.n	80077fc <_printf_i+0x30>
 8007852:	2378      	movs	r3, #120	; 0x78
 8007854:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007858:	4864      	ldr	r0, [pc, #400]	; (80079ec <_printf_i+0x220>)
 800785a:	e055      	b.n	8007908 <_printf_i+0x13c>
 800785c:	6813      	ldr	r3, [r2, #0]
 800785e:	1d19      	adds	r1, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6011      	str	r1, [r2, #0]
 8007864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800786c:	2301      	movs	r3, #1
 800786e:	e08c      	b.n	800798a <_printf_i+0x1be>
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6011      	str	r1, [r2, #0]
 8007874:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007878:	bf18      	it	ne
 800787a:	b21b      	sxthne	r3, r3
 800787c:	e7cf      	b.n	800781e <_printf_i+0x52>
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	6825      	ldr	r5, [r4, #0]
 8007882:	1d18      	adds	r0, r3, #4
 8007884:	6010      	str	r0, [r2, #0]
 8007886:	0628      	lsls	r0, r5, #24
 8007888:	d501      	bpl.n	800788e <_printf_i+0xc2>
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	e002      	b.n	8007894 <_printf_i+0xc8>
 800788e:	0668      	lsls	r0, r5, #25
 8007890:	d5fb      	bpl.n	800788a <_printf_i+0xbe>
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	4854      	ldr	r0, [pc, #336]	; (80079e8 <_printf_i+0x21c>)
 8007896:	296f      	cmp	r1, #111	; 0x6f
 8007898:	bf14      	ite	ne
 800789a:	220a      	movne	r2, #10
 800789c:	2208      	moveq	r2, #8
 800789e:	2100      	movs	r1, #0
 80078a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078a4:	6865      	ldr	r5, [r4, #4]
 80078a6:	60a5      	str	r5, [r4, #8]
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	f2c0 8095 	blt.w	80079d8 <_printf_i+0x20c>
 80078ae:	6821      	ldr	r1, [r4, #0]
 80078b0:	f021 0104 	bic.w	r1, r1, #4
 80078b4:	6021      	str	r1, [r4, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d13d      	bne.n	8007936 <_printf_i+0x16a>
 80078ba:	2d00      	cmp	r5, #0
 80078bc:	f040 808e 	bne.w	80079dc <_printf_i+0x210>
 80078c0:	4665      	mov	r5, ip
 80078c2:	2a08      	cmp	r2, #8
 80078c4:	d10b      	bne.n	80078de <_printf_i+0x112>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	07db      	lsls	r3, r3, #31
 80078ca:	d508      	bpl.n	80078de <_printf_i+0x112>
 80078cc:	6923      	ldr	r3, [r4, #16]
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	bfde      	ittt	le
 80078d4:	2330      	movle	r3, #48	; 0x30
 80078d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078de:	ebac 0305 	sub.w	r3, ip, r5
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	f8cd 8000 	str.w	r8, [sp]
 80078e8:	463b      	mov	r3, r7
 80078ea:	aa03      	add	r2, sp, #12
 80078ec:	4621      	mov	r1, r4
 80078ee:	4630      	mov	r0, r6
 80078f0:	f7ff fef6 	bl	80076e0 <_printf_common>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d14d      	bne.n	8007994 <_printf_i+0x1c8>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	b005      	add	sp, #20
 80078fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007902:	4839      	ldr	r0, [pc, #228]	; (80079e8 <_printf_i+0x21c>)
 8007904:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007908:	6813      	ldr	r3, [r2, #0]
 800790a:	6821      	ldr	r1, [r4, #0]
 800790c:	1d1d      	adds	r5, r3, #4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6015      	str	r5, [r2, #0]
 8007912:	060a      	lsls	r2, r1, #24
 8007914:	d50b      	bpl.n	800792e <_printf_i+0x162>
 8007916:	07ca      	lsls	r2, r1, #31
 8007918:	bf44      	itt	mi
 800791a:	f041 0120 	orrmi.w	r1, r1, #32
 800791e:	6021      	strmi	r1, [r4, #0]
 8007920:	b91b      	cbnz	r3, 800792a <_printf_i+0x15e>
 8007922:	6822      	ldr	r2, [r4, #0]
 8007924:	f022 0220 	bic.w	r2, r2, #32
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	2210      	movs	r2, #16
 800792c:	e7b7      	b.n	800789e <_printf_i+0xd2>
 800792e:	064d      	lsls	r5, r1, #25
 8007930:	bf48      	it	mi
 8007932:	b29b      	uxthmi	r3, r3
 8007934:	e7ef      	b.n	8007916 <_printf_i+0x14a>
 8007936:	4665      	mov	r5, ip
 8007938:	fbb3 f1f2 	udiv	r1, r3, r2
 800793c:	fb02 3311 	mls	r3, r2, r1, r3
 8007940:	5cc3      	ldrb	r3, [r0, r3]
 8007942:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007946:	460b      	mov	r3, r1
 8007948:	2900      	cmp	r1, #0
 800794a:	d1f5      	bne.n	8007938 <_printf_i+0x16c>
 800794c:	e7b9      	b.n	80078c2 <_printf_i+0xf6>
 800794e:	6813      	ldr	r3, [r2, #0]
 8007950:	6825      	ldr	r5, [r4, #0]
 8007952:	6961      	ldr	r1, [r4, #20]
 8007954:	1d18      	adds	r0, r3, #4
 8007956:	6010      	str	r0, [r2, #0]
 8007958:	0628      	lsls	r0, r5, #24
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	d501      	bpl.n	8007962 <_printf_i+0x196>
 800795e:	6019      	str	r1, [r3, #0]
 8007960:	e002      	b.n	8007968 <_printf_i+0x19c>
 8007962:	066a      	lsls	r2, r5, #25
 8007964:	d5fb      	bpl.n	800795e <_printf_i+0x192>
 8007966:	8019      	strh	r1, [r3, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	4665      	mov	r5, ip
 800796e:	e7b9      	b.n	80078e4 <_printf_i+0x118>
 8007970:	6813      	ldr	r3, [r2, #0]
 8007972:	1d19      	adds	r1, r3, #4
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	681d      	ldr	r5, [r3, #0]
 8007978:	6862      	ldr	r2, [r4, #4]
 800797a:	2100      	movs	r1, #0
 800797c:	4628      	mov	r0, r5
 800797e:	f7f8 fc2f 	bl	80001e0 <memchr>
 8007982:	b108      	cbz	r0, 8007988 <_printf_i+0x1bc>
 8007984:	1b40      	subs	r0, r0, r5
 8007986:	6060      	str	r0, [r4, #4]
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	6123      	str	r3, [r4, #16]
 800798c:	2300      	movs	r3, #0
 800798e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007992:	e7a7      	b.n	80078e4 <_printf_i+0x118>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	462a      	mov	r2, r5
 8007998:	4639      	mov	r1, r7
 800799a:	4630      	mov	r0, r6
 800799c:	47c0      	blx	r8
 800799e:	3001      	adds	r0, #1
 80079a0:	d0aa      	beq.n	80078f8 <_printf_i+0x12c>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	079b      	lsls	r3, r3, #30
 80079a6:	d413      	bmi.n	80079d0 <_printf_i+0x204>
 80079a8:	68e0      	ldr	r0, [r4, #12]
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	4298      	cmp	r0, r3
 80079ae:	bfb8      	it	lt
 80079b0:	4618      	movlt	r0, r3
 80079b2:	e7a3      	b.n	80078fc <_printf_i+0x130>
 80079b4:	2301      	movs	r3, #1
 80079b6:	464a      	mov	r2, r9
 80079b8:	4639      	mov	r1, r7
 80079ba:	4630      	mov	r0, r6
 80079bc:	47c0      	blx	r8
 80079be:	3001      	adds	r0, #1
 80079c0:	d09a      	beq.n	80078f8 <_printf_i+0x12c>
 80079c2:	3501      	adds	r5, #1
 80079c4:	68e3      	ldr	r3, [r4, #12]
 80079c6:	9a03      	ldr	r2, [sp, #12]
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	42ab      	cmp	r3, r5
 80079cc:	dcf2      	bgt.n	80079b4 <_printf_i+0x1e8>
 80079ce:	e7eb      	b.n	80079a8 <_printf_i+0x1dc>
 80079d0:	2500      	movs	r5, #0
 80079d2:	f104 0919 	add.w	r9, r4, #25
 80079d6:	e7f5      	b.n	80079c4 <_printf_i+0x1f8>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1ac      	bne.n	8007936 <_printf_i+0x16a>
 80079dc:	7803      	ldrb	r3, [r0, #0]
 80079de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e6:	e76c      	b.n	80078c2 <_printf_i+0xf6>
 80079e8:	0800be7a 	.word	0x0800be7a
 80079ec:	0800be8b 	.word	0x0800be8b

080079f0 <sniprintf>:
 80079f0:	b40c      	push	{r2, r3}
 80079f2:	b530      	push	{r4, r5, lr}
 80079f4:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <sniprintf+0x64>)
 80079f6:	1e0c      	subs	r4, r1, #0
 80079f8:	b09d      	sub	sp, #116	; 0x74
 80079fa:	681d      	ldr	r5, [r3, #0]
 80079fc:	da08      	bge.n	8007a10 <sniprintf+0x20>
 80079fe:	238b      	movs	r3, #139	; 0x8b
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	f04f 30ff 	mov.w	r0, #4294967295
 8007a06:	b01d      	add	sp, #116	; 0x74
 8007a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a0c:	b002      	add	sp, #8
 8007a0e:	4770      	bx	lr
 8007a10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a18:	bf14      	ite	ne
 8007a1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a1e:	4623      	moveq	r3, r4
 8007a20:	9304      	str	r3, [sp, #16]
 8007a22:	9307      	str	r3, [sp, #28]
 8007a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a28:	9002      	str	r0, [sp, #8]
 8007a2a:	9006      	str	r0, [sp, #24]
 8007a2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a32:	ab21      	add	r3, sp, #132	; 0x84
 8007a34:	a902      	add	r1, sp, #8
 8007a36:	4628      	mov	r0, r5
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	f001 fa5d 	bl	8008ef8 <_svfiprintf_r>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	bfbc      	itt	lt
 8007a42:	238b      	movlt	r3, #139	; 0x8b
 8007a44:	602b      	strlt	r3, [r5, #0]
 8007a46:	2c00      	cmp	r4, #0
 8007a48:	d0dd      	beq.n	8007a06 <sniprintf+0x16>
 8007a4a:	9b02      	ldr	r3, [sp, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
 8007a50:	e7d9      	b.n	8007a06 <sniprintf+0x16>
 8007a52:	bf00      	nop
 8007a54:	200002f8 	.word	0x200002f8

08007a58 <quorem>:
 8007a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	6903      	ldr	r3, [r0, #16]
 8007a5e:	690c      	ldr	r4, [r1, #16]
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	4680      	mov	r8, r0
 8007a64:	f2c0 8082 	blt.w	8007b6c <quorem+0x114>
 8007a68:	3c01      	subs	r4, #1
 8007a6a:	f101 0714 	add.w	r7, r1, #20
 8007a6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007a72:	f100 0614 	add.w	r6, r0, #20
 8007a76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007a7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007a7e:	eb06 030c 	add.w	r3, r6, ip
 8007a82:	3501      	adds	r5, #1
 8007a84:	eb07 090c 	add.w	r9, r7, ip
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8007a8e:	b395      	cbz	r5, 8007af6 <quorem+0x9e>
 8007a90:	f04f 0a00 	mov.w	sl, #0
 8007a94:	4638      	mov	r0, r7
 8007a96:	46b6      	mov	lr, r6
 8007a98:	46d3      	mov	fp, sl
 8007a9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a9e:	b293      	uxth	r3, r2
 8007aa0:	fb05 a303 	mla	r3, r5, r3, sl
 8007aa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	ebab 0303 	sub.w	r3, fp, r3
 8007aae:	0c12      	lsrs	r2, r2, #16
 8007ab0:	f8de b000 	ldr.w	fp, [lr]
 8007ab4:	fb05 a202 	mla	r2, r5, r2, sl
 8007ab8:	fa13 f38b 	uxtah	r3, r3, fp
 8007abc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ac0:	fa1f fb82 	uxth.w	fp, r2
 8007ac4:	f8de 2000 	ldr.w	r2, [lr]
 8007ac8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ad6:	4581      	cmp	r9, r0
 8007ad8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007adc:	f84e 3b04 	str.w	r3, [lr], #4
 8007ae0:	d2db      	bcs.n	8007a9a <quorem+0x42>
 8007ae2:	f856 300c 	ldr.w	r3, [r6, ip]
 8007ae6:	b933      	cbnz	r3, 8007af6 <quorem+0x9e>
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	3b04      	subs	r3, #4
 8007aec:	429e      	cmp	r6, r3
 8007aee:	461a      	mov	r2, r3
 8007af0:	d330      	bcc.n	8007b54 <quorem+0xfc>
 8007af2:	f8c8 4010 	str.w	r4, [r8, #16]
 8007af6:	4640      	mov	r0, r8
 8007af8:	f001 f828 	bl	8008b4c <__mcmp>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	db25      	blt.n	8007b4c <quorem+0xf4>
 8007b00:	3501      	adds	r5, #1
 8007b02:	4630      	mov	r0, r6
 8007b04:	f04f 0c00 	mov.w	ip, #0
 8007b08:	f857 2b04 	ldr.w	r2, [r7], #4
 8007b0c:	f8d0 e000 	ldr.w	lr, [r0]
 8007b10:	b293      	uxth	r3, r2
 8007b12:	ebac 0303 	sub.w	r3, ip, r3
 8007b16:	0c12      	lsrs	r2, r2, #16
 8007b18:	fa13 f38e 	uxtah	r3, r3, lr
 8007b1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b2a:	45b9      	cmp	r9, r7
 8007b2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b30:	f840 3b04 	str.w	r3, [r0], #4
 8007b34:	d2e8      	bcs.n	8007b08 <quorem+0xb0>
 8007b36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007b3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007b3e:	b92a      	cbnz	r2, 8007b4c <quorem+0xf4>
 8007b40:	3b04      	subs	r3, #4
 8007b42:	429e      	cmp	r6, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	d30b      	bcc.n	8007b60 <quorem+0x108>
 8007b48:	f8c8 4010 	str.w	r4, [r8, #16]
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	3b04      	subs	r3, #4
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	d1ca      	bne.n	8007af2 <quorem+0x9a>
 8007b5c:	3c01      	subs	r4, #1
 8007b5e:	e7c5      	b.n	8007aec <quorem+0x94>
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	3b04      	subs	r3, #4
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	d1ef      	bne.n	8007b48 <quorem+0xf0>
 8007b68:	3c01      	subs	r4, #1
 8007b6a:	e7ea      	b.n	8007b42 <quorem+0xea>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7ee      	b.n	8007b4e <quorem+0xf6>

08007b70 <_dtoa_r>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	ec57 6b10 	vmov	r6, r7, d0
 8007b78:	b097      	sub	sp, #92	; 0x5c
 8007b7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b7c:	9106      	str	r1, [sp, #24]
 8007b7e:	4604      	mov	r4, r0
 8007b80:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b82:	9312      	str	r3, [sp, #72]	; 0x48
 8007b84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b88:	e9cd 6700 	strd	r6, r7, [sp]
 8007b8c:	b93d      	cbnz	r5, 8007b9e <_dtoa_r+0x2e>
 8007b8e:	2010      	movs	r0, #16
 8007b90:	f000 fdb4 	bl	80086fc <malloc>
 8007b94:	6260      	str	r0, [r4, #36]	; 0x24
 8007b96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b9a:	6005      	str	r5, [r0, #0]
 8007b9c:	60c5      	str	r5, [r0, #12]
 8007b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba0:	6819      	ldr	r1, [r3, #0]
 8007ba2:	b151      	cbz	r1, 8007bba <_dtoa_r+0x4a>
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	604a      	str	r2, [r1, #4]
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4093      	lsls	r3, r2
 8007bac:	608b      	str	r3, [r1, #8]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 fdeb 	bl	800878a <_Bfree>
 8007bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	1e3b      	subs	r3, r7, #0
 8007bbc:	bfbb      	ittet	lt
 8007bbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bc2:	9301      	strlt	r3, [sp, #4]
 8007bc4:	2300      	movge	r3, #0
 8007bc6:	2201      	movlt	r2, #1
 8007bc8:	bfac      	ite	ge
 8007bca:	f8c8 3000 	strge.w	r3, [r8]
 8007bce:	f8c8 2000 	strlt.w	r2, [r8]
 8007bd2:	4baf      	ldr	r3, [pc, #700]	; (8007e90 <_dtoa_r+0x320>)
 8007bd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007bd8:	ea33 0308 	bics.w	r3, r3, r8
 8007bdc:	d114      	bne.n	8007c08 <_dtoa_r+0x98>
 8007bde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007be0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	b923      	cbnz	r3, 8007bf4 <_dtoa_r+0x84>
 8007bea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f000 8542 	beq.w	8008678 <_dtoa_r+0xb08>
 8007bf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007ea4 <_dtoa_r+0x334>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8544 	beq.w	8008688 <_dtoa_r+0xb18>
 8007c00:	f10b 0303 	add.w	r3, fp, #3
 8007c04:	f000 bd3e 	b.w	8008684 <_dtoa_r+0xb14>
 8007c08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c18:	4681      	mov	r9, r0
 8007c1a:	b168      	cbz	r0, 8007c38 <_dtoa_r+0xc8>
 8007c1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c1e:	2301      	movs	r3, #1
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8524 	beq.w	8008672 <_dtoa_r+0xb02>
 8007c2a:	4b9a      	ldr	r3, [pc, #616]	; (8007e94 <_dtoa_r+0x324>)
 8007c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	f000 bd28 	b.w	8008688 <_dtoa_r+0xb18>
 8007c38:	aa14      	add	r2, sp, #80	; 0x50
 8007c3a:	a915      	add	r1, sp, #84	; 0x54
 8007c3c:	ec47 6b10 	vmov	d0, r6, r7
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 fffa 	bl	8008c3a <__d2b>
 8007c46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007c4a:	9004      	str	r0, [sp, #16]
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	d07c      	beq.n	8007d4a <_dtoa_r+0x1da>
 8007c50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007c58:	46b2      	mov	sl, r6
 8007c5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007c66:	2200      	movs	r2, #0
 8007c68:	4b8b      	ldr	r3, [pc, #556]	; (8007e98 <_dtoa_r+0x328>)
 8007c6a:	4650      	mov	r0, sl
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	f7f8 fb0b 	bl	8000288 <__aeabi_dsub>
 8007c72:	a381      	add	r3, pc, #516	; (adr r3, 8007e78 <_dtoa_r+0x308>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fcbe 	bl	80005f8 <__aeabi_dmul>
 8007c7c:	a380      	add	r3, pc, #512	; (adr r3, 8007e80 <_dtoa_r+0x310>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fb03 	bl	800028c <__adddf3>
 8007c86:	4606      	mov	r6, r0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	f7f8 fc4a 	bl	8000524 <__aeabi_i2d>
 8007c90:	a37d      	add	r3, pc, #500	; (adr r3, 8007e88 <_dtoa_r+0x318>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 fcaf 	bl	80005f8 <__aeabi_dmul>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	f7f8 faf3 	bl	800028c <__adddf3>
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	460f      	mov	r7, r1
 8007caa:	f7f8 ff55 	bl	8000b58 <__aeabi_d2iz>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4682      	mov	sl, r0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 ff10 	bl	8000adc <__aeabi_dcmplt>
 8007cbc:	b148      	cbz	r0, 8007cd2 <_dtoa_r+0x162>
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	f7f8 fc30 	bl	8000524 <__aeabi_i2d>
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	f7f8 fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ccc:	b908      	cbnz	r0, 8007cd2 <_dtoa_r+0x162>
 8007cce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cd2:	f1ba 0f16 	cmp.w	sl, #22
 8007cd6:	d859      	bhi.n	8007d8c <_dtoa_r+0x21c>
 8007cd8:	4970      	ldr	r1, [pc, #448]	; (8007e9c <_dtoa_r+0x32c>)
 8007cda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ce6:	f7f8 ff17 	bl	8000b18 <__aeabi_dcmpgt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d050      	beq.n	8007d90 <_dtoa_r+0x220>
 8007cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cf8:	1b5d      	subs	r5, r3, r5
 8007cfa:	f1b5 0801 	subs.w	r8, r5, #1
 8007cfe:	bf49      	itett	mi
 8007d00:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d04:	2300      	movpl	r3, #0
 8007d06:	9305      	strmi	r3, [sp, #20]
 8007d08:	f04f 0800 	movmi.w	r8, #0
 8007d0c:	bf58      	it	pl
 8007d0e:	9305      	strpl	r3, [sp, #20]
 8007d10:	f1ba 0f00 	cmp.w	sl, #0
 8007d14:	db3e      	blt.n	8007d94 <_dtoa_r+0x224>
 8007d16:	2300      	movs	r3, #0
 8007d18:	44d0      	add	r8, sl
 8007d1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007d1e:	9307      	str	r3, [sp, #28]
 8007d20:	9b06      	ldr	r3, [sp, #24]
 8007d22:	2b09      	cmp	r3, #9
 8007d24:	f200 8090 	bhi.w	8007e48 <_dtoa_r+0x2d8>
 8007d28:	2b05      	cmp	r3, #5
 8007d2a:	bfc4      	itt	gt
 8007d2c:	3b04      	subgt	r3, #4
 8007d2e:	9306      	strgt	r3, [sp, #24]
 8007d30:	9b06      	ldr	r3, [sp, #24]
 8007d32:	f1a3 0302 	sub.w	r3, r3, #2
 8007d36:	bfcc      	ite	gt
 8007d38:	2500      	movgt	r5, #0
 8007d3a:	2501      	movle	r5, #1
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	f200 808f 	bhi.w	8007e60 <_dtoa_r+0x2f0>
 8007d42:	e8df f003 	tbb	[pc, r3]
 8007d46:	7f7d      	.short	0x7f7d
 8007d48:	7131      	.short	0x7131
 8007d4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007d4e:	441d      	add	r5, r3
 8007d50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007d54:	2820      	cmp	r0, #32
 8007d56:	dd13      	ble.n	8007d80 <_dtoa_r+0x210>
 8007d58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	fa08 f800 	lsl.w	r8, r8, r0
 8007d62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007d66:	fa23 f000 	lsr.w	r0, r3, r0
 8007d6a:	ea48 0000 	orr.w	r0, r8, r0
 8007d6e:	f7f8 fbc9 	bl	8000504 <__aeabi_ui2d>
 8007d72:	2301      	movs	r3, #1
 8007d74:	4682      	mov	sl, r0
 8007d76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007d7a:	3d01      	subs	r5, #1
 8007d7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d7e:	e772      	b.n	8007c66 <_dtoa_r+0xf6>
 8007d80:	9b00      	ldr	r3, [sp, #0]
 8007d82:	f1c0 0020 	rsb	r0, r0, #32
 8007d86:	fa03 f000 	lsl.w	r0, r3, r0
 8007d8a:	e7f0      	b.n	8007d6e <_dtoa_r+0x1fe>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e7b1      	b.n	8007cf4 <_dtoa_r+0x184>
 8007d90:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d92:	e7b0      	b.n	8007cf6 <_dtoa_r+0x186>
 8007d94:	9b05      	ldr	r3, [sp, #20]
 8007d96:	eba3 030a 	sub.w	r3, r3, sl
 8007d9a:	9305      	str	r3, [sp, #20]
 8007d9c:	f1ca 0300 	rsb	r3, sl, #0
 8007da0:	9307      	str	r3, [sp, #28]
 8007da2:	2300      	movs	r3, #0
 8007da4:	930e      	str	r3, [sp, #56]	; 0x38
 8007da6:	e7bb      	b.n	8007d20 <_dtoa_r+0x1b0>
 8007da8:	2301      	movs	r3, #1
 8007daa:	930a      	str	r3, [sp, #40]	; 0x28
 8007dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dd59      	ble.n	8007e66 <_dtoa_r+0x2f6>
 8007db2:	9302      	str	r3, [sp, #8]
 8007db4:	4699      	mov	r9, r3
 8007db6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007db8:	2200      	movs	r2, #0
 8007dba:	6072      	str	r2, [r6, #4]
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	f102 0014 	add.w	r0, r2, #20
 8007dc2:	4298      	cmp	r0, r3
 8007dc4:	6871      	ldr	r1, [r6, #4]
 8007dc6:	d953      	bls.n	8007e70 <_dtoa_r+0x300>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fcaa 	bl	8008722 <_Balloc>
 8007dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd0:	6030      	str	r0, [r6, #0]
 8007dd2:	f1b9 0f0e 	cmp.w	r9, #14
 8007dd6:	f8d3 b000 	ldr.w	fp, [r3]
 8007dda:	f200 80e6 	bhi.w	8007faa <_dtoa_r+0x43a>
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	f000 80e3 	beq.w	8007faa <_dtoa_r+0x43a>
 8007de4:	ed9d 7b00 	vldr	d7, [sp]
 8007de8:	f1ba 0f00 	cmp.w	sl, #0
 8007dec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007df0:	dd74      	ble.n	8007edc <_dtoa_r+0x36c>
 8007df2:	4a2a      	ldr	r2, [pc, #168]	; (8007e9c <_dtoa_r+0x32c>)
 8007df4:	f00a 030f 	and.w	r3, sl, #15
 8007df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dfc:	ed93 7b00 	vldr	d7, [r3]
 8007e00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007e04:	06f0      	lsls	r0, r6, #27
 8007e06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007e0a:	d565      	bpl.n	8007ed8 <_dtoa_r+0x368>
 8007e0c:	4b24      	ldr	r3, [pc, #144]	; (8007ea0 <_dtoa_r+0x330>)
 8007e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e16:	f7f8 fd19 	bl	800084c <__aeabi_ddiv>
 8007e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8007e1e:	f006 060f 	and.w	r6, r6, #15
 8007e22:	2503      	movs	r5, #3
 8007e24:	4f1e      	ldr	r7, [pc, #120]	; (8007ea0 <_dtoa_r+0x330>)
 8007e26:	e04c      	b.n	8007ec2 <_dtoa_r+0x352>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2e:	4453      	add	r3, sl
 8007e30:	f103 0901 	add.w	r9, r3, #1
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	464b      	mov	r3, r9
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	bfb8      	it	lt
 8007e3c:	2301      	movlt	r3, #1
 8007e3e:	e7ba      	b.n	8007db6 <_dtoa_r+0x246>
 8007e40:	2300      	movs	r3, #0
 8007e42:	e7b2      	b.n	8007daa <_dtoa_r+0x23a>
 8007e44:	2300      	movs	r3, #0
 8007e46:	e7f0      	b.n	8007e2a <_dtoa_r+0x2ba>
 8007e48:	2501      	movs	r5, #1
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9306      	str	r3, [sp, #24]
 8007e4e:	950a      	str	r5, [sp, #40]	; 0x28
 8007e50:	f04f 33ff 	mov.w	r3, #4294967295
 8007e54:	9302      	str	r3, [sp, #8]
 8007e56:	4699      	mov	r9, r3
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2312      	movs	r3, #18
 8007e5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e5e:	e7aa      	b.n	8007db6 <_dtoa_r+0x246>
 8007e60:	2301      	movs	r3, #1
 8007e62:	930a      	str	r3, [sp, #40]	; 0x28
 8007e64:	e7f4      	b.n	8007e50 <_dtoa_r+0x2e0>
 8007e66:	2301      	movs	r3, #1
 8007e68:	9302      	str	r3, [sp, #8]
 8007e6a:	4699      	mov	r9, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	e7f5      	b.n	8007e5c <_dtoa_r+0x2ec>
 8007e70:	3101      	adds	r1, #1
 8007e72:	6071      	str	r1, [r6, #4]
 8007e74:	0052      	lsls	r2, r2, #1
 8007e76:	e7a2      	b.n	8007dbe <_dtoa_r+0x24e>
 8007e78:	636f4361 	.word	0x636f4361
 8007e7c:	3fd287a7 	.word	0x3fd287a7
 8007e80:	8b60c8b3 	.word	0x8b60c8b3
 8007e84:	3fc68a28 	.word	0x3fc68a28
 8007e88:	509f79fb 	.word	0x509f79fb
 8007e8c:	3fd34413 	.word	0x3fd34413
 8007e90:	7ff00000 	.word	0x7ff00000
 8007e94:	0800be79 	.word	0x0800be79
 8007e98:	3ff80000 	.word	0x3ff80000
 8007e9c:	0800bed8 	.word	0x0800bed8
 8007ea0:	0800beb0 	.word	0x0800beb0
 8007ea4:	0800bea5 	.word	0x0800bea5
 8007ea8:	07f1      	lsls	r1, r6, #31
 8007eaa:	d508      	bpl.n	8007ebe <_dtoa_r+0x34e>
 8007eac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb4:	f7f8 fba0 	bl	80005f8 <__aeabi_dmul>
 8007eb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	1076      	asrs	r6, r6, #1
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	2e00      	cmp	r6, #0
 8007ec4:	d1f0      	bne.n	8007ea8 <_dtoa_r+0x338>
 8007ec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ece:	f7f8 fcbd 	bl	800084c <__aeabi_ddiv>
 8007ed2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ed6:	e01a      	b.n	8007f0e <_dtoa_r+0x39e>
 8007ed8:	2502      	movs	r5, #2
 8007eda:	e7a3      	b.n	8007e24 <_dtoa_r+0x2b4>
 8007edc:	f000 80a0 	beq.w	8008020 <_dtoa_r+0x4b0>
 8007ee0:	f1ca 0600 	rsb	r6, sl, #0
 8007ee4:	4b9f      	ldr	r3, [pc, #636]	; (8008164 <_dtoa_r+0x5f4>)
 8007ee6:	4fa0      	ldr	r7, [pc, #640]	; (8008168 <_dtoa_r+0x5f8>)
 8007ee8:	f006 020f 	and.w	r2, r6, #15
 8007eec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ef8:	f7f8 fb7e 	bl	80005f8 <__aeabi_dmul>
 8007efc:	e9cd 0100 	strd	r0, r1, [sp]
 8007f00:	1136      	asrs	r6, r6, #4
 8007f02:	2300      	movs	r3, #0
 8007f04:	2502      	movs	r5, #2
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	d17f      	bne.n	800800a <_dtoa_r+0x49a>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e1      	bne.n	8007ed2 <_dtoa_r+0x362>
 8007f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8087 	beq.w	8008024 <_dtoa_r+0x4b4>
 8007f16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4b93      	ldr	r3, [pc, #588]	; (800816c <_dtoa_r+0x5fc>)
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4639      	mov	r1, r7
 8007f22:	f7f8 fddb 	bl	8000adc <__aeabi_dcmplt>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d07c      	beq.n	8008024 <_dtoa_r+0x4b4>
 8007f2a:	f1b9 0f00 	cmp.w	r9, #0
 8007f2e:	d079      	beq.n	8008024 <_dtoa_r+0x4b4>
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	dd35      	ble.n	8007fa2 <_dtoa_r+0x432>
 8007f36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f3a:	9308      	str	r3, [sp, #32]
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4b8b      	ldr	r3, [pc, #556]	; (8008170 <_dtoa_r+0x600>)
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7f8 fb58 	bl	80005f8 <__aeabi_dmul>
 8007f48:	e9cd 0100 	strd	r0, r1, [sp]
 8007f4c:	9f02      	ldr	r7, [sp, #8]
 8007f4e:	3501      	adds	r5, #1
 8007f50:	4628      	mov	r0, r5
 8007f52:	f7f8 fae7 	bl	8000524 <__aeabi_i2d>
 8007f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f5a:	f7f8 fb4d 	bl	80005f8 <__aeabi_dmul>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4b84      	ldr	r3, [pc, #528]	; (8008174 <_dtoa_r+0x604>)
 8007f62:	f7f8 f993 	bl	800028c <__adddf3>
 8007f66:	4605      	mov	r5, r0
 8007f68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	d15d      	bne.n	800802c <_dtoa_r+0x4bc>
 8007f70:	2200      	movs	r2, #0
 8007f72:	4b81      	ldr	r3, [pc, #516]	; (8008178 <_dtoa_r+0x608>)
 8007f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f78:	f7f8 f986 	bl	8000288 <__aeabi_dsub>
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	4633      	mov	r3, r6
 8007f80:	e9cd 0100 	strd	r0, r1, [sp]
 8007f84:	f7f8 fdc8 	bl	8000b18 <__aeabi_dcmpgt>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f040 8288 	bne.w	800849e <_dtoa_r+0x92e>
 8007f8e:	462a      	mov	r2, r5
 8007f90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f98:	f7f8 fda0 	bl	8000adc <__aeabi_dcmplt>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f040 827c 	bne.w	800849a <_dtoa_r+0x92a>
 8007fa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8007faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f2c0 8150 	blt.w	8008252 <_dtoa_r+0x6e2>
 8007fb2:	f1ba 0f0e 	cmp.w	sl, #14
 8007fb6:	f300 814c 	bgt.w	8008252 <_dtoa_r+0x6e2>
 8007fba:	4b6a      	ldr	r3, [pc, #424]	; (8008164 <_dtoa_r+0x5f4>)
 8007fbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fc0:	ed93 7b00 	vldr	d7, [r3]
 8007fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fcc:	f280 80d8 	bge.w	8008180 <_dtoa_r+0x610>
 8007fd0:	f1b9 0f00 	cmp.w	r9, #0
 8007fd4:	f300 80d4 	bgt.w	8008180 <_dtoa_r+0x610>
 8007fd8:	f040 825e 	bne.w	8008498 <_dtoa_r+0x928>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4b66      	ldr	r3, [pc, #408]	; (8008178 <_dtoa_r+0x608>)
 8007fe0:	ec51 0b17 	vmov	r0, r1, d7
 8007fe4:	f7f8 fb08 	bl	80005f8 <__aeabi_dmul>
 8007fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fec:	f7f8 fd8a 	bl	8000b04 <__aeabi_dcmpge>
 8007ff0:	464f      	mov	r7, r9
 8007ff2:	464e      	mov	r6, r9
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	f040 8234 	bne.w	8008462 <_dtoa_r+0x8f2>
 8007ffa:	2331      	movs	r3, #49	; 0x31
 8007ffc:	f10b 0501 	add.w	r5, fp, #1
 8008000:	f88b 3000 	strb.w	r3, [fp]
 8008004:	f10a 0a01 	add.w	sl, sl, #1
 8008008:	e22f      	b.n	800846a <_dtoa_r+0x8fa>
 800800a:	07f2      	lsls	r2, r6, #31
 800800c:	d505      	bpl.n	800801a <_dtoa_r+0x4aa>
 800800e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008012:	f7f8 faf1 	bl	80005f8 <__aeabi_dmul>
 8008016:	3501      	adds	r5, #1
 8008018:	2301      	movs	r3, #1
 800801a:	1076      	asrs	r6, r6, #1
 800801c:	3708      	adds	r7, #8
 800801e:	e772      	b.n	8007f06 <_dtoa_r+0x396>
 8008020:	2502      	movs	r5, #2
 8008022:	e774      	b.n	8007f0e <_dtoa_r+0x39e>
 8008024:	f8cd a020 	str.w	sl, [sp, #32]
 8008028:	464f      	mov	r7, r9
 800802a:	e791      	b.n	8007f50 <_dtoa_r+0x3e0>
 800802c:	4b4d      	ldr	r3, [pc, #308]	; (8008164 <_dtoa_r+0x5f4>)
 800802e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008032:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008038:	2b00      	cmp	r3, #0
 800803a:	d047      	beq.n	80080cc <_dtoa_r+0x55c>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	2000      	movs	r0, #0
 8008042:	494e      	ldr	r1, [pc, #312]	; (800817c <_dtoa_r+0x60c>)
 8008044:	f7f8 fc02 	bl	800084c <__aeabi_ddiv>
 8008048:	462a      	mov	r2, r5
 800804a:	4633      	mov	r3, r6
 800804c:	f7f8 f91c 	bl	8000288 <__aeabi_dsub>
 8008050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008054:	465d      	mov	r5, fp
 8008056:	e9dd 0100 	ldrd	r0, r1, [sp]
 800805a:	f7f8 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800805e:	4606      	mov	r6, r0
 8008060:	f7f8 fa60 	bl	8000524 <__aeabi_i2d>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800806c:	f7f8 f90c 	bl	8000288 <__aeabi_dsub>
 8008070:	3630      	adds	r6, #48	; 0x30
 8008072:	f805 6b01 	strb.w	r6, [r5], #1
 8008076:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800807a:	e9cd 0100 	strd	r0, r1, [sp]
 800807e:	f7f8 fd2d 	bl	8000adc <__aeabi_dcmplt>
 8008082:	2800      	cmp	r0, #0
 8008084:	d163      	bne.n	800814e <_dtoa_r+0x5de>
 8008086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800808a:	2000      	movs	r0, #0
 800808c:	4937      	ldr	r1, [pc, #220]	; (800816c <_dtoa_r+0x5fc>)
 800808e:	f7f8 f8fb 	bl	8000288 <__aeabi_dsub>
 8008092:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008096:	f7f8 fd21 	bl	8000adc <__aeabi_dcmplt>
 800809a:	2800      	cmp	r0, #0
 800809c:	f040 80b7 	bne.w	800820e <_dtoa_r+0x69e>
 80080a0:	eba5 030b 	sub.w	r3, r5, fp
 80080a4:	429f      	cmp	r7, r3
 80080a6:	f77f af7c 	ble.w	8007fa2 <_dtoa_r+0x432>
 80080aa:	2200      	movs	r2, #0
 80080ac:	4b30      	ldr	r3, [pc, #192]	; (8008170 <_dtoa_r+0x600>)
 80080ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080b2:	f7f8 faa1 	bl	80005f8 <__aeabi_dmul>
 80080b6:	2200      	movs	r2, #0
 80080b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80080bc:	4b2c      	ldr	r3, [pc, #176]	; (8008170 <_dtoa_r+0x600>)
 80080be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	e9cd 0100 	strd	r0, r1, [sp]
 80080ca:	e7c4      	b.n	8008056 <_dtoa_r+0x4e6>
 80080cc:	462a      	mov	r2, r5
 80080ce:	4633      	mov	r3, r6
 80080d0:	f7f8 fa92 	bl	80005f8 <__aeabi_dmul>
 80080d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80080d8:	eb0b 0507 	add.w	r5, fp, r7
 80080dc:	465e      	mov	r6, fp
 80080de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e2:	f7f8 fd39 	bl	8000b58 <__aeabi_d2iz>
 80080e6:	4607      	mov	r7, r0
 80080e8:	f7f8 fa1c 	bl	8000524 <__aeabi_i2d>
 80080ec:	3730      	adds	r7, #48	; 0x30
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080f6:	f7f8 f8c7 	bl	8000288 <__aeabi_dsub>
 80080fa:	f806 7b01 	strb.w	r7, [r6], #1
 80080fe:	42ae      	cmp	r6, r5
 8008100:	e9cd 0100 	strd	r0, r1, [sp]
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	d126      	bne.n	8008158 <_dtoa_r+0x5e8>
 800810a:	4b1c      	ldr	r3, [pc, #112]	; (800817c <_dtoa_r+0x60c>)
 800810c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008110:	f7f8 f8bc 	bl	800028c <__adddf3>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800811c:	f7f8 fcfc 	bl	8000b18 <__aeabi_dcmpgt>
 8008120:	2800      	cmp	r0, #0
 8008122:	d174      	bne.n	800820e <_dtoa_r+0x69e>
 8008124:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008128:	2000      	movs	r0, #0
 800812a:	4914      	ldr	r1, [pc, #80]	; (800817c <_dtoa_r+0x60c>)
 800812c:	f7f8 f8ac 	bl	8000288 <__aeabi_dsub>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008138:	f7f8 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800813c:	2800      	cmp	r0, #0
 800813e:	f43f af30 	beq.w	8007fa2 <_dtoa_r+0x432>
 8008142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008146:	2b30      	cmp	r3, #48	; 0x30
 8008148:	f105 32ff 	add.w	r2, r5, #4294967295
 800814c:	d002      	beq.n	8008154 <_dtoa_r+0x5e4>
 800814e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008152:	e04a      	b.n	80081ea <_dtoa_r+0x67a>
 8008154:	4615      	mov	r5, r2
 8008156:	e7f4      	b.n	8008142 <_dtoa_r+0x5d2>
 8008158:	4b05      	ldr	r3, [pc, #20]	; (8008170 <_dtoa_r+0x600>)
 800815a:	f7f8 fa4d 	bl	80005f8 <__aeabi_dmul>
 800815e:	e9cd 0100 	strd	r0, r1, [sp]
 8008162:	e7bc      	b.n	80080de <_dtoa_r+0x56e>
 8008164:	0800bed8 	.word	0x0800bed8
 8008168:	0800beb0 	.word	0x0800beb0
 800816c:	3ff00000 	.word	0x3ff00000
 8008170:	40240000 	.word	0x40240000
 8008174:	401c0000 	.word	0x401c0000
 8008178:	40140000 	.word	0x40140000
 800817c:	3fe00000 	.word	0x3fe00000
 8008180:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008184:	465d      	mov	r5, fp
 8008186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 fb5d 	bl	800084c <__aeabi_ddiv>
 8008192:	f7f8 fce1 	bl	8000b58 <__aeabi_d2iz>
 8008196:	4680      	mov	r8, r0
 8008198:	f7f8 f9c4 	bl	8000524 <__aeabi_i2d>
 800819c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081a0:	f7f8 fa2a 	bl	80005f8 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80081b0:	f7f8 f86a 	bl	8000288 <__aeabi_dsub>
 80081b4:	f805 6b01 	strb.w	r6, [r5], #1
 80081b8:	eba5 060b 	sub.w	r6, r5, fp
 80081bc:	45b1      	cmp	r9, r6
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	d139      	bne.n	8008238 <_dtoa_r+0x6c8>
 80081c4:	f7f8 f862 	bl	800028c <__adddf3>
 80081c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	f7f8 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 80081d4:	b9c8      	cbnz	r0, 800820a <_dtoa_r+0x69a>
 80081d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081da:	4630      	mov	r0, r6
 80081dc:	4639      	mov	r1, r7
 80081de:	f7f8 fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 80081e2:	b110      	cbz	r0, 80081ea <_dtoa_r+0x67a>
 80081e4:	f018 0f01 	tst.w	r8, #1
 80081e8:	d10f      	bne.n	800820a <_dtoa_r+0x69a>
 80081ea:	9904      	ldr	r1, [sp, #16]
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 facc 	bl	800878a <_Bfree>
 80081f2:	2300      	movs	r3, #0
 80081f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081f6:	702b      	strb	r3, [r5, #0]
 80081f8:	f10a 0301 	add.w	r3, sl, #1
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8241 	beq.w	8008688 <_dtoa_r+0xb18>
 8008206:	601d      	str	r5, [r3, #0]
 8008208:	e23e      	b.n	8008688 <_dtoa_r+0xb18>
 800820a:	f8cd a020 	str.w	sl, [sp, #32]
 800820e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008212:	2a39      	cmp	r2, #57	; 0x39
 8008214:	f105 33ff 	add.w	r3, r5, #4294967295
 8008218:	d108      	bne.n	800822c <_dtoa_r+0x6bc>
 800821a:	459b      	cmp	fp, r3
 800821c:	d10a      	bne.n	8008234 <_dtoa_r+0x6c4>
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	3301      	adds	r3, #1
 8008222:	9308      	str	r3, [sp, #32]
 8008224:	2330      	movs	r3, #48	; 0x30
 8008226:	f88b 3000 	strb.w	r3, [fp]
 800822a:	465b      	mov	r3, fp
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	3201      	adds	r2, #1
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e78c      	b.n	800814e <_dtoa_r+0x5de>
 8008234:	461d      	mov	r5, r3
 8008236:	e7ea      	b.n	800820e <_dtoa_r+0x69e>
 8008238:	2200      	movs	r2, #0
 800823a:	4b9b      	ldr	r3, [pc, #620]	; (80084a8 <_dtoa_r+0x938>)
 800823c:	f7f8 f9dc 	bl	80005f8 <__aeabi_dmul>
 8008240:	2200      	movs	r2, #0
 8008242:	2300      	movs	r3, #0
 8008244:	4606      	mov	r6, r0
 8008246:	460f      	mov	r7, r1
 8008248:	f7f8 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800824c:	2800      	cmp	r0, #0
 800824e:	d09a      	beq.n	8008186 <_dtoa_r+0x616>
 8008250:	e7cb      	b.n	80081ea <_dtoa_r+0x67a>
 8008252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008254:	2a00      	cmp	r2, #0
 8008256:	f000 808b 	beq.w	8008370 <_dtoa_r+0x800>
 800825a:	9a06      	ldr	r2, [sp, #24]
 800825c:	2a01      	cmp	r2, #1
 800825e:	dc6e      	bgt.n	800833e <_dtoa_r+0x7ce>
 8008260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008262:	2a00      	cmp	r2, #0
 8008264:	d067      	beq.n	8008336 <_dtoa_r+0x7c6>
 8008266:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800826a:	9f07      	ldr	r7, [sp, #28]
 800826c:	9d05      	ldr	r5, [sp, #20]
 800826e:	9a05      	ldr	r2, [sp, #20]
 8008270:	2101      	movs	r1, #1
 8008272:	441a      	add	r2, r3
 8008274:	4620      	mov	r0, r4
 8008276:	9205      	str	r2, [sp, #20]
 8008278:	4498      	add	r8, r3
 800827a:	f000 fb26 	bl	80088ca <__i2b>
 800827e:	4606      	mov	r6, r0
 8008280:	2d00      	cmp	r5, #0
 8008282:	dd0c      	ble.n	800829e <_dtoa_r+0x72e>
 8008284:	f1b8 0f00 	cmp.w	r8, #0
 8008288:	dd09      	ble.n	800829e <_dtoa_r+0x72e>
 800828a:	4545      	cmp	r5, r8
 800828c:	9a05      	ldr	r2, [sp, #20]
 800828e:	462b      	mov	r3, r5
 8008290:	bfa8      	it	ge
 8008292:	4643      	movge	r3, r8
 8008294:	1ad2      	subs	r2, r2, r3
 8008296:	9205      	str	r2, [sp, #20]
 8008298:	1aed      	subs	r5, r5, r3
 800829a:	eba8 0803 	sub.w	r8, r8, r3
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	b1eb      	cbz	r3, 80082de <_dtoa_r+0x76e>
 80082a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d067      	beq.n	8008378 <_dtoa_r+0x808>
 80082a8:	b18f      	cbz	r7, 80082ce <_dtoa_r+0x75e>
 80082aa:	4631      	mov	r1, r6
 80082ac:	463a      	mov	r2, r7
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 fbaa 	bl	8008a08 <__pow5mult>
 80082b4:	9a04      	ldr	r2, [sp, #16]
 80082b6:	4601      	mov	r1, r0
 80082b8:	4606      	mov	r6, r0
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fb0e 	bl	80088dc <__multiply>
 80082c0:	9904      	ldr	r1, [sp, #16]
 80082c2:	9008      	str	r0, [sp, #32]
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 fa60 	bl	800878a <_Bfree>
 80082ca:	9b08      	ldr	r3, [sp, #32]
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	9b07      	ldr	r3, [sp, #28]
 80082d0:	1bda      	subs	r2, r3, r7
 80082d2:	d004      	beq.n	80082de <_dtoa_r+0x76e>
 80082d4:	9904      	ldr	r1, [sp, #16]
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fb96 	bl	8008a08 <__pow5mult>
 80082dc:	9004      	str	r0, [sp, #16]
 80082de:	2101      	movs	r1, #1
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 faf2 	bl	80088ca <__i2b>
 80082e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e8:	4607      	mov	r7, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 81d0 	beq.w	8008690 <_dtoa_r+0xb20>
 80082f0:	461a      	mov	r2, r3
 80082f2:	4601      	mov	r1, r0
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 fb87 	bl	8008a08 <__pow5mult>
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	4607      	mov	r7, r0
 8008300:	dc40      	bgt.n	8008384 <_dtoa_r+0x814>
 8008302:	9b00      	ldr	r3, [sp, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d139      	bne.n	800837c <_dtoa_r+0x80c>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800830e:	2b00      	cmp	r3, #0
 8008310:	d136      	bne.n	8008380 <_dtoa_r+0x810>
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008318:	0d1b      	lsrs	r3, r3, #20
 800831a:	051b      	lsls	r3, r3, #20
 800831c:	b12b      	cbz	r3, 800832a <_dtoa_r+0x7ba>
 800831e:	9b05      	ldr	r3, [sp, #20]
 8008320:	3301      	adds	r3, #1
 8008322:	9305      	str	r3, [sp, #20]
 8008324:	f108 0801 	add.w	r8, r8, #1
 8008328:	2301      	movs	r3, #1
 800832a:	9307      	str	r3, [sp, #28]
 800832c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800832e:	2b00      	cmp	r3, #0
 8008330:	d12a      	bne.n	8008388 <_dtoa_r+0x818>
 8008332:	2001      	movs	r0, #1
 8008334:	e030      	b.n	8008398 <_dtoa_r+0x828>
 8008336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008338:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800833c:	e795      	b.n	800826a <_dtoa_r+0x6fa>
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	f109 37ff 	add.w	r7, r9, #4294967295
 8008344:	42bb      	cmp	r3, r7
 8008346:	bfbf      	itttt	lt
 8008348:	9b07      	ldrlt	r3, [sp, #28]
 800834a:	9707      	strlt	r7, [sp, #28]
 800834c:	1afa      	sublt	r2, r7, r3
 800834e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008350:	bfbb      	ittet	lt
 8008352:	189b      	addlt	r3, r3, r2
 8008354:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008356:	1bdf      	subge	r7, r3, r7
 8008358:	2700      	movlt	r7, #0
 800835a:	f1b9 0f00 	cmp.w	r9, #0
 800835e:	bfb5      	itete	lt
 8008360:	9b05      	ldrlt	r3, [sp, #20]
 8008362:	9d05      	ldrge	r5, [sp, #20]
 8008364:	eba3 0509 	sublt.w	r5, r3, r9
 8008368:	464b      	movge	r3, r9
 800836a:	bfb8      	it	lt
 800836c:	2300      	movlt	r3, #0
 800836e:	e77e      	b.n	800826e <_dtoa_r+0x6fe>
 8008370:	9f07      	ldr	r7, [sp, #28]
 8008372:	9d05      	ldr	r5, [sp, #20]
 8008374:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008376:	e783      	b.n	8008280 <_dtoa_r+0x710>
 8008378:	9a07      	ldr	r2, [sp, #28]
 800837a:	e7ab      	b.n	80082d4 <_dtoa_r+0x764>
 800837c:	2300      	movs	r3, #0
 800837e:	e7d4      	b.n	800832a <_dtoa_r+0x7ba>
 8008380:	9b00      	ldr	r3, [sp, #0]
 8008382:	e7d2      	b.n	800832a <_dtoa_r+0x7ba>
 8008384:	2300      	movs	r3, #0
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800838e:	6918      	ldr	r0, [r3, #16]
 8008390:	f000 fa4d 	bl	800882e <__hi0bits>
 8008394:	f1c0 0020 	rsb	r0, r0, #32
 8008398:	4440      	add	r0, r8
 800839a:	f010 001f 	ands.w	r0, r0, #31
 800839e:	d047      	beq.n	8008430 <_dtoa_r+0x8c0>
 80083a0:	f1c0 0320 	rsb	r3, r0, #32
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	dd3b      	ble.n	8008420 <_dtoa_r+0x8b0>
 80083a8:	9b05      	ldr	r3, [sp, #20]
 80083aa:	f1c0 001c 	rsb	r0, r0, #28
 80083ae:	4403      	add	r3, r0
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	4405      	add	r5, r0
 80083b4:	4480      	add	r8, r0
 80083b6:	9b05      	ldr	r3, [sp, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dd05      	ble.n	80083c8 <_dtoa_r+0x858>
 80083bc:	461a      	mov	r2, r3
 80083be:	9904      	ldr	r1, [sp, #16]
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fb6f 	bl	8008aa4 <__lshift>
 80083c6:	9004      	str	r0, [sp, #16]
 80083c8:	f1b8 0f00 	cmp.w	r8, #0
 80083cc:	dd05      	ble.n	80083da <_dtoa_r+0x86a>
 80083ce:	4639      	mov	r1, r7
 80083d0:	4642      	mov	r2, r8
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fb66 	bl	8008aa4 <__lshift>
 80083d8:	4607      	mov	r7, r0
 80083da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083dc:	b353      	cbz	r3, 8008434 <_dtoa_r+0x8c4>
 80083de:	4639      	mov	r1, r7
 80083e0:	9804      	ldr	r0, [sp, #16]
 80083e2:	f000 fbb3 	bl	8008b4c <__mcmp>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	da24      	bge.n	8008434 <_dtoa_r+0x8c4>
 80083ea:	2300      	movs	r3, #0
 80083ec:	220a      	movs	r2, #10
 80083ee:	9904      	ldr	r1, [sp, #16]
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 f9e1 	bl	80087b8 <__multadd>
 80083f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f8:	9004      	str	r0, [sp, #16]
 80083fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 814d 	beq.w	800869e <_dtoa_r+0xb2e>
 8008404:	2300      	movs	r3, #0
 8008406:	4631      	mov	r1, r6
 8008408:	220a      	movs	r2, #10
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f9d4 	bl	80087b8 <__multadd>
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	4606      	mov	r6, r0
 8008416:	dc4f      	bgt.n	80084b8 <_dtoa_r+0x948>
 8008418:	9b06      	ldr	r3, [sp, #24]
 800841a:	2b02      	cmp	r3, #2
 800841c:	dd4c      	ble.n	80084b8 <_dtoa_r+0x948>
 800841e:	e011      	b.n	8008444 <_dtoa_r+0x8d4>
 8008420:	d0c9      	beq.n	80083b6 <_dtoa_r+0x846>
 8008422:	9a05      	ldr	r2, [sp, #20]
 8008424:	331c      	adds	r3, #28
 8008426:	441a      	add	r2, r3
 8008428:	9205      	str	r2, [sp, #20]
 800842a:	441d      	add	r5, r3
 800842c:	4498      	add	r8, r3
 800842e:	e7c2      	b.n	80083b6 <_dtoa_r+0x846>
 8008430:	4603      	mov	r3, r0
 8008432:	e7f6      	b.n	8008422 <_dtoa_r+0x8b2>
 8008434:	f1b9 0f00 	cmp.w	r9, #0
 8008438:	dc38      	bgt.n	80084ac <_dtoa_r+0x93c>
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	2b02      	cmp	r3, #2
 800843e:	dd35      	ble.n	80084ac <_dtoa_r+0x93c>
 8008440:	f8cd 9008 	str.w	r9, [sp, #8]
 8008444:	9b02      	ldr	r3, [sp, #8]
 8008446:	b963      	cbnz	r3, 8008462 <_dtoa_r+0x8f2>
 8008448:	4639      	mov	r1, r7
 800844a:	2205      	movs	r2, #5
 800844c:	4620      	mov	r0, r4
 800844e:	f000 f9b3 	bl	80087b8 <__multadd>
 8008452:	4601      	mov	r1, r0
 8008454:	4607      	mov	r7, r0
 8008456:	9804      	ldr	r0, [sp, #16]
 8008458:	f000 fb78 	bl	8008b4c <__mcmp>
 800845c:	2800      	cmp	r0, #0
 800845e:	f73f adcc 	bgt.w	8007ffa <_dtoa_r+0x48a>
 8008462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008464:	465d      	mov	r5, fp
 8008466:	ea6f 0a03 	mvn.w	sl, r3
 800846a:	f04f 0900 	mov.w	r9, #0
 800846e:	4639      	mov	r1, r7
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f98a 	bl	800878a <_Bfree>
 8008476:	2e00      	cmp	r6, #0
 8008478:	f43f aeb7 	beq.w	80081ea <_dtoa_r+0x67a>
 800847c:	f1b9 0f00 	cmp.w	r9, #0
 8008480:	d005      	beq.n	800848e <_dtoa_r+0x91e>
 8008482:	45b1      	cmp	r9, r6
 8008484:	d003      	beq.n	800848e <_dtoa_r+0x91e>
 8008486:	4649      	mov	r1, r9
 8008488:	4620      	mov	r0, r4
 800848a:	f000 f97e 	bl	800878a <_Bfree>
 800848e:	4631      	mov	r1, r6
 8008490:	4620      	mov	r0, r4
 8008492:	f000 f97a 	bl	800878a <_Bfree>
 8008496:	e6a8      	b.n	80081ea <_dtoa_r+0x67a>
 8008498:	2700      	movs	r7, #0
 800849a:	463e      	mov	r6, r7
 800849c:	e7e1      	b.n	8008462 <_dtoa_r+0x8f2>
 800849e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80084a2:	463e      	mov	r6, r7
 80084a4:	e5a9      	b.n	8007ffa <_dtoa_r+0x48a>
 80084a6:	bf00      	nop
 80084a8:	40240000 	.word	0x40240000
 80084ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 80fa 	beq.w	80086ac <_dtoa_r+0xb3c>
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	dd05      	ble.n	80084c8 <_dtoa_r+0x958>
 80084bc:	4631      	mov	r1, r6
 80084be:	462a      	mov	r2, r5
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 faef 	bl	8008aa4 <__lshift>
 80084c6:	4606      	mov	r6, r0
 80084c8:	9b07      	ldr	r3, [sp, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d04c      	beq.n	8008568 <_dtoa_r+0x9f8>
 80084ce:	6871      	ldr	r1, [r6, #4]
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 f926 	bl	8008722 <_Balloc>
 80084d6:	6932      	ldr	r2, [r6, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	4605      	mov	r5, r0
 80084dc:	0092      	lsls	r2, r2, #2
 80084de:	f106 010c 	add.w	r1, r6, #12
 80084e2:	300c      	adds	r0, #12
 80084e4:	f000 f912 	bl	800870c <memcpy>
 80084e8:	2201      	movs	r2, #1
 80084ea:	4629      	mov	r1, r5
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fad9 	bl	8008aa4 <__lshift>
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	f8cd b014 	str.w	fp, [sp, #20]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	46b1      	mov	r9, r6
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	4606      	mov	r6, r0
 8008502:	4639      	mov	r1, r7
 8008504:	9804      	ldr	r0, [sp, #16]
 8008506:	f7ff faa7 	bl	8007a58 <quorem>
 800850a:	4649      	mov	r1, r9
 800850c:	4605      	mov	r5, r0
 800850e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008512:	9804      	ldr	r0, [sp, #16]
 8008514:	f000 fb1a 	bl	8008b4c <__mcmp>
 8008518:	4632      	mov	r2, r6
 800851a:	9000      	str	r0, [sp, #0]
 800851c:	4639      	mov	r1, r7
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fb2e 	bl	8008b80 <__mdiff>
 8008524:	68c3      	ldr	r3, [r0, #12]
 8008526:	4602      	mov	r2, r0
 8008528:	bb03      	cbnz	r3, 800856c <_dtoa_r+0x9fc>
 800852a:	4601      	mov	r1, r0
 800852c:	9008      	str	r0, [sp, #32]
 800852e:	9804      	ldr	r0, [sp, #16]
 8008530:	f000 fb0c 	bl	8008b4c <__mcmp>
 8008534:	9a08      	ldr	r2, [sp, #32]
 8008536:	4603      	mov	r3, r0
 8008538:	4611      	mov	r1, r2
 800853a:	4620      	mov	r0, r4
 800853c:	9308      	str	r3, [sp, #32]
 800853e:	f000 f924 	bl	800878a <_Bfree>
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	b9a3      	cbnz	r3, 8008570 <_dtoa_r+0xa00>
 8008546:	9a06      	ldr	r2, [sp, #24]
 8008548:	b992      	cbnz	r2, 8008570 <_dtoa_r+0xa00>
 800854a:	9a07      	ldr	r2, [sp, #28]
 800854c:	b982      	cbnz	r2, 8008570 <_dtoa_r+0xa00>
 800854e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008552:	d029      	beq.n	80085a8 <_dtoa_r+0xa38>
 8008554:	9b00      	ldr	r3, [sp, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd01      	ble.n	800855e <_dtoa_r+0x9ee>
 800855a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	1c5d      	adds	r5, r3, #1
 8008562:	f883 8000 	strb.w	r8, [r3]
 8008566:	e782      	b.n	800846e <_dtoa_r+0x8fe>
 8008568:	4630      	mov	r0, r6
 800856a:	e7c2      	b.n	80084f2 <_dtoa_r+0x982>
 800856c:	2301      	movs	r3, #1
 800856e:	e7e3      	b.n	8008538 <_dtoa_r+0x9c8>
 8008570:	9a00      	ldr	r2, [sp, #0]
 8008572:	2a00      	cmp	r2, #0
 8008574:	db04      	blt.n	8008580 <_dtoa_r+0xa10>
 8008576:	d125      	bne.n	80085c4 <_dtoa_r+0xa54>
 8008578:	9a06      	ldr	r2, [sp, #24]
 800857a:	bb1a      	cbnz	r2, 80085c4 <_dtoa_r+0xa54>
 800857c:	9a07      	ldr	r2, [sp, #28]
 800857e:	bb0a      	cbnz	r2, 80085c4 <_dtoa_r+0xa54>
 8008580:	2b00      	cmp	r3, #0
 8008582:	ddec      	ble.n	800855e <_dtoa_r+0x9ee>
 8008584:	2201      	movs	r2, #1
 8008586:	9904      	ldr	r1, [sp, #16]
 8008588:	4620      	mov	r0, r4
 800858a:	f000 fa8b 	bl	8008aa4 <__lshift>
 800858e:	4639      	mov	r1, r7
 8008590:	9004      	str	r0, [sp, #16]
 8008592:	f000 fadb 	bl	8008b4c <__mcmp>
 8008596:	2800      	cmp	r0, #0
 8008598:	dc03      	bgt.n	80085a2 <_dtoa_r+0xa32>
 800859a:	d1e0      	bne.n	800855e <_dtoa_r+0x9ee>
 800859c:	f018 0f01 	tst.w	r8, #1
 80085a0:	d0dd      	beq.n	800855e <_dtoa_r+0x9ee>
 80085a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085a6:	d1d8      	bne.n	800855a <_dtoa_r+0x9ea>
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	9a05      	ldr	r2, [sp, #20]
 80085ac:	1c5d      	adds	r5, r3, #1
 80085ae:	2339      	movs	r3, #57	; 0x39
 80085b0:	7013      	strb	r3, [r2, #0]
 80085b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085b6:	2b39      	cmp	r3, #57	; 0x39
 80085b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80085bc:	d04f      	beq.n	800865e <_dtoa_r+0xaee>
 80085be:	3301      	adds	r3, #1
 80085c0:	7013      	strb	r3, [r2, #0]
 80085c2:	e754      	b.n	800846e <_dtoa_r+0x8fe>
 80085c4:	9a05      	ldr	r2, [sp, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f102 0501 	add.w	r5, r2, #1
 80085cc:	dd06      	ble.n	80085dc <_dtoa_r+0xa6c>
 80085ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085d2:	d0e9      	beq.n	80085a8 <_dtoa_r+0xa38>
 80085d4:	f108 0801 	add.w	r8, r8, #1
 80085d8:	9b05      	ldr	r3, [sp, #20]
 80085da:	e7c2      	b.n	8008562 <_dtoa_r+0x9f2>
 80085dc:	9a02      	ldr	r2, [sp, #8]
 80085de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80085e2:	eba5 030b 	sub.w	r3, r5, fp
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d021      	beq.n	800862e <_dtoa_r+0xabe>
 80085ea:	2300      	movs	r3, #0
 80085ec:	220a      	movs	r2, #10
 80085ee:	9904      	ldr	r1, [sp, #16]
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 f8e1 	bl	80087b8 <__multadd>
 80085f6:	45b1      	cmp	r9, r6
 80085f8:	9004      	str	r0, [sp, #16]
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	f04f 020a 	mov.w	r2, #10
 8008602:	4649      	mov	r1, r9
 8008604:	4620      	mov	r0, r4
 8008606:	d105      	bne.n	8008614 <_dtoa_r+0xaa4>
 8008608:	f000 f8d6 	bl	80087b8 <__multadd>
 800860c:	4681      	mov	r9, r0
 800860e:	4606      	mov	r6, r0
 8008610:	9505      	str	r5, [sp, #20]
 8008612:	e776      	b.n	8008502 <_dtoa_r+0x992>
 8008614:	f000 f8d0 	bl	80087b8 <__multadd>
 8008618:	4631      	mov	r1, r6
 800861a:	4681      	mov	r9, r0
 800861c:	2300      	movs	r3, #0
 800861e:	220a      	movs	r2, #10
 8008620:	4620      	mov	r0, r4
 8008622:	f000 f8c9 	bl	80087b8 <__multadd>
 8008626:	4606      	mov	r6, r0
 8008628:	e7f2      	b.n	8008610 <_dtoa_r+0xaa0>
 800862a:	f04f 0900 	mov.w	r9, #0
 800862e:	2201      	movs	r2, #1
 8008630:	9904      	ldr	r1, [sp, #16]
 8008632:	4620      	mov	r0, r4
 8008634:	f000 fa36 	bl	8008aa4 <__lshift>
 8008638:	4639      	mov	r1, r7
 800863a:	9004      	str	r0, [sp, #16]
 800863c:	f000 fa86 	bl	8008b4c <__mcmp>
 8008640:	2800      	cmp	r0, #0
 8008642:	dcb6      	bgt.n	80085b2 <_dtoa_r+0xa42>
 8008644:	d102      	bne.n	800864c <_dtoa_r+0xadc>
 8008646:	f018 0f01 	tst.w	r8, #1
 800864a:	d1b2      	bne.n	80085b2 <_dtoa_r+0xa42>
 800864c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008650:	2b30      	cmp	r3, #48	; 0x30
 8008652:	f105 32ff 	add.w	r2, r5, #4294967295
 8008656:	f47f af0a 	bne.w	800846e <_dtoa_r+0x8fe>
 800865a:	4615      	mov	r5, r2
 800865c:	e7f6      	b.n	800864c <_dtoa_r+0xadc>
 800865e:	4593      	cmp	fp, r2
 8008660:	d105      	bne.n	800866e <_dtoa_r+0xafe>
 8008662:	2331      	movs	r3, #49	; 0x31
 8008664:	f10a 0a01 	add.w	sl, sl, #1
 8008668:	f88b 3000 	strb.w	r3, [fp]
 800866c:	e6ff      	b.n	800846e <_dtoa_r+0x8fe>
 800866e:	4615      	mov	r5, r2
 8008670:	e79f      	b.n	80085b2 <_dtoa_r+0xa42>
 8008672:	f8df b064 	ldr.w	fp, [pc, #100]	; 80086d8 <_dtoa_r+0xb68>
 8008676:	e007      	b.n	8008688 <_dtoa_r+0xb18>
 8008678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800867a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80086dc <_dtoa_r+0xb6c>
 800867e:	b11b      	cbz	r3, 8008688 <_dtoa_r+0xb18>
 8008680:	f10b 0308 	add.w	r3, fp, #8
 8008684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4658      	mov	r0, fp
 800868a:	b017      	add	sp, #92	; 0x5c
 800868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008690:	9b06      	ldr	r3, [sp, #24]
 8008692:	2b01      	cmp	r3, #1
 8008694:	f77f ae35 	ble.w	8008302 <_dtoa_r+0x792>
 8008698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800869a:	9307      	str	r3, [sp, #28]
 800869c:	e649      	b.n	8008332 <_dtoa_r+0x7c2>
 800869e:	9b02      	ldr	r3, [sp, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dc03      	bgt.n	80086ac <_dtoa_r+0xb3c>
 80086a4:	9b06      	ldr	r3, [sp, #24]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	f73f aecc 	bgt.w	8008444 <_dtoa_r+0x8d4>
 80086ac:	465d      	mov	r5, fp
 80086ae:	4639      	mov	r1, r7
 80086b0:	9804      	ldr	r0, [sp, #16]
 80086b2:	f7ff f9d1 	bl	8007a58 <quorem>
 80086b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80086ba:	f805 8b01 	strb.w	r8, [r5], #1
 80086be:	9a02      	ldr	r2, [sp, #8]
 80086c0:	eba5 030b 	sub.w	r3, r5, fp
 80086c4:	429a      	cmp	r2, r3
 80086c6:	ddb0      	ble.n	800862a <_dtoa_r+0xaba>
 80086c8:	2300      	movs	r3, #0
 80086ca:	220a      	movs	r2, #10
 80086cc:	9904      	ldr	r1, [sp, #16]
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 f872 	bl	80087b8 <__multadd>
 80086d4:	9004      	str	r0, [sp, #16]
 80086d6:	e7ea      	b.n	80086ae <_dtoa_r+0xb3e>
 80086d8:	0800be78 	.word	0x0800be78
 80086dc:	0800be9c 	.word	0x0800be9c

080086e0 <_localeconv_r>:
 80086e0:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <_localeconv_r+0x14>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6a18      	ldr	r0, [r3, #32]
 80086e6:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <_localeconv_r+0x18>)
 80086e8:	2800      	cmp	r0, #0
 80086ea:	bf08      	it	eq
 80086ec:	4618      	moveq	r0, r3
 80086ee:	30f0      	adds	r0, #240	; 0xf0
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	200002f8 	.word	0x200002f8
 80086f8:	2000035c 	.word	0x2000035c

080086fc <malloc>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <malloc+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f000 bb45 	b.w	8008d90 <_malloc_r>
 8008706:	bf00      	nop
 8008708:	200002f8 	.word	0x200002f8

0800870c <memcpy>:
 800870c:	b510      	push	{r4, lr}
 800870e:	1e43      	subs	r3, r0, #1
 8008710:	440a      	add	r2, r1
 8008712:	4291      	cmp	r1, r2
 8008714:	d100      	bne.n	8008718 <memcpy+0xc>
 8008716:	bd10      	pop	{r4, pc}
 8008718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800871c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008720:	e7f7      	b.n	8008712 <memcpy+0x6>

08008722 <_Balloc>:
 8008722:	b570      	push	{r4, r5, r6, lr}
 8008724:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008726:	4604      	mov	r4, r0
 8008728:	460e      	mov	r6, r1
 800872a:	b93d      	cbnz	r5, 800873c <_Balloc+0x1a>
 800872c:	2010      	movs	r0, #16
 800872e:	f7ff ffe5 	bl	80086fc <malloc>
 8008732:	6260      	str	r0, [r4, #36]	; 0x24
 8008734:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008738:	6005      	str	r5, [r0, #0]
 800873a:	60c5      	str	r5, [r0, #12]
 800873c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800873e:	68eb      	ldr	r3, [r5, #12]
 8008740:	b183      	cbz	r3, 8008764 <_Balloc+0x42>
 8008742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800874a:	b9b8      	cbnz	r0, 800877c <_Balloc+0x5a>
 800874c:	2101      	movs	r1, #1
 800874e:	fa01 f506 	lsl.w	r5, r1, r6
 8008752:	1d6a      	adds	r2, r5, #5
 8008754:	0092      	lsls	r2, r2, #2
 8008756:	4620      	mov	r0, r4
 8008758:	f000 fabe 	bl	8008cd8 <_calloc_r>
 800875c:	b160      	cbz	r0, 8008778 <_Balloc+0x56>
 800875e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008762:	e00e      	b.n	8008782 <_Balloc+0x60>
 8008764:	2221      	movs	r2, #33	; 0x21
 8008766:	2104      	movs	r1, #4
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fab5 	bl	8008cd8 <_calloc_r>
 800876e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008770:	60e8      	str	r0, [r5, #12]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e4      	bne.n	8008742 <_Balloc+0x20>
 8008778:	2000      	movs	r0, #0
 800877a:	bd70      	pop	{r4, r5, r6, pc}
 800877c:	6802      	ldr	r2, [r0, #0]
 800877e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008782:	2300      	movs	r3, #0
 8008784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008788:	e7f7      	b.n	800877a <_Balloc+0x58>

0800878a <_Bfree>:
 800878a:	b570      	push	{r4, r5, r6, lr}
 800878c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800878e:	4606      	mov	r6, r0
 8008790:	460d      	mov	r5, r1
 8008792:	b93c      	cbnz	r4, 80087a4 <_Bfree+0x1a>
 8008794:	2010      	movs	r0, #16
 8008796:	f7ff ffb1 	bl	80086fc <malloc>
 800879a:	6270      	str	r0, [r6, #36]	; 0x24
 800879c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087a0:	6004      	str	r4, [r0, #0]
 80087a2:	60c4      	str	r4, [r0, #12]
 80087a4:	b13d      	cbz	r5, 80087b6 <_Bfree+0x2c>
 80087a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80087a8:	686a      	ldr	r2, [r5, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087b0:	6029      	str	r1, [r5, #0]
 80087b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80087b6:	bd70      	pop	{r4, r5, r6, pc}

080087b8 <__multadd>:
 80087b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087bc:	690d      	ldr	r5, [r1, #16]
 80087be:	461f      	mov	r7, r3
 80087c0:	4606      	mov	r6, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	f101 0c14 	add.w	ip, r1, #20
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8dc 0000 	ldr.w	r0, [ip]
 80087ce:	b281      	uxth	r1, r0
 80087d0:	fb02 7101 	mla	r1, r2, r1, r7
 80087d4:	0c0f      	lsrs	r7, r1, #16
 80087d6:	0c00      	lsrs	r0, r0, #16
 80087d8:	fb02 7000 	mla	r0, r2, r0, r7
 80087dc:	b289      	uxth	r1, r1
 80087de:	3301      	adds	r3, #1
 80087e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80087e4:	429d      	cmp	r5, r3
 80087e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80087ea:	f84c 1b04 	str.w	r1, [ip], #4
 80087ee:	dcec      	bgt.n	80087ca <__multadd+0x12>
 80087f0:	b1d7      	cbz	r7, 8008828 <__multadd+0x70>
 80087f2:	68a3      	ldr	r3, [r4, #8]
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dc12      	bgt.n	800881e <__multadd+0x66>
 80087f8:	6861      	ldr	r1, [r4, #4]
 80087fa:	4630      	mov	r0, r6
 80087fc:	3101      	adds	r1, #1
 80087fe:	f7ff ff90 	bl	8008722 <_Balloc>
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	3202      	adds	r2, #2
 8008806:	f104 010c 	add.w	r1, r4, #12
 800880a:	4680      	mov	r8, r0
 800880c:	0092      	lsls	r2, r2, #2
 800880e:	300c      	adds	r0, #12
 8008810:	f7ff ff7c 	bl	800870c <memcpy>
 8008814:	4621      	mov	r1, r4
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ffb7 	bl	800878a <_Bfree>
 800881c:	4644      	mov	r4, r8
 800881e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008822:	3501      	adds	r5, #1
 8008824:	615f      	str	r7, [r3, #20]
 8008826:	6125      	str	r5, [r4, #16]
 8008828:	4620      	mov	r0, r4
 800882a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800882e <__hi0bits>:
 800882e:	0c02      	lsrs	r2, r0, #16
 8008830:	0412      	lsls	r2, r2, #16
 8008832:	4603      	mov	r3, r0
 8008834:	b9b2      	cbnz	r2, 8008864 <__hi0bits+0x36>
 8008836:	0403      	lsls	r3, r0, #16
 8008838:	2010      	movs	r0, #16
 800883a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800883e:	bf04      	itt	eq
 8008840:	021b      	lsleq	r3, r3, #8
 8008842:	3008      	addeq	r0, #8
 8008844:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008848:	bf04      	itt	eq
 800884a:	011b      	lsleq	r3, r3, #4
 800884c:	3004      	addeq	r0, #4
 800884e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008852:	bf04      	itt	eq
 8008854:	009b      	lsleq	r3, r3, #2
 8008856:	3002      	addeq	r0, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	db06      	blt.n	800886a <__hi0bits+0x3c>
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	d503      	bpl.n	8008868 <__hi0bits+0x3a>
 8008860:	3001      	adds	r0, #1
 8008862:	4770      	bx	lr
 8008864:	2000      	movs	r0, #0
 8008866:	e7e8      	b.n	800883a <__hi0bits+0xc>
 8008868:	2020      	movs	r0, #32
 800886a:	4770      	bx	lr

0800886c <__lo0bits>:
 800886c:	6803      	ldr	r3, [r0, #0]
 800886e:	f013 0207 	ands.w	r2, r3, #7
 8008872:	4601      	mov	r1, r0
 8008874:	d00b      	beq.n	800888e <__lo0bits+0x22>
 8008876:	07da      	lsls	r2, r3, #31
 8008878:	d423      	bmi.n	80088c2 <__lo0bits+0x56>
 800887a:	0798      	lsls	r0, r3, #30
 800887c:	bf49      	itett	mi
 800887e:	085b      	lsrmi	r3, r3, #1
 8008880:	089b      	lsrpl	r3, r3, #2
 8008882:	2001      	movmi	r0, #1
 8008884:	600b      	strmi	r3, [r1, #0]
 8008886:	bf5c      	itt	pl
 8008888:	600b      	strpl	r3, [r1, #0]
 800888a:	2002      	movpl	r0, #2
 800888c:	4770      	bx	lr
 800888e:	b298      	uxth	r0, r3
 8008890:	b9a8      	cbnz	r0, 80088be <__lo0bits+0x52>
 8008892:	0c1b      	lsrs	r3, r3, #16
 8008894:	2010      	movs	r0, #16
 8008896:	f013 0fff 	tst.w	r3, #255	; 0xff
 800889a:	bf04      	itt	eq
 800889c:	0a1b      	lsreq	r3, r3, #8
 800889e:	3008      	addeq	r0, #8
 80088a0:	071a      	lsls	r2, r3, #28
 80088a2:	bf04      	itt	eq
 80088a4:	091b      	lsreq	r3, r3, #4
 80088a6:	3004      	addeq	r0, #4
 80088a8:	079a      	lsls	r2, r3, #30
 80088aa:	bf04      	itt	eq
 80088ac:	089b      	lsreq	r3, r3, #2
 80088ae:	3002      	addeq	r0, #2
 80088b0:	07da      	lsls	r2, r3, #31
 80088b2:	d402      	bmi.n	80088ba <__lo0bits+0x4e>
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	d006      	beq.n	80088c6 <__lo0bits+0x5a>
 80088b8:	3001      	adds	r0, #1
 80088ba:	600b      	str	r3, [r1, #0]
 80088bc:	4770      	bx	lr
 80088be:	4610      	mov	r0, r2
 80088c0:	e7e9      	b.n	8008896 <__lo0bits+0x2a>
 80088c2:	2000      	movs	r0, #0
 80088c4:	4770      	bx	lr
 80088c6:	2020      	movs	r0, #32
 80088c8:	4770      	bx	lr

080088ca <__i2b>:
 80088ca:	b510      	push	{r4, lr}
 80088cc:	460c      	mov	r4, r1
 80088ce:	2101      	movs	r1, #1
 80088d0:	f7ff ff27 	bl	8008722 <_Balloc>
 80088d4:	2201      	movs	r2, #1
 80088d6:	6144      	str	r4, [r0, #20]
 80088d8:	6102      	str	r2, [r0, #16]
 80088da:	bd10      	pop	{r4, pc}

080088dc <__multiply>:
 80088dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	4614      	mov	r4, r2
 80088e2:	690a      	ldr	r2, [r1, #16]
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	bfb8      	it	lt
 80088ea:	460b      	movlt	r3, r1
 80088ec:	4688      	mov	r8, r1
 80088ee:	bfbc      	itt	lt
 80088f0:	46a0      	movlt	r8, r4
 80088f2:	461c      	movlt	r4, r3
 80088f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80088fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008900:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008904:	eb07 0609 	add.w	r6, r7, r9
 8008908:	42b3      	cmp	r3, r6
 800890a:	bfb8      	it	lt
 800890c:	3101      	addlt	r1, #1
 800890e:	f7ff ff08 	bl	8008722 <_Balloc>
 8008912:	f100 0514 	add.w	r5, r0, #20
 8008916:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800891a:	462b      	mov	r3, r5
 800891c:	2200      	movs	r2, #0
 800891e:	4573      	cmp	r3, lr
 8008920:	d316      	bcc.n	8008950 <__multiply+0x74>
 8008922:	f104 0214 	add.w	r2, r4, #20
 8008926:	f108 0114 	add.w	r1, r8, #20
 800892a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800892e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	9b00      	ldr	r3, [sp, #0]
 8008936:	9201      	str	r2, [sp, #4]
 8008938:	4293      	cmp	r3, r2
 800893a:	d80c      	bhi.n	8008956 <__multiply+0x7a>
 800893c:	2e00      	cmp	r6, #0
 800893e:	dd03      	ble.n	8008948 <__multiply+0x6c>
 8008940:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008944:	2b00      	cmp	r3, #0
 8008946:	d05d      	beq.n	8008a04 <__multiply+0x128>
 8008948:	6106      	str	r6, [r0, #16]
 800894a:	b003      	add	sp, #12
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	f843 2b04 	str.w	r2, [r3], #4
 8008954:	e7e3      	b.n	800891e <__multiply+0x42>
 8008956:	f8b2 b000 	ldrh.w	fp, [r2]
 800895a:	f1bb 0f00 	cmp.w	fp, #0
 800895e:	d023      	beq.n	80089a8 <__multiply+0xcc>
 8008960:	4689      	mov	r9, r1
 8008962:	46ac      	mov	ip, r5
 8008964:	f04f 0800 	mov.w	r8, #0
 8008968:	f859 4b04 	ldr.w	r4, [r9], #4
 800896c:	f8dc a000 	ldr.w	sl, [ip]
 8008970:	b2a3      	uxth	r3, r4
 8008972:	fa1f fa8a 	uxth.w	sl, sl
 8008976:	fb0b a303 	mla	r3, fp, r3, sl
 800897a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800897e:	f8dc 4000 	ldr.w	r4, [ip]
 8008982:	4443      	add	r3, r8
 8008984:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008988:	fb0b 840a 	mla	r4, fp, sl, r8
 800898c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008990:	46e2      	mov	sl, ip
 8008992:	b29b      	uxth	r3, r3
 8008994:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008998:	454f      	cmp	r7, r9
 800899a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800899e:	f84a 3b04 	str.w	r3, [sl], #4
 80089a2:	d82b      	bhi.n	80089fc <__multiply+0x120>
 80089a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80089a8:	9b01      	ldr	r3, [sp, #4]
 80089aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80089ae:	3204      	adds	r2, #4
 80089b0:	f1ba 0f00 	cmp.w	sl, #0
 80089b4:	d020      	beq.n	80089f8 <__multiply+0x11c>
 80089b6:	682b      	ldr	r3, [r5, #0]
 80089b8:	4689      	mov	r9, r1
 80089ba:	46a8      	mov	r8, r5
 80089bc:	f04f 0b00 	mov.w	fp, #0
 80089c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80089c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80089c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80089cc:	445c      	add	r4, fp
 80089ce:	46c4      	mov	ip, r8
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089d6:	f84c 3b04 	str.w	r3, [ip], #4
 80089da:	f859 3b04 	ldr.w	r3, [r9], #4
 80089de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80089e2:	0c1b      	lsrs	r3, r3, #16
 80089e4:	fb0a b303 	mla	r3, sl, r3, fp
 80089e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80089ec:	454f      	cmp	r7, r9
 80089ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80089f2:	d805      	bhi.n	8008a00 <__multiply+0x124>
 80089f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80089f8:	3504      	adds	r5, #4
 80089fa:	e79b      	b.n	8008934 <__multiply+0x58>
 80089fc:	46d4      	mov	ip, sl
 80089fe:	e7b3      	b.n	8008968 <__multiply+0x8c>
 8008a00:	46e0      	mov	r8, ip
 8008a02:	e7dd      	b.n	80089c0 <__multiply+0xe4>
 8008a04:	3e01      	subs	r6, #1
 8008a06:	e799      	b.n	800893c <__multiply+0x60>

08008a08 <__pow5mult>:
 8008a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	f012 0203 	ands.w	r2, r2, #3
 8008a12:	4606      	mov	r6, r0
 8008a14:	460f      	mov	r7, r1
 8008a16:	d007      	beq.n	8008a28 <__pow5mult+0x20>
 8008a18:	3a01      	subs	r2, #1
 8008a1a:	4c21      	ldr	r4, [pc, #132]	; (8008aa0 <__pow5mult+0x98>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a22:	f7ff fec9 	bl	80087b8 <__multadd>
 8008a26:	4607      	mov	r7, r0
 8008a28:	10ad      	asrs	r5, r5, #2
 8008a2a:	d035      	beq.n	8008a98 <__pow5mult+0x90>
 8008a2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a2e:	b93c      	cbnz	r4, 8008a40 <__pow5mult+0x38>
 8008a30:	2010      	movs	r0, #16
 8008a32:	f7ff fe63 	bl	80086fc <malloc>
 8008a36:	6270      	str	r0, [r6, #36]	; 0x24
 8008a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a3c:	6004      	str	r4, [r0, #0]
 8008a3e:	60c4      	str	r4, [r0, #12]
 8008a40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a48:	b94c      	cbnz	r4, 8008a5e <__pow5mult+0x56>
 8008a4a:	f240 2171 	movw	r1, #625	; 0x271
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ff3b 	bl	80088ca <__i2b>
 8008a54:	2300      	movs	r3, #0
 8008a56:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	f04f 0800 	mov.w	r8, #0
 8008a62:	07eb      	lsls	r3, r5, #31
 8008a64:	d50a      	bpl.n	8008a7c <__pow5mult+0x74>
 8008a66:	4639      	mov	r1, r7
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ff36 	bl	80088dc <__multiply>
 8008a70:	4639      	mov	r1, r7
 8008a72:	4681      	mov	r9, r0
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff fe88 	bl	800878a <_Bfree>
 8008a7a:	464f      	mov	r7, r9
 8008a7c:	106d      	asrs	r5, r5, #1
 8008a7e:	d00b      	beq.n	8008a98 <__pow5mult+0x90>
 8008a80:	6820      	ldr	r0, [r4, #0]
 8008a82:	b938      	cbnz	r0, 8008a94 <__pow5mult+0x8c>
 8008a84:	4622      	mov	r2, r4
 8008a86:	4621      	mov	r1, r4
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff ff27 	bl	80088dc <__multiply>
 8008a8e:	6020      	str	r0, [r4, #0]
 8008a90:	f8c0 8000 	str.w	r8, [r0]
 8008a94:	4604      	mov	r4, r0
 8008a96:	e7e4      	b.n	8008a62 <__pow5mult+0x5a>
 8008a98:	4638      	mov	r0, r7
 8008a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9e:	bf00      	nop
 8008aa0:	0800bfa0 	.word	0x0800bfa0

08008aa4 <__lshift>:
 8008aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	6849      	ldr	r1, [r1, #4]
 8008ab2:	eb0a 0903 	add.w	r9, sl, r3
 8008ab6:	68a3      	ldr	r3, [r4, #8]
 8008ab8:	4607      	mov	r7, r0
 8008aba:	4616      	mov	r6, r2
 8008abc:	f109 0501 	add.w	r5, r9, #1
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	db32      	blt.n	8008b2a <__lshift+0x86>
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff fe2c 	bl	8008722 <_Balloc>
 8008aca:	2300      	movs	r3, #0
 8008acc:	4680      	mov	r8, r0
 8008ace:	f100 0114 	add.w	r1, r0, #20
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4553      	cmp	r3, sl
 8008ad6:	db2b      	blt.n	8008b30 <__lshift+0x8c>
 8008ad8:	6920      	ldr	r0, [r4, #16]
 8008ada:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ade:	f104 0314 	add.w	r3, r4, #20
 8008ae2:	f016 021f 	ands.w	r2, r6, #31
 8008ae6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008aea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008aee:	d025      	beq.n	8008b3c <__lshift+0x98>
 8008af0:	f1c2 0e20 	rsb	lr, r2, #32
 8008af4:	2000      	movs	r0, #0
 8008af6:	681e      	ldr	r6, [r3, #0]
 8008af8:	468a      	mov	sl, r1
 8008afa:	4096      	lsls	r6, r2
 8008afc:	4330      	orrs	r0, r6
 8008afe:	f84a 0b04 	str.w	r0, [sl], #4
 8008b02:	f853 0b04 	ldr.w	r0, [r3], #4
 8008b06:	459c      	cmp	ip, r3
 8008b08:	fa20 f00e 	lsr.w	r0, r0, lr
 8008b0c:	d814      	bhi.n	8008b38 <__lshift+0x94>
 8008b0e:	6048      	str	r0, [r1, #4]
 8008b10:	b108      	cbz	r0, 8008b16 <__lshift+0x72>
 8008b12:	f109 0502 	add.w	r5, r9, #2
 8008b16:	3d01      	subs	r5, #1
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f8c8 5010 	str.w	r5, [r8, #16]
 8008b1e:	4621      	mov	r1, r4
 8008b20:	f7ff fe33 	bl	800878a <_Bfree>
 8008b24:	4640      	mov	r0, r8
 8008b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2a:	3101      	adds	r1, #1
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	e7c7      	b.n	8008ac0 <__lshift+0x1c>
 8008b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008b34:	3301      	adds	r3, #1
 8008b36:	e7cd      	b.n	8008ad4 <__lshift+0x30>
 8008b38:	4651      	mov	r1, sl
 8008b3a:	e7dc      	b.n	8008af6 <__lshift+0x52>
 8008b3c:	3904      	subs	r1, #4
 8008b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b42:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b46:	459c      	cmp	ip, r3
 8008b48:	d8f9      	bhi.n	8008b3e <__lshift+0x9a>
 8008b4a:	e7e4      	b.n	8008b16 <__lshift+0x72>

08008b4c <__mcmp>:
 8008b4c:	6903      	ldr	r3, [r0, #16]
 8008b4e:	690a      	ldr	r2, [r1, #16]
 8008b50:	1a9b      	subs	r3, r3, r2
 8008b52:	b530      	push	{r4, r5, lr}
 8008b54:	d10c      	bne.n	8008b70 <__mcmp+0x24>
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	3014      	adds	r0, #20
 8008b5a:	3114      	adds	r1, #20
 8008b5c:	1884      	adds	r4, r0, r2
 8008b5e:	4411      	add	r1, r2
 8008b60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b68:	4295      	cmp	r5, r2
 8008b6a:	d003      	beq.n	8008b74 <__mcmp+0x28>
 8008b6c:	d305      	bcc.n	8008b7a <__mcmp+0x2e>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4618      	mov	r0, r3
 8008b72:	bd30      	pop	{r4, r5, pc}
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d3f3      	bcc.n	8008b60 <__mcmp+0x14>
 8008b78:	e7fa      	b.n	8008b70 <__mcmp+0x24>
 8008b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7e:	e7f7      	b.n	8008b70 <__mcmp+0x24>

08008b80 <__mdiff>:
 8008b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	460d      	mov	r5, r1
 8008b86:	4607      	mov	r7, r0
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	4614      	mov	r4, r2
 8008b8e:	f7ff ffdd 	bl	8008b4c <__mcmp>
 8008b92:	1e06      	subs	r6, r0, #0
 8008b94:	d108      	bne.n	8008ba8 <__mdiff+0x28>
 8008b96:	4631      	mov	r1, r6
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f7ff fdc2 	bl	8008722 <_Balloc>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	bfa4      	itt	ge
 8008baa:	4623      	movge	r3, r4
 8008bac:	462c      	movge	r4, r5
 8008bae:	4638      	mov	r0, r7
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	bfa6      	itte	ge
 8008bb4:	461d      	movge	r5, r3
 8008bb6:	2600      	movge	r6, #0
 8008bb8:	2601      	movlt	r6, #1
 8008bba:	f7ff fdb2 	bl	8008722 <_Balloc>
 8008bbe:	692b      	ldr	r3, [r5, #16]
 8008bc0:	60c6      	str	r6, [r0, #12]
 8008bc2:	6926      	ldr	r6, [r4, #16]
 8008bc4:	f105 0914 	add.w	r9, r5, #20
 8008bc8:	f104 0214 	add.w	r2, r4, #20
 8008bcc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008bd0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008bd4:	f100 0514 	add.w	r5, r0, #20
 8008bd8:	f04f 0e00 	mov.w	lr, #0
 8008bdc:	f852 ab04 	ldr.w	sl, [r2], #4
 8008be0:	f859 4b04 	ldr.w	r4, [r9], #4
 8008be4:	fa1e f18a 	uxtah	r1, lr, sl
 8008be8:	b2a3      	uxth	r3, r4
 8008bea:	1ac9      	subs	r1, r1, r3
 8008bec:	0c23      	lsrs	r3, r4, #16
 8008bee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008bf2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008bf6:	b289      	uxth	r1, r1
 8008bf8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008bfc:	45c8      	cmp	r8, r9
 8008bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c02:	4694      	mov	ip, r2
 8008c04:	f845 3b04 	str.w	r3, [r5], #4
 8008c08:	d8e8      	bhi.n	8008bdc <__mdiff+0x5c>
 8008c0a:	45bc      	cmp	ip, r7
 8008c0c:	d304      	bcc.n	8008c18 <__mdiff+0x98>
 8008c0e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008c12:	b183      	cbz	r3, 8008c36 <__mdiff+0xb6>
 8008c14:	6106      	str	r6, [r0, #16]
 8008c16:	e7c5      	b.n	8008ba4 <__mdiff+0x24>
 8008c18:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c1c:	fa1e f381 	uxtah	r3, lr, r1
 8008c20:	141a      	asrs	r2, r3, #16
 8008c22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c2c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008c30:	f845 3b04 	str.w	r3, [r5], #4
 8008c34:	e7e9      	b.n	8008c0a <__mdiff+0x8a>
 8008c36:	3e01      	subs	r6, #1
 8008c38:	e7e9      	b.n	8008c0e <__mdiff+0x8e>

08008c3a <__d2b>:
 8008c3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c3e:	460e      	mov	r6, r1
 8008c40:	2101      	movs	r1, #1
 8008c42:	ec59 8b10 	vmov	r8, r9, d0
 8008c46:	4615      	mov	r5, r2
 8008c48:	f7ff fd6b 	bl	8008722 <_Balloc>
 8008c4c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c50:	4607      	mov	r7, r0
 8008c52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c56:	bb34      	cbnz	r4, 8008ca6 <__d2b+0x6c>
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	f1b8 0300 	subs.w	r3, r8, #0
 8008c5e:	d027      	beq.n	8008cb0 <__d2b+0x76>
 8008c60:	a802      	add	r0, sp, #8
 8008c62:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008c66:	f7ff fe01 	bl	800886c <__lo0bits>
 8008c6a:	9900      	ldr	r1, [sp, #0]
 8008c6c:	b1f0      	cbz	r0, 8008cac <__d2b+0x72>
 8008c6e:	9a01      	ldr	r2, [sp, #4]
 8008c70:	f1c0 0320 	rsb	r3, r0, #32
 8008c74:	fa02 f303 	lsl.w	r3, r2, r3
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	40c2      	lsrs	r2, r0
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	9201      	str	r2, [sp, #4]
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	61bb      	str	r3, [r7, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bf14      	ite	ne
 8008c88:	2102      	movne	r1, #2
 8008c8a:	2101      	moveq	r1, #1
 8008c8c:	6139      	str	r1, [r7, #16]
 8008c8e:	b1c4      	cbz	r4, 8008cc2 <__d2b+0x88>
 8008c90:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c94:	4404      	add	r4, r0
 8008c96:	6034      	str	r4, [r6, #0]
 8008c98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c9c:	6028      	str	r0, [r5, #0]
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	b003      	add	sp, #12
 8008ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008caa:	e7d5      	b.n	8008c58 <__d2b+0x1e>
 8008cac:	6179      	str	r1, [r7, #20]
 8008cae:	e7e7      	b.n	8008c80 <__d2b+0x46>
 8008cb0:	a801      	add	r0, sp, #4
 8008cb2:	f7ff fddb 	bl	800886c <__lo0bits>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	2101      	movs	r1, #1
 8008cbc:	6139      	str	r1, [r7, #16]
 8008cbe:	3020      	adds	r0, #32
 8008cc0:	e7e5      	b.n	8008c8e <__d2b+0x54>
 8008cc2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008cc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cca:	6030      	str	r0, [r6, #0]
 8008ccc:	6918      	ldr	r0, [r3, #16]
 8008cce:	f7ff fdae 	bl	800882e <__hi0bits>
 8008cd2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008cd6:	e7e1      	b.n	8008c9c <__d2b+0x62>

08008cd8 <_calloc_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	fb02 f401 	mul.w	r4, r2, r1
 8008cde:	4621      	mov	r1, r4
 8008ce0:	f000 f856 	bl	8008d90 <_malloc_r>
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	b118      	cbz	r0, 8008cf0 <_calloc_r+0x18>
 8008ce8:	4622      	mov	r2, r4
 8008cea:	2100      	movs	r1, #0
 8008cec:	f7fe fa1b 	bl	8007126 <memset>
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}

08008cf4 <_free_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d045      	beq.n	8008d88 <_free_r+0x94>
 8008cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d00:	1f0c      	subs	r4, r1, #4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfb8      	it	lt
 8008d06:	18e4      	addlt	r4, r4, r3
 8008d08:	f000 fa10 	bl	800912c <__malloc_lock>
 8008d0c:	4a1f      	ldr	r2, [pc, #124]	; (8008d8c <_free_r+0x98>)
 8008d0e:	6813      	ldr	r3, [r2, #0]
 8008d10:	4610      	mov	r0, r2
 8008d12:	b933      	cbnz	r3, 8008d22 <_free_r+0x2e>
 8008d14:	6063      	str	r3, [r4, #4]
 8008d16:	6014      	str	r4, [r2, #0]
 8008d18:	4628      	mov	r0, r5
 8008d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d1e:	f000 ba06 	b.w	800912e <__malloc_unlock>
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	d90c      	bls.n	8008d40 <_free_r+0x4c>
 8008d26:	6821      	ldr	r1, [r4, #0]
 8008d28:	1862      	adds	r2, r4, r1
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	bf04      	itt	eq
 8008d2e:	681a      	ldreq	r2, [r3, #0]
 8008d30:	685b      	ldreq	r3, [r3, #4]
 8008d32:	6063      	str	r3, [r4, #4]
 8008d34:	bf04      	itt	eq
 8008d36:	1852      	addeq	r2, r2, r1
 8008d38:	6022      	streq	r2, [r4, #0]
 8008d3a:	6004      	str	r4, [r0, #0]
 8008d3c:	e7ec      	b.n	8008d18 <_free_r+0x24>
 8008d3e:	4613      	mov	r3, r2
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	b10a      	cbz	r2, 8008d48 <_free_r+0x54>
 8008d44:	42a2      	cmp	r2, r4
 8008d46:	d9fa      	bls.n	8008d3e <_free_r+0x4a>
 8008d48:	6819      	ldr	r1, [r3, #0]
 8008d4a:	1858      	adds	r0, r3, r1
 8008d4c:	42a0      	cmp	r0, r4
 8008d4e:	d10b      	bne.n	8008d68 <_free_r+0x74>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	4401      	add	r1, r0
 8008d54:	1858      	adds	r0, r3, r1
 8008d56:	4282      	cmp	r2, r0
 8008d58:	6019      	str	r1, [r3, #0]
 8008d5a:	d1dd      	bne.n	8008d18 <_free_r+0x24>
 8008d5c:	6810      	ldr	r0, [r2, #0]
 8008d5e:	6852      	ldr	r2, [r2, #4]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	4401      	add	r1, r0
 8008d64:	6019      	str	r1, [r3, #0]
 8008d66:	e7d7      	b.n	8008d18 <_free_r+0x24>
 8008d68:	d902      	bls.n	8008d70 <_free_r+0x7c>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	e7d3      	b.n	8008d18 <_free_r+0x24>
 8008d70:	6820      	ldr	r0, [r4, #0]
 8008d72:	1821      	adds	r1, r4, r0
 8008d74:	428a      	cmp	r2, r1
 8008d76:	bf04      	itt	eq
 8008d78:	6811      	ldreq	r1, [r2, #0]
 8008d7a:	6852      	ldreq	r2, [r2, #4]
 8008d7c:	6062      	str	r2, [r4, #4]
 8008d7e:	bf04      	itt	eq
 8008d80:	1809      	addeq	r1, r1, r0
 8008d82:	6021      	streq	r1, [r4, #0]
 8008d84:	605c      	str	r4, [r3, #4]
 8008d86:	e7c7      	b.n	8008d18 <_free_r+0x24>
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	2000091c 	.word	0x2000091c

08008d90 <_malloc_r>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	1ccd      	adds	r5, r1, #3
 8008d94:	f025 0503 	bic.w	r5, r5, #3
 8008d98:	3508      	adds	r5, #8
 8008d9a:	2d0c      	cmp	r5, #12
 8008d9c:	bf38      	it	cc
 8008d9e:	250c      	movcc	r5, #12
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	4606      	mov	r6, r0
 8008da4:	db01      	blt.n	8008daa <_malloc_r+0x1a>
 8008da6:	42a9      	cmp	r1, r5
 8008da8:	d903      	bls.n	8008db2 <_malloc_r+0x22>
 8008daa:	230c      	movs	r3, #12
 8008dac:	6033      	str	r3, [r6, #0]
 8008dae:	2000      	movs	r0, #0
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
 8008db2:	f000 f9bb 	bl	800912c <__malloc_lock>
 8008db6:	4a21      	ldr	r2, [pc, #132]	; (8008e3c <_malloc_r+0xac>)
 8008db8:	6814      	ldr	r4, [r2, #0]
 8008dba:	4621      	mov	r1, r4
 8008dbc:	b991      	cbnz	r1, 8008de4 <_malloc_r+0x54>
 8008dbe:	4c20      	ldr	r4, [pc, #128]	; (8008e40 <_malloc_r+0xb0>)
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	b91b      	cbnz	r3, 8008dcc <_malloc_r+0x3c>
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f000 f98f 	bl	80090e8 <_sbrk_r>
 8008dca:	6020      	str	r0, [r4, #0]
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 f98a 	bl	80090e8 <_sbrk_r>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d124      	bne.n	8008e22 <_malloc_r+0x92>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	6033      	str	r3, [r6, #0]
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f000 f9a6 	bl	800912e <__malloc_unlock>
 8008de2:	e7e4      	b.n	8008dae <_malloc_r+0x1e>
 8008de4:	680b      	ldr	r3, [r1, #0]
 8008de6:	1b5b      	subs	r3, r3, r5
 8008de8:	d418      	bmi.n	8008e1c <_malloc_r+0x8c>
 8008dea:	2b0b      	cmp	r3, #11
 8008dec:	d90f      	bls.n	8008e0e <_malloc_r+0x7e>
 8008dee:	600b      	str	r3, [r1, #0]
 8008df0:	50cd      	str	r5, [r1, r3]
 8008df2:	18cc      	adds	r4, r1, r3
 8008df4:	4630      	mov	r0, r6
 8008df6:	f000 f99a 	bl	800912e <__malloc_unlock>
 8008dfa:	f104 000b 	add.w	r0, r4, #11
 8008dfe:	1d23      	adds	r3, r4, #4
 8008e00:	f020 0007 	bic.w	r0, r0, #7
 8008e04:	1ac3      	subs	r3, r0, r3
 8008e06:	d0d3      	beq.n	8008db0 <_malloc_r+0x20>
 8008e08:	425a      	negs	r2, r3
 8008e0a:	50e2      	str	r2, [r4, r3]
 8008e0c:	e7d0      	b.n	8008db0 <_malloc_r+0x20>
 8008e0e:	428c      	cmp	r4, r1
 8008e10:	684b      	ldr	r3, [r1, #4]
 8008e12:	bf16      	itet	ne
 8008e14:	6063      	strne	r3, [r4, #4]
 8008e16:	6013      	streq	r3, [r2, #0]
 8008e18:	460c      	movne	r4, r1
 8008e1a:	e7eb      	b.n	8008df4 <_malloc_r+0x64>
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	6849      	ldr	r1, [r1, #4]
 8008e20:	e7cc      	b.n	8008dbc <_malloc_r+0x2c>
 8008e22:	1cc4      	adds	r4, r0, #3
 8008e24:	f024 0403 	bic.w	r4, r4, #3
 8008e28:	42a0      	cmp	r0, r4
 8008e2a:	d005      	beq.n	8008e38 <_malloc_r+0xa8>
 8008e2c:	1a21      	subs	r1, r4, r0
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f000 f95a 	bl	80090e8 <_sbrk_r>
 8008e34:	3001      	adds	r0, #1
 8008e36:	d0cf      	beq.n	8008dd8 <_malloc_r+0x48>
 8008e38:	6025      	str	r5, [r4, #0]
 8008e3a:	e7db      	b.n	8008df4 <_malloc_r+0x64>
 8008e3c:	2000091c 	.word	0x2000091c
 8008e40:	20000920 	.word	0x20000920

08008e44 <__ssputs_r>:
 8008e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e48:	688e      	ldr	r6, [r1, #8]
 8008e4a:	429e      	cmp	r6, r3
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4690      	mov	r8, r2
 8008e52:	4699      	mov	r9, r3
 8008e54:	d837      	bhi.n	8008ec6 <__ssputs_r+0x82>
 8008e56:	898a      	ldrh	r2, [r1, #12]
 8008e58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e5c:	d031      	beq.n	8008ec2 <__ssputs_r+0x7e>
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	6909      	ldr	r1, [r1, #16]
 8008e62:	1a6f      	subs	r7, r5, r1
 8008e64:	6965      	ldr	r5, [r4, #20]
 8008e66:	2302      	movs	r3, #2
 8008e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e70:	f109 0301 	add.w	r3, r9, #1
 8008e74:	443b      	add	r3, r7
 8008e76:	429d      	cmp	r5, r3
 8008e78:	bf38      	it	cc
 8008e7a:	461d      	movcc	r5, r3
 8008e7c:	0553      	lsls	r3, r2, #21
 8008e7e:	d530      	bpl.n	8008ee2 <__ssputs_r+0x9e>
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7ff ff85 	bl	8008d90 <_malloc_r>
 8008e86:	4606      	mov	r6, r0
 8008e88:	b950      	cbnz	r0, 8008ea0 <__ssputs_r+0x5c>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	f8ca 3000 	str.w	r3, [sl]
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	463a      	mov	r2, r7
 8008ea2:	6921      	ldr	r1, [r4, #16]
 8008ea4:	f7ff fc32 	bl	800870c <memcpy>
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	6126      	str	r6, [r4, #16]
 8008eb6:	6165      	str	r5, [r4, #20]
 8008eb8:	443e      	add	r6, r7
 8008eba:	1bed      	subs	r5, r5, r7
 8008ebc:	6026      	str	r6, [r4, #0]
 8008ebe:	60a5      	str	r5, [r4, #8]
 8008ec0:	464e      	mov	r6, r9
 8008ec2:	454e      	cmp	r6, r9
 8008ec4:	d900      	bls.n	8008ec8 <__ssputs_r+0x84>
 8008ec6:	464e      	mov	r6, r9
 8008ec8:	4632      	mov	r2, r6
 8008eca:	4641      	mov	r1, r8
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	f7fe f911 	bl	80070f4 <memmove>
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	1b9b      	subs	r3, r3, r6
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	441e      	add	r6, r3
 8008edc:	6026      	str	r6, [r4, #0]
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e7dc      	b.n	8008e9c <__ssputs_r+0x58>
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	f000 f924 	bl	8009130 <_realloc_r>
 8008ee8:	4606      	mov	r6, r0
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d1e2      	bne.n	8008eb4 <__ssputs_r+0x70>
 8008eee:	6921      	ldr	r1, [r4, #16]
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	f7ff feff 	bl	8008cf4 <_free_r>
 8008ef6:	e7c8      	b.n	8008e8a <__ssputs_r+0x46>

08008ef8 <_svfiprintf_r>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	461d      	mov	r5, r3
 8008efe:	898b      	ldrh	r3, [r1, #12]
 8008f00:	061f      	lsls	r7, r3, #24
 8008f02:	b09d      	sub	sp, #116	; 0x74
 8008f04:	4680      	mov	r8, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	4616      	mov	r6, r2
 8008f0a:	d50f      	bpl.n	8008f2c <_svfiprintf_r+0x34>
 8008f0c:	690b      	ldr	r3, [r1, #16]
 8008f0e:	b96b      	cbnz	r3, 8008f2c <_svfiprintf_r+0x34>
 8008f10:	2140      	movs	r1, #64	; 0x40
 8008f12:	f7ff ff3d 	bl	8008d90 <_malloc_r>
 8008f16:	6020      	str	r0, [r4, #0]
 8008f18:	6120      	str	r0, [r4, #16]
 8008f1a:	b928      	cbnz	r0, 8008f28 <_svfiprintf_r+0x30>
 8008f1c:	230c      	movs	r3, #12
 8008f1e:	f8c8 3000 	str.w	r3, [r8]
 8008f22:	f04f 30ff 	mov.w	r0, #4294967295
 8008f26:	e0c8      	b.n	80090ba <_svfiprintf_r+0x1c2>
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	6163      	str	r3, [r4, #20]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f30:	2320      	movs	r3, #32
 8008f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f36:	2330      	movs	r3, #48	; 0x30
 8008f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f3c:	9503      	str	r5, [sp, #12]
 8008f3e:	f04f 0b01 	mov.w	fp, #1
 8008f42:	4637      	mov	r7, r6
 8008f44:	463d      	mov	r5, r7
 8008f46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f4a:	b10b      	cbz	r3, 8008f50 <_svfiprintf_r+0x58>
 8008f4c:	2b25      	cmp	r3, #37	; 0x25
 8008f4e:	d13e      	bne.n	8008fce <_svfiprintf_r+0xd6>
 8008f50:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f54:	d00b      	beq.n	8008f6e <_svfiprintf_r+0x76>
 8008f56:	4653      	mov	r3, sl
 8008f58:	4632      	mov	r2, r6
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	f7ff ff71 	bl	8008e44 <__ssputs_r>
 8008f62:	3001      	adds	r0, #1
 8008f64:	f000 80a4 	beq.w	80090b0 <_svfiprintf_r+0x1b8>
 8008f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6a:	4453      	add	r3, sl
 8008f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6e:	783b      	ldrb	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 809d 	beq.w	80090b0 <_svfiprintf_r+0x1b8>
 8008f76:	2300      	movs	r3, #0
 8008f78:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	9307      	str	r3, [sp, #28]
 8008f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f88:	931a      	str	r3, [sp, #104]	; 0x68
 8008f8a:	462f      	mov	r7, r5
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008f92:	4850      	ldr	r0, [pc, #320]	; (80090d4 <_svfiprintf_r+0x1dc>)
 8008f94:	f7f7 f924 	bl	80001e0 <memchr>
 8008f98:	9b04      	ldr	r3, [sp, #16]
 8008f9a:	b9d0      	cbnz	r0, 8008fd2 <_svfiprintf_r+0xda>
 8008f9c:	06d9      	lsls	r1, r3, #27
 8008f9e:	bf44      	itt	mi
 8008fa0:	2220      	movmi	r2, #32
 8008fa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fa6:	071a      	lsls	r2, r3, #28
 8008fa8:	bf44      	itt	mi
 8008faa:	222b      	movmi	r2, #43	; 0x2b
 8008fac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fb0:	782a      	ldrb	r2, [r5, #0]
 8008fb2:	2a2a      	cmp	r2, #42	; 0x2a
 8008fb4:	d015      	beq.n	8008fe2 <_svfiprintf_r+0xea>
 8008fb6:	9a07      	ldr	r2, [sp, #28]
 8008fb8:	462f      	mov	r7, r5
 8008fba:	2000      	movs	r0, #0
 8008fbc:	250a      	movs	r5, #10
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc4:	3b30      	subs	r3, #48	; 0x30
 8008fc6:	2b09      	cmp	r3, #9
 8008fc8:	d94d      	bls.n	8009066 <_svfiprintf_r+0x16e>
 8008fca:	b1b8      	cbz	r0, 8008ffc <_svfiprintf_r+0x104>
 8008fcc:	e00f      	b.n	8008fee <_svfiprintf_r+0xf6>
 8008fce:	462f      	mov	r7, r5
 8008fd0:	e7b8      	b.n	8008f44 <_svfiprintf_r+0x4c>
 8008fd2:	4a40      	ldr	r2, [pc, #256]	; (80090d4 <_svfiprintf_r+0x1dc>)
 8008fd4:	1a80      	subs	r0, r0, r2
 8008fd6:	fa0b f000 	lsl.w	r0, fp, r0
 8008fda:	4318      	orrs	r0, r3
 8008fdc:	9004      	str	r0, [sp, #16]
 8008fde:	463d      	mov	r5, r7
 8008fe0:	e7d3      	b.n	8008f8a <_svfiprintf_r+0x92>
 8008fe2:	9a03      	ldr	r2, [sp, #12]
 8008fe4:	1d11      	adds	r1, r2, #4
 8008fe6:	6812      	ldr	r2, [r2, #0]
 8008fe8:	9103      	str	r1, [sp, #12]
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	db01      	blt.n	8008ff2 <_svfiprintf_r+0xfa>
 8008fee:	9207      	str	r2, [sp, #28]
 8008ff0:	e004      	b.n	8008ffc <_svfiprintf_r+0x104>
 8008ff2:	4252      	negs	r2, r2
 8008ff4:	f043 0302 	orr.w	r3, r3, #2
 8008ff8:	9207      	str	r2, [sp, #28]
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	783b      	ldrb	r3, [r7, #0]
 8008ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8009000:	d10c      	bne.n	800901c <_svfiprintf_r+0x124>
 8009002:	787b      	ldrb	r3, [r7, #1]
 8009004:	2b2a      	cmp	r3, #42	; 0x2a
 8009006:	d133      	bne.n	8009070 <_svfiprintf_r+0x178>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9203      	str	r2, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfb8      	it	lt
 8009014:	f04f 33ff 	movlt.w	r3, #4294967295
 8009018:	3702      	adds	r7, #2
 800901a:	9305      	str	r3, [sp, #20]
 800901c:	4d2e      	ldr	r5, [pc, #184]	; (80090d8 <_svfiprintf_r+0x1e0>)
 800901e:	7839      	ldrb	r1, [r7, #0]
 8009020:	2203      	movs	r2, #3
 8009022:	4628      	mov	r0, r5
 8009024:	f7f7 f8dc 	bl	80001e0 <memchr>
 8009028:	b138      	cbz	r0, 800903a <_svfiprintf_r+0x142>
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	1b40      	subs	r0, r0, r5
 800902e:	fa03 f000 	lsl.w	r0, r3, r0
 8009032:	9b04      	ldr	r3, [sp, #16]
 8009034:	4303      	orrs	r3, r0
 8009036:	3701      	adds	r7, #1
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	7839      	ldrb	r1, [r7, #0]
 800903c:	4827      	ldr	r0, [pc, #156]	; (80090dc <_svfiprintf_r+0x1e4>)
 800903e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009042:	2206      	movs	r2, #6
 8009044:	1c7e      	adds	r6, r7, #1
 8009046:	f7f7 f8cb 	bl	80001e0 <memchr>
 800904a:	2800      	cmp	r0, #0
 800904c:	d038      	beq.n	80090c0 <_svfiprintf_r+0x1c8>
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <_svfiprintf_r+0x1e8>)
 8009050:	bb13      	cbnz	r3, 8009098 <_svfiprintf_r+0x1a0>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	3307      	adds	r3, #7
 8009056:	f023 0307 	bic.w	r3, r3, #7
 800905a:	3308      	adds	r3, #8
 800905c:	9303      	str	r3, [sp, #12]
 800905e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009060:	444b      	add	r3, r9
 8009062:	9309      	str	r3, [sp, #36]	; 0x24
 8009064:	e76d      	b.n	8008f42 <_svfiprintf_r+0x4a>
 8009066:	fb05 3202 	mla	r2, r5, r2, r3
 800906a:	2001      	movs	r0, #1
 800906c:	460f      	mov	r7, r1
 800906e:	e7a6      	b.n	8008fbe <_svfiprintf_r+0xc6>
 8009070:	2300      	movs	r3, #0
 8009072:	3701      	adds	r7, #1
 8009074:	9305      	str	r3, [sp, #20]
 8009076:	4619      	mov	r1, r3
 8009078:	250a      	movs	r5, #10
 800907a:	4638      	mov	r0, r7
 800907c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009080:	3a30      	subs	r2, #48	; 0x30
 8009082:	2a09      	cmp	r2, #9
 8009084:	d903      	bls.n	800908e <_svfiprintf_r+0x196>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0c8      	beq.n	800901c <_svfiprintf_r+0x124>
 800908a:	9105      	str	r1, [sp, #20]
 800908c:	e7c6      	b.n	800901c <_svfiprintf_r+0x124>
 800908e:	fb05 2101 	mla	r1, r5, r1, r2
 8009092:	2301      	movs	r3, #1
 8009094:	4607      	mov	r7, r0
 8009096:	e7f0      	b.n	800907a <_svfiprintf_r+0x182>
 8009098:	ab03      	add	r3, sp, #12
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	4622      	mov	r2, r4
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <_svfiprintf_r+0x1ec>)
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	4640      	mov	r0, r8
 80090a4:	f7fe f8dc 	bl	8007260 <_printf_float>
 80090a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090ac:	4681      	mov	r9, r0
 80090ae:	d1d6      	bne.n	800905e <_svfiprintf_r+0x166>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	065b      	lsls	r3, r3, #25
 80090b4:	f53f af35 	bmi.w	8008f22 <_svfiprintf_r+0x2a>
 80090b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ba:	b01d      	add	sp, #116	; 0x74
 80090bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	4622      	mov	r2, r4
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <_svfiprintf_r+0x1ec>)
 80090c8:	a904      	add	r1, sp, #16
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7fe fb7e 	bl	80077cc <_printf_i>
 80090d0:	e7ea      	b.n	80090a8 <_svfiprintf_r+0x1b0>
 80090d2:	bf00      	nop
 80090d4:	0800bfac 	.word	0x0800bfac
 80090d8:	0800bfb2 	.word	0x0800bfb2
 80090dc:	0800bfb6 	.word	0x0800bfb6
 80090e0:	08007261 	.word	0x08007261
 80090e4:	08008e45 	.word	0x08008e45

080090e8 <_sbrk_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4c06      	ldr	r4, [pc, #24]	; (8009104 <_sbrk_r+0x1c>)
 80090ec:	2300      	movs	r3, #0
 80090ee:	4605      	mov	r5, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	f7f9 fdb6 	bl	8002c64 <_sbrk>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_sbrk_r+0x1a>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_sbrk_r+0x1a>
 8009100:	602b      	str	r3, [r5, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	20000a28 	.word	0x20000a28

08009108 <__ascii_mbtowc>:
 8009108:	b082      	sub	sp, #8
 800910a:	b901      	cbnz	r1, 800910e <__ascii_mbtowc+0x6>
 800910c:	a901      	add	r1, sp, #4
 800910e:	b142      	cbz	r2, 8009122 <__ascii_mbtowc+0x1a>
 8009110:	b14b      	cbz	r3, 8009126 <__ascii_mbtowc+0x1e>
 8009112:	7813      	ldrb	r3, [r2, #0]
 8009114:	600b      	str	r3, [r1, #0]
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	1c10      	adds	r0, r2, #0
 800911a:	bf18      	it	ne
 800911c:	2001      	movne	r0, #1
 800911e:	b002      	add	sp, #8
 8009120:	4770      	bx	lr
 8009122:	4610      	mov	r0, r2
 8009124:	e7fb      	b.n	800911e <__ascii_mbtowc+0x16>
 8009126:	f06f 0001 	mvn.w	r0, #1
 800912a:	e7f8      	b.n	800911e <__ascii_mbtowc+0x16>

0800912c <__malloc_lock>:
 800912c:	4770      	bx	lr

0800912e <__malloc_unlock>:
 800912e:	4770      	bx	lr

08009130 <_realloc_r>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	4607      	mov	r7, r0
 8009134:	4614      	mov	r4, r2
 8009136:	460e      	mov	r6, r1
 8009138:	b921      	cbnz	r1, 8009144 <_realloc_r+0x14>
 800913a:	4611      	mov	r1, r2
 800913c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009140:	f7ff be26 	b.w	8008d90 <_malloc_r>
 8009144:	b922      	cbnz	r2, 8009150 <_realloc_r+0x20>
 8009146:	f7ff fdd5 	bl	8008cf4 <_free_r>
 800914a:	4625      	mov	r5, r4
 800914c:	4628      	mov	r0, r5
 800914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009150:	f000 f821 	bl	8009196 <_malloc_usable_size_r>
 8009154:	42a0      	cmp	r0, r4
 8009156:	d20f      	bcs.n	8009178 <_realloc_r+0x48>
 8009158:	4621      	mov	r1, r4
 800915a:	4638      	mov	r0, r7
 800915c:	f7ff fe18 	bl	8008d90 <_malloc_r>
 8009160:	4605      	mov	r5, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d0f2      	beq.n	800914c <_realloc_r+0x1c>
 8009166:	4631      	mov	r1, r6
 8009168:	4622      	mov	r2, r4
 800916a:	f7ff facf 	bl	800870c <memcpy>
 800916e:	4631      	mov	r1, r6
 8009170:	4638      	mov	r0, r7
 8009172:	f7ff fdbf 	bl	8008cf4 <_free_r>
 8009176:	e7e9      	b.n	800914c <_realloc_r+0x1c>
 8009178:	4635      	mov	r5, r6
 800917a:	e7e7      	b.n	800914c <_realloc_r+0x1c>

0800917c <__ascii_wctomb>:
 800917c:	b149      	cbz	r1, 8009192 <__ascii_wctomb+0x16>
 800917e:	2aff      	cmp	r2, #255	; 0xff
 8009180:	bf85      	ittet	hi
 8009182:	238a      	movhi	r3, #138	; 0x8a
 8009184:	6003      	strhi	r3, [r0, #0]
 8009186:	700a      	strbls	r2, [r1, #0]
 8009188:	f04f 30ff 	movhi.w	r0, #4294967295
 800918c:	bf98      	it	ls
 800918e:	2001      	movls	r0, #1
 8009190:	4770      	bx	lr
 8009192:	4608      	mov	r0, r1
 8009194:	4770      	bx	lr

08009196 <_malloc_usable_size_r>:
 8009196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800919a:	1f18      	subs	r0, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	bfbc      	itt	lt
 80091a0:	580b      	ldrlt	r3, [r1, r0]
 80091a2:	18c0      	addlt	r0, r0, r3
 80091a4:	4770      	bx	lr
	...

080091a8 <round>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	ec57 6b10 	vmov	r6, r7, d0
 80091ae:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80091b2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80091b6:	2c13      	cmp	r4, #19
 80091b8:	463b      	mov	r3, r7
 80091ba:	463d      	mov	r5, r7
 80091bc:	dc17      	bgt.n	80091ee <round+0x46>
 80091be:	2c00      	cmp	r4, #0
 80091c0:	da09      	bge.n	80091d6 <round+0x2e>
 80091c2:	3401      	adds	r4, #1
 80091c4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80091c8:	d103      	bne.n	80091d2 <round+0x2a>
 80091ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80091ce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091d2:	2100      	movs	r1, #0
 80091d4:	e02c      	b.n	8009230 <round+0x88>
 80091d6:	4a18      	ldr	r2, [pc, #96]	; (8009238 <round+0x90>)
 80091d8:	4122      	asrs	r2, r4
 80091da:	4217      	tst	r7, r2
 80091dc:	d100      	bne.n	80091e0 <round+0x38>
 80091de:	b19e      	cbz	r6, 8009208 <round+0x60>
 80091e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091e4:	4123      	asrs	r3, r4
 80091e6:	442b      	add	r3, r5
 80091e8:	ea23 0302 	bic.w	r3, r3, r2
 80091ec:	e7f1      	b.n	80091d2 <round+0x2a>
 80091ee:	2c33      	cmp	r4, #51	; 0x33
 80091f0:	dd0d      	ble.n	800920e <round+0x66>
 80091f2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80091f6:	d107      	bne.n	8009208 <round+0x60>
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	ee10 2a10 	vmov	r2, s0
 8009200:	f7f7 f844 	bl	800028c <__adddf3>
 8009204:	4606      	mov	r6, r0
 8009206:	460f      	mov	r7, r1
 8009208:	ec47 6b10 	vmov	d0, r6, r7
 800920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8009212:	f04f 30ff 	mov.w	r0, #4294967295
 8009216:	40d0      	lsrs	r0, r2
 8009218:	4206      	tst	r6, r0
 800921a:	d0f5      	beq.n	8009208 <round+0x60>
 800921c:	2201      	movs	r2, #1
 800921e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009222:	fa02 f404 	lsl.w	r4, r2, r4
 8009226:	1931      	adds	r1, r6, r4
 8009228:	bf28      	it	cs
 800922a:	189b      	addcs	r3, r3, r2
 800922c:	ea21 0100 	bic.w	r1, r1, r0
 8009230:	461f      	mov	r7, r3
 8009232:	460e      	mov	r6, r1
 8009234:	e7e8      	b.n	8009208 <round+0x60>
 8009236:	bf00      	nop
 8009238:	000fffff 	.word	0x000fffff

0800923c <_init>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr

08009248 <_fini>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr
