
PWM_separate_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000295c  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d38  08008d38  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d40  08008d40  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d40  08008d40  00018d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08008d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  200000c0  08008e08  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08008e08  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016916  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c70  00000000  00000000  00036a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  00039678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  0003a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028c71  00000000  00000000  0003b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000116b4  00000000  00000000  00064629  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f543d  00000000  00000000  00075cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b11a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed8  00000000  00000000  0016b198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063c4 	.word	0x080063c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	080063c4 	.word	0x080063c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <update_OLED_display>:
OLEDStates_type OLEDDisplayState = Case1;
bool OLEDupToDate = false;


void update_OLED_display(OLEDStates_type State)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	switch(State)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b06      	cmp	r3, #6
 800058e:	f200 810d 	bhi.w	80007ac <update_OLED_display+0x22c>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <update_OLED_display+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005b5 	.word	0x080005b5
 800059c:	080005fd 	.word	0x080005fd
 80005a0:	08000645 	.word	0x08000645
 80005a4:	0800068d 	.word	0x0800068d
 80005a8:	080006d5 	.word	0x080006d5
 80005ac:	0800071d 	.word	0x0800071d
 80005b0:	08000765 	.word	0x08000765
	{
	case Case1:
		ssd1306_Fill(Black);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f005 f951 	bl	800585c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f005 fa9b 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 1", Font_16x26, White);
 80005c2:	4a7e      	ldr	r2, [pc, #504]	; (80007bc <update_OLED_display+0x23c>)
 80005c4:	2301      	movs	r3, #1
 80005c6:	ca06      	ldmia	r2, {r1, r2}
 80005c8:	487d      	ldr	r0, [pc, #500]	; (80007c0 <update_OLED_display+0x240>)
 80005ca:	f005 fa6f 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80005ce:	2120      	movs	r1, #32
 80005d0:	2000      	movs	r0, #0
 80005d2:	f005 fa91 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80005d6:	4a7b      	ldr	r2, [pc, #492]	; (80007c4 <update_OLED_display+0x244>)
 80005d8:	2301      	movs	r3, #1
 80005da:	ca06      	ldmia	r2, {r1, r2}
 80005dc:	487a      	ldr	r0, [pc, #488]	; (80007c8 <update_OLED_display+0x248>)
 80005de:	f005 fa65 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 80005e2:	212d      	movs	r1, #45	; 0x2d
 80005e4:	2000      	movs	r0, #0
 80005e6:	f005 fa87 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("0.850 1.925", Font_11x18, White);
 80005ea:	4a78      	ldr	r2, [pc, #480]	; (80007cc <update_OLED_display+0x24c>)
 80005ec:	2301      	movs	r3, #1
 80005ee:	ca06      	ldmia	r2, {r1, r2}
 80005f0:	4877      	ldr	r0, [pc, #476]	; (80007d0 <update_OLED_display+0x250>)
 80005f2:	f005 fa5b 	bl	8005aac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80005f6:	f005 f953 	bl	80058a0 <ssd1306_UpdateScreen>
		break;
 80005fa:	e0d8      	b.n	80007ae <update_OLED_display+0x22e>

	case Case2:
		ssd1306_Fill(Black);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f005 f92d 	bl	800585c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000602:	2100      	movs	r1, #0
 8000604:	2000      	movs	r0, #0
 8000606:	f005 fa77 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 2", Font_16x26, White);
 800060a:	4a6c      	ldr	r2, [pc, #432]	; (80007bc <update_OLED_display+0x23c>)
 800060c:	2301      	movs	r3, #1
 800060e:	ca06      	ldmia	r2, {r1, r2}
 8000610:	4870      	ldr	r0, [pc, #448]	; (80007d4 <update_OLED_display+0x254>)
 8000612:	f005 fa4b 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8000616:	2120      	movs	r1, #32
 8000618:	2000      	movs	r0, #0
 800061a:	f005 fa6d 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 800061e:	4a69      	ldr	r2, [pc, #420]	; (80007c4 <update_OLED_display+0x244>)
 8000620:	2301      	movs	r3, #1
 8000622:	ca06      	ldmia	r2, {r1, r2}
 8000624:	4868      	ldr	r0, [pc, #416]	; (80007c8 <update_OLED_display+0x248>)
 8000626:	f005 fa41 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 800062a:	212d      	movs	r1, #45	; 0x2d
 800062c:	2000      	movs	r0, #0
 800062e:	f005 fa63 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("1.350 1.800", Font_11x18, White);
 8000632:	4a66      	ldr	r2, [pc, #408]	; (80007cc <update_OLED_display+0x24c>)
 8000634:	2301      	movs	r3, #1
 8000636:	ca06      	ldmia	r2, {r1, r2}
 8000638:	4867      	ldr	r0, [pc, #412]	; (80007d8 <update_OLED_display+0x258>)
 800063a:	f005 fa37 	bl	8005aac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800063e:	f005 f92f 	bl	80058a0 <ssd1306_UpdateScreen>
		break;
 8000642:	e0b4      	b.n	80007ae <update_OLED_display+0x22e>

	case Case3:
		ssd1306_Fill(Black);
 8000644:	2000      	movs	r0, #0
 8000646:	f005 f909 	bl	800585c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	2000      	movs	r0, #0
 800064e:	f005 fa53 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 3", Font_16x26, White);
 8000652:	4a5a      	ldr	r2, [pc, #360]	; (80007bc <update_OLED_display+0x23c>)
 8000654:	2301      	movs	r3, #1
 8000656:	ca06      	ldmia	r2, {r1, r2}
 8000658:	4860      	ldr	r0, [pc, #384]	; (80007dc <update_OLED_display+0x25c>)
 800065a:	f005 fa27 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 800065e:	2120      	movs	r1, #32
 8000660:	2000      	movs	r0, #0
 8000662:	f005 fa49 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8000666:	4a57      	ldr	r2, [pc, #348]	; (80007c4 <update_OLED_display+0x244>)
 8000668:	2301      	movs	r3, #1
 800066a:	ca06      	ldmia	r2, {r1, r2}
 800066c:	4856      	ldr	r0, [pc, #344]	; (80007c8 <update_OLED_display+0x248>)
 800066e:	f005 fa1d 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000672:	212d      	movs	r1, #45	; 0x2d
 8000674:	2000      	movs	r0, #0
 8000676:	f005 fa3f 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("2.215 1.350", Font_11x18, White);
 800067a:	4a54      	ldr	r2, [pc, #336]	; (80007cc <update_OLED_display+0x24c>)
 800067c:	2301      	movs	r3, #1
 800067e:	ca06      	ldmia	r2, {r1, r2}
 8000680:	4857      	ldr	r0, [pc, #348]	; (80007e0 <update_OLED_display+0x260>)
 8000682:	f005 fa13 	bl	8005aac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000686:	f005 f90b 	bl	80058a0 <ssd1306_UpdateScreen>
		break;
 800068a:	e090      	b.n	80007ae <update_OLED_display+0x22e>

	case Case4:
		ssd1306_Fill(Black);
 800068c:	2000      	movs	r0, #0
 800068e:	f005 f8e5 	bl	800585c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000692:	2100      	movs	r1, #0
 8000694:	2000      	movs	r0, #0
 8000696:	f005 fa2f 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 4", Font_16x26, White);
 800069a:	4a48      	ldr	r2, [pc, #288]	; (80007bc <update_OLED_display+0x23c>)
 800069c:	2301      	movs	r3, #1
 800069e:	ca06      	ldmia	r2, {r1, r2}
 80006a0:	4850      	ldr	r0, [pc, #320]	; (80007e4 <update_OLED_display+0x264>)
 80006a2:	f005 fa03 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80006a6:	2120      	movs	r1, #32
 80006a8:	2000      	movs	r0, #0
 80006aa:	f005 fa25 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <update_OLED_display+0x244>)
 80006b0:	2301      	movs	r3, #1
 80006b2:	ca06      	ldmia	r2, {r1, r2}
 80006b4:	4844      	ldr	r0, [pc, #272]	; (80007c8 <update_OLED_display+0x248>)
 80006b6:	f005 f9f9 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 80006ba:	212d      	movs	r1, #45	; 0x2d
 80006bc:	2000      	movs	r0, #0
 80006be:	f005 fa1b 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("0.725 1.800", Font_11x18, White);
 80006c2:	4a42      	ldr	r2, [pc, #264]	; (80007cc <update_OLED_display+0x24c>)
 80006c4:	2301      	movs	r3, #1
 80006c6:	ca06      	ldmia	r2, {r1, r2}
 80006c8:	4847      	ldr	r0, [pc, #284]	; (80007e8 <update_OLED_display+0x268>)
 80006ca:	f005 f9ef 	bl	8005aac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80006ce:	f005 f8e7 	bl	80058a0 <ssd1306_UpdateScreen>
		break;
 80006d2:	e06c      	b.n	80007ae <update_OLED_display+0x22e>

	case Case5:
		ssd1306_Fill(Black);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f005 f8c1 	bl	800585c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 80006da:	2100      	movs	r1, #0
 80006dc:	2000      	movs	r0, #0
 80006de:	f005 fa0b 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 5", Font_16x26, White);
 80006e2:	4a36      	ldr	r2, [pc, #216]	; (80007bc <update_OLED_display+0x23c>)
 80006e4:	2301      	movs	r3, #1
 80006e6:	ca06      	ldmia	r2, {r1, r2}
 80006e8:	4840      	ldr	r0, [pc, #256]	; (80007ec <update_OLED_display+0x26c>)
 80006ea:	f005 f9df 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 80006ee:	2120      	movs	r1, #32
 80006f0:	2000      	movs	r0, #0
 80006f2:	f005 fa01 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 80006f6:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <update_OLED_display+0x244>)
 80006f8:	2301      	movs	r3, #1
 80006fa:	ca06      	ldmia	r2, {r1, r2}
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <update_OLED_display+0x248>)
 80006fe:	f005 f9d5 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000702:	212d      	movs	r1, #45	; 0x2d
 8000704:	2000      	movs	r0, #0
 8000706:	f005 f9f7 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("2.250 1.350", Font_11x18, White);
 800070a:	4a30      	ldr	r2, [pc, #192]	; (80007cc <update_OLED_display+0x24c>)
 800070c:	2301      	movs	r3, #1
 800070e:	ca06      	ldmia	r2, {r1, r2}
 8000710:	4837      	ldr	r0, [pc, #220]	; (80007f0 <update_OLED_display+0x270>)
 8000712:	f005 f9cb 	bl	8005aac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000716:	f005 f8c3 	bl	80058a0 <ssd1306_UpdateScreen>
		break;
 800071a:	e048      	b.n	80007ae <update_OLED_display+0x22e>

	case Case6:
		ssd1306_Fill(Black);
 800071c:	2000      	movs	r0, #0
 800071e:	f005 f89d 	bl	800585c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f005 f9e7 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 6", Font_16x26, White);
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <update_OLED_display+0x23c>)
 800072c:	2301      	movs	r3, #1
 800072e:	ca06      	ldmia	r2, {r1, r2}
 8000730:	4830      	ldr	r0, [pc, #192]	; (80007f4 <update_OLED_display+0x274>)
 8000732:	f005 f9bb 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8000736:	2120      	movs	r1, #32
 8000738:	2000      	movs	r0, #0
 800073a:	f005 f9dd 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 800073e:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <update_OLED_display+0x244>)
 8000740:	2301      	movs	r3, #1
 8000742:	ca06      	ldmia	r2, {r1, r2}
 8000744:	4820      	ldr	r0, [pc, #128]	; (80007c8 <update_OLED_display+0x248>)
 8000746:	f005 f9b1 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 800074a:	212d      	movs	r1, #45	; 0x2d
 800074c:	2000      	movs	r0, #0
 800074e:	f005 f9d3 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("1.420 3.930", Font_11x18, White);
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <update_OLED_display+0x24c>)
 8000754:	2301      	movs	r3, #1
 8000756:	ca06      	ldmia	r2, {r1, r2}
 8000758:	4827      	ldr	r0, [pc, #156]	; (80007f8 <update_OLED_display+0x278>)
 800075a:	f005 f9a7 	bl	8005aac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800075e:	f005 f89f 	bl	80058a0 <ssd1306_UpdateScreen>
		break;
 8000762:	e024      	b.n	80007ae <update_OLED_display+0x22e>

	case Case7:
		ssd1306_Fill(Black);
 8000764:	2000      	movs	r0, #0
 8000766:	f005 f879 	bl	800585c <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800076a:	2100      	movs	r1, #0
 800076c:	2000      	movs	r0, #0
 800076e:	f005 f9c3 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString(" Case 7", Font_16x26, White);
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <update_OLED_display+0x23c>)
 8000774:	2301      	movs	r3, #1
 8000776:	ca06      	ldmia	r2, {r1, r2}
 8000778:	4820      	ldr	r0, [pc, #128]	; (80007fc <update_OLED_display+0x27c>)
 800077a:	f005 f997 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 800077e:	2120      	movs	r1, #32
 8000780:	2000      	movs	r0, #0
 8000782:	f005 f9b9 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("f1(kHz)   f2(kHz)", Font_7x10, White);
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <update_OLED_display+0x244>)
 8000788:	2301      	movs	r3, #1
 800078a:	ca06      	ldmia	r2, {r1, r2}
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <update_OLED_display+0x248>)
 800078e:	f005 f98d 	bl	8005aac <ssd1306_WriteString>
		ssd1306_SetCursor(0, 45);
 8000792:	212d      	movs	r1, #45	; 0x2d
 8000794:	2000      	movs	r0, #0
 8000796:	f005 f9af 	bl	8005af8 <ssd1306_SetCursor>
		ssd1306_WriteString("0.850 6.000", Font_11x18, White);
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <update_OLED_display+0x24c>)
 800079c:	2301      	movs	r3, #1
 800079e:	ca06      	ldmia	r2, {r1, r2}
 80007a0:	4817      	ldr	r0, [pc, #92]	; (8000800 <update_OLED_display+0x280>)
 80007a2:	f005 f983 	bl	8005aac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80007a6:	f005 f87b 	bl	80058a0 <ssd1306_UpdateScreen>
		break;
 80007aa:	e000      	b.n	80007ae <update_OLED_display+0x22e>

	default:
		break;
 80007ac:	bf00      	nop
	}

	OLEDupToDate = true;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <update_OLED_display+0x284>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]

}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000054 	.word	0x20000054
 80007c0:	080063dc 	.word	0x080063dc
 80007c4:	20000044 	.word	0x20000044
 80007c8:	080063e4 	.word	0x080063e4
 80007cc:	2000004c 	.word	0x2000004c
 80007d0:	080063f8 	.word	0x080063f8
 80007d4:	08006404 	.word	0x08006404
 80007d8:	0800640c 	.word	0x0800640c
 80007dc:	08006418 	.word	0x08006418
 80007e0:	08006420 	.word	0x08006420
 80007e4:	0800642c 	.word	0x0800642c
 80007e8:	08006434 	.word	0x08006434
 80007ec:	08006440 	.word	0x08006440
 80007f0:	08006448 	.word	0x08006448
 80007f4:	08006454 	.word	0x08006454
 80007f8:	0800645c 	.word	0x0800645c
 80007fc:	08006468 	.word	0x08006468
 8000800:	08006470 	.word	0x08006470
 8000804:	200000dd 	.word	0x200000dd

08000808 <Init_Freq>:
								 [5].Freq_1 = 56337, [5].Freq_2 = 20355,	// 1.42kHz / 3.93kHz
								 [6].Freq_1 = 94117, [6].Freq_2 = 13332,	// 0.85kHz / 6kHz
							};

void Init_Freq(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	//Initialise to Case1 and Freq1

	CurrentCase = 0; // array index - actual Case is + 1
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <Init_Freq+0x24>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
	CurrentFrequency = CasesSet1[CurrentCase].Freq_1;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <Init_Freq+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a06      	ldr	r2, [pc, #24]	; (8000830 <Init_Freq+0x28>)
 8000818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <Init_Freq+0x2c>)
 8000820:	601a      	str	r2, [r3, #0]
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	20000504 	.word	0x20000504
 8000830:	20000000 	.word	0x20000000
 8000834:	2000050c 	.word	0x2000050c

08000838 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);				// just for debugging with scope

	  if(TIM2->ARR == CasesSet1[CurrentCase].Freq_1)	// writing directly to registers to avoid delays
 8000840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	490f      	ldr	r1, [pc, #60]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800084c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000850:	429a      	cmp	r2, r3
 8000852:	d109      	bne.n	8000868 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_2;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085c:	490a      	ldr	r1, [pc, #40]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	62d3      	str	r3, [r2, #44]	; 0x2c
	  }
	  else
	  {
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_1;
	  }
}
 8000866:	e007      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x40>
		  TIM2->ARR = CasesSet1[CurrentCase].Freq_1;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000870:	4905      	ldr	r1, [pc, #20]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000872:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000876:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	20000504 	.word	0x20000504
 8000888:	20000000 	.word	0x20000000

0800088c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]



 //   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);

	if(GPIO_Pin == GPIO_PIN_6)	// next case button pressed
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	2b40      	cmp	r3, #64	; 0x40
 800089a:	d126      	bne.n	80008ea <HAL_GPIO_EXTI_Callback+0x5e>
	{
		CurrentCase++;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a36      	ldr	r2, [pc, #216]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 80008a4:	6013      	str	r3, [r2, #0]
		if(CurrentCase > 6)
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	dd02      	ble.n	80008b4 <HAL_GPIO_EXTI_Callback+0x28>
			CurrentCase = 6;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 80008b0:	2206      	movs	r2, #6
 80008b2:	601a      	str	r2, [r3, #0]

		OLEDDisplayState = CurrentCase;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <HAL_GPIO_EXTI_Callback+0xf4>)
 80008bc:	701a      	strb	r2, [r3, #0]
		OLEDupToDate = false;
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <HAL_GPIO_EXTI_Callback+0xf8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]

	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	482f      	ldr	r0, [pc, #188]	; (8000988 <HAL_GPIO_EXTI_Callback+0xfc>)
 80008ca:	f001 f8ed 	bl	8001aa8 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 100; i++);
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e002      	b.n	80008da <HAL_GPIO_EXTI_Callback+0x4e>
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2b63      	cmp	r3, #99	; 0x63
 80008de:	ddf9      	ble.n	80008d4 <HAL_GPIO_EXTI_Callback+0x48>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	4828      	ldr	r0, [pc, #160]	; (8000988 <HAL_GPIO_EXTI_Callback+0xfc>)
 80008e6:	f001 f8df 	bl	8001aa8 <HAL_GPIO_WritePin>
	}



	if(GPIO_Pin == GPIO_PIN_8)	// previous case down button pressed
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f0:	d126      	bne.n	8000940 <HAL_GPIO_EXTI_Callback+0xb4>
	{
		CurrentCase--;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 80008fa:	6013      	str	r3, [r2, #0]
		if(CurrentCase < 0)
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	da02      	bge.n	800090a <HAL_GPIO_EXTI_Callback+0x7e>
			CurrentCase = 0;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]

		OLEDDisplayState = CurrentCase;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_GPIO_EXTI_Callback+0xf0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000912:	701a      	strb	r2, [r3, #0]
		OLEDupToDate = false;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]

	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000920:	f001 f8c2 	bl	8001aa8 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 100; i++);
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	e002      	b.n	8000930 <HAL_GPIO_EXTI_Callback+0xa4>
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	3301      	adds	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	2b63      	cmp	r3, #99	; 0x63
 8000934:	ddf9      	ble.n	800092a <HAL_GPIO_EXTI_Callback+0x9e>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <HAL_GPIO_EXTI_Callback+0xfc>)
 800093c:	f001 f8b4 	bl	8001aa8 <HAL_GPIO_WritePin>
	}

	if(GPIO_Pin == GPIO_PIN_13)	// user blue button - debbuging only
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000946:	d112      	bne.n	800096e <HAL_GPIO_EXTI_Callback+0xe2>
	{
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <HAL_GPIO_EXTI_Callback+0xfc>)
 800094e:	f001 f8ab 	bl	8001aa8 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 100; i++);
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e002      	b.n	800095e <HAL_GPIO_EXTI_Callback+0xd2>
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2b63      	cmp	r3, #99	; 0x63
 8000962:	ddf9      	ble.n	8000958 <HAL_GPIO_EXTI_Callback+0xcc>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <HAL_GPIO_EXTI_Callback+0xfc>)
 800096a:	f001 f89d 	bl	8001aa8 <HAL_GPIO_WritePin>
	}


	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // clear interrupt manually again (it is done already in library function before this callback function but interrupt can occur again when this function is running).
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_GPIO_EXTI_Callback+0x100>)
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	6153      	str	r3, [r2, #20]
}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000504 	.word	0x20000504
 8000980:	200000dc 	.word	0x200000dc
 8000984:	200000dd 	.word	0x200000dd
 8000988:	48000800 	.word	0x48000800
 800098c:	40010400 	.word	0x40010400

08000990 <InitCalibrationEEPROM>:
	static FLASH_EraseInitTypeDef EraseInitStruct;
	static uint32_t Address = 0x080FF800;	// use last sector of STM32L476RG for EEPROM emulation
//	uint64_t Data = 0; // type?

void InitCalibrationEEPROM(void)	// needed only for erase before write to EEPROM
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <InitCalibrationEEPROM+0x28>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks       = FLASH_BANK_2;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <InitCalibrationEEPROM+0x28>)
 800099c:	2202      	movs	r2, #2
 800099e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Page        = 511;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <InitCalibrationEEPROM+0x28>)
 80009a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80009a6:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages     = 1;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <InitCalibrationEEPROM+0x28>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	60da      	str	r2, [r3, #12]
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	200000e0 	.word	0x200000e0

080009bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <MX_GPIO_Init+0x188>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a5b      	ldr	r2, [pc, #364]	; (8000b44 <MX_GPIO_Init+0x188>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <MX_GPIO_Init+0x188>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <MX_GPIO_Init+0x188>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a55      	ldr	r2, [pc, #340]	; (8000b44 <MX_GPIO_Init+0x188>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <MX_GPIO_Init+0x188>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a4f      	ldr	r2, [pc, #316]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a49      	ldr	r2, [pc, #292]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a43      	ldr	r2, [pc, #268]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <MX_GPIO_Init+0x188>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f641 61bc 	movw	r1, #7868	; 0x1ebc
 8000a50:	483d      	ldr	r0, [pc, #244]	; (8000b48 <MX_GPIO_Init+0x18c>)
 8000a52:	f001 f829 	bl	8001aa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a56:	2200      	movs	r2, #0
 8000a58:	f649 71f2 	movw	r1, #40946	; 0x9ff2
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f001 f822 	bl	8001aa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a64:	2200      	movs	r2, #0
 8000a66:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8000a6a:	4838      	ldr	r0, [pc, #224]	; (8000b4c <MX_GPIO_Init+0x190>)
 8000a6c:	f001 f81c 	bl	8001aa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <MX_GPIO_Init+0x194>)
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4830      	ldr	r0, [pc, #192]	; (8000b48 <MX_GPIO_Init+0x18c>)
 8000a86:	f000 fe67 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a8a:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8000a8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4829      	ldr	r0, [pc, #164]	; (8000b48 <MX_GPIO_Init+0x18c>)
 8000aa4:	f000 fe58 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000aa8:	f649 73f2 	movw	r3, #40946	; 0x9ff2
 8000aac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 fe48 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ac8:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000acc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481a      	ldr	r0, [pc, #104]	; (8000b4c <MX_GPIO_Init+0x190>)
 8000ae2:	f000 fe39 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000ae6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_GPIO_Init+0x194>)
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_GPIO_Init+0x18c>)
 8000afc:	f000 fe2c 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_GPIO_Init+0x18c>)
 8000b18:	f000 fe1e 	bl	8001758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2017      	movs	r0, #23
 8000b22:	f000 fde2 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b26:	2017      	movs	r0, #23
 8000b28:	f000 fdfb 	bl	8001722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2028      	movs	r0, #40	; 0x28
 8000b32:	f000 fdda 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f000 fdf3 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	10210000 	.word	0x10210000

08000b54 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_I2C3_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <MX_I2C3_Init+0x7c>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b90:	f000 ffd4 	bl	8001b3c <HAL_I2C_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b9a:	f000 f958 	bl	8000e4e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000ba2:	f001 fb37 	bl	8002214 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f94f 	bl	8000e4e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000bb4:	f001 fb79 	bl	80022aa <HAL_I2CEx_ConfigDigitalFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f946 	bl	8000e4e <Error_Handler>
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000514 	.word	0x20000514
 8000bcc:	40005c00 	.word	0x40005c00
 8000bd0:	10909cec 	.word	0x10909cec

08000bd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <HAL_I2C_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d127      	bne.n	8000c46 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000c2a:	f000 fd95 	bl	8001758 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40005c00 	.word	0x40005c00
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000800 	.word	0x48000800

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0b2      	sub	sp, #200	; 0xc8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f000 fbd0 	bl	8001406 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f87d 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f7ff fea7 	bl	80009bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c6e:	f000 f9d1 	bl	8001014 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c72:	f000 fa47 	bl	8001104 <MX_TIM3_Init>
  MX_I2C3_Init();
 8000c76:	f7ff ff6d 	bl	8000b54 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000c7a:	f000 fb29 	bl	80012d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  char GUI_message[200] = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	22c8      	movs	r2, #200	; 0xc8
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 ff92 	bl	8005bae <memset>

  snprintf(GUI_message, 200, "System Clock = %lu\n",  SystemCoreClock);
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <main+0xdc>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4a2a      	ldr	r2, [pc, #168]	; (8000d3c <main+0xe0>)
 8000c92:	21c8      	movs	r1, #200	; 0xc8
 8000c94:	f004 ff94 	bl	8005bc0 <sniprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*)GUI_message, strlen(GUI_message), 100);
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fa98 	bl	80001d0 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	4825      	ldr	r0, [pc, #148]	; (8000d40 <main+0xe4>)
 8000caa:	f004 f8af 	bl	8004e0c <HAL_UART_Transmit>

  InitCalibrationEEPROM();
 8000cae:	f7ff fe6f 	bl	8000990 <InitCalibrationEEPROM>
  Init_Freq();
 8000cb2:	f7ff fda9 	bl	8000808 <Init_Freq>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4822      	ldr	r0, [pc, #136]	; (8000d44 <main+0xe8>)
 8000cba:	f002 ff6b 	bl	8003b94 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000cbe:	4822      	ldr	r0, [pc, #136]	; (8000d48 <main+0xec>)
 8000cc0:	f002 fe96 	bl	80039f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1306_Init();
 8000cc4:	f004 fd5c 	bl	8005780 <ssd1306_Init>

  HAL_Delay(300);
 8000cc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ccc:	f000 fc10 	bl	80014f0 <HAL_Delay>

  ssd1306_Fill(Black);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f004 fdc3 	bl	800585c <ssd1306_Fill>
  ssd1306_SetCursor(0, 4);
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f004 ff0d 	bl	8005af8 <ssd1306_SetCursor>
  ssd1306_WriteString("    TMD", Font_11x18, White);
 8000cde:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <main+0xf0>)
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	ca06      	ldmia	r2, {r1, r2}
 8000ce4:	481a      	ldr	r0, [pc, #104]	; (8000d50 <main+0xf4>)
 8000ce6:	f004 fee1 	bl	8005aac <ssd1306_WriteString>
  ssd1306_SetCursor(0, 30);
 8000cea:	211e      	movs	r1, #30
 8000cec:	2000      	movs	r0, #0
 8000cee:	f004 ff03 	bl	8005af8 <ssd1306_SetCursor>
  ssd1306_WriteString("   Technologies", Font_7x10, White);
 8000cf2:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <main+0xf8>)
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	ca06      	ldmia	r2, {r1, r2}
 8000cf8:	4817      	ldr	r0, [pc, #92]	; (8000d58 <main+0xfc>)
 8000cfa:	f004 fed7 	bl	8005aac <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000cfe:	f004 fdcf 	bl	80058a0 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 8000d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d06:	f000 fbf3 	bl	80014f0 <HAL_Delay>



  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f000 fee2 	bl	8001ad8 <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 8000d14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d18:	f000 fbea 	bl	80014f0 <HAL_Delay>

    if(OLEDupToDate != true)
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <main+0x100>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f083 0301 	eor.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0ef      	beq.n	8000d0a <main+0xae>
    {
        update_OLED_display(OLEDDisplayState);
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <main+0x104>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fc26 	bl	8000580 <update_OLED_display>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d34:	e7e9      	b.n	8000d0a <main+0xae>
 8000d36:	bf00      	nop
 8000d38:	20000038 	.word	0x20000038
 8000d3c:	0800647c 	.word	0x0800647c
 8000d40:	200005f8 	.word	0x200005f8
 8000d44:	200005ac 	.word	0x200005ac
 8000d48:	20000560 	.word	0x20000560
 8000d4c:	2000004c 	.word	0x2000004c
 8000d50:	08006490 	.word	0x08006490
 8000d54:	20000044 	.word	0x20000044
 8000d58:	08006498 	.word	0x08006498
 8000d5c:	200000dd 	.word	0x200000dd
 8000d60:	200000dc 	.word	0x200000dc

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b8      	sub	sp, #224	; 0xe0
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 ff1b 	bl	8005bae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2288      	movs	r2, #136	; 0x88
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 ff0d 	bl	8005bae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000db4:	2314      	movs	r3, #20
 8000db6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fb1b 	bl	800240c <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ddc:	f000 f837 	bl	8000e4e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2303      	movs	r3, #3
 8000de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dfe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e02:	2104      	movs	r1, #4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fee7 	bl	8002bd8 <HAL_RCC_ClockConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e10:	f000 f81d 	bl	8000e4e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
 8000e14:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000e18:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 f8db 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e30:	f000 f80d 	bl	8000e4e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e38:	f001 fa92 	bl	8002360 <HAL_PWREx_ControlVoltageScaling>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000e42:	f000 f804 	bl	8000e4e <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	37e0      	adds	r7, #224	; 0xe0
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6593      	str	r3, [r2, #88]	; 0x58
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x44>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 fada 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f04:	2040      	movs	r0, #64	; 0x40
 8000f06:	f000 fe01 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f0e:	f000 fdfd 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <TIM3_IRQHandler+0x10>)
 8000f1e:	f002 ff3f 	bl	8003da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000560 	.word	0x20000560

08000f2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f34:	f000 fdea 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f004 fddc 	bl	8005b28 <__errno>
 8000f70:	4602      	mov	r2, r0
 8000f72:	230c      	movs	r3, #12
 8000f74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20018000 	.word	0x20018000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200000f0 	.word	0x200000f0
 8000fa4:	20000680 	.word	0x20000680

08000fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <SystemInit+0x64>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <SystemInit+0x64>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <SystemInit+0x68>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <SystemInit+0x68>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <SystemInit+0x68>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <SystemInit+0x68>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <SystemInit+0x68>)
 8000fd4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fd8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <SystemInit+0x68>)
 8000fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SystemInit+0x68>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a09      	ldr	r2, [pc, #36]	; (8001010 <SystemInit+0x68>)
 8000fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <SystemInit+0x68>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <SystemInit+0x64>)
 8000ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffe:	609a      	str	r2, [r3, #8]
#endif
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	40021000 	.word	0x40021000

08001014 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_TIM2_Init+0xe8>)
 8001048:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <MX_TIM2_Init+0xe8>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_TIM2_Init+0xe8>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 94118;
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <MX_TIM2_Init+0xe8>)
 800105c:	4a28      	ldr	r2, [pc, #160]	; (8001100 <MX_TIM2_Init+0xec>)
 800105e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_TIM2_Init+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_TIM2_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106c:	4823      	ldr	r0, [pc, #140]	; (80010fc <MX_TIM2_Init+0xe8>)
 800106e:	f002 fc67 	bl	8003940 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001078:	f7ff fee9 	bl	8000e4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	4619      	mov	r1, r3
 8001088:	481c      	ldr	r0, [pc, #112]	; (80010fc <MX_TIM2_Init+0xe8>)
 800108a:	f003 f8b9 	bl	8004200 <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001094:	f7ff fedb 	bl	8000e4e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001098:	4818      	ldr	r0, [pc, #96]	; (80010fc <MX_TIM2_Init+0xe8>)
 800109a:	f002 fd19 	bl	8003ad0 <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010a4:	f7ff fed3 	bl	8000e4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010a8:	2320      	movs	r3, #32
 80010aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4811      	ldr	r0, [pc, #68]	; (80010fc <MX_TIM2_Init+0xe8>)
 80010b8:	f003 fdb4 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010c2:	f7ff fec4 	bl	8000e4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	; 0x60
 80010c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1600;
 80010ca:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010d4:	2304      	movs	r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM2_Init+0xe8>)
 80010e0:	f002 ff7e 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010ea:	f7ff feb0 	bl	8000e4e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM2_Init+0xe8>)
 80010f0:	f000 f8ba 	bl	8001268 <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3738      	adds	r7, #56	; 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200005ac 	.word	0x200005ac
 8001100:	00016fa6 	.word	0x00016fa6

08001104 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_TIM3_Init+0xa0>)
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <MX_TIM3_Init+0xa4>)
 8001126:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM3_Init+0xa0>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM3_Init+0xa0>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM3_Init+0xa0>)
 8001136:	220e      	movs	r2, #14
 8001138:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM3_Init+0xa0>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM3_Init+0xa0>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001146:	4817      	ldr	r0, [pc, #92]	; (80011a4 <MX_TIM3_Init+0xa0>)
 8001148:	f002 fbfa 	bl	8003940 <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001152:	f7ff fe7c 	bl	8000e4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM3_Init+0xa0>)
 8001170:	f003 f846 	bl	8004200 <HAL_TIM_ConfigClockSource>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800117a:	f7ff fe68 	bl	8000e4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM3_Init+0xa0>)
 800118c:	f003 fd4a 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001196:	f7ff fe5a 	bl	8000e4e <Error_Handler>
  }

}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000560 	.word	0x20000560
 80011a8:	40000400 	.word	0x40000400

080011ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011cc:	d10c      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6593      	str	r3, [r2, #88]	; 0x58
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011e6:	e034      	b.n	8001252 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_TIM_Base_MspInit+0xb4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12f      	bne.n	8001252 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_TIM_Base_MspInit+0xb0>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001222:	2304      	movs	r3, #4
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001232:	2302      	movs	r3, #2
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <HAL_TIM_Base_MspInit+0xb8>)
 800123e:	f000 fa8b 	bl	8001758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	201d      	movs	r0, #29
 8001248:	f000 fa4f 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800124c:	201d      	movs	r0, #29
 800124e:	f000 fa68 	bl	8001722 <HAL_NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40000400 	.word	0x40000400
 8001264:	48000c00 	.word	0x48000c00

08001268 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001288:	d11c      	bne.n	80012c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_TIM_MspPostInit+0x64>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_TIM_MspPostInit+0x64>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_TIM_MspPostInit+0x64>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f000 fa4a 	bl	8001758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000

080012d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <MX_USART2_UART_Init+0x5c>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001314:	f003 fd2c 	bl	8004d70 <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800131e:	f7ff fd96 	bl	8000e4e <Error_Handler>
  }

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200005f8 	.word	0x200005f8
 800132c:	40004400 	.word	0x40004400

08001330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x7c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d128      	bne.n	80013a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	6593      	str	r3, [r2, #88]	; 0x58
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x80>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f000 f9da 	bl	8001758 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40021000 	.word	0x40021000

080013b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b8:	f7ff fdf6 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013be:	e003      	b.n	80013c8 <LoopCopyDataInit>

080013c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013c6:	3104      	adds	r1, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013d0:	d3f6      	bcc.n	80013c0 <CopyDataInit>
	ldr	r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80013d4:	e002      	b.n	80013dc <LoopFillZerobss>

080013d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013d8:	f842 3b04 	str.w	r3, [r2], #4

080013dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <LoopForever+0x16>)
	cmp	r2, r3
 80013de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013e0:	d3f9      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f004 fba7 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e6:	f7ff fc39 	bl	8000c5c <main>

080013ea <LoopForever>:

LoopForever:
    b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013f0:	08008d48 	.word	0x08008d48
	ldr	r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013f8:	200000c0 	.word	0x200000c0
	ldr	r2, =_sbss
 80013fc:	200000c0 	.word	0x200000c0
	ldr	r3, = _ebss
 8001400:	20000680 	.word	0x20000680

08001404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_2_IRQHandler>

08001406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f95f 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f80e 	bl	8001438 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	e001      	b.n	800142c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001428:	f7ff fd18 	bl	8000e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142c:	79fb      	ldrb	r3, [r7, #7]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_InitTick+0x70>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_InitTick+0x6c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f96b 	bl	800173e <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d809      	bhi.n	8001488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f935 	bl	80016ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_InitTick+0x74>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e007      	b.n	8001498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e004      	b.n	8001498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e001      	b.n	8001498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000040 	.word	0x20000040
 80014a8:	20000038 	.word	0x20000038
 80014ac:	2000003c 	.word	0x2000003c

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000040 	.word	0x20000040
 80014d4:	20000678 	.word	0x20000678

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000678 	.word	0x20000678

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_Delay+0x40>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000040 	.word	0x20000040

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e17f      	b.n	8001a68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8171 	beq.w	8001a62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d00b      	beq.n	80017a0 <HAL_GPIO_Init+0x48>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001794:	2b11      	cmp	r3, #17
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b12      	cmp	r3, #18
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 0201 	and.w	r2, r3, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b03      	cmp	r3, #3
 800180c:	d118      	bne.n	8001840 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001814:	2201      	movs	r2, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	08db      	lsrs	r3, r3, #3
 800182a:	f003 0201 	and.w	r2, r3, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x128>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b12      	cmp	r3, #18
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	6939      	ldr	r1, [r7, #16]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80ac 	beq.w	8001a62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <HAL_GPIO_Init+0x32c>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	4a5d      	ldr	r2, [pc, #372]	; (8001a84 <HAL_GPIO_Init+0x32c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6613      	str	r3, [r2, #96]	; 0x60
 8001916:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <HAL_GPIO_Init+0x32c>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001922:	4a59      	ldr	r2, [pc, #356]	; (8001a88 <HAL_GPIO_Init+0x330>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800194c:	d025      	beq.n	800199a <HAL_GPIO_Init+0x242>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <HAL_GPIO_Init+0x334>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01f      	beq.n	8001996 <HAL_GPIO_Init+0x23e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_GPIO_Init+0x338>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0x23a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_GPIO_Init+0x33c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0x236>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_GPIO_Init+0x340>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_GPIO_Init+0x232>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x344>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0x22e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a49      	ldr	r2, [pc, #292]	; (8001aa0 <HAL_GPIO_Init+0x348>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x22a>
 800197e:	2306      	movs	r3, #6
 8001980:	e00c      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001982:	2307      	movs	r3, #7
 8001984:	e00a      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001986:	2305      	movs	r3, #5
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x244>
 800198a:	2304      	movs	r3, #4
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x244>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x244>
 800199a:	2300      	movs	r3, #0
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ac:	4936      	ldr	r1, [pc, #216]	; (8001a88 <HAL_GPIO_Init+0x330>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019de:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a5c:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f47f ae78 	bne.w	8001768 <HAL_GPIO_Init+0x10>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48000800 	.word	0x48000800
 8001a94:	48000c00 	.word	0x48000c00
 8001a98:	48001000 	.word	0x48001000
 8001a9c:	48001400 	.word	0x48001400
 8001aa0:	48001800 	.word	0x48001800
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43d9      	mvns	r1, r3
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	400b      	ands	r3, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe feae 	bl	800088c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e081      	b.n	8001c52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff f836 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e006      	b.n	8001bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d104      	bne.n	8001bd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	ea42 0103 	orr.w	r1, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	021a      	lsls	r2, r3, #8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69d9      	ldr	r1, [r3, #28]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	f040 80f9 	bne.w	8001e76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_I2C_Mem_Write+0x34>
 8001c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0ed      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_I2C_Mem_Write+0x4e>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e0e6      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cb2:	f7ff fc11 	bl	80014d8 <HAL_GetTick>
 8001cb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2319      	movs	r3, #25
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f955 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d1      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2221      	movs	r2, #33	; 0x21
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a3a      	ldr	r2, [r7, #32]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cfc:	88f8      	ldrh	r0, [r7, #6]
 8001cfe:	893a      	ldrh	r2, [r7, #8]
 8001d00:	8979      	ldrh	r1, [r7, #10]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f8b9 	bl	8001e84 <I2C_RequestMemoryWrite>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0a9      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2bff      	cmp	r3, #255	; 0xff
 8001d2c:	d90e      	bls.n	8001d4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	22ff      	movs	r2, #255	; 0xff
 8001d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	8979      	ldrh	r1, [r7, #10]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fa37 	bl	80021b8 <I2C_TransferConfig>
 8001d4a:	e00f      	b.n	8001d6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	8979      	ldrh	r1, [r7, #10]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fa26 	bl	80021b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f93f 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e07b      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d034      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x1c8>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d130      	bne.n	8001e24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f8d1 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e04d      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2bff      	cmp	r3, #255	; 0xff
 8001de4:	d90e      	bls.n	8001e04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	22ff      	movs	r2, #255	; 0xff
 8001dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	8979      	ldrh	r1, [r7, #10]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f9db 	bl	80021b8 <I2C_TransferConfig>
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f9ca 	bl	80021b8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d19e      	bne.n	8001d6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f91e 	bl	8002074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e01a      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2220      	movs	r2, #32
 8001e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_I2C_Mem_Write+0x224>)
 8001e56:	400b      	ands	r3, r1
 8001e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e76:	2302      	movs	r3, #2
  }
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	fe00e800 	.word	0xfe00e800

08001e84 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <I2C_RequestMemoryWrite+0xa4>)
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f983 	bl	80021b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	69b9      	ldr	r1, [r7, #24]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f89c 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e02c      	b.n	8001f20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ecc:	893b      	ldrh	r3, [r7, #8]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed6:	e015      	b.n	8001f04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ed8:	893b      	ldrh	r3, [r7, #8]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	69b9      	ldr	r1, [r7, #24]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f882 	bl	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e012      	b.n	8001f20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001efa:	893b      	ldrh	r3, [r7, #8]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f830 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	80002000 	.word	0x80002000

08001f2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d103      	bne.n	8001f4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d007      	beq.n	8001f68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	619a      	str	r2, [r3, #24]
  }
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f84:	e022      	b.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d01e      	beq.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8e:	f7ff faa3 	bl	80014d8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d302      	bcc.n	8001fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d113      	bne.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00f      	b.n	8001fec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d0cd      	beq.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002000:	e02c      	b.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f870 	bl	80020ec <I2C_IsAcknowledgeFailed>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e02a      	b.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d01e      	beq.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201e:	f7ff fa5b 	bl	80014d8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	429a      	cmp	r2, r3
 800202c:	d302      	bcc.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d113      	bne.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e007      	b.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d1cb      	bne.n	8002002 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002080:	e028      	b.n	80020d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f830 	bl	80020ec <I2C_IsAcknowledgeFailed>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e026      	b.n	80020e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff fa1f 	bl	80014d8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d113      	bne.n	80020d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0220 	orr.w	r2, r3, #32
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e007      	b.n	80020e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d1cf      	bne.n	8002082 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b10      	cmp	r3, #16
 8002104:	d151      	bne.n	80021aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002106:	e022      	b.n	800214e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210e:	d01e      	beq.n	800214e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002110:	f7ff f9e2 	bl	80014d8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	d302      	bcc.n	8002126 <I2C_IsAcknowledgeFailed+0x3a>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d113      	bne.n	800214e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e02e      	b.n	80021ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d1d5      	bne.n	8002108 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2210      	movs	r2, #16
 8002162:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2220      	movs	r2, #32
 800216a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff fedd 	bl	8001f2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800217e:	400b      	ands	r3, r1
 8002180:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f043 0204 	orr.w	r2, r3, #4
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	fe00e800 	.word	0xfe00e800

080021b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	817b      	strh	r3, [r7, #10]
 80021c6:	4613      	mov	r3, r2
 80021c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	0d5b      	lsrs	r3, r3, #21
 80021d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <I2C_TransferConfig+0x58>)
 80021da:	430b      	orrs	r3, r1
 80021dc:	43db      	mvns	r3, r3
 80021de:	ea02 0103 	and.w	r1, r2, r3
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021e8:	7a7b      	ldrb	r3, [r7, #9]
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	03ff63ff 	.word	0x03ff63ff

08002214 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b20      	cmp	r3, #32
 8002228:	d138      	bne.n	800229c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002234:	2302      	movs	r3, #2
 8002236:	e032      	b.n	800229e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002266:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e000      	b.n	800229e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800229c:	2302      	movs	r3, #2
  }
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d139      	bne.n	8002334 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e033      	b.n	8002336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2224      	movs	r2, #36	; 0x24
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <HAL_PWREx_GetVoltageRange+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40007000 	.word	0x40007000

08002360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800236e:	d130      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d038      	beq.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002386:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2232      	movs	r2, #50	; 0x32
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9b      	lsrs	r3, r3, #18
 80023a0:	3301      	adds	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a4:	e002      	b.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d102      	bne.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f2      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023cc:	d110      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e00f      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d007      	beq.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40007000 	.word	0x40007000
 8002404:	20000038 	.word	0x20000038
 8002408:	431bde83 	.word	0x431bde83

0800240c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e3d4      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800241e:	4ba1      	ldr	r3, [pc, #644]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002428:	4b9e      	ldr	r3, [pc, #632]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80e4 	beq.w	8002608 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_RCC_OscConfig+0x4a>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b0c      	cmp	r3, #12
 800244a:	f040 808b 	bne.w	8002564 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 8087 	bne.w	8002564 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002456:	4b93      	ldr	r3, [pc, #588]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x62>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e3ac      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	4b8c      	ldr	r3, [pc, #560]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <HAL_RCC_OscConfig+0x7c>
 800247e:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002486:	e005      	b.n	8002494 <HAL_RCC_OscConfig+0x88>
 8002488:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002494:	4293      	cmp	r3, r2
 8002496:	d223      	bcs.n	80024e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fd3f 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e38d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ac:	4b7d      	ldr	r3, [pc, #500]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a7c      	ldr	r2, [pc, #496]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4977      	ldr	r1, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ca:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	4972      	ldr	r1, [pc, #456]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 80024de:	e025      	b.n	800252c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e0:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6f      	ldr	r2, [pc, #444]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024e6:	f043 0308 	orr.w	r3, r3, #8
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b6d      	ldr	r3, [pc, #436]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	496a      	ldr	r1, [pc, #424]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fe:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	4965      	ldr	r1, [pc, #404]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fcff 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e34d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252c:	f000 fc36 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002530:	4601      	mov	r1, r0
 8002532:	4b5c      	ldr	r3, [pc, #368]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_RCC_OscConfig+0x29c>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa21 f303 	lsr.w	r3, r1, r3
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_OscConfig+0x2a0>)
 800254a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800254c:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_RCC_OscConfig+0x2a4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe ff71 	bl	8001438 <HAL_InitTick>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d052      	beq.n	8002606 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	e331      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d032      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800256c:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002578:	f7fe ffae 	bl	80014d8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002580:	f7fe ffaa 	bl	80014d8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e31a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a40      	ldr	r2, [pc, #256]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	493b      	ldr	r1, [pc, #236]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	4936      	ldr	r1, [pc, #216]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
 80025d0:	e01a      	b.n	8002608 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025de:	f7fe ff7b 	bl	80014d8 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e6:	f7fe ff77 	bl	80014d8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e2e7      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x1da>
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002606:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d074      	beq.n	80026fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x21a>
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d10e      	bne.n	800263e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d10b      	bne.n	800263e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d064      	beq.n	80026fc <HAL_RCC_OscConfig+0x2f0>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d160      	bne.n	80026fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e2c4      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x24a>
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e01d      	b.n	8002692 <HAL_RCC_OscConfig+0x286>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265e:	d10c      	bne.n	800267a <HAL_RCC_OscConfig+0x26e>
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e00b      	b.n	8002692 <HAL_RCC_OscConfig+0x286>
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_RCC_OscConfig+0x298>)
 800268c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe ff1d 	bl	80014d8 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a0:	e011      	b.n	80026c6 <HAL_RCC_OscConfig+0x2ba>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	080064a8 	.word	0x080064a8
 80026ac:	20000038 	.word	0x20000038
 80026b0:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe ff10 	bl	80014d8 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e280      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	4baf      	ldr	r3, [pc, #700]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x2a8>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe ff00 	bl	80014d8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026dc:	f7fe fefc 	bl	80014d8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e26c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ee:	4ba5      	ldr	r3, [pc, #660]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x2d0>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d060      	beq.n	80027cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d005      	beq.n	800271c <HAL_RCC_OscConfig+0x310>
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d119      	bne.n	800274a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d116      	bne.n	800274a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271c:	4b99      	ldr	r3, [pc, #612]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_OscConfig+0x328>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e249      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b93      	ldr	r3, [pc, #588]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	4990      	ldr	r1, [pc, #576]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002748:	e040      	b.n	80027cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d023      	beq.n	800279a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002752:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a8b      	ldr	r2, [pc, #556]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe febb 	bl	80014d8 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002766:	f7fe feb7 	bl	80014d8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e227      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002778:	4b82      	ldr	r3, [pc, #520]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b7f      	ldr	r3, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	497c      	ldr	r1, [pc, #496]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
 8002798:	e018      	b.n	80027cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b7a      	ldr	r3, [pc, #488]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a79      	ldr	r2, [pc, #484]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80027a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fe97 	bl	80014d8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe fe93 	bl	80014d8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e203      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c0:	4b70      	ldr	r3, [pc, #448]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d03c      	beq.n	8002852 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01c      	beq.n	800281a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80027e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e6:	4a67      	ldr	r2, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fe72 	bl	80014d8 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe fe6e 	bl	80014d8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1de      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800280a:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ef      	beq.n	80027f8 <HAL_RCC_OscConfig+0x3ec>
 8002818:	e01b      	b.n	8002852 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281a:	4b5a      	ldr	r3, [pc, #360]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 800281c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fe55 	bl	80014d8 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002832:	f7fe fe51 	bl	80014d8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1c1      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1ef      	bne.n	8002832 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80a6 	beq.w	80029ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002864:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	4a43      	ldr	r2, [pc, #268]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287a:	6593      	str	r3, [r2, #88]	; 0x58
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002888:	2301      	movs	r3, #1
 800288a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288c:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_RCC_OscConfig+0x57c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d118      	bne.n	80028ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x57c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x57c>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fe18 	bl	80014d8 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fe fe14 	bl	80014d8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e184      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_RCC_OscConfig+0x57c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d108      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4d8>
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e2:	e024      	b.n	800292e <HAL_RCC_OscConfig+0x522>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d110      	bne.n	800290e <HAL_RCC_OscConfig+0x502>
 80028ec:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800290c:	e00f      	b.n	800292e <HAL_RCC_OscConfig+0x522>
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	4a17      	ldr	r2, [pc, #92]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe fdcf 	bl	80014d8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fdcb 	bl	80014d8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e139      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x578>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ed      	beq.n	800293e <HAL_RCC_OscConfig+0x532>
 8002962:	e01a      	b.n	800299a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fdb8 	bl	80014d8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800296a:	e00f      	b.n	800298c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe fdb4 	bl	80014d8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d906      	bls.n	800298c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e122      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800298c:	4b90      	ldr	r3, [pc, #576]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e8      	bne.n	800296c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299a:	7ffb      	ldrb	r3, [r7, #31]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4a8a      	ldr	r2, [pc, #552]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8108 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	f040 80d0 	bne.w	8002b60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029c0:	4b83      	ldr	r3, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d130      	bne.n	8002a36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	3b01      	subs	r3, #1
 80029e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d127      	bne.n	8002a36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d11f      	bne.n	8002a36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a00:	2a07      	cmp	r2, #7
 8002a02:	bf14      	ite	ne
 8002a04:	2201      	movne	r2, #1
 8002a06:	2200      	moveq	r2, #0
 8002a08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d113      	bne.n	8002a36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d06e      	beq.n	8002b14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	d069      	beq.n	8002b10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a3c:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a48:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b7      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a58:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a64:	f7fe fd38 	bl	80014d8 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fd34 	bl	80014d8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0a4      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7e:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8a:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	4b51      	ldr	r3, [pc, #324]	; (8002bd4 <HAL_RCC_OscConfig+0x7c8>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aa4:	0212      	lsls	r2, r2, #8
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aac:	0852      	lsrs	r2, r2, #1
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0552      	lsls	r2, r2, #21
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ab8:	0852      	lsrs	r2, r2, #1
 8002aba:	3a01      	subs	r2, #1
 8002abc:	0652      	lsls	r2, r2, #25
 8002abe:	4311      	orrs	r1, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ac4:	0912      	lsrs	r2, r2, #4
 8002ac6:	0452      	lsls	r2, r2, #17
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	4941      	ldr	r1, [pc, #260]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002adc:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a3b      	ldr	r2, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae8:	f7fe fcf6 	bl	80014d8 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fcf2 	bl	80014d8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e062      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b0e:	e05a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e059      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b14:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d152      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b38:	f7fe fcce 	bl	80014d8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fcca 	bl	80014d8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e03a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x734>
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d02d      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b70:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b84:	f023 0303 	bic.w	r3, r3, #3
 8002b88:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fc9d 	bl	80014d8 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fc99 	bl	80014d8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e009      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x796>
 8002bc0:	e001      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	f99d808c 	.word	0xf99d808c

08002bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0c8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d910      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4961      	ldr	r1, [pc, #388]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0b0      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d04c      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c30:	4b56      	ldr	r3, [pc, #344]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d121      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e09e      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d115      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e092      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c60:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e086      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c70:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e07e      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 0203 	bic.w	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	493f      	ldr	r1, [pc, #252]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c92:	f7fe fc21 	bl	80014d8 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7fe fc1d 	bl	80014d8 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e066      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb0:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 020c 	and.w	r2, r3, #12
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d1eb      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	492c      	ldr	r1, [pc, #176]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d210      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0207 	bic.w	r2, r3, #7
 8002cf6:	4924      	ldr	r1, [pc, #144]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1b0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e036      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4918      	ldr	r1, [pc, #96]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4910      	ldr	r1, [pc, #64]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4e:	f000 f825 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d52:	4601      	mov	r1, r0
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_ClockConfig+0x1b4>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	5cd3      	ldrb	r3, [r2, r3]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fb60 	bl	8001438 <HAL_InitTick>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	080064a8 	.word	0x080064a8
 8002d94:	20000038 	.word	0x20000038
 8002d98:	2000003c 	.word	0x2000003c

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db4:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d121      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d11e      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dd0:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e005      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002df8:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e004      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_RCC_GetSysClockFreq+0x110>)
 8002e22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d133      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0xaa>
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e42:	617b      	str	r3, [r7, #20]
      break;
 8002e44:	e005      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e46:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_GetSysClockFreq+0x110>)
 8002e48:	617b      	str	r3, [r7, #20]
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	617b      	str	r3, [r7, #20]
      break;
 8002e50:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	fb02 f203 	mul.w	r2, r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0e5b      	lsrs	r3, r3, #25
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e92:	69bb      	ldr	r3, [r7, #24]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3724      	adds	r7, #36	; 0x24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	080064c0 	.word	0x080064c0
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	007a1200 	.word	0x007a1200

08002eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000038 	.word	0x20000038

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	080064b8 	.word	0x080064b8

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef8:	f7ff ffda 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	080064b8 	.word	0x080064b8

08002f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff fa04 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
 8002f3e:	e014      	b.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f58:	f7ff f9f4 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 8002f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f70:	d10b      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d919      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f7c:	d902      	bls.n	8002f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7e:	2302      	movs	r3, #2
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e013      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f84:	2301      	movs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e010      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d902      	bls.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f90:	2303      	movs	r3, #3
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e00a      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d102      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e004      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d101      	bne.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 0207 	bic.w	r2, r3, #7
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d03f      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003004:	d01c      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300a:	d802      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00e      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003010:	e01f      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003016:	d003      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800301c:	d01c      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800301e:	e018      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003020:	4b85      	ldr	r3, [pc, #532]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a84      	ldr	r2, [pc, #528]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800302c:	e015      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fab9 	bl	80035ac <RCCEx_PLLSAI1_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303e:	e00c      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3320      	adds	r3, #32
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fba0 	bl	800378c <RCCEx_PLLSAI2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003050:	e003      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	74fb      	strb	r3, [r7, #19]
      break;
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003060:	4b75      	ldr	r3, [pc, #468]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306e:	4972      	ldr	r1, [pc, #456]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003076:	e001      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03f      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d01c      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003096:	d802      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00e      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xda>
 800309c:	e01f      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800309e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a2:	d003      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80030a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030a8:	d01c      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80030aa:	e018      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030ac:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a61      	ldr	r2, [pc, #388]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b8:	e015      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fa73 	bl	80035ac <RCCEx_PLLSAI1_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ca:	e00c      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3320      	adds	r3, #32
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fb5a 	bl	800378c <RCCEx_PLLSAI2_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030dc:	e003      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	74fb      	strb	r3, [r7, #19]
      break;
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e6:	7cfb      	ldrb	r3, [r7, #19]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030ec:	4b52      	ldr	r3, [pc, #328]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fa:	494f      	ldr	r1, [pc, #316]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003102:	e001      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a0 	beq.w	8003256 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800312a:	2300      	movs	r3, #0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a40      	ldr	r2, [pc, #256]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
 800313c:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003148:	2301      	movs	r3, #1
 800314a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3a      	ldr	r2, [pc, #232]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003158:	f7fe f9be 	bl	80014d8 <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315e:	e009      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003160:	f7fe f9ba 	bl	80014d8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	74fb      	strb	r3, [r7, #19]
        break;
 8003172:	e005      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d15c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003186:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01f      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d019      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a20      	ldr	r2, [pc, #128]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031d0:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fe f979 	bl	80014d8 <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e8:	e00b      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe f975 	bl	80014d8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d902      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ec      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003226:	4904      	ldr	r1, [pc, #16]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800322e:	e009      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
 8003234:	e006      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003244:	7c7b      	ldrb	r3, [r7, #17]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b9e      	ldr	r3, [pc, #632]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	4a9d      	ldr	r2, [pc, #628]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003262:	4b98      	ldr	r3, [pc, #608]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	4994      	ldr	r1, [pc, #592]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003284:	4b8f      	ldr	r3, [pc, #572]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 020c 	bic.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	498c      	ldr	r1, [pc, #560]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a6:	4b87      	ldr	r3, [pc, #540]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4983      	ldr	r1, [pc, #524]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c8:	4b7e      	ldr	r3, [pc, #504]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	497b      	ldr	r1, [pc, #492]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ea:	4b76      	ldr	r3, [pc, #472]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f8:	4972      	ldr	r1, [pc, #456]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800330c:	4b6d      	ldr	r3, [pc, #436]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	496a      	ldr	r1, [pc, #424]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	4961      	ldr	r1, [pc, #388]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003350:	4b5c      	ldr	r3, [pc, #368]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	4959      	ldr	r1, [pc, #356]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003372:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003380:	4950      	ldr	r1, [pc, #320]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003394:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	4948      	ldr	r1, [pc, #288]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b6:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	493f      	ldr	r1, [pc, #252]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d028      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	4937      	ldr	r1, [pc, #220]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f6:	d106      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f8:	4b32      	ldr	r3, [pc, #200]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a31      	ldr	r2, [pc, #196]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003402:	60d3      	str	r3, [r2, #12]
 8003404:	e011      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340e:	d10c      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f8c8 	bl	80035ac <RCCEx_PLLSAI1_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d028      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	491f      	ldr	r1, [pc, #124]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003454:	d106      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800345c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003460:	60d3      	str	r3, [r2, #12]
 8003462:	e011      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346c:	d10c      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f899 	bl	80035ac <RCCEx_PLLSAI1_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02b      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b2:	d109      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a02      	ldr	r2, [pc, #8]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034be:	60d3      	str	r3, [r2, #12]
 80034c0:	e014      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2101      	movs	r1, #1
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f867 	bl	80035ac <RCCEx_PLLSAI1_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003506:	4928      	ldr	r1, [pc, #160]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003516:	d10d      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	2102      	movs	r1, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f844 	bl	80035ac <RCCEx_PLLSAI1_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d014      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	74bb      	strb	r3, [r7, #18]
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3320      	adds	r3, #32
 8003542:	2102      	movs	r1, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f921 	bl	800378c <RCCEx_PLLSAI2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003572:	490d      	ldr	r1, [pc, #52]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003596:	4904      	ldr	r1, [pc, #16]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800359e:	7cbb      	ldrb	r3, [r7, #18]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000

080035ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ba:	4b73      	ldr	r3, [pc, #460]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035c6:	4b70      	ldr	r3, [pc, #448]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10d      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
       ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035de:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
       ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d044      	beq.n	800367c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e041      	b.n	800367c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d00c      	beq.n	800361a <RCCEx_PLLSAI1_Config+0x6e>
 8003600:	2b03      	cmp	r3, #3
 8003602:	d013      	beq.n	800362c <RCCEx_PLLSAI1_Config+0x80>
 8003604:	2b01      	cmp	r3, #1
 8003606:	d120      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003608:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e01a      	b.n	8003650 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800361a:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362a:	e013      	b.n	8003654 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362c:	4b56      	ldr	r3, [pc, #344]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10f      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003648:	e006      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      break;
 800364e:	e004      	b.n	800365a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003650:	bf00      	nop
 8003652:	e002      	b.n	800365a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003654:	bf00      	nop
 8003656:	e000      	b.n	800365a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003658:	bf00      	nop
    }

    if(status == HAL_OK)
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003660:	4b49      	ldr	r3, [pc, #292]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	3b01      	subs	r3, #1
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	430b      	orrs	r3, r1
 8003676:	4944      	ldr	r1, [pc, #272]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d17d      	bne.n	800377e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a40      	ldr	r2, [pc, #256]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003688:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800368c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368e:	f7fd ff23 	bl	80014d8 <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003694:	e009      	b.n	80036aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003696:	f7fd ff1f 	bl	80014d8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d902      	bls.n	80036aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	73fb      	strb	r3, [r7, #15]
        break;
 80036a8:	e005      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036aa:	4b37      	ldr	r3, [pc, #220]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ef      	bne.n	8003696 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d160      	bne.n	800377e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d111      	bne.n	80036e6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	0211      	lsls	r1, r2, #8
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68d2      	ldr	r2, [r2, #12]
 80036d8:	0912      	lsrs	r2, r2, #4
 80036da:	0452      	lsls	r2, r2, #17
 80036dc:	430a      	orrs	r2, r1
 80036de:	492a      	ldr	r1, [pc, #168]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	610b      	str	r3, [r1, #16]
 80036e4:	e027      	b.n	8003736 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d112      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6912      	ldr	r2, [r2, #16]
 8003702:	0852      	lsrs	r2, r2, #1
 8003704:	3a01      	subs	r2, #1
 8003706:	0552      	lsls	r2, r2, #21
 8003708:	430a      	orrs	r2, r1
 800370a:	491f      	ldr	r1, [pc, #124]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
 8003710:	e011      	b.n	8003736 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800371a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	0211      	lsls	r1, r2, #8
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6952      	ldr	r2, [r2, #20]
 8003728:	0852      	lsrs	r2, r2, #1
 800372a:	3a01      	subs	r2, #1
 800372c:	0652      	lsls	r2, r2, #25
 800372e:	430a      	orrs	r2, r1
 8003730:	4915      	ldr	r1, [pc, #84]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a13      	ldr	r2, [pc, #76]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 800373c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003740:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fd fec9 	bl	80014d8 <HAL_GetTick>
 8003746:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003748:	e009      	b.n	800375e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800374a:	f7fd fec5 	bl	80014d8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d902      	bls.n	800375e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	73fb      	strb	r3, [r7, #15]
          break;
 800375c:	e005      	b.n	800376a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0ef      	beq.n	800374a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <RCCEx_PLLSAI1_Config+0x1dc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000

0800378c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800379a:	4b68      	ldr	r3, [pc, #416]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d018      	beq.n	80037d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037a6:	4b65      	ldr	r3, [pc, #404]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0203 	and.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d10d      	bne.n	80037d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037be:	4b5f      	ldr	r3, [pc, #380]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
       ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d044      	beq.n	800385c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e041      	b.n	800385c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d00c      	beq.n	80037fa <RCCEx_PLLSAI2_Config+0x6e>
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d013      	beq.n	800380c <RCCEx_PLLSAI2_Config+0x80>
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d120      	bne.n	800382a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037e8:	4b54      	ldr	r3, [pc, #336]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d11d      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f8:	e01a      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037fa:	4b50      	ldr	r3, [pc, #320]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380a:	e013      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800380c:	4b4b      	ldr	r3, [pc, #300]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003818:	4b48      	ldr	r3, [pc, #288]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003828:	e006      	b.n	8003838 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
      break;
 800382e:	e004      	b.n	800383a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003830:	bf00      	nop
 8003832:	e002      	b.n	800383a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003838:	bf00      	nop
    }

    if(status == HAL_OK)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10d      	bne.n	800385c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003840:	4b3e      	ldr	r3, [pc, #248]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	3b01      	subs	r3, #1
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	430b      	orrs	r3, r1
 8003856:	4939      	ldr	r1, [pc, #228]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003858:	4313      	orrs	r3, r2
 800385a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d167      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a35      	ldr	r2, [pc, #212]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386e:	f7fd fe33 	bl	80014d8 <HAL_GetTick>
 8003872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003874:	e009      	b.n	800388a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003876:	f7fd fe2f 	bl	80014d8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d902      	bls.n	800388a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	73fb      	strb	r3, [r7, #15]
        break;
 8003888:	e005      	b.n	8003896 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800388a:	4b2c      	ldr	r3, [pc, #176]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ef      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d14a      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d111      	bne.n	80038c6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	0211      	lsls	r1, r2, #8
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68d2      	ldr	r2, [r2, #12]
 80038b8:	0912      	lsrs	r2, r2, #4
 80038ba:	0452      	lsls	r2, r2, #17
 80038bc:	430a      	orrs	r2, r1
 80038be:	491f      	ldr	r1, [pc, #124]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	614b      	str	r3, [r1, #20]
 80038c4:	e011      	b.n	80038ea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6892      	ldr	r2, [r2, #8]
 80038d6:	0211      	lsls	r1, r2, #8
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6912      	ldr	r2, [r2, #16]
 80038dc:	0852      	lsrs	r2, r2, #1
 80038de:	3a01      	subs	r2, #1
 80038e0:	0652      	lsls	r2, r2, #25
 80038e2:	430a      	orrs	r2, r1
 80038e4:	4915      	ldr	r1, [pc, #84]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a13      	ldr	r2, [pc, #76]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fd fdef 	bl	80014d8 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038fc:	e009      	b.n	8003912 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038fe:	f7fd fdeb 	bl	80014d8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d902      	bls.n	8003912 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	73fb      	strb	r3, [r7, #15]
          break;
 8003910:	e005      	b.n	800391e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ef      	beq.n	80038fe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	4903      	ldr	r1, [pc, #12]	; (800393c <RCCEx_PLLSAI2_Config+0x1b0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e049      	b.n	80039e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fc20 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fd20 	bl	80043c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d001      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04f      	b.n	8003aa8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x76>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d018      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x76>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x76>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x76>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x76>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d115      	bne.n	8003a92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <HAL_TIM_Base_Start_IT+0xdc>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	d015      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0xb4>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d011      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a90:	e008      	b.n	8003aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e000      	b.n	8003aa6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	00010007 	.word	0x00010007

08003ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e049      	b.n	8003b76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f841 	bl	8003b7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f000 fc58 	bl	80043c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_TIM_PWM_Start+0x24>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e03c      	b.n	8003c32 <HAL_TIM_PWM_Start+0x9e>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d109      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0x3e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	bf14      	ite	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	2300      	moveq	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	e02f      	b.n	8003c32 <HAL_TIM_PWM_Start+0x9e>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d109      	bne.n	8003bec <HAL_TIM_PWM_Start+0x58>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e022      	b.n	8003c32 <HAL_TIM_PWM_Start+0x9e>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d109      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x72>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e015      	b.n	8003c32 <HAL_TIM_PWM_Start+0x9e>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d109      	bne.n	8003c20 <HAL_TIM_PWM_Start+0x8c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e008      	b.n	8003c32 <HAL_TIM_PWM_Start+0x9e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e09c      	b.n	8003d74 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0xb6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	e023      	b.n	8003c92 <HAL_TIM_PWM_Start+0xfe>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0xc6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c58:	e01b      	b.n	8003c92 <HAL_TIM_PWM_Start+0xfe>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xd6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c68:	e013      	b.n	8003c92 <HAL_TIM_PWM_Start+0xfe>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Start+0xe6>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c78:	e00b      	b.n	8003c92 <HAL_TIM_PWM_Start+0xfe>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_PWM_Start+0xf6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	e003      	b.n	8003c92 <HAL_TIM_PWM_Start+0xfe>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	6839      	ldr	r1, [r7, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff9c 	bl	8004bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a35      	ldr	r2, [pc, #212]	; (8003d7c <HAL_TIM_PWM_Start+0x1e8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0x13e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_TIM_PWM_Start+0x1ec>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0x13e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <HAL_TIM_PWM_Start+0x1f0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0x13e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_TIM_PWM_Start+0x1f4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0x13e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <HAL_TIM_PWM_Start+0x1f8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PWM_Start+0x142>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_TIM_PWM_Start+0x144>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a22      	ldr	r2, [pc, #136]	; (8003d7c <HAL_TIM_PWM_Start+0x1e8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x19e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d018      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x19e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <HAL_TIM_PWM_Start+0x1fc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x19e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_TIM_PWM_Start+0x200>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x19e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <HAL_TIM_PWM_Start+0x204>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x19e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <HAL_TIM_PWM_Start+0x1ec>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x19e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <HAL_TIM_PWM_Start+0x1f0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d115      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_TIM_PWM_Start+0x208>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d015      	beq.n	8003d70 <HAL_TIM_PWM_Start+0x1dc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4a:	d011      	beq.n	8003d70 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5c:	e008      	b.n	8003d70 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e000      	b.n	8003d72 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40013400 	.word	0x40013400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	00010007 	.word	0x00010007

08003da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d122      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d11b      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0202 	mvn.w	r2, #2
 8003dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 facf 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fac1 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fad2 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0204 	mvn.w	r2, #4
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 faa5 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa97 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 faa8 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0208 	mvn.w	r2, #8
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa7b 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa6d 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fa7e 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0210 	mvn.w	r2, #16
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa51 	bl	8004386 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa43 	bl	8004372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fa54 	bl	800439a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0201 	mvn.w	r2, #1
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fc fc8a 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fefc 	bl	8004d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d10e      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 feef 	bl	8004d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d10e      	bne.n	8003faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d107      	bne.n	8003faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fa02 	bl	80043ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d107      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0220 	mvn.w	r2, #32
 8003fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 feaf 	bl	8004d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0fd      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b14      	cmp	r3, #20
 8004006:	f200 80f0 	bhi.w	80041ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004065 	.word	0x08004065
 8004014:	080041eb 	.word	0x080041eb
 8004018:	080041eb 	.word	0x080041eb
 800401c:	080041eb 	.word	0x080041eb
 8004020:	080040a5 	.word	0x080040a5
 8004024:	080041eb 	.word	0x080041eb
 8004028:	080041eb 	.word	0x080041eb
 800402c:	080041eb 	.word	0x080041eb
 8004030:	080040e7 	.word	0x080040e7
 8004034:	080041eb 	.word	0x080041eb
 8004038:	080041eb 	.word	0x080041eb
 800403c:	080041eb 	.word	0x080041eb
 8004040:	08004127 	.word	0x08004127
 8004044:	080041eb 	.word	0x080041eb
 8004048:	080041eb 	.word	0x080041eb
 800404c:	080041eb 	.word	0x080041eb
 8004050:	08004169 	.word	0x08004169
 8004054:	080041eb 	.word	0x080041eb
 8004058:	080041eb 	.word	0x080041eb
 800405c:	080041eb 	.word	0x080041eb
 8004060:	080041a9 	.word	0x080041a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fa44 	bl	80044f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0208 	orr.w	r2, r2, #8
 800407e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0204 	bic.w	r2, r2, #4
 800408e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6999      	ldr	r1, [r3, #24]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	619a      	str	r2, [r3, #24]
      break;
 80040a2:	e0a3      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fab4 	bl	8004618 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6999      	ldr	r1, [r3, #24]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	021a      	lsls	r2, r3, #8
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	619a      	str	r2, [r3, #24]
      break;
 80040e4:	e082      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fb1d 	bl	800472c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0208 	orr.w	r2, r2, #8
 8004100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0204 	bic.w	r2, r2, #4
 8004110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69d9      	ldr	r1, [r3, #28]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	61da      	str	r2, [r3, #28]
      break;
 8004124:	e062      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fb85 	bl	800483c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69d9      	ldr	r1, [r3, #28]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	021a      	lsls	r2, r3, #8
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	61da      	str	r2, [r3, #28]
      break;
 8004166:	e041      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fbce 	bl	8004910 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0208 	orr.w	r2, r2, #8
 8004182:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0204 	bic.w	r2, r2, #4
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041a6:	e021      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fc12 	bl	80049d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041e8:	e000      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80041ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop

08004200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_TIM_ConfigClockSource+0x18>
 8004214:	2302      	movs	r3, #2
 8004216:	e0a8      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800423a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004242:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d067      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0x124>
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d80b      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x70>
 8004258:	2b10      	cmp	r3, #16
 800425a:	d073      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x144>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d802      	bhi.n	8004266 <HAL_TIM_ConfigClockSource+0x66>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d06f      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004264:	e078      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004266:	2b20      	cmp	r3, #32
 8004268:	d06c      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x144>
 800426a:	2b30      	cmp	r3, #48	; 0x30
 800426c:	d06a      	beq.n	8004344 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800426e:	e073      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004270:	2b70      	cmp	r3, #112	; 0x70
 8004272:	d00d      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0x90>
 8004274:	2b70      	cmp	r3, #112	; 0x70
 8004276:	d804      	bhi.n	8004282 <HAL_TIM_ConfigClockSource+0x82>
 8004278:	2b50      	cmp	r3, #80	; 0x50
 800427a:	d033      	beq.n	80042e4 <HAL_TIM_ConfigClockSource+0xe4>
 800427c:	2b60      	cmp	r3, #96	; 0x60
 800427e:	d041      	beq.n	8004304 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004280:	e06a      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004286:	d066      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x156>
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d017      	beq.n	80042be <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800428e:	e063      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f000 fc7a 	bl	8004b98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]
      break;
 80042bc:	e04c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f000 fc63 	bl	8004b98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e0:	609a      	str	r2, [r3, #8]
      break;
 80042e2:	e039      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f000 fbd7 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2150      	movs	r1, #80	; 0x50
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fc30 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 8004302:	e029      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	461a      	mov	r2, r3
 8004312:	f000 fbf6 	bl	8004b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2160      	movs	r1, #96	; 0x60
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fc20 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 8004322:	e019      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	461a      	mov	r2, r3
 8004332:	f000 fbb7 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2140      	movs	r1, #64	; 0x40
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fc10 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 8004342:	e009      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f000 fc07 	bl	8004b62 <TIM_ITRx_SetConfig>
        break;
 8004354:	e000      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <TIM_Base_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e2:	d00f      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a3d      	ldr	r2, [pc, #244]	; (80044dc <TIM_Base_SetConfig+0x118>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3c      	ldr	r2, [pc, #240]	; (80044e0 <TIM_Base_SetConfig+0x11c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a3b      	ldr	r2, [pc, #236]	; (80044e4 <TIM_Base_SetConfig+0x120>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3a      	ldr	r2, [pc, #232]	; (80044e8 <TIM_Base_SetConfig+0x124>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <TIM_Base_SetConfig+0x114>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01f      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d01b      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <TIM_Base_SetConfig+0x118>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d017      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <TIM_Base_SetConfig+0x11c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <TIM_Base_SetConfig+0x120>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00f      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <TIM_Base_SetConfig+0x124>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00b      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a28      	ldr	r2, [pc, #160]	; (80044ec <TIM_Base_SetConfig+0x128>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <TIM_Base_SetConfig+0x12c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d003      	beq.n	800445e <TIM_Base_SetConfig+0x9a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <TIM_Base_SetConfig+0x130>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d108      	bne.n	8004470 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a10      	ldr	r2, [pc, #64]	; (80044d8 <TIM_Base_SetConfig+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <TIM_Base_SetConfig+0x124>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a11      	ldr	r2, [pc, #68]	; (80044ec <TIM_Base_SetConfig+0x128>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <TIM_Base_SetConfig+0x12c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0xf8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <TIM_Base_SetConfig+0x130>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	615a      	str	r2, [r3, #20]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f023 0302 	bic.w	r3, r3, #2
 8004544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <TIM_OC1_SetConfig+0x10c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00f      	beq.n	8004578 <TIM_OC1_SetConfig+0x80>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a2b      	ldr	r2, [pc, #172]	; (8004608 <TIM_OC1_SetConfig+0x110>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_OC1_SetConfig+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a2a      	ldr	r2, [pc, #168]	; (800460c <TIM_OC1_SetConfig+0x114>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_OC1_SetConfig+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <TIM_OC1_SetConfig+0x118>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_OC1_SetConfig+0x80>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a28      	ldr	r2, [pc, #160]	; (8004614 <TIM_OC1_SetConfig+0x11c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10c      	bne.n	8004592 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0308 	bic.w	r3, r3, #8
 800457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 0304 	bic.w	r3, r3, #4
 8004590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <TIM_OC1_SetConfig+0x10c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00f      	beq.n	80045ba <TIM_OC1_SetConfig+0xc2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <TIM_OC1_SetConfig+0x110>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_OC1_SetConfig+0xc2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a19      	ldr	r2, [pc, #100]	; (800460c <TIM_OC1_SetConfig+0x114>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_OC1_SetConfig+0xc2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a18      	ldr	r2, [pc, #96]	; (8004610 <TIM_OC1_SetConfig+0x118>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC1_SetConfig+0xc2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <TIM_OC1_SetConfig+0x11c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40013400 	.word	0x40013400
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800

08004618 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0210 	bic.w	r2, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0320 	bic.w	r3, r3, #32
 8004666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a28      	ldr	r2, [pc, #160]	; (8004718 <TIM_OC2_SetConfig+0x100>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC2_SetConfig+0x6c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a27      	ldr	r2, [pc, #156]	; (800471c <TIM_OC2_SetConfig+0x104>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10d      	bne.n	80046a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <TIM_OC2_SetConfig+0x100>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00f      	beq.n	80046c8 <TIM_OC2_SetConfig+0xb0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a1c      	ldr	r2, [pc, #112]	; (800471c <TIM_OC2_SetConfig+0x104>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_OC2_SetConfig+0xb0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <TIM_OC2_SetConfig+0x108>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_OC2_SetConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <TIM_OC2_SetConfig+0x10c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_OC2_SetConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <TIM_OC2_SetConfig+0x110>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d113      	bne.n	80046f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a27      	ldr	r2, [pc, #156]	; (8004828 <TIM_OC3_SetConfig+0xfc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_OC3_SetConfig+0x6a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a26      	ldr	r2, [pc, #152]	; (800482c <TIM_OC3_SetConfig+0x100>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10d      	bne.n	80047b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <TIM_OC3_SetConfig+0xfc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00f      	beq.n	80047da <TIM_OC3_SetConfig+0xae>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <TIM_OC3_SetConfig+0x100>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00b      	beq.n	80047da <TIM_OC3_SetConfig+0xae>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <TIM_OC3_SetConfig+0x104>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <TIM_OC3_SetConfig+0xae>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <TIM_OC3_SetConfig+0x108>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_OC3_SetConfig+0xae>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <TIM_OC3_SetConfig+0x10c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d113      	bne.n	8004802 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	621a      	str	r2, [r3, #32]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40013400 	.word	0x40013400
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800

0800483c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800488a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	031b      	lsls	r3, r3, #12
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <TIM_OC4_SetConfig+0xc0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00f      	beq.n	80048c0 <TIM_OC4_SetConfig+0x84>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <TIM_OC4_SetConfig+0xc4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_OC4_SetConfig+0x84>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a16      	ldr	r2, [pc, #88]	; (8004904 <TIM_OC4_SetConfig+0xc8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_OC4_SetConfig+0x84>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a15      	ldr	r2, [pc, #84]	; (8004908 <TIM_OC4_SetConfig+0xcc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC4_SetConfig+0x84>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a14      	ldr	r2, [pc, #80]	; (800490c <TIM_OC4_SetConfig+0xd0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d109      	bne.n	80048d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	019b      	lsls	r3, r3, #6
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40013400 	.word	0x40013400
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800

08004910 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004954:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <TIM_OC5_SetConfig+0xb4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00f      	beq.n	800498a <TIM_OC5_SetConfig+0x7a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <TIM_OC5_SetConfig+0xb8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00b      	beq.n	800498a <TIM_OC5_SetConfig+0x7a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <TIM_OC5_SetConfig+0xbc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <TIM_OC5_SetConfig+0x7a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <TIM_OC5_SetConfig+0xc0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <TIM_OC5_SetConfig+0x7a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <TIM_OC5_SetConfig+0xc4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d109      	bne.n	800499e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	621a      	str	r2, [r3, #32]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40013400 	.word	0x40013400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800

080049d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	051b      	lsls	r3, r3, #20
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <TIM_OC6_SetConfig+0xb8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_OC6_SetConfig+0x7c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <TIM_OC6_SetConfig+0xbc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_OC6_SetConfig+0x7c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <TIM_OC6_SetConfig+0xc0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_OC6_SetConfig+0x7c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <TIM_OC6_SetConfig+0xc4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC6_SetConfig+0x7c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a14      	ldr	r2, [pc, #80]	; (8004aa0 <TIM_OC6_SetConfig+0xc8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d109      	bne.n	8004a68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	029b      	lsls	r3, r3, #10
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40013400 	.word	0x40013400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800

08004aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0201 	bic.w	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 030a 	bic.w	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b087      	sub	sp, #28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0210 	bic.w	r2, r3, #16
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	031b      	lsls	r3, r3, #12
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f043 0307 	orr.w	r3, r3, #7
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2201      	movs	r2, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e068      	b.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2e      	ldr	r2, [pc, #184]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d018      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10c      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40013400 	.word	0x40013400
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000

08004d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e040      	b.n	8004e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc facc 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8c0 	bl	8004f34 <UART_SetConfig>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e022      	b.n	8004e04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb3e 	bl	8005448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fbc5 	bl	800558c <UART_CheckIdleState>
 8004e02:	4603      	mov	r3, r0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	f040 8081 	bne.w	8004f28 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_UART_Transmit+0x26>
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e079      	b.n	8004f2a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_UART_Transmit+0x38>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e072      	b.n	8004f2a <HAL_UART_Transmit+0x11e>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2221      	movs	r2, #33	; 0x21
 8004e56:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004e58:	f7fc fb3e 	bl	80014d8 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	d108      	bne.n	8004e8a <HAL_UART_Transmit+0x7e>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e003      	b.n	8004e92 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004e9a:	e02d      	b.n	8004ef8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fbb5 	bl	8005616 <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e039      	b.n	8004f2a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec8:	b292      	uxth	r2, r2
 8004eca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	3302      	adds	r3, #2
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e008      	b.n	8004ee6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	b292      	uxth	r2, r2
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1cb      	bne.n	8004e9c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fb81 	bl	8005616 <UART_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e005      	b.n	8004f2a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e000      	b.n	8004f2a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f38:	b088      	sub	sp, #32
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4bac      	ldr	r3, [pc, #688]	; (8005214 <UART_SetConfig+0x2e0>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	69f9      	ldr	r1, [r7, #28]
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4aa2      	ldr	r2, [pc, #648]	; (8005218 <UART_SetConfig+0x2e4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a99      	ldr	r2, [pc, #612]	; (800521c <UART_SetConfig+0x2e8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d121      	bne.n	8005000 <UART_SetConfig+0xcc>
 8004fbc:	4b98      	ldr	r3, [pc, #608]	; (8005220 <UART_SetConfig+0x2ec>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d816      	bhi.n	8004ff8 <UART_SetConfig+0xc4>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <UART_SetConfig+0x9c>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004fed 	.word	0x08004fed
 8004fd8:	08004fe7 	.word	0x08004fe7
 8004fdc:	08004ff3 	.word	0x08004ff3
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	76fb      	strb	r3, [r7, #27]
 8004fe4:	e0e8      	b.n	80051b8 <UART_SetConfig+0x284>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	76fb      	strb	r3, [r7, #27]
 8004fea:	e0e5      	b.n	80051b8 <UART_SetConfig+0x284>
 8004fec:	2304      	movs	r3, #4
 8004fee:	76fb      	strb	r3, [r7, #27]
 8004ff0:	e0e2      	b.n	80051b8 <UART_SetConfig+0x284>
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	76fb      	strb	r3, [r7, #27]
 8004ff6:	e0df      	b.n	80051b8 <UART_SetConfig+0x284>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	76fb      	strb	r3, [r7, #27]
 8004ffc:	bf00      	nop
 8004ffe:	e0db      	b.n	80051b8 <UART_SetConfig+0x284>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a87      	ldr	r2, [pc, #540]	; (8005224 <UART_SetConfig+0x2f0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d134      	bne.n	8005074 <UART_SetConfig+0x140>
 800500a:	4b85      	ldr	r3, [pc, #532]	; (8005220 <UART_SetConfig+0x2ec>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b0c      	cmp	r3, #12
 8005016:	d829      	bhi.n	800506c <UART_SetConfig+0x138>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0xec>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005055 	.word	0x08005055
 8005024:	0800506d 	.word	0x0800506d
 8005028:	0800506d 	.word	0x0800506d
 800502c:	0800506d 	.word	0x0800506d
 8005030:	08005061 	.word	0x08005061
 8005034:	0800506d 	.word	0x0800506d
 8005038:	0800506d 	.word	0x0800506d
 800503c:	0800506d 	.word	0x0800506d
 8005040:	0800505b 	.word	0x0800505b
 8005044:	0800506d 	.word	0x0800506d
 8005048:	0800506d 	.word	0x0800506d
 800504c:	0800506d 	.word	0x0800506d
 8005050:	08005067 	.word	0x08005067
 8005054:	2300      	movs	r3, #0
 8005056:	76fb      	strb	r3, [r7, #27]
 8005058:	e0ae      	b.n	80051b8 <UART_SetConfig+0x284>
 800505a:	2302      	movs	r3, #2
 800505c:	76fb      	strb	r3, [r7, #27]
 800505e:	e0ab      	b.n	80051b8 <UART_SetConfig+0x284>
 8005060:	2304      	movs	r3, #4
 8005062:	76fb      	strb	r3, [r7, #27]
 8005064:	e0a8      	b.n	80051b8 <UART_SetConfig+0x284>
 8005066:	2308      	movs	r3, #8
 8005068:	76fb      	strb	r3, [r7, #27]
 800506a:	e0a5      	b.n	80051b8 <UART_SetConfig+0x284>
 800506c:	2310      	movs	r3, #16
 800506e:	76fb      	strb	r3, [r7, #27]
 8005070:	bf00      	nop
 8005072:	e0a1      	b.n	80051b8 <UART_SetConfig+0x284>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6b      	ldr	r2, [pc, #428]	; (8005228 <UART_SetConfig+0x2f4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d120      	bne.n	80050c0 <UART_SetConfig+0x18c>
 800507e:	4b68      	ldr	r3, [pc, #416]	; (8005220 <UART_SetConfig+0x2ec>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005088:	2b10      	cmp	r3, #16
 800508a:	d00f      	beq.n	80050ac <UART_SetConfig+0x178>
 800508c:	2b10      	cmp	r3, #16
 800508e:	d802      	bhi.n	8005096 <UART_SetConfig+0x162>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0x16c>
 8005094:	e010      	b.n	80050b8 <UART_SetConfig+0x184>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d005      	beq.n	80050a6 <UART_SetConfig+0x172>
 800509a:	2b30      	cmp	r3, #48	; 0x30
 800509c:	d009      	beq.n	80050b2 <UART_SetConfig+0x17e>
 800509e:	e00b      	b.n	80050b8 <UART_SetConfig+0x184>
 80050a0:	2300      	movs	r3, #0
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e088      	b.n	80051b8 <UART_SetConfig+0x284>
 80050a6:	2302      	movs	r3, #2
 80050a8:	76fb      	strb	r3, [r7, #27]
 80050aa:	e085      	b.n	80051b8 <UART_SetConfig+0x284>
 80050ac:	2304      	movs	r3, #4
 80050ae:	76fb      	strb	r3, [r7, #27]
 80050b0:	e082      	b.n	80051b8 <UART_SetConfig+0x284>
 80050b2:	2308      	movs	r3, #8
 80050b4:	76fb      	strb	r3, [r7, #27]
 80050b6:	e07f      	b.n	80051b8 <UART_SetConfig+0x284>
 80050b8:	2310      	movs	r3, #16
 80050ba:	76fb      	strb	r3, [r7, #27]
 80050bc:	bf00      	nop
 80050be:	e07b      	b.n	80051b8 <UART_SetConfig+0x284>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a59      	ldr	r2, [pc, #356]	; (800522c <UART_SetConfig+0x2f8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d120      	bne.n	800510c <UART_SetConfig+0x1d8>
 80050ca:	4b55      	ldr	r3, [pc, #340]	; (8005220 <UART_SetConfig+0x2ec>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d00f      	beq.n	80050f8 <UART_SetConfig+0x1c4>
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d802      	bhi.n	80050e2 <UART_SetConfig+0x1ae>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <UART_SetConfig+0x1b8>
 80050e0:	e010      	b.n	8005104 <UART_SetConfig+0x1d0>
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d005      	beq.n	80050f2 <UART_SetConfig+0x1be>
 80050e6:	2bc0      	cmp	r3, #192	; 0xc0
 80050e8:	d009      	beq.n	80050fe <UART_SetConfig+0x1ca>
 80050ea:	e00b      	b.n	8005104 <UART_SetConfig+0x1d0>
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e062      	b.n	80051b8 <UART_SetConfig+0x284>
 80050f2:	2302      	movs	r3, #2
 80050f4:	76fb      	strb	r3, [r7, #27]
 80050f6:	e05f      	b.n	80051b8 <UART_SetConfig+0x284>
 80050f8:	2304      	movs	r3, #4
 80050fa:	76fb      	strb	r3, [r7, #27]
 80050fc:	e05c      	b.n	80051b8 <UART_SetConfig+0x284>
 80050fe:	2308      	movs	r3, #8
 8005100:	76fb      	strb	r3, [r7, #27]
 8005102:	e059      	b.n	80051b8 <UART_SetConfig+0x284>
 8005104:	2310      	movs	r3, #16
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	bf00      	nop
 800510a:	e055      	b.n	80051b8 <UART_SetConfig+0x284>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a47      	ldr	r2, [pc, #284]	; (8005230 <UART_SetConfig+0x2fc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d124      	bne.n	8005160 <UART_SetConfig+0x22c>
 8005116:	4b42      	ldr	r3, [pc, #264]	; (8005220 <UART_SetConfig+0x2ec>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005124:	d012      	beq.n	800514c <UART_SetConfig+0x218>
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d802      	bhi.n	8005132 <UART_SetConfig+0x1fe>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <UART_SetConfig+0x20c>
 8005130:	e012      	b.n	8005158 <UART_SetConfig+0x224>
 8005132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005136:	d006      	beq.n	8005146 <UART_SetConfig+0x212>
 8005138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513c:	d009      	beq.n	8005152 <UART_SetConfig+0x21e>
 800513e:	e00b      	b.n	8005158 <UART_SetConfig+0x224>
 8005140:	2300      	movs	r3, #0
 8005142:	76fb      	strb	r3, [r7, #27]
 8005144:	e038      	b.n	80051b8 <UART_SetConfig+0x284>
 8005146:	2302      	movs	r3, #2
 8005148:	76fb      	strb	r3, [r7, #27]
 800514a:	e035      	b.n	80051b8 <UART_SetConfig+0x284>
 800514c:	2304      	movs	r3, #4
 800514e:	76fb      	strb	r3, [r7, #27]
 8005150:	e032      	b.n	80051b8 <UART_SetConfig+0x284>
 8005152:	2308      	movs	r3, #8
 8005154:	76fb      	strb	r3, [r7, #27]
 8005156:	e02f      	b.n	80051b8 <UART_SetConfig+0x284>
 8005158:	2310      	movs	r3, #16
 800515a:	76fb      	strb	r3, [r7, #27]
 800515c:	bf00      	nop
 800515e:	e02b      	b.n	80051b8 <UART_SetConfig+0x284>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <UART_SetConfig+0x2e4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d124      	bne.n	80051b4 <UART_SetConfig+0x280>
 800516a:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <UART_SetConfig+0x2ec>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005178:	d012      	beq.n	80051a0 <UART_SetConfig+0x26c>
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517e:	d802      	bhi.n	8005186 <UART_SetConfig+0x252>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <UART_SetConfig+0x260>
 8005184:	e012      	b.n	80051ac <UART_SetConfig+0x278>
 8005186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518a:	d006      	beq.n	800519a <UART_SetConfig+0x266>
 800518c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005190:	d009      	beq.n	80051a6 <UART_SetConfig+0x272>
 8005192:	e00b      	b.n	80051ac <UART_SetConfig+0x278>
 8005194:	2300      	movs	r3, #0
 8005196:	76fb      	strb	r3, [r7, #27]
 8005198:	e00e      	b.n	80051b8 <UART_SetConfig+0x284>
 800519a:	2302      	movs	r3, #2
 800519c:	76fb      	strb	r3, [r7, #27]
 800519e:	e00b      	b.n	80051b8 <UART_SetConfig+0x284>
 80051a0:	2304      	movs	r3, #4
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	e008      	b.n	80051b8 <UART_SetConfig+0x284>
 80051a6:	2308      	movs	r3, #8
 80051a8:	76fb      	strb	r3, [r7, #27]
 80051aa:	e005      	b.n	80051b8 <UART_SetConfig+0x284>
 80051ac:	2310      	movs	r3, #16
 80051ae:	76fb      	strb	r3, [r7, #27]
 80051b0:	bf00      	nop
 80051b2:	e001      	b.n	80051b8 <UART_SetConfig+0x284>
 80051b4:	2310      	movs	r3, #16
 80051b6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a16      	ldr	r2, [pc, #88]	; (8005218 <UART_SetConfig+0x2e4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	f040 8087 	bne.w	80052d2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051c4:	7efb      	ldrb	r3, [r7, #27]
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d836      	bhi.n	8005238 <UART_SetConfig+0x304>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x29c>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	08005239 	.word	0x08005239
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005239 	.word	0x08005239
 80051e0:	08005203 	.word	0x08005203
 80051e4:	08005239 	.word	0x08005239
 80051e8:	08005239 	.word	0x08005239
 80051ec:	08005239 	.word	0x08005239
 80051f0:	0800520b 	.word	0x0800520b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fd fe68 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 80051f8:	6178      	str	r0, [r7, #20]
        break;
 80051fa:	e022      	b.n	8005242 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <UART_SetConfig+0x300>)
 80051fe:	617b      	str	r3, [r7, #20]
        break;
 8005200:	e01f      	b.n	8005242 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005202:	f7fd fdcb 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8005206:	6178      	str	r0, [r7, #20]
        break;
 8005208:	e01b      	b.n	8005242 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	617b      	str	r3, [r7, #20]
        break;
 8005210:	e017      	b.n	8005242 <UART_SetConfig+0x30e>
 8005212:	bf00      	nop
 8005214:	efff69f3 	.word	0xefff69f3
 8005218:	40008000 	.word	0x40008000
 800521c:	40013800 	.word	0x40013800
 8005220:	40021000 	.word	0x40021000
 8005224:	40004400 	.word	0x40004400
 8005228:	40004800 	.word	0x40004800
 800522c:	40004c00 	.word	0x40004c00
 8005230:	40005000 	.word	0x40005000
 8005234:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	76bb      	strb	r3, [r7, #26]
        break;
 8005240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80f1 	beq.w	800542c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	429a      	cmp	r2, r3
 8005258:	d305      	bcc.n	8005266 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	429a      	cmp	r2, r3
 8005264:	d902      	bls.n	800526c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	76bb      	strb	r3, [r7, #26]
 800526a:	e0df      	b.n	800542c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4619      	mov	r1, r3
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	f04f 0400 	mov.w	r4, #0
 800527c:	0214      	lsls	r4, r2, #8
 800527e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005282:	020b      	lsls	r3, r1, #8
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6852      	ldr	r2, [r2, #4]
 8005288:	0852      	lsrs	r2, r2, #1
 800528a:	4611      	mov	r1, r2
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	eb13 0b01 	adds.w	fp, r3, r1
 8005294:	eb44 0c02 	adc.w	ip, r4, r2
 8005298:	4658      	mov	r0, fp
 800529a:	4661      	mov	r1, ip
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f04f 0400 	mov.w	r4, #0
 80052a4:	461a      	mov	r2, r3
 80052a6:	4623      	mov	r3, r4
 80052a8:	f7fa ffea 	bl	8000280 <__aeabi_uldivmod>
 80052ac:	4603      	mov	r3, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b8:	d308      	bcc.n	80052cc <UART_SetConfig+0x398>
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c0:	d204      	bcs.n	80052cc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	60da      	str	r2, [r3, #12]
 80052ca:	e0af      	b.n	800542c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	76bb      	strb	r3, [r7, #26]
 80052d0:	e0ac      	b.n	800542c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052da:	d15b      	bne.n	8005394 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80052dc:	7efb      	ldrb	r3, [r7, #27]
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d827      	bhi.n	8005332 <UART_SetConfig+0x3fe>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x3b4>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	0800530d 	.word	0x0800530d
 80052ec:	08005315 	.word	0x08005315
 80052f0:	0800531d 	.word	0x0800531d
 80052f4:	08005333 	.word	0x08005333
 80052f8:	08005323 	.word	0x08005323
 80052fc:	08005333 	.word	0x08005333
 8005300:	08005333 	.word	0x08005333
 8005304:	08005333 	.word	0x08005333
 8005308:	0800532b 	.word	0x0800532b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800530c:	f7fd fddc 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8005310:	6178      	str	r0, [r7, #20]
        break;
 8005312:	e013      	b.n	800533c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005314:	f7fd fdee 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8005318:	6178      	str	r0, [r7, #20]
        break;
 800531a:	e00f      	b.n	800533c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800531c:	4b49      	ldr	r3, [pc, #292]	; (8005444 <UART_SetConfig+0x510>)
 800531e:	617b      	str	r3, [r7, #20]
        break;
 8005320:	e00c      	b.n	800533c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005322:	f7fd fd3b 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8005326:	6178      	str	r0, [r7, #20]
        break;
 8005328:	e008      	b.n	800533c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532e:	617b      	str	r3, [r7, #20]
        break;
 8005330:	e004      	b.n	800533c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	76bb      	strb	r3, [r7, #26]
        break;
 800533a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d074      	beq.n	800542c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	005a      	lsls	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	b29b      	uxth	r3, r3
 8005358:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b0f      	cmp	r3, #15
 800535e:	d916      	bls.n	800538e <UART_SetConfig+0x45a>
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005366:	d212      	bcs.n	800538e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f023 030f 	bic.w	r3, r3, #15
 8005370:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	b29a      	uxth	r2, r3
 800537e:	89fb      	ldrh	r3, [r7, #14]
 8005380:	4313      	orrs	r3, r2
 8005382:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	89fa      	ldrh	r2, [r7, #14]
 800538a:	60da      	str	r2, [r3, #12]
 800538c:	e04e      	b.n	800542c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	76bb      	strb	r3, [r7, #26]
 8005392:	e04b      	b.n	800542c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005394:	7efb      	ldrb	r3, [r7, #27]
 8005396:	2b08      	cmp	r3, #8
 8005398:	d827      	bhi.n	80053ea <UART_SetConfig+0x4b6>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x46c>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	080053eb 	.word	0x080053eb
 80053b0:	080053db 	.word	0x080053db
 80053b4:	080053eb 	.word	0x080053eb
 80053b8:	080053eb 	.word	0x080053eb
 80053bc:	080053eb 	.word	0x080053eb
 80053c0:	080053e3 	.word	0x080053e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fd fd80 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 80053c8:	6178      	str	r0, [r7, #20]
        break;
 80053ca:	e013      	b.n	80053f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053cc:	f7fd fd92 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80053d0:	6178      	str	r0, [r7, #20]
        break;
 80053d2:	e00f      	b.n	80053f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d4:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <UART_SetConfig+0x510>)
 80053d6:	617b      	str	r3, [r7, #20]
        break;
 80053d8:	e00c      	b.n	80053f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053da:	f7fd fcdf 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 80053de:	6178      	str	r0, [r7, #20]
        break;
 80053e0:	e008      	b.n	80053f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e6:	617b      	str	r3, [r7, #20]
        break;
 80053e8:	e004      	b.n	80053f4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	76bb      	strb	r3, [r7, #26]
        break;
 80053f2:	bf00      	nop
    }

    if (pclk != 0U)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	085a      	lsrs	r2, r3, #1
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	441a      	add	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	b29b      	uxth	r3, r3
 800540e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d908      	bls.n	8005428 <UART_SetConfig+0x4f4>
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541c:	d204      	bcs.n	8005428 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e001      	b.n	800542c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005438:	7ebb      	ldrb	r3, [r7, #26]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005444:	00f42400 	.word	0x00f42400

08005448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01a      	beq.n	800555e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005546:	d10a      	bne.n	800555e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  }
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af02      	add	r7, sp, #8
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800559a:	f7fb ff9d 	bl	80014d8 <HAL_GetTick>
 800559e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d10e      	bne.n	80055cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f82a 	bl	8005616 <UART_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e020      	b.n	800560e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d10e      	bne.n	80055f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f814 	bl	8005616 <UART_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e00a      	b.n	800560e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005626:	e05d      	b.n	80056e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d059      	beq.n	80056e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005630:	f7fb ff52 	bl	80014d8 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <UART_WaitOnFlagUntilTimeout+0x30>
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d11b      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005654:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e042      	b.n	8005704 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02b      	beq.n	80056e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569a:	d123      	bne.n	80056e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e00f      	b.n	8005704 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d092      	beq.n	8005628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af04      	add	r7, sp, #16
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005726:	f04f 33ff 	mov.w	r3, #4294967295
 800572a:	9302      	str	r3, [sp, #8]
 800572c:	2301      	movs	r3, #1
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	1dfb      	adds	r3, r7, #7
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	2301      	movs	r3, #1
 8005736:	2200      	movs	r2, #0
 8005738:	2178      	movs	r1, #120	; 0x78
 800573a:	4803      	ldr	r0, [pc, #12]	; (8005748 <ssd1306_WriteCommand+0x2c>)
 800573c:	f7fc fa8e 	bl	8001c5c <HAL_I2C_Mem_Write>
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000514 	.word	0x20000514

0800574c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af04      	add	r7, sp, #16
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	9202      	str	r2, [sp, #8]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	2301      	movs	r3, #1
 8005768:	2240      	movs	r2, #64	; 0x40
 800576a:	2178      	movs	r1, #120	; 0x78
 800576c:	4803      	ldr	r0, [pc, #12]	; (800577c <ssd1306_WriteData+0x30>)
 800576e:	f7fc fa75 	bl	8001c5c <HAL_I2C_Mem_Write>
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000514 	.word	0x20000514

08005780 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8005784:	f7ff ffc2 	bl	800570c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005788:	2064      	movs	r0, #100	; 0x64
 800578a:	f7fb feb1 	bl	80014f0 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800578e:	20ae      	movs	r0, #174	; 0xae
 8005790:	f7ff ffc4 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8005794:	2020      	movs	r0, #32
 8005796:	f7ff ffc1 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800579a:	2010      	movs	r0, #16
 800579c:	f7ff ffbe 	bl	800571c <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80057a0:	20b0      	movs	r0, #176	; 0xb0
 80057a2:	f7ff ffbb 	bl	800571c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80057a6:	20c8      	movs	r0, #200	; 0xc8
 80057a8:	f7ff ffb8 	bl	800571c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7ff ffb5 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80057b2:	2010      	movs	r0, #16
 80057b4:	f7ff ffb2 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80057b8:	2040      	movs	r0, #64	; 0x40
 80057ba:	f7ff ffaf 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80057be:	2081      	movs	r0, #129	; 0x81
 80057c0:	f7ff ffac 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80057c4:	20ff      	movs	r0, #255	; 0xff
 80057c6:	f7ff ffa9 	bl	800571c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80057ca:	20a1      	movs	r0, #161	; 0xa1
 80057cc:	f7ff ffa6 	bl	800571c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80057d0:	20a6      	movs	r0, #166	; 0xa6
 80057d2:	f7ff ffa3 	bl	800571c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80057d6:	20a8      	movs	r0, #168	; 0xa8
 80057d8:	f7ff ffa0 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80057dc:	203f      	movs	r0, #63	; 0x3f
 80057de:	f7ff ff9d 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80057e2:	20a4      	movs	r0, #164	; 0xa4
 80057e4:	f7ff ff9a 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80057e8:	20d3      	movs	r0, #211	; 0xd3
 80057ea:	f7ff ff97 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80057ee:	2000      	movs	r0, #0
 80057f0:	f7ff ff94 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80057f4:	20d5      	movs	r0, #213	; 0xd5
 80057f6:	f7ff ff91 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80057fa:	20f0      	movs	r0, #240	; 0xf0
 80057fc:	f7ff ff8e 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005800:	20d9      	movs	r0, #217	; 0xd9
 8005802:	f7ff ff8b 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005806:	2022      	movs	r0, #34	; 0x22
 8005808:	f7ff ff88 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800580c:	20da      	movs	r0, #218	; 0xda
 800580e:	f7ff ff85 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8005812:	2012      	movs	r0, #18
 8005814:	f7ff ff82 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005818:	20db      	movs	r0, #219	; 0xdb
 800581a:	f7ff ff7f 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800581e:	2020      	movs	r0, #32
 8005820:	f7ff ff7c 	bl	800571c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005824:	208d      	movs	r0, #141	; 0x8d
 8005826:	f7ff ff79 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800582a:	2014      	movs	r0, #20
 800582c:	f7ff ff76 	bl	800571c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8005830:	20af      	movs	r0, #175	; 0xaf
 8005832:	f7ff ff73 	bl	800571c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8005836:	2000      	movs	r0, #0
 8005838:	f000 f810 	bl	800585c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800583c:	f000 f830 	bl	80058a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <ssd1306_Init+0xd8>)
 8005842:	2200      	movs	r2, #0
 8005844:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <ssd1306_Init+0xd8>)
 8005848:	2200      	movs	r2, #0
 800584a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800584c:	4b02      	ldr	r3, [pc, #8]	; (8005858 <ssd1306_Init+0xd8>)
 800584e:	2201      	movs	r2, #1
 8005850:	715a      	strb	r2, [r3, #5]
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	200004f4 	.word	0x200004f4

0800585c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e00d      	b.n	8005888 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <ssd1306_Fill+0x1a>
 8005872:	2100      	movs	r1, #0
 8005874:	e000      	b.n	8005878 <ssd1306_Fill+0x1c>
 8005876:	21ff      	movs	r1, #255	; 0xff
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <ssd1306_Fill+0x40>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	460a      	mov	r2, r1
 8005880:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588e:	d3ed      	bcc.n	800586c <ssd1306_Fill+0x10>
    }
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	200000f4 	.word	0x200000f4

080058a0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80058a6:	2300      	movs	r3, #0
 80058a8:	71fb      	strb	r3, [r7, #7]
 80058aa:	e016      	b.n	80058da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	3b50      	subs	r3, #80	; 0x50
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ff32 	bl	800571c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80058b8:	2000      	movs	r0, #0
 80058ba:	f7ff ff2f 	bl	800571c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80058be:	2010      	movs	r0, #16
 80058c0:	f7ff ff2c 	bl	800571c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	01db      	lsls	r3, r3, #7
 80058c8:	4a07      	ldr	r2, [pc, #28]	; (80058e8 <ssd1306_UpdateScreen+0x48>)
 80058ca:	4413      	add	r3, r2
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ff3c 	bl	800574c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	3301      	adds	r3, #1
 80058d8:	71fb      	strb	r3, [r7, #7]
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b07      	cmp	r3, #7
 80058de:	d9e5      	bls.n	80058ac <ssd1306_UpdateScreen+0xc>
    }
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200000f4 	.word	0x200000f4

080058ec <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
 80058f6:	460b      	mov	r3, r1
 80058f8:	71bb      	strb	r3, [r7, #6]
 80058fa:	4613      	mov	r3, r2
 80058fc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80058fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005902:	2b00      	cmp	r3, #0
 8005904:	db48      	blt.n	8005998 <ssd1306_DrawPixel+0xac>
 8005906:	79bb      	ldrb	r3, [r7, #6]
 8005908:	2b3f      	cmp	r3, #63	; 0x3f
 800590a:	d845      	bhi.n	8005998 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800590c:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <ssd1306_DrawPixel+0xb8>)
 800590e:	791b      	ldrb	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8005914:	797b      	ldrb	r3, [r7, #5]
 8005916:	2b00      	cmp	r3, #0
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8005922:	797b      	ldrb	r3, [r7, #5]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d11a      	bne.n	800595e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005928:	79fa      	ldrb	r2, [r7, #7]
 800592a:	79bb      	ldrb	r3, [r7, #6]
 800592c:	08db      	lsrs	r3, r3, #3
 800592e:	b2d8      	uxtb	r0, r3
 8005930:	4603      	mov	r3, r0
 8005932:	01db      	lsls	r3, r3, #7
 8005934:	4413      	add	r3, r2
 8005936:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <ssd1306_DrawPixel+0xbc>)
 8005938:	5cd3      	ldrb	r3, [r2, r3]
 800593a:	b25a      	sxtb	r2, r3
 800593c:	79bb      	ldrb	r3, [r7, #6]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	b25b      	sxtb	r3, r3
 800594a:	4313      	orrs	r3, r2
 800594c:	b259      	sxtb	r1, r3
 800594e:	79fa      	ldrb	r2, [r7, #7]
 8005950:	4603      	mov	r3, r0
 8005952:	01db      	lsls	r3, r3, #7
 8005954:	4413      	add	r3, r2
 8005956:	b2c9      	uxtb	r1, r1
 8005958:	4a13      	ldr	r2, [pc, #76]	; (80059a8 <ssd1306_DrawPixel+0xbc>)
 800595a:	54d1      	strb	r1, [r2, r3]
 800595c:	e01d      	b.n	800599a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800595e:	79fa      	ldrb	r2, [r7, #7]
 8005960:	79bb      	ldrb	r3, [r7, #6]
 8005962:	08db      	lsrs	r3, r3, #3
 8005964:	b2d8      	uxtb	r0, r3
 8005966:	4603      	mov	r3, r0
 8005968:	01db      	lsls	r3, r3, #7
 800596a:	4413      	add	r3, r2
 800596c:	4a0e      	ldr	r2, [pc, #56]	; (80059a8 <ssd1306_DrawPixel+0xbc>)
 800596e:	5cd3      	ldrb	r3, [r2, r3]
 8005970:	b25a      	sxtb	r2, r3
 8005972:	79bb      	ldrb	r3, [r7, #6]
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	2101      	movs	r1, #1
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	b25b      	sxtb	r3, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	b25b      	sxtb	r3, r3
 8005984:	4013      	ands	r3, r2
 8005986:	b259      	sxtb	r1, r3
 8005988:	79fa      	ldrb	r2, [r7, #7]
 800598a:	4603      	mov	r3, r0
 800598c:	01db      	lsls	r3, r3, #7
 800598e:	4413      	add	r3, r2
 8005990:	b2c9      	uxtb	r1, r1
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <ssd1306_DrawPixel+0xbc>)
 8005994:	54d1      	strb	r1, [r2, r3]
 8005996:	e000      	b.n	800599a <ssd1306_DrawPixel+0xae>
        return;
 8005998:	bf00      	nop
    }
}
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	200004f4 	.word	0x200004f4
 80059a8:	200000f4 	.word	0x200000f4

080059ac <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b089      	sub	sp, #36	; 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	1d38      	adds	r0, r7, #4
 80059b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80059ba:	461a      	mov	r2, r3
 80059bc:	4623      	mov	r3, r4
 80059be:	73fb      	strb	r3, [r7, #15]
 80059c0:	4613      	mov	r3, r2
 80059c2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80059c4:	4b38      	ldr	r3, [pc, #224]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	793b      	ldrb	r3, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	2b7f      	cmp	r3, #127	; 0x7f
 80059d0:	dc06      	bgt.n	80059e0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80059d2:	4b35      	ldr	r3, [pc, #212]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 80059d4:	885b      	ldrh	r3, [r3, #2]
 80059d6:	461a      	mov	r2, r3
 80059d8:	797b      	ldrb	r3, [r7, #5]
 80059da:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80059dc:	2b3f      	cmp	r3, #63	; 0x3f
 80059de:	dd01      	ble.n	80059e4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e05d      	b.n	8005aa0 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e04c      	b.n	8005a84 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	3b20      	subs	r3, #32
 80059f0:	7979      	ldrb	r1, [r7, #5]
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	4619      	mov	r1, r3
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	440b      	add	r3, r1
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	e034      	b.n	8005a74 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d012      	beq.n	8005a40 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	b2d8      	uxtb	r0, r3
 8005a28:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 8005a2a:	885b      	ldrh	r3, [r3, #2]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	7bba      	ldrb	r2, [r7, #14]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f7ff ff57 	bl	80058ec <ssd1306_DrawPixel>
 8005a3e:	e016      	b.n	8005a6e <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005a40:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	b2d8      	uxtb	r0, r3
 8005a4e:	4b16      	ldr	r3, [pc, #88]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 8005a50:	885b      	ldrh	r3, [r3, #2]
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	4413      	add	r3, r2
 8005a5a:	b2d9      	uxtb	r1, r3
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf0c      	ite	eq
 8005a62:	2301      	moveq	r3, #1
 8005a64:	2300      	movne	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f7ff ff3f 	bl	80058ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	793b      	ldrb	r3, [r7, #4]
 8005a76:	461a      	mov	r2, r3
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d3c5      	bcc.n	8005a0a <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	797b      	ldrb	r3, [r7, #5]
 8005a86:	461a      	mov	r2, r3
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d3ad      	bcc.n	80059ea <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	793b      	ldrb	r3, [r7, #4]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4413      	add	r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <ssd1306_WriteChar+0xfc>)
 8005a9c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3724      	adds	r7, #36	; 0x24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd90      	pop	{r4, r7, pc}
 8005aa8:	200004f4 	.word	0x200004f4

08005aac <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	1d38      	adds	r0, r7, #4
 8005ab6:	e880 0006 	stmia.w	r0, {r1, r2}
 8005aba:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8005abc:	e012      	b.n	8005ae4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	7818      	ldrb	r0, [r3, #0]
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	1d3a      	adds	r2, r7, #4
 8005ac6:	ca06      	ldmia	r2, {r1, r2}
 8005ac8:	f7ff ff70 	bl	80059ac <ssd1306_WriteChar>
 8005acc:	4603      	mov	r3, r0
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d002      	beq.n	8005ade <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	e008      	b.n	8005af0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e8      	bne.n	8005abe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	781b      	ldrb	r3, [r3, #0]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	460a      	mov	r2, r1
 8005b02:	71fb      	strb	r3, [r7, #7]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <ssd1306_SetCursor+0x2c>)
 8005b0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005b10:	79bb      	ldrb	r3, [r7, #6]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <ssd1306_SetCursor+0x2c>)
 8005b16:	805a      	strh	r2, [r3, #2]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	200004f4 	.word	0x200004f4

08005b28 <__errno>:
 8005b28:	4b01      	ldr	r3, [pc, #4]	; (8005b30 <__errno+0x8>)
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	2000005c 	.word	0x2000005c

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4e0d      	ldr	r6, [pc, #52]	; (8005b6c <__libc_init_array+0x38>)
 8005b38:	4c0d      	ldr	r4, [pc, #52]	; (8005b70 <__libc_init_array+0x3c>)
 8005b3a:	1ba4      	subs	r4, r4, r6
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	2500      	movs	r5, #0
 8005b40:	42a5      	cmp	r5, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	4e0b      	ldr	r6, [pc, #44]	; (8005b74 <__libc_init_array+0x40>)
 8005b46:	4c0c      	ldr	r4, [pc, #48]	; (8005b78 <__libc_init_array+0x44>)
 8005b48:	f000 fc3c 	bl	80063c4 <_init>
 8005b4c:	1ba4      	subs	r4, r4, r6
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	2500      	movs	r5, #0
 8005b52:	42a5      	cmp	r5, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b5c:	4798      	blx	r3
 8005b5e:	3501      	adds	r5, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b66:	4798      	blx	r3
 8005b68:	3501      	adds	r5, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08008d40 	.word	0x08008d40
 8005b70:	08008d40 	.word	0x08008d40
 8005b74:	08008d40 	.word	0x08008d40
 8005b78:	08008d44 	.word	0x08008d44

08005b7c <memmove>:
 8005b7c:	4288      	cmp	r0, r1
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	eb01 0302 	add.w	r3, r1, r2
 8005b84:	d807      	bhi.n	8005b96 <memmove+0x1a>
 8005b86:	1e42      	subs	r2, r0, #1
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	d00a      	beq.n	8005ba2 <memmove+0x26>
 8005b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b94:	e7f8      	b.n	8005b88 <memmove+0xc>
 8005b96:	4283      	cmp	r3, r0
 8005b98:	d9f5      	bls.n	8005b86 <memmove+0xa>
 8005b9a:	1881      	adds	r1, r0, r2
 8005b9c:	1ad2      	subs	r2, r2, r3
 8005b9e:	42d3      	cmn	r3, r2
 8005ba0:	d100      	bne.n	8005ba4 <memmove+0x28>
 8005ba2:	bd10      	pop	{r4, pc}
 8005ba4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ba8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005bac:	e7f7      	b.n	8005b9e <memmove+0x22>

08005bae <memset>:
 8005bae:	4402      	add	r2, r0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d100      	bne.n	8005bb8 <memset+0xa>
 8005bb6:	4770      	bx	lr
 8005bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bbc:	e7f9      	b.n	8005bb2 <memset+0x4>
	...

08005bc0 <sniprintf>:
 8005bc0:	b40c      	push	{r2, r3}
 8005bc2:	b530      	push	{r4, r5, lr}
 8005bc4:	4b17      	ldr	r3, [pc, #92]	; (8005c24 <sniprintf+0x64>)
 8005bc6:	1e0c      	subs	r4, r1, #0
 8005bc8:	b09d      	sub	sp, #116	; 0x74
 8005bca:	681d      	ldr	r5, [r3, #0]
 8005bcc:	da08      	bge.n	8005be0 <sniprintf+0x20>
 8005bce:	238b      	movs	r3, #139	; 0x8b
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	b01d      	add	sp, #116	; 0x74
 8005bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bdc:	b002      	add	sp, #8
 8005bde:	4770      	bx	lr
 8005be0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005be4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005be8:	bf14      	ite	ne
 8005bea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005bee:	4623      	moveq	r3, r4
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	9307      	str	r3, [sp, #28]
 8005bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bf8:	9002      	str	r0, [sp, #8]
 8005bfa:	9006      	str	r0, [sp, #24]
 8005bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c02:	ab21      	add	r3, sp, #132	; 0x84
 8005c04:	a902      	add	r1, sp, #8
 8005c06:	4628      	mov	r0, r5
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	f000 f867 	bl	8005cdc <_svfiprintf_r>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	bfbc      	itt	lt
 8005c12:	238b      	movlt	r3, #139	; 0x8b
 8005c14:	602b      	strlt	r3, [r5, #0]
 8005c16:	2c00      	cmp	r4, #0
 8005c18:	d0dd      	beq.n	8005bd6 <sniprintf+0x16>
 8005c1a:	9b02      	ldr	r3, [sp, #8]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e7d9      	b.n	8005bd6 <sniprintf+0x16>
 8005c22:	bf00      	nop
 8005c24:	2000005c 	.word	0x2000005c

08005c28 <__ssputs_r>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	688e      	ldr	r6, [r1, #8]
 8005c2e:	429e      	cmp	r6, r3
 8005c30:	4682      	mov	sl, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	4690      	mov	r8, r2
 8005c36:	4699      	mov	r9, r3
 8005c38:	d837      	bhi.n	8005caa <__ssputs_r+0x82>
 8005c3a:	898a      	ldrh	r2, [r1, #12]
 8005c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c40:	d031      	beq.n	8005ca6 <__ssputs_r+0x7e>
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	6909      	ldr	r1, [r1, #16]
 8005c46:	1a6f      	subs	r7, r5, r1
 8005c48:	6965      	ldr	r5, [r4, #20]
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c50:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c54:	f109 0301 	add.w	r3, r9, #1
 8005c58:	443b      	add	r3, r7
 8005c5a:	429d      	cmp	r5, r3
 8005c5c:	bf38      	it	cc
 8005c5e:	461d      	movcc	r5, r3
 8005c60:	0553      	lsls	r3, r2, #21
 8005c62:	d530      	bpl.n	8005cc6 <__ssputs_r+0x9e>
 8005c64:	4629      	mov	r1, r5
 8005c66:	f000 fb13 	bl	8006290 <_malloc_r>
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	b950      	cbnz	r0, 8005c84 <__ssputs_r+0x5c>
 8005c6e:	230c      	movs	r3, #12
 8005c70:	f8ca 3000 	str.w	r3, [sl]
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c84:	463a      	mov	r2, r7
 8005c86:	6921      	ldr	r1, [r4, #16]
 8005c88:	f000 faa8 	bl	80061dc <memcpy>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	6126      	str	r6, [r4, #16]
 8005c9a:	6165      	str	r5, [r4, #20]
 8005c9c:	443e      	add	r6, r7
 8005c9e:	1bed      	subs	r5, r5, r7
 8005ca0:	6026      	str	r6, [r4, #0]
 8005ca2:	60a5      	str	r5, [r4, #8]
 8005ca4:	464e      	mov	r6, r9
 8005ca6:	454e      	cmp	r6, r9
 8005ca8:	d900      	bls.n	8005cac <__ssputs_r+0x84>
 8005caa:	464e      	mov	r6, r9
 8005cac:	4632      	mov	r2, r6
 8005cae:	4641      	mov	r1, r8
 8005cb0:	6820      	ldr	r0, [r4, #0]
 8005cb2:	f7ff ff63 	bl	8005b7c <memmove>
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	1b9b      	subs	r3, r3, r6
 8005cba:	60a3      	str	r3, [r4, #8]
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	441e      	add	r6, r3
 8005cc0:	6026      	str	r6, [r4, #0]
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e7dc      	b.n	8005c80 <__ssputs_r+0x58>
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	f000 fb3c 	bl	8006344 <_realloc_r>
 8005ccc:	4606      	mov	r6, r0
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d1e2      	bne.n	8005c98 <__ssputs_r+0x70>
 8005cd2:	6921      	ldr	r1, [r4, #16]
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f000 fa8d 	bl	80061f4 <_free_r>
 8005cda:	e7c8      	b.n	8005c6e <__ssputs_r+0x46>

08005cdc <_svfiprintf_r>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	461d      	mov	r5, r3
 8005ce2:	898b      	ldrh	r3, [r1, #12]
 8005ce4:	061f      	lsls	r7, r3, #24
 8005ce6:	b09d      	sub	sp, #116	; 0x74
 8005ce8:	4680      	mov	r8, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	4616      	mov	r6, r2
 8005cee:	d50f      	bpl.n	8005d10 <_svfiprintf_r+0x34>
 8005cf0:	690b      	ldr	r3, [r1, #16]
 8005cf2:	b96b      	cbnz	r3, 8005d10 <_svfiprintf_r+0x34>
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	f000 facb 	bl	8006290 <_malloc_r>
 8005cfa:	6020      	str	r0, [r4, #0]
 8005cfc:	6120      	str	r0, [r4, #16]
 8005cfe:	b928      	cbnz	r0, 8005d0c <_svfiprintf_r+0x30>
 8005d00:	230c      	movs	r3, #12
 8005d02:	f8c8 3000 	str.w	r3, [r8]
 8005d06:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0a:	e0c8      	b.n	8005e9e <_svfiprintf_r+0x1c2>
 8005d0c:	2340      	movs	r3, #64	; 0x40
 8005d0e:	6163      	str	r3, [r4, #20]
 8005d10:	2300      	movs	r3, #0
 8005d12:	9309      	str	r3, [sp, #36]	; 0x24
 8005d14:	2320      	movs	r3, #32
 8005d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d1a:	2330      	movs	r3, #48	; 0x30
 8005d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d20:	9503      	str	r5, [sp, #12]
 8005d22:	f04f 0b01 	mov.w	fp, #1
 8005d26:	4637      	mov	r7, r6
 8005d28:	463d      	mov	r5, r7
 8005d2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d2e:	b10b      	cbz	r3, 8005d34 <_svfiprintf_r+0x58>
 8005d30:	2b25      	cmp	r3, #37	; 0x25
 8005d32:	d13e      	bne.n	8005db2 <_svfiprintf_r+0xd6>
 8005d34:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d38:	d00b      	beq.n	8005d52 <_svfiprintf_r+0x76>
 8005d3a:	4653      	mov	r3, sl
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4640      	mov	r0, r8
 8005d42:	f7ff ff71 	bl	8005c28 <__ssputs_r>
 8005d46:	3001      	adds	r0, #1
 8005d48:	f000 80a4 	beq.w	8005e94 <_svfiprintf_r+0x1b8>
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	4453      	add	r3, sl
 8005d50:	9309      	str	r3, [sp, #36]	; 0x24
 8005d52:	783b      	ldrb	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 809d 	beq.w	8005e94 <_svfiprintf_r+0x1b8>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d64:	9304      	str	r3, [sp, #16]
 8005d66:	9307      	str	r3, [sp, #28]
 8005d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d6e:	462f      	mov	r7, r5
 8005d70:	2205      	movs	r2, #5
 8005d72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d76:	4850      	ldr	r0, [pc, #320]	; (8005eb8 <_svfiprintf_r+0x1dc>)
 8005d78:	f7fa fa32 	bl	80001e0 <memchr>
 8005d7c:	9b04      	ldr	r3, [sp, #16]
 8005d7e:	b9d0      	cbnz	r0, 8005db6 <_svfiprintf_r+0xda>
 8005d80:	06d9      	lsls	r1, r3, #27
 8005d82:	bf44      	itt	mi
 8005d84:	2220      	movmi	r2, #32
 8005d86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d8a:	071a      	lsls	r2, r3, #28
 8005d8c:	bf44      	itt	mi
 8005d8e:	222b      	movmi	r2, #43	; 0x2b
 8005d90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d94:	782a      	ldrb	r2, [r5, #0]
 8005d96:	2a2a      	cmp	r2, #42	; 0x2a
 8005d98:	d015      	beq.n	8005dc6 <_svfiprintf_r+0xea>
 8005d9a:	9a07      	ldr	r2, [sp, #28]
 8005d9c:	462f      	mov	r7, r5
 8005d9e:	2000      	movs	r0, #0
 8005da0:	250a      	movs	r5, #10
 8005da2:	4639      	mov	r1, r7
 8005da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da8:	3b30      	subs	r3, #48	; 0x30
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d94d      	bls.n	8005e4a <_svfiprintf_r+0x16e>
 8005dae:	b1b8      	cbz	r0, 8005de0 <_svfiprintf_r+0x104>
 8005db0:	e00f      	b.n	8005dd2 <_svfiprintf_r+0xf6>
 8005db2:	462f      	mov	r7, r5
 8005db4:	e7b8      	b.n	8005d28 <_svfiprintf_r+0x4c>
 8005db6:	4a40      	ldr	r2, [pc, #256]	; (8005eb8 <_svfiprintf_r+0x1dc>)
 8005db8:	1a80      	subs	r0, r0, r2
 8005dba:	fa0b f000 	lsl.w	r0, fp, r0
 8005dbe:	4318      	orrs	r0, r3
 8005dc0:	9004      	str	r0, [sp, #16]
 8005dc2:	463d      	mov	r5, r7
 8005dc4:	e7d3      	b.n	8005d6e <_svfiprintf_r+0x92>
 8005dc6:	9a03      	ldr	r2, [sp, #12]
 8005dc8:	1d11      	adds	r1, r2, #4
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	9103      	str	r1, [sp, #12]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	db01      	blt.n	8005dd6 <_svfiprintf_r+0xfa>
 8005dd2:	9207      	str	r2, [sp, #28]
 8005dd4:	e004      	b.n	8005de0 <_svfiprintf_r+0x104>
 8005dd6:	4252      	negs	r2, r2
 8005dd8:	f043 0302 	orr.w	r3, r3, #2
 8005ddc:	9207      	str	r2, [sp, #28]
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	783b      	ldrb	r3, [r7, #0]
 8005de2:	2b2e      	cmp	r3, #46	; 0x2e
 8005de4:	d10c      	bne.n	8005e00 <_svfiprintf_r+0x124>
 8005de6:	787b      	ldrb	r3, [r7, #1]
 8005de8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dea:	d133      	bne.n	8005e54 <_svfiprintf_r+0x178>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	9203      	str	r2, [sp, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bfb8      	it	lt
 8005df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dfc:	3702      	adds	r7, #2
 8005dfe:	9305      	str	r3, [sp, #20]
 8005e00:	4d2e      	ldr	r5, [pc, #184]	; (8005ebc <_svfiprintf_r+0x1e0>)
 8005e02:	7839      	ldrb	r1, [r7, #0]
 8005e04:	2203      	movs	r2, #3
 8005e06:	4628      	mov	r0, r5
 8005e08:	f7fa f9ea 	bl	80001e0 <memchr>
 8005e0c:	b138      	cbz	r0, 8005e1e <_svfiprintf_r+0x142>
 8005e0e:	2340      	movs	r3, #64	; 0x40
 8005e10:	1b40      	subs	r0, r0, r5
 8005e12:	fa03 f000 	lsl.w	r0, r3, r0
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	4303      	orrs	r3, r0
 8005e1a:	3701      	adds	r7, #1
 8005e1c:	9304      	str	r3, [sp, #16]
 8005e1e:	7839      	ldrb	r1, [r7, #0]
 8005e20:	4827      	ldr	r0, [pc, #156]	; (8005ec0 <_svfiprintf_r+0x1e4>)
 8005e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e26:	2206      	movs	r2, #6
 8005e28:	1c7e      	adds	r6, r7, #1
 8005e2a:	f7fa f9d9 	bl	80001e0 <memchr>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d038      	beq.n	8005ea4 <_svfiprintf_r+0x1c8>
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <_svfiprintf_r+0x1e8>)
 8005e34:	bb13      	cbnz	r3, 8005e7c <_svfiprintf_r+0x1a0>
 8005e36:	9b03      	ldr	r3, [sp, #12]
 8005e38:	3307      	adds	r3, #7
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	3308      	adds	r3, #8
 8005e40:	9303      	str	r3, [sp, #12]
 8005e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e44:	444b      	add	r3, r9
 8005e46:	9309      	str	r3, [sp, #36]	; 0x24
 8005e48:	e76d      	b.n	8005d26 <_svfiprintf_r+0x4a>
 8005e4a:	fb05 3202 	mla	r2, r5, r2, r3
 8005e4e:	2001      	movs	r0, #1
 8005e50:	460f      	mov	r7, r1
 8005e52:	e7a6      	b.n	8005da2 <_svfiprintf_r+0xc6>
 8005e54:	2300      	movs	r3, #0
 8005e56:	3701      	adds	r7, #1
 8005e58:	9305      	str	r3, [sp, #20]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	250a      	movs	r5, #10
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e64:	3a30      	subs	r2, #48	; 0x30
 8005e66:	2a09      	cmp	r2, #9
 8005e68:	d903      	bls.n	8005e72 <_svfiprintf_r+0x196>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0c8      	beq.n	8005e00 <_svfiprintf_r+0x124>
 8005e6e:	9105      	str	r1, [sp, #20]
 8005e70:	e7c6      	b.n	8005e00 <_svfiprintf_r+0x124>
 8005e72:	fb05 2101 	mla	r1, r5, r1, r2
 8005e76:	2301      	movs	r3, #1
 8005e78:	4607      	mov	r7, r0
 8005e7a:	e7f0      	b.n	8005e5e <_svfiprintf_r+0x182>
 8005e7c:	ab03      	add	r3, sp, #12
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4622      	mov	r2, r4
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <_svfiprintf_r+0x1ec>)
 8005e84:	a904      	add	r1, sp, #16
 8005e86:	4640      	mov	r0, r8
 8005e88:	f3af 8000 	nop.w
 8005e8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e90:	4681      	mov	r9, r0
 8005e92:	d1d6      	bne.n	8005e42 <_svfiprintf_r+0x166>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	065b      	lsls	r3, r3, #25
 8005e98:	f53f af35 	bmi.w	8005d06 <_svfiprintf_r+0x2a>
 8005e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e9e:	b01d      	add	sp, #116	; 0x74
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea4:	ab03      	add	r3, sp, #12
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <_svfiprintf_r+0x1ec>)
 8005eac:	a904      	add	r1, sp, #16
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f000 f882 	bl	8005fb8 <_printf_i>
 8005eb4:	e7ea      	b.n	8005e8c <_svfiprintf_r+0x1b0>
 8005eb6:	bf00      	nop
 8005eb8:	08008d04 	.word	0x08008d04
 8005ebc:	08008d0a 	.word	0x08008d0a
 8005ec0:	08008d0e 	.word	0x08008d0e
 8005ec4:	00000000 	.word	0x00000000
 8005ec8:	08005c29 	.word	0x08005c29

08005ecc <_printf_common>:
 8005ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	4691      	mov	r9, r2
 8005ed2:	461f      	mov	r7, r3
 8005ed4:	688a      	ldr	r2, [r1, #8]
 8005ed6:	690b      	ldr	r3, [r1, #16]
 8005ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	bfb8      	it	lt
 8005ee0:	4613      	movlt	r3, r2
 8005ee2:	f8c9 3000 	str.w	r3, [r9]
 8005ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	b112      	cbz	r2, 8005ef6 <_printf_common+0x2a>
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f8c9 3000 	str.w	r3, [r9]
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	0699      	lsls	r1, r3, #26
 8005efa:	bf42      	ittt	mi
 8005efc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f00:	3302      	addmi	r3, #2
 8005f02:	f8c9 3000 	strmi.w	r3, [r9]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	f015 0506 	ands.w	r5, r5, #6
 8005f0c:	d107      	bne.n	8005f1e <_printf_common+0x52>
 8005f0e:	f104 0a19 	add.w	sl, r4, #25
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	f8d9 2000 	ldr.w	r2, [r9]
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	42ab      	cmp	r3, r5
 8005f1c:	dc28      	bgt.n	8005f70 <_printf_common+0xa4>
 8005f1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	3300      	adds	r3, #0
 8005f26:	bf18      	it	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	0692      	lsls	r2, r2, #26
 8005f2c:	d42d      	bmi.n	8005f8a <_printf_common+0xbe>
 8005f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f32:	4639      	mov	r1, r7
 8005f34:	4630      	mov	r0, r6
 8005f36:	47c0      	blx	r8
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d020      	beq.n	8005f7e <_printf_common+0xb2>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	68e5      	ldr	r5, [r4, #12]
 8005f40:	f8d9 2000 	ldr.w	r2, [r9]
 8005f44:	f003 0306 	and.w	r3, r3, #6
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	bf08      	it	eq
 8005f4c:	1aad      	subeq	r5, r5, r2
 8005f4e:	68a3      	ldr	r3, [r4, #8]
 8005f50:	6922      	ldr	r2, [r4, #16]
 8005f52:	bf0c      	ite	eq
 8005f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f58:	2500      	movne	r5, #0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfc4      	itt	gt
 8005f5e:	1a9b      	subgt	r3, r3, r2
 8005f60:	18ed      	addgt	r5, r5, r3
 8005f62:	f04f 0900 	mov.w	r9, #0
 8005f66:	341a      	adds	r4, #26
 8005f68:	454d      	cmp	r5, r9
 8005f6a:	d11a      	bne.n	8005fa2 <_printf_common+0xd6>
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e008      	b.n	8005f82 <_printf_common+0xb6>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4652      	mov	r2, sl
 8005f74:	4639      	mov	r1, r7
 8005f76:	4630      	mov	r0, r6
 8005f78:	47c0      	blx	r8
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d103      	bne.n	8005f86 <_printf_common+0xba>
 8005f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f86:	3501      	adds	r5, #1
 8005f88:	e7c3      	b.n	8005f12 <_printf_common+0x46>
 8005f8a:	18e1      	adds	r1, r4, r3
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	2030      	movs	r0, #48	; 0x30
 8005f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f94:	4422      	add	r2, r4
 8005f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	e7c5      	b.n	8005f2e <_printf_common+0x62>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	4630      	mov	r0, r6
 8005faa:	47c0      	blx	r8
 8005fac:	3001      	adds	r0, #1
 8005fae:	d0e6      	beq.n	8005f7e <_printf_common+0xb2>
 8005fb0:	f109 0901 	add.w	r9, r9, #1
 8005fb4:	e7d8      	b.n	8005f68 <_printf_common+0x9c>
	...

08005fb8 <_printf_i>:
 8005fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	7e09      	ldrb	r1, [r1, #24]
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	296e      	cmp	r1, #110	; 0x6e
 8005fc8:	4617      	mov	r7, r2
 8005fca:	4606      	mov	r6, r0
 8005fcc:	4698      	mov	r8, r3
 8005fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd0:	f000 80b3 	beq.w	800613a <_printf_i+0x182>
 8005fd4:	d822      	bhi.n	800601c <_printf_i+0x64>
 8005fd6:	2963      	cmp	r1, #99	; 0x63
 8005fd8:	d036      	beq.n	8006048 <_printf_i+0x90>
 8005fda:	d80a      	bhi.n	8005ff2 <_printf_i+0x3a>
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	f000 80b9 	beq.w	8006154 <_printf_i+0x19c>
 8005fe2:	2958      	cmp	r1, #88	; 0x58
 8005fe4:	f000 8083 	beq.w	80060ee <_printf_i+0x136>
 8005fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ff0:	e032      	b.n	8006058 <_printf_i+0xa0>
 8005ff2:	2964      	cmp	r1, #100	; 0x64
 8005ff4:	d001      	beq.n	8005ffa <_printf_i+0x42>
 8005ff6:	2969      	cmp	r1, #105	; 0x69
 8005ff8:	d1f6      	bne.n	8005fe8 <_printf_i+0x30>
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	6813      	ldr	r3, [r2, #0]
 8005ffe:	0605      	lsls	r5, r0, #24
 8006000:	f103 0104 	add.w	r1, r3, #4
 8006004:	d52a      	bpl.n	800605c <_printf_i+0xa4>
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6011      	str	r1, [r2, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	da03      	bge.n	8006016 <_printf_i+0x5e>
 800600e:	222d      	movs	r2, #45	; 0x2d
 8006010:	425b      	negs	r3, r3
 8006012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006016:	486f      	ldr	r0, [pc, #444]	; (80061d4 <_printf_i+0x21c>)
 8006018:	220a      	movs	r2, #10
 800601a:	e039      	b.n	8006090 <_printf_i+0xd8>
 800601c:	2973      	cmp	r1, #115	; 0x73
 800601e:	f000 809d 	beq.w	800615c <_printf_i+0x1a4>
 8006022:	d808      	bhi.n	8006036 <_printf_i+0x7e>
 8006024:	296f      	cmp	r1, #111	; 0x6f
 8006026:	d020      	beq.n	800606a <_printf_i+0xb2>
 8006028:	2970      	cmp	r1, #112	; 0x70
 800602a:	d1dd      	bne.n	8005fe8 <_printf_i+0x30>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	f043 0320 	orr.w	r3, r3, #32
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	e003      	b.n	800603e <_printf_i+0x86>
 8006036:	2975      	cmp	r1, #117	; 0x75
 8006038:	d017      	beq.n	800606a <_printf_i+0xb2>
 800603a:	2978      	cmp	r1, #120	; 0x78
 800603c:	d1d4      	bne.n	8005fe8 <_printf_i+0x30>
 800603e:	2378      	movs	r3, #120	; 0x78
 8006040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006044:	4864      	ldr	r0, [pc, #400]	; (80061d8 <_printf_i+0x220>)
 8006046:	e055      	b.n	80060f4 <_printf_i+0x13c>
 8006048:	6813      	ldr	r3, [r2, #0]
 800604a:	1d19      	adds	r1, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6011      	str	r1, [r2, #0]
 8006050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006058:	2301      	movs	r3, #1
 800605a:	e08c      	b.n	8006176 <_printf_i+0x1be>
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6011      	str	r1, [r2, #0]
 8006060:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006064:	bf18      	it	ne
 8006066:	b21b      	sxthne	r3, r3
 8006068:	e7cf      	b.n	800600a <_printf_i+0x52>
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	6825      	ldr	r5, [r4, #0]
 800606e:	1d18      	adds	r0, r3, #4
 8006070:	6010      	str	r0, [r2, #0]
 8006072:	0628      	lsls	r0, r5, #24
 8006074:	d501      	bpl.n	800607a <_printf_i+0xc2>
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	e002      	b.n	8006080 <_printf_i+0xc8>
 800607a:	0668      	lsls	r0, r5, #25
 800607c:	d5fb      	bpl.n	8006076 <_printf_i+0xbe>
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	4854      	ldr	r0, [pc, #336]	; (80061d4 <_printf_i+0x21c>)
 8006082:	296f      	cmp	r1, #111	; 0x6f
 8006084:	bf14      	ite	ne
 8006086:	220a      	movne	r2, #10
 8006088:	2208      	moveq	r2, #8
 800608a:	2100      	movs	r1, #0
 800608c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006090:	6865      	ldr	r5, [r4, #4]
 8006092:	60a5      	str	r5, [r4, #8]
 8006094:	2d00      	cmp	r5, #0
 8006096:	f2c0 8095 	blt.w	80061c4 <_printf_i+0x20c>
 800609a:	6821      	ldr	r1, [r4, #0]
 800609c:	f021 0104 	bic.w	r1, r1, #4
 80060a0:	6021      	str	r1, [r4, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d13d      	bne.n	8006122 <_printf_i+0x16a>
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	f040 808e 	bne.w	80061c8 <_printf_i+0x210>
 80060ac:	4665      	mov	r5, ip
 80060ae:	2a08      	cmp	r2, #8
 80060b0:	d10b      	bne.n	80060ca <_printf_i+0x112>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	07db      	lsls	r3, r3, #31
 80060b6:	d508      	bpl.n	80060ca <_printf_i+0x112>
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	bfde      	ittt	le
 80060c0:	2330      	movle	r3, #48	; 0x30
 80060c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060ca:	ebac 0305 	sub.w	r3, ip, r5
 80060ce:	6123      	str	r3, [r4, #16]
 80060d0:	f8cd 8000 	str.w	r8, [sp]
 80060d4:	463b      	mov	r3, r7
 80060d6:	aa03      	add	r2, sp, #12
 80060d8:	4621      	mov	r1, r4
 80060da:	4630      	mov	r0, r6
 80060dc:	f7ff fef6 	bl	8005ecc <_printf_common>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d14d      	bne.n	8006180 <_printf_i+0x1c8>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	b005      	add	sp, #20
 80060ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060ee:	4839      	ldr	r0, [pc, #228]	; (80061d4 <_printf_i+0x21c>)
 80060f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060f4:	6813      	ldr	r3, [r2, #0]
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	1d1d      	adds	r5, r3, #4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6015      	str	r5, [r2, #0]
 80060fe:	060a      	lsls	r2, r1, #24
 8006100:	d50b      	bpl.n	800611a <_printf_i+0x162>
 8006102:	07ca      	lsls	r2, r1, #31
 8006104:	bf44      	itt	mi
 8006106:	f041 0120 	orrmi.w	r1, r1, #32
 800610a:	6021      	strmi	r1, [r4, #0]
 800610c:	b91b      	cbnz	r3, 8006116 <_printf_i+0x15e>
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	f022 0220 	bic.w	r2, r2, #32
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	2210      	movs	r2, #16
 8006118:	e7b7      	b.n	800608a <_printf_i+0xd2>
 800611a:	064d      	lsls	r5, r1, #25
 800611c:	bf48      	it	mi
 800611e:	b29b      	uxthmi	r3, r3
 8006120:	e7ef      	b.n	8006102 <_printf_i+0x14a>
 8006122:	4665      	mov	r5, ip
 8006124:	fbb3 f1f2 	udiv	r1, r3, r2
 8006128:	fb02 3311 	mls	r3, r2, r1, r3
 800612c:	5cc3      	ldrb	r3, [r0, r3]
 800612e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006132:	460b      	mov	r3, r1
 8006134:	2900      	cmp	r1, #0
 8006136:	d1f5      	bne.n	8006124 <_printf_i+0x16c>
 8006138:	e7b9      	b.n	80060ae <_printf_i+0xf6>
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	6825      	ldr	r5, [r4, #0]
 800613e:	6961      	ldr	r1, [r4, #20]
 8006140:	1d18      	adds	r0, r3, #4
 8006142:	6010      	str	r0, [r2, #0]
 8006144:	0628      	lsls	r0, r5, #24
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	d501      	bpl.n	800614e <_printf_i+0x196>
 800614a:	6019      	str	r1, [r3, #0]
 800614c:	e002      	b.n	8006154 <_printf_i+0x19c>
 800614e:	066a      	lsls	r2, r5, #25
 8006150:	d5fb      	bpl.n	800614a <_printf_i+0x192>
 8006152:	8019      	strh	r1, [r3, #0]
 8006154:	2300      	movs	r3, #0
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	4665      	mov	r5, ip
 800615a:	e7b9      	b.n	80060d0 <_printf_i+0x118>
 800615c:	6813      	ldr	r3, [r2, #0]
 800615e:	1d19      	adds	r1, r3, #4
 8006160:	6011      	str	r1, [r2, #0]
 8006162:	681d      	ldr	r5, [r3, #0]
 8006164:	6862      	ldr	r2, [r4, #4]
 8006166:	2100      	movs	r1, #0
 8006168:	4628      	mov	r0, r5
 800616a:	f7fa f839 	bl	80001e0 <memchr>
 800616e:	b108      	cbz	r0, 8006174 <_printf_i+0x1bc>
 8006170:	1b40      	subs	r0, r0, r5
 8006172:	6060      	str	r0, [r4, #4]
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	2300      	movs	r3, #0
 800617a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617e:	e7a7      	b.n	80060d0 <_printf_i+0x118>
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	462a      	mov	r2, r5
 8006184:	4639      	mov	r1, r7
 8006186:	4630      	mov	r0, r6
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d0aa      	beq.n	80060e4 <_printf_i+0x12c>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	079b      	lsls	r3, r3, #30
 8006192:	d413      	bmi.n	80061bc <_printf_i+0x204>
 8006194:	68e0      	ldr	r0, [r4, #12]
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	4298      	cmp	r0, r3
 800619a:	bfb8      	it	lt
 800619c:	4618      	movlt	r0, r3
 800619e:	e7a3      	b.n	80060e8 <_printf_i+0x130>
 80061a0:	2301      	movs	r3, #1
 80061a2:	464a      	mov	r2, r9
 80061a4:	4639      	mov	r1, r7
 80061a6:	4630      	mov	r0, r6
 80061a8:	47c0      	blx	r8
 80061aa:	3001      	adds	r0, #1
 80061ac:	d09a      	beq.n	80060e4 <_printf_i+0x12c>
 80061ae:	3501      	adds	r5, #1
 80061b0:	68e3      	ldr	r3, [r4, #12]
 80061b2:	9a03      	ldr	r2, [sp, #12]
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	42ab      	cmp	r3, r5
 80061b8:	dcf2      	bgt.n	80061a0 <_printf_i+0x1e8>
 80061ba:	e7eb      	b.n	8006194 <_printf_i+0x1dc>
 80061bc:	2500      	movs	r5, #0
 80061be:	f104 0919 	add.w	r9, r4, #25
 80061c2:	e7f5      	b.n	80061b0 <_printf_i+0x1f8>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ac      	bne.n	8006122 <_printf_i+0x16a>
 80061c8:	7803      	ldrb	r3, [r0, #0]
 80061ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d2:	e76c      	b.n	80060ae <_printf_i+0xf6>
 80061d4:	08008d15 	.word	0x08008d15
 80061d8:	08008d26 	.word	0x08008d26

080061dc <memcpy>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	1e43      	subs	r3, r0, #1
 80061e0:	440a      	add	r2, r1
 80061e2:	4291      	cmp	r1, r2
 80061e4:	d100      	bne.n	80061e8 <memcpy+0xc>
 80061e6:	bd10      	pop	{r4, pc}
 80061e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061f0:	e7f7      	b.n	80061e2 <memcpy+0x6>
	...

080061f4 <_free_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4605      	mov	r5, r0
 80061f8:	2900      	cmp	r1, #0
 80061fa:	d045      	beq.n	8006288 <_free_r+0x94>
 80061fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006200:	1f0c      	subs	r4, r1, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	bfb8      	it	lt
 8006206:	18e4      	addlt	r4, r4, r3
 8006208:	f000 f8d2 	bl	80063b0 <__malloc_lock>
 800620c:	4a1f      	ldr	r2, [pc, #124]	; (800628c <_free_r+0x98>)
 800620e:	6813      	ldr	r3, [r2, #0]
 8006210:	4610      	mov	r0, r2
 8006212:	b933      	cbnz	r3, 8006222 <_free_r+0x2e>
 8006214:	6063      	str	r3, [r4, #4]
 8006216:	6014      	str	r4, [r2, #0]
 8006218:	4628      	mov	r0, r5
 800621a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800621e:	f000 b8c8 	b.w	80063b2 <__malloc_unlock>
 8006222:	42a3      	cmp	r3, r4
 8006224:	d90c      	bls.n	8006240 <_free_r+0x4c>
 8006226:	6821      	ldr	r1, [r4, #0]
 8006228:	1862      	adds	r2, r4, r1
 800622a:	4293      	cmp	r3, r2
 800622c:	bf04      	itt	eq
 800622e:	681a      	ldreq	r2, [r3, #0]
 8006230:	685b      	ldreq	r3, [r3, #4]
 8006232:	6063      	str	r3, [r4, #4]
 8006234:	bf04      	itt	eq
 8006236:	1852      	addeq	r2, r2, r1
 8006238:	6022      	streq	r2, [r4, #0]
 800623a:	6004      	str	r4, [r0, #0]
 800623c:	e7ec      	b.n	8006218 <_free_r+0x24>
 800623e:	4613      	mov	r3, r2
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	b10a      	cbz	r2, 8006248 <_free_r+0x54>
 8006244:	42a2      	cmp	r2, r4
 8006246:	d9fa      	bls.n	800623e <_free_r+0x4a>
 8006248:	6819      	ldr	r1, [r3, #0]
 800624a:	1858      	adds	r0, r3, r1
 800624c:	42a0      	cmp	r0, r4
 800624e:	d10b      	bne.n	8006268 <_free_r+0x74>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	4401      	add	r1, r0
 8006254:	1858      	adds	r0, r3, r1
 8006256:	4282      	cmp	r2, r0
 8006258:	6019      	str	r1, [r3, #0]
 800625a:	d1dd      	bne.n	8006218 <_free_r+0x24>
 800625c:	6810      	ldr	r0, [r2, #0]
 800625e:	6852      	ldr	r2, [r2, #4]
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	4401      	add	r1, r0
 8006264:	6019      	str	r1, [r3, #0]
 8006266:	e7d7      	b.n	8006218 <_free_r+0x24>
 8006268:	d902      	bls.n	8006270 <_free_r+0x7c>
 800626a:	230c      	movs	r3, #12
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	e7d3      	b.n	8006218 <_free_r+0x24>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	1821      	adds	r1, r4, r0
 8006274:	428a      	cmp	r2, r1
 8006276:	bf04      	itt	eq
 8006278:	6811      	ldreq	r1, [r2, #0]
 800627a:	6852      	ldreq	r2, [r2, #4]
 800627c:	6062      	str	r2, [r4, #4]
 800627e:	bf04      	itt	eq
 8006280:	1809      	addeq	r1, r1, r0
 8006282:	6021      	streq	r1, [r4, #0]
 8006284:	605c      	str	r4, [r3, #4]
 8006286:	e7c7      	b.n	8006218 <_free_r+0x24>
 8006288:	bd38      	pop	{r3, r4, r5, pc}
 800628a:	bf00      	nop
 800628c:	200004fc 	.word	0x200004fc

08006290 <_malloc_r>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	1ccd      	adds	r5, r1, #3
 8006294:	f025 0503 	bic.w	r5, r5, #3
 8006298:	3508      	adds	r5, #8
 800629a:	2d0c      	cmp	r5, #12
 800629c:	bf38      	it	cc
 800629e:	250c      	movcc	r5, #12
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	4606      	mov	r6, r0
 80062a4:	db01      	blt.n	80062aa <_malloc_r+0x1a>
 80062a6:	42a9      	cmp	r1, r5
 80062a8:	d903      	bls.n	80062b2 <_malloc_r+0x22>
 80062aa:	230c      	movs	r3, #12
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	2000      	movs	r0, #0
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	f000 f87d 	bl	80063b0 <__malloc_lock>
 80062b6:	4a21      	ldr	r2, [pc, #132]	; (800633c <_malloc_r+0xac>)
 80062b8:	6814      	ldr	r4, [r2, #0]
 80062ba:	4621      	mov	r1, r4
 80062bc:	b991      	cbnz	r1, 80062e4 <_malloc_r+0x54>
 80062be:	4c20      	ldr	r4, [pc, #128]	; (8006340 <_malloc_r+0xb0>)
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	b91b      	cbnz	r3, 80062cc <_malloc_r+0x3c>
 80062c4:	4630      	mov	r0, r6
 80062c6:	f000 f863 	bl	8006390 <_sbrk_r>
 80062ca:	6020      	str	r0, [r4, #0]
 80062cc:	4629      	mov	r1, r5
 80062ce:	4630      	mov	r0, r6
 80062d0:	f000 f85e 	bl	8006390 <_sbrk_r>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d124      	bne.n	8006322 <_malloc_r+0x92>
 80062d8:	230c      	movs	r3, #12
 80062da:	6033      	str	r3, [r6, #0]
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 f868 	bl	80063b2 <__malloc_unlock>
 80062e2:	e7e4      	b.n	80062ae <_malloc_r+0x1e>
 80062e4:	680b      	ldr	r3, [r1, #0]
 80062e6:	1b5b      	subs	r3, r3, r5
 80062e8:	d418      	bmi.n	800631c <_malloc_r+0x8c>
 80062ea:	2b0b      	cmp	r3, #11
 80062ec:	d90f      	bls.n	800630e <_malloc_r+0x7e>
 80062ee:	600b      	str	r3, [r1, #0]
 80062f0:	50cd      	str	r5, [r1, r3]
 80062f2:	18cc      	adds	r4, r1, r3
 80062f4:	4630      	mov	r0, r6
 80062f6:	f000 f85c 	bl	80063b2 <__malloc_unlock>
 80062fa:	f104 000b 	add.w	r0, r4, #11
 80062fe:	1d23      	adds	r3, r4, #4
 8006300:	f020 0007 	bic.w	r0, r0, #7
 8006304:	1ac3      	subs	r3, r0, r3
 8006306:	d0d3      	beq.n	80062b0 <_malloc_r+0x20>
 8006308:	425a      	negs	r2, r3
 800630a:	50e2      	str	r2, [r4, r3]
 800630c:	e7d0      	b.n	80062b0 <_malloc_r+0x20>
 800630e:	428c      	cmp	r4, r1
 8006310:	684b      	ldr	r3, [r1, #4]
 8006312:	bf16      	itet	ne
 8006314:	6063      	strne	r3, [r4, #4]
 8006316:	6013      	streq	r3, [r2, #0]
 8006318:	460c      	movne	r4, r1
 800631a:	e7eb      	b.n	80062f4 <_malloc_r+0x64>
 800631c:	460c      	mov	r4, r1
 800631e:	6849      	ldr	r1, [r1, #4]
 8006320:	e7cc      	b.n	80062bc <_malloc_r+0x2c>
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d005      	beq.n	8006338 <_malloc_r+0xa8>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4630      	mov	r0, r6
 8006330:	f000 f82e 	bl	8006390 <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d0cf      	beq.n	80062d8 <_malloc_r+0x48>
 8006338:	6025      	str	r5, [r4, #0]
 800633a:	e7db      	b.n	80062f4 <_malloc_r+0x64>
 800633c:	200004fc 	.word	0x200004fc
 8006340:	20000500 	.word	0x20000500

08006344 <_realloc_r>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	4607      	mov	r7, r0
 8006348:	4614      	mov	r4, r2
 800634a:	460e      	mov	r6, r1
 800634c:	b921      	cbnz	r1, 8006358 <_realloc_r+0x14>
 800634e:	4611      	mov	r1, r2
 8006350:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006354:	f7ff bf9c 	b.w	8006290 <_malloc_r>
 8006358:	b922      	cbnz	r2, 8006364 <_realloc_r+0x20>
 800635a:	f7ff ff4b 	bl	80061f4 <_free_r>
 800635e:	4625      	mov	r5, r4
 8006360:	4628      	mov	r0, r5
 8006362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006364:	f000 f826 	bl	80063b4 <_malloc_usable_size_r>
 8006368:	42a0      	cmp	r0, r4
 800636a:	d20f      	bcs.n	800638c <_realloc_r+0x48>
 800636c:	4621      	mov	r1, r4
 800636e:	4638      	mov	r0, r7
 8006370:	f7ff ff8e 	bl	8006290 <_malloc_r>
 8006374:	4605      	mov	r5, r0
 8006376:	2800      	cmp	r0, #0
 8006378:	d0f2      	beq.n	8006360 <_realloc_r+0x1c>
 800637a:	4631      	mov	r1, r6
 800637c:	4622      	mov	r2, r4
 800637e:	f7ff ff2d 	bl	80061dc <memcpy>
 8006382:	4631      	mov	r1, r6
 8006384:	4638      	mov	r0, r7
 8006386:	f7ff ff35 	bl	80061f4 <_free_r>
 800638a:	e7e9      	b.n	8006360 <_realloc_r+0x1c>
 800638c:	4635      	mov	r5, r6
 800638e:	e7e7      	b.n	8006360 <_realloc_r+0x1c>

08006390 <_sbrk_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4c06      	ldr	r4, [pc, #24]	; (80063ac <_sbrk_r+0x1c>)
 8006394:	2300      	movs	r3, #0
 8006396:	4605      	mov	r5, r0
 8006398:	4608      	mov	r0, r1
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	f7fa fdce 	bl	8000f3c <_sbrk>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_sbrk_r+0x1a>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_sbrk_r+0x1a>
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	2000067c 	.word	0x2000067c

080063b0 <__malloc_lock>:
 80063b0:	4770      	bx	lr

080063b2 <__malloc_unlock>:
 80063b2:	4770      	bx	lr

080063b4 <_malloc_usable_size_r>:
 80063b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b8:	1f18      	subs	r0, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfbc      	itt	lt
 80063be:	580b      	ldrlt	r3, [r1, r0]
 80063c0:	18c0      	addlt	r0, r0, r3
 80063c2:	4770      	bx	lr

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
